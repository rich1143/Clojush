Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc boolean_stackdepth vector_integer_eq boolean_pop vector_integer_shove integer_yankdup boolean_swap boolean_yank integer_eq integer_mult vector_integer_dup boolean_or boolean_empty vector_integer_emptyvector boolean_dup_items vector_integer_swap vector_integer_butlast boolean_fromfloat float_sin boolean_flush float_lte vector_integer_empty vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth boolean_xor integer_gte vector_integer_take boolean_dup_times vector_integer_yankdup boolean_shove float_lt vector_integer_replace float_mod boolean_rot integer_div integer_fromfloat integer_lte vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_contains vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times float_gt boolean_dup float_fromboolean vector_integer_indexof integer_yank float_empty integer_min vector_integer_rest float_eq integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove boolean_invert_first_then_and integer_fromboolean boolean_frominteger vector_integer_last vector_integer_concat boolean_eq float_gte integer_flush float_shove float_pop integer_gt float_sub vector_integer_length float_min boolean_not float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse integer_lt float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop integer_empty float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush boolean_and float_cos float_div boolean_invert_second_then_and float_yank boolean_yankdup 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth vector_integer_eq boolean_pop vector_integer_shove integer_yankdup boolean_swap boolean_yank integer_eq integer_mult vector_integer_dup boolean_or boolean_empty vector_integer_emptyvector boolean_dup_items vector_integer_swap vector_integer_butlast boolean_fromfloat float_sin boolean_flush float_lte vector_integer_empty vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth boolean_xor integer_gte vector_integer_take boolean_dup_times vector_integer_yankdup boolean_shove float_lt vector_integer_replace float_mod boolean_rot integer_div integer_fromfloat integer_lte vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_contains vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times float_gt boolean_dup float_fromboolean vector_integer_indexof integer_yank float_empty integer_min vector_integer_rest float_eq integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove boolean_invert_first_then_and integer_fromboolean boolean_frominteger vector_integer_last vector_integer_concat boolean_eq float_gte integer_flush float_shove float_pop integer_gt float_sub vector_integer_length float_min boolean_not float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse integer_lt float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop integer_empty float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush boolean_and float_cos float_div boolean_invert_second_then_and float_yank boolean_yankdup 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = 122 -55 113 -24 126 95 -94 -29 -109 -45 42 55 94 -78 -102 104
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "2371ce61-8a3c-47a8-a858-746022ceda12"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (float_gt vector_integer_dup vector_integer_flush float_pop boolean_eq integer_dup float_cos vector_integer_dup_items vector_integer_nth vector_integer_flush vector_integer_stackdepth boolean_stackdepth boolean_dup_items boolean_and 5 boolean_dup_times boolean_dup integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte vector_integer_first float_gte vector_integer_flush 5 vector_integer_last boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (5 5 integer_add boolean_dup_times float_frominteger float_inc)
Lexicase best errors: [8.0 3.8 8.0 0.40000000000000036 5.8 10.8 10.6 7.6 9.2 5.0 2.1999999999999993 3.8000000000000007 4.6 55.0 250.0 0.0 11.2 17.4 48.8 8.0 9.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 10.6 74.8 10.2]
Lexicase best number of elite cases: 17
Lexicase best total error: 3024.2000000000003
Lexicase best mean error: 100.80666
Lexicase best size: 51
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_lt integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_dup vector_integer_last vector_integer_emptyvector 5 integer_fromboolean integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 3 1 1 3 36 2 1 3 1 1 1 3 1 1 1 1 1 1 1 3 1 1 1 1 1 1 2 1 2)
Population mean number of elite cases: 0.08
Count of perfect (error zero) individuals by case: (1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 3 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (float_gt vector_integer_dup vector_integer_flush float_pop boolean_eq integer_dup float_cos vector_integer_dup_items vector_integer_nth vector_integer_flush vector_integer_stackdepth boolean_stackdepth boolean_dup_items boolean_and 5 boolean_dup_times boolean_dup integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte vector_integer_first float_gte vector_integer_flush 5 vector_integer_last boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (5 5 integer_add float_frominteger float_inc)
Errors: [8.0 3.8 8.0 0.40000000000000036 5.8 10.8 10.6 7.6 9.2 5.0 2.1999999999999993 3.8000000000000007 4.6 55.0 250.0 0.0 11.2 17.4 48.8 8.0 9.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 10.6 74.8 10.2]
Total: 3024.2000000000003
Mean: 100.80666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 276250.0687000171
Median total errors in population: 300000
Error averages by case: (9200.206749359737 9200.523349359739 9200.206749359737 9200.787707888738 9200.36634935974 9200.075220719991 9200.074620719994 9200.236549359744 9200.124107888743 9201.21890788875 9200.994907888755 9201.122907888745 9200.46010788876 9205.21890788875 9220.81890788875 9200.818749359736 9201.714907888756 9202.209907888759 9204.722907888745 9200.207749359735 9200.137749359736 9204.643749359728 9233.874907888756 9353.394907888754 9206.882907888745 9200.930907888758 9201.13890788875 9200.075820719992 9206.802907888745 9200.075659510769)
Error minima by case: (0.0 2.2 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 5.0 2.1999999999999993 3.8000000000000007 1.4000000000000004 55.0 250.0 0.0 11.2 17.4 48.8 0.0 0.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 0.14030230586813974 74.8 0.04147098480789646)
Average genome size in population (length): 25.931
Average program size in population (points): 26.916
Average percent parens in population: 0.059
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.016
Error (vector) diversity:			 0.016
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 777930
--- Timings ---
Current time: 1481488297406 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (float_gt vector_integer_dup vector_integer_flush float_pop boolean_eq integer_dup float_cos vector_integer_dup_items vector_integer_nth vector_integer_flush vector_integer_stackdepth boolean_stackdepth boolean_dup_items boolean_and 5 boolean_dup_times boolean_dup integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte vector_integer_first float_gte vector_integer_flush 5 vector_integer_last boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (5 5 integer_add float_frominteger float_inc)
Lexicase best errors: [8.0 3.8 8.0 0.40000000000000036 5.8 10.8 10.6 7.6 9.2 5.0 2.1999999999999993 3.8000000000000007 4.6 55.0 250.0 0.0 11.2 17.4 48.8 8.0 9.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 10.6 74.8 10.2]
Lexicase best number of elite cases: 12
Lexicase best total error: 3024.2000000000003
Lexicase best mean error: 100.80666
Lexicase best size: 51
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_lt integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (in1 float_stackdepth vector_integer_last vector_integer_stackdepth integer_eq 5 integer_fromboolean integer_swap vector_integer_yank integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 2 93 420 84 1 1 93 2 420 420 1 13 1 420 420 420 420 1 93 73 420 420 1 420 420 420 1 1 29)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (92 0 93 0 0 0 0 0 0 0 0 0 0 0 0 420 0 0 0 93 73 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (float_gt vector_integer_dup vector_integer_flush float_pop boolean_eq integer_dup float_cos vector_integer_dup_items vector_integer_nth vector_integer_flush vector_integer_stackdepth boolean_stackdepth boolean_dup_items boolean_and 5 boolean_dup_times boolean_dup integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte vector_integer_first float_gte vector_integer_flush 5 vector_integer_last boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (5 5 integer_add float_frominteger float_inc)
Errors: [8.0 3.8 8.0 0.40000000000000036 5.8 10.8 10.6 7.6 9.2 5.0 2.1999999999999993 3.8000000000000007 4.6 55.0 250.0 0.0 11.2 17.4 48.8 8.0 9.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 10.6 74.8 10.2]
Total: 3024.2000000000003
Mean: 100.80666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50769.75283792989
Median total errors in population: 3055.0
Error averages by case: (1434.1400298585925 1433.6730895562932 1434.1350298585924 1433.8020186656054 1443.7088298585998 1445.6459612900267 1445.490193965651 1444.0496298585972 1444.6293248518339 1437.8638186656055 1435.5134186655894 1436.8382186656268 1433.6534186656072 1481.3618186656056 1835.324358967911 1433.6484895562864 1443.3114186655898 1448.5586186655926 1477.4918186656269 1444.1550298585923 1434.5514895562865 1478.4284895563073 2261.108158967905 7566.531218665635 1499.280618665627 1434.8142186655928 1437.0718186656054 1445.490193965651 1500.2714186656272 1445.2106770843034)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.04147098480789646 5.0 2.1999999999999993 1.1999999999999993 0.40000000000000036 25.0 250.0 0.0 11.2 17.4 37.8 0.0 0.0 47.8 413.2 1894.2 75.8 1.4000000000000004 4.0 0.11633781453677378 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 42.593
Average program size in population (points): 43.591
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 347
Genome diversity (% unique Plush genomes):	 0.372
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 347
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.025
Error (vector) diversity:			 0.025
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2055720
--- Timings ---
Current time: 1481488304996 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_dup_times integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (boolean_empty in1 vector_integer_pushall boolean_yankdup float_frominteger)
Lexicase best errors: [0.0 0.7999999999999998 1.0 7.6 3.8 0.2 1.6 3.4 1.8 5.0 7.199999999999999 0.8000000000000007 6.4 14.0 739.0 6.0 18.2 5.399999999999999 19.200000000000003 2.0 2.0 178.2 143.8 1914.2 58.8 8.4 5.0 0.6 70.8 1.2]
Lexicase best number of elite cases: 7
Lexicase best total error: 3226.4000000000005
Lexicase best mean error: 107.54667
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_xor boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (float_stackdepth vector_integer_stackdepth 5 integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 58 97 258 29 96 96 94 26 1 258 1 42 1 259 258 1 2 1 94 39 1 1 1 1 258 258 96 1 31)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (94 0 97 0 0 0 0 0 0 0 0 0 0 0 0 258 0 0 0 94 39 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (float_gt vector_integer_dup vector_integer_flush float_pop boolean_eq integer_dup float_cos vector_integer_dup_items vector_integer_nth vector_integer_flush vector_integer_stackdepth boolean_stackdepth boolean_dup_items boolean_and 5 boolean_dup_times boolean_dup integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte vector_integer_first float_gte vector_integer_flush 5 vector_integer_last boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (5 5 integer_add float_frominteger float_inc)
Errors: [8.0 3.8 8.0 0.40000000000000036 5.8 10.8 10.6 7.6 9.2 5.0 2.1999999999999993 3.8000000000000007 4.6 55.0 250.0 0.0 11.2 17.4 48.8 8.0 9.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 10.6 74.8 10.2]
Total: 3024.2000000000003
Mean: 100.80666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 70283.9249785751
Median total errors in population: 3055.0
Error averages by case: (1543.331491438013 1543.311221197952 1543.312491438013 1544.6162862304673 1543.3883912470399 1553.8576008213965 1553.74153768179 1553.330775100198 1553.3357315914009 1548.4326862304601 1549.6332420382555 1546.6819327596886 1544.6493327596816 1593.4544420382597 2705.8504914380114 1545.161765092695 1562.412464923149 1559.672165092681 1598.4205228294777 1553.3657751001983 1544.5196141717277 1604.5092211979631 4313.84299124708 21147.164107932793 1621.7951592845604 1547.883340876832 1548.3917838973864 1553.74053768179 1608.5765375540689 1553.541337681759)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.04147098480789646 1.0 2.1999999999999993 0.8000000000000007 0.40000000000000036 14.0 250.0 0.0 2.1999999999999993 5.399999999999999 19.200000000000003 0.0 0.0 45.8 143.8 81.79999999999995 58.8 1.4000000000000004 4.0 0.11633781453677378 14.799999999999997 0.04147098480789646)
Average genome size in population (length): 39.841
Average program size in population (points): 40.839
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 162
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.035
Error (vector) diversity:			 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3250950
--- Timings ---
Current time: 1481488313544 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (5 in1 float_frominteger vector_integer_pushall float_yankdup float_eq float_stackdepth boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 5
Lexicase best total error: 2339.000000000001
Lexicase best mean error: 77.96667
Lexicase best size: 34
Percent parens: 0.029
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_lt integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (in1 float_stackdepth vector_integer_last vector_integer_stackdepth integer_eq 5 vector_integer_butlast integer_fromboolean vector_integer_yank integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 22 96 140 39 92 92 64 21 83 140 9 39 5 5 140 68 1 2 64 28 1 2 68 2 1 5 92 83 31)
Population mean number of elite cases: 1.69
Count of perfect (error zero) individuals by case: (253 0 96 0 0 0 0 0 0 0 0 0 0 0 0 140 0 0 0 64 28 0 0 0 0 0 5 0 0 0)
Population mean number of perfect (error zero) cases: 0.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction float_fromboolean} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_lt} {:close 0, :instruction integer_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_xor 5 boolean_and boolean_yankdup float_fromboolean vector_integer_reverse vector_integer_yank float_lt integer_max float_frominteger integer_sub vector_integer_emptyvector float_eq boolean_dup_times in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (5 float_frominteger in1 vector_integer_pushall float_yankdup float_stackdepth boolean_fromfloat integer_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 119673.36112064142
Median total errors in population: 3118.8876383342263
Error averages by case: (1252.833064436276 1254.954864436285 1252.9780644362759 1259.4880644362795 1257.5624644362879 1252.9773712608228 1253.1249774186997 1253.0926644362746 1252.8568062176346 1287.3610644362757 1261.2614644362695 1269.4666644362844 1255.2960644362745 1669.7810644362748 16064.39006443631 1271.365064436276 1269.8832644362667 1266.2952644362722 1774.9404644362833 1254.174064436276 1253.810064436276 1635.233664436283 42713.53586443651 25351.157664435934 1427.7438644362858 1259.3762644362744 1267.448064436276 1252.9553774186998 1325.0558644362902 1252.9615774186811)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.04147098480789646 1.0 2.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 61.0 0.0 2.1999999999999993 4.399999999999999 3.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 81.79999999999995 25.200000000000003 0.5999999999999996 0.0 0.11633781453677378 14.799999999999997 0.04147098480789646)
Average genome size in population (length): 37.663
Average program size in population (points): 38.661
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4380840
--- Timings ---
Current time: 1481488321861 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger})
Lexicase best program: (vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_swap boolean_or vector_integer_stackdepth boolean_dup_times integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove float_frominteger float_frominteger)
Lexicase best partial simplification: (boolean_empty in1 vector_integer_pushall float_stackdepth boolean_yankdup boolean_shove float_frominteger float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 5
Lexicase best total error: 2339.000000000001
Lexicase best mean error: 77.96667
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_stackdepth vector_integer_emptyvector integer_rot integer_eq 5 vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_dup integer_swap integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 34 256 78 45 77 77 56 28 50 79 208 28 96 96 78 61 26 1 56 37 27 75 61 75 23 96 77 50 31)
Population mean number of elite cases: 2.09
Count of perfect (error zero) individuals by case: (105 0 256 0 0 0 0 0 0 0 0 0 0 0 0 78 0 0 0 56 37 0 0 0 0 0 96 0 0 0)
Population mean number of perfect (error zero) cases: 0.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger})
Best program: (boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove float_frominteger float_frominteger)
Partial simplification: (5 in1 float_frominteger vector_integer_pushall float_yankdup float_eq float_stackdepth boolean_yankdup integer_shove boolean_shove float_frominteger float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2338.000000000001
Mean: 77.933334
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 105361.92517203501
Median total errors in population: 3093.8
Error averages by case: (1212.4578044725454 1215.3052044725428 1212.3598044725454 1221.8012044725494 1217.016004472552 1212.232765607181 1212.2204138041773 1214.1940722989852 1212.4783946741347 1248.8138044725456 1221.3570044725361 1233.1098044725438 1215.1832722989848 1674.158804472545 13994.68780447257 1230.2808044725452 1229.7282044725343 1228.9658044725436 1802.9664044725534 1214.0868722989876 1212.9568722989875 1532.0796044725612 48639.625204472635 8053.748004472583 1528.5256044725538 1221.5284044725431 1232.9658044725452 1212.1872138041779 1282.597804472559 1222.3064010259995)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.04147098480789646 1.0 2.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 61.0 0.0 2.1999999999999993 4.399999999999999 0.20000000000000284 0.0 0.0 1.7999999999999972 30.80000000000001 81.79999999999995 25.200000000000003 0.5999999999999996 0.0 0.11633781453677378 14.799999999999997 0.04147098480789646)
Average genome size in population (length): 36.484
Average program size in population (points): 37.484
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.054
Error (vector) diversity:			 0.055
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5475360
--- Timings ---
Current time: 1481488330350 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove float_frominteger float_frominteger)
Lexicase best partial simplification: (5 float_frominteger boolean_shove in1 vector_integer_pushall float_yankdup float_eq float_stackdepth boolean_yankdup integer_shove boolean_yankdup float_frominteger float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.000000000001
Lexicase best mean error: 77.933334
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_stackdepth vector_integer_emptyvector integer_rot integer_eq 5 vector_integer_subvec integer_fromboolean integer_swap integer_swap integer_div integer_stackdepth float_sin boolean_xor float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 30 220 51 27 88 89 69 31 49 1 201 85 91 1 52 56 35 61 69 45 28 71 56 71 1 92 89 2 30)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (68 0 220 0 0 0 0 0 0 0 0 0 0 0 0 52 0 0 0 69 45 0 0 0 0 0 92 0 0 0)
Population mean number of perfect (error zero) cases: 0.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_fromboolean integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (vector_integer_indexof in1 integer_yankdup vector_integer_pushall integer_dup integer_shove integer_dup integer_eq float_stackdepth integer_shove float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 2.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 2329.2000000000003
Mean: 77.64
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 96939.1122195574
Median total errors in population: 3115.4
Error averages by case: (1032.7125233910588 1036.0185281676438 1032.42729605373 1042.2343968883524 1036.9932430513945 1042.3146540382415 1032.2019263549084 1033.971181776071 1042.3877901668377 1067.154399082663 1041.3295614878402 1052.6060459432806 1045.1104394257773 1469.9822805759736 12829.943392731728 1049.8539939351037 1050.4094888750628 1050.8997188868032 1591.4356689583742 1033.9297905732635 1043.1370722801723 1330.3069955190067 46092.114696629535 8236.837559064537 1349.9884635698322 1041.4062665305735 1052.6806792685024 1032.1919263549073 1114.110273795049 1032.4219661814147)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.04147098480789646 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 0.0 2.1999999999999993 4.399999999999999 0.20000000000000284 0.0 0.0 1.7999999999999972 30.80000000000001 81.79999999999995 25.200000000000003 0.40000000000000036 0.0 0.11633781453677378 9.799999999999997 0.04147098480789646)
Average genome size in population (length): 34.865
Average program size in population (points): 35.863
Average percent parens in population: 0.031
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6521310
--- Timings ---
Current time: 1481488338907 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_lt integer_rot float_sin boolean_pop in1 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (in1 5 float_frominteger vector_integer_pushall float_yankdup float_stackdepth integer_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2339.000000000001
Lexicase best mean error: 77.96667
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_last integer_rot integer_eq integer_fromboolean integer_swap integer_swap integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 45 176 32 34 1 1 53 29 23 26 158 110 51 25 54 51 1 34 53 45 27 64 51 1 30 74 1 21 23)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (89 0 176 0 0 0 0 0 0 0 0 0 0 0 0 54 0 0 0 53 45 0 0 0 0 0 74 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_fromboolean integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_dup integer_shove integer_dup integer_eq float_stackdepth integer_shove float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 2.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 2329.2000000000003
Mean: 77.64
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 94319.802547252
Median total errors in population: 3132.657458807029
Error averages by case: (1083.050733680756 1076.8379794964937 1072.6738655460745 1082.352798263211 1077.3727667240735 1092.3217169343225 1092.3124476078287 1084.0145690176234 1092.6668158057264 1106.1024593247853 1082.7297459234135 1092.4041125737513 1085.148369017629 1489.6352207984391 11964.034518184792 1089.817364990566 1097.9420712518108 1093.9192495412503 1598.0101027461583 1084.2613180310707 1083.0541690176271 1364.9742431938841 42899.53043329193 8481.559355619334 1426.4866983519103 1081.9528287154305 1092.3345585949335 1092.3062200742356 1167.5332231998261 1092.4625917333162)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.043197504692071786 0.10847647425122842 0.3999999999999999 0.04147098480789646 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 0.0 2.1999999999999993 3.3999999999999986 0.20000000000000284 0.0 0.0 1.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10847647425122842 9.799999999999997 0.04147098480789646)
Average genome size in population (length): 36.525
Average program size in population (points): 37.524
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7617060
--- Timings ---
Current time: 1481488347438 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (5 in1 float_frominteger vector_integer_pushall float_yankdup float_eq float_stackdepth boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2339.000000000001
Lexicase best mean error: 77.96667
Lexicase best size: 34
Percent parens: 0.029
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_add boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_nth vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_stackdepth integer_rot integer_eq 5 integer_fromboolean integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 30 125 39 19 35 60 60 29 1 3 119 127 67 2 59 49 54 37 61 27 1 31 49 54 37 88 60 1 29)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (76 0 125 0 0 0 0 0 0 1 0 0 0 0 0 59 0 0 0 61 27 0 0 0 0 0 88 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_fromboolean integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_dup integer_shove integer_dup integer_eq float_stackdepth integer_shove float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 2.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 2329.2000000000003
Mean: 77.64
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 108142.185027181
Median total errors in population: 3132.4373412790355
Error averages by case: (1073.1801488472606 1076.9777769935533 1073.0065145822693 1084.4104887129872 1077.8561721595472 1082.3772354317848 1072.5124035697806 1084.3465942741907 1082.5340879316211 1107.7417663750907 1081.0445320106369 1094.5496863208514 1084.9236384293479 1511.1156952304098 12166.649148207589 1090.0753064769829 1089.5652694379178 1092.401715021214 1640.3203791065375 1074.8414481134494 1083.0240791893093 1365.0939434411723 47339.844184600435 17689.222215585673 1427.592413192655 1081.802254744201 1094.4522779617519 1082.4180056915595 1165.7310023217613 1072.574643219496)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.043197504692071786 0.10847647425122842 0.3999999999999999 0.04147098480789646 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 2.1999999999999993 3.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10847647425122842 6.200000000000003 0.04147098480789646)
Average genome size in population (length): 36.151
Average program size in population (points): 37.149
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8701590
--- Timings ---
Current time: 1481488356105 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth vector_integer_stackdepth 5 5 in1 integer_div integer_swap float_frominteger vector_integer_replacefirst integer_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.19999999999999996]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4000000000005
Lexicase best mean error: 77.94666
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_last integer_eq float_gte 5 integer_fromboolean integer_swap integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 43 125 31 30 25 1 61 41 21 48 116 100 69 31 33 60 1 28 60 32 20 40 60 35 45 85 1 1 31)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (86 0 125 0 0 0 0 0 0 21 0 0 0 0 0 33 0 0 0 60 32 0 0 0 0 0 85 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction float_inc} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (integer_inc vector_integer_stackdepth float_inc boolean_empty boolean_fromfloat vector_integer_rot float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup integer_fromboolean integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_dup integer_shove integer_dup integer_eq float_stackdepth integer_shove float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 2.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 2329.2000000000003
Mean: 77.64
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 96368.02579628889
Median total errors in population: 3118.8876383342263
Error averages by case: (1162.5349800763913 1166.1305800763876 1162.574919885331 1172.5893800763893 1168.1911800763933 1161.8225311526191 1181.973896302346 1185.215215256896 1182.6132530673567 1200.7569800763913 1170.511180076388 1183.9597800763825 1185.0184152568968 1616.305980076391 13810.795980076384 1182.7619800763912 1178.672780076377 1181.5873800763918 1733.4189800763922 1184.6332152568957 1182.3782152568956 1493.3091800764018 45550.94598007641 3570.79418007642 1441.448780076396 1170.3219955870995 1182.3579800763912 1201.9726963023468 1240.467180076399 1161.9610215127398)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.043197504692071786 0.10440372202976961 0.3999999999999999 0.04147098480789646 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 2.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10440372202976961 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 36.374
Average program size in population (points): 37.374
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.131
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9792810
--- Timings ---
Current time: 1481488364589 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth boolean_yank vector_integer_stackdepth 5 5 in1 integer_div integer_swap float_frominteger vector_integer_replacefirst vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth integer_shove boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.19999999999999996]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4000000000005
Lexicase best mean error: 77.94666
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth float_mult vector_integer_last vector_integer_stackdepth integer_rot integer_eq 5 integer_fromboolean integer_swap boolean_dup_times integer_swap vector_integer_rest integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 41 109 35 25 29 43 65 35 24 39 105 151 60 19 41 54 28 38 66 36 22 34 54 22 55 83 43 25 28)
Population mean number of elite cases: 1.50
Count of perfect (error zero) individuals by case: (96 0 109 0 0 0 0 0 0 24 0 0 0 0 0 41 0 0 0 66 36 0 0 0 0 0 83 0 0 0)
Population mean number of perfect (error zero) cases: 0.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction float_fromboolean} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_lt} {:close 0, :instruction integer_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_pop} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_xor 5 boolean_and boolean_yankdup float_fromboolean vector_integer_reverse vector_integer_yank float_lt integer_max float_frominteger integer_sub vector_integer_emptyvector float_pop float_div float_yankdup in1 integer_yankdup integer_fromboolean integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc integer_lte)
Partial simplification: (vector_integer_reverse in1 vector_integer_pushall integer_dup integer_shove integer_dup integer_eq float_stackdepth integer_shove float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 2.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 2329.2000000000003
Mean: 77.64
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 92812.41669921041
Median total errors in population: 3121.803382990927
Error averages by case: (1163.0893734850517 1156.5374301669578 1153.0662810684494 1162.5295436664487 1168.5170874683936 1152.3849728433947 1152.6320252566059 1155.0415292775563 1143.0349838512836 1188.6999087830736 1160.6749737564164 1173.713771137297 1144.65579542664 1583.2996608575263 12643.96638820186 1181.5292317336296 1169.3707133599628 1170.7886477570764 1695.2915008356076 1155.086042144314 1142.6355901833645 1461.5805936343265 43496.14065796359 3696.116503701558 1442.7578335690944 1160.680674206443 1172.5321203781878 1172.574447242597 1230.8887069734476 1162.5997102802912)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.043197504692071786 0.10440372202976961 0.3999999999999999 0.04147098480789646 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 2.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10440372202976961 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.139
Average program size in population (points): 38.137
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.138
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10906980
--- Timings ---
Current time: 1481488373164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_dup 5 5 in1 integer_fromboolean integer_div integer_swap float_frominteger vector_integer_replacefirst vector_integer_pushall float_yankdup integer_dup float_stackdepth boolean_fromfloat integer_shove boolean_yankdup float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.19999999999999996]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4000000000005
Lexicase best mean error: 77.94666
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_add boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_nth vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_stackdepth vector_integer_emptyvector integer_rot integer_eq 5 integer_fromboolean integer_swap integer_swap integer_div integer_stackdepth boolean_pop float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 50 125 30 29 1 52 59 33 27 1 104 128 65 33 28 1 24 26 61 45 25 23 64 32 52 89 52 21 33)
Population mean number of elite cases: 1.42
Count of perfect (error zero) individuals by case: (104 0 125 0 0 0 0 0 0 27 0 0 0 0 0 28 0 0 0 61 45 0 0 0 0 0 89 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove float_empty boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 96831.80025232852
Median total errors in population: 3118.8876383342263
Error averages by case: (1022.8766550044696 1026.3005471528866 1023.010937690724 1033.3027471528935 1028.6811471528922 1022.1396981660127 1022.3451771177791 1024.7322925871993 1023.0459818314923 1062.9053471528891 1031.3903276566202 1046.0251471528804 1025.2278959876728 1510.386347152888 14322.302347152885 1043.5183471528892 1039.3379471528795 1040.4901915659034 1639.3629471528866 1025.1468925872 1022.7078959876673 1370.8777471528942 49356.182347152935 3502.4179471529083 1340.8935471528916 1031.0561817414305 1044.6751276566206 1032.3411771177773 1095.7953471528929 1022.3240123365397)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.04117504091151833 0.10440372202976961 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 1.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10440372202976961 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.424
Average program size in population (points): 38.423
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12029700
--- Timings ---
Current time: 1481488381644 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_empty vector_integer_subvec in1 integer_fromboolean float_frominteger vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth integer_shove boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2339.000000000001
Lexicase best mean error: 77.96667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap boolean_rot vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth float_sin in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_last vector_integer_stackdepth vector_integer_last integer_rot integer_eq float_gte 5 integer_fromboolean integer_swap boolean_rot integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 54 133 35 28 30 39 1 28 25 17 110 140 55 27 25 25 32 36 70 39 25 46 31 25 38 77 39 22 33)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (96 0 133 0 0 0 0 0 0 25 0 0 0 0 0 25 0 0 0 70 39 0 0 0 0 0 77 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 75272.33674057087
Median total errors in population: 3118.8876383342263
Error averages by case: (1173.4928877694322 1176.1252024969876 1173.5138646317766 1171.419451187496 1167.1706117231595 1172.7936771547127 1172.9891781996841 1164.9168605369287 1173.5010090108303 1187.8146471794907 1171.0518818295236 1179.3726221252796 1175.4710188092452 1461.3071223482214 7838.9769612951695 1175.6425022764568 1180.7965423561616 1189.2612958254765 1544.2245708248765 1164.830574151469 1173.4656866356884 1363.4923972588713 30785.171328501063 3720.2741446607392 1436.1587260800363 1171.3786720742166 1180.2328533553107 1222.9605767218861 1231.6239074333732 1172.9059661172976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.04117504091151833 0.10440372202976961 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 1.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10440372202976961 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 38.129
Average program size in population (points): 39.129
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.145
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13173570
--- Timings ---
Current time: 1481488389993 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth vector_integer_subvec vector_integer_stackdepth 5 5 in1 integer_div integer_swap float_frominteger vector_integer_replacefirst integer_yankdup vector_integer_pushall float_yankdup float_eq float_stackdepth boolean_yankdup boolean_shove float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.19999999999999996]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4000000000005
Lexicase best mean error: 77.94666
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_lt} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove vector_integer_rot integer_rot float_sin boolean_pop in1 vector_integer_dup float_lt vector_integer_last boolean_or float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove vector_integer_indexof vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_dup float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector integer_fromboolean integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (100 65 120 45 39 1 57 30 24 24 23 120 107 52 16 36 19 1 27 37 33 32 56 30 24 42 75 57 24 23)
Population mean number of elite cases: 1.34
Count of perfect (error zero) individuals by case: (100 0 120 0 0 0 0 0 0 24 0 0 0 0 0 36 0 0 0 37 33 0 0 0 0 0 75 0 0 0)
Population mean number of perfect (error zero) cases: 0.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove float_empty boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 79351.23648021635
Median total errors in population: 3132.3233042168335
Error averages by case: (1223.452256703376 1226.176665663892 1223.434087737209 1231.8385440965608 1226.7893437230066 1222.3403114651528 1242.5535616642317 1244.8487304675732 1243.326667403213 1248.6630774627224 1230.9483778317885 1240.4704974519298 1245.931884589751 1537.5681530668849 7765.519190249299 1235.6222700815308 1240.41345065121 1239.7854663532762 1626.7436734803298 1244.761770263617 1243.4588837742774 1423.1978602068132 32986.844292166956 3985.6774553240853 1528.9559156011321 1231.9337186383777 1241.7729667557878 1252.6021592109223 1293.0615324781206 1222.543715653308)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.10440372202976961 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.10440372202976961 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 38.093
Average program size in population (points): 39.092
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.155
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14316360
--- Timings ---
Current time: 1481488398777 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_xor 5 vector_integer_swap integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_eq integer_swap float_frominteger boolean_shove vector_integer_replacefirst vector_integer_contains integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_stackdepth float_flush boolean_fromfloat integer_shove float_flush boolean_yankdup boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_dup vector_integer_stackdepth 5 integer_max 5 in1 integer_div integer_swap float_frominteger vector_integer_replacefirst vector_integer_pushall float_yankdup float_stackdepth integer_shove float_flush float_frominteger)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.19999999999999996]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4000000000005
Lexicase best mean error: 77.94666
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult float_mult vector_integer_stackdepth vector_integer_emptyvector integer_pop integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop boolean_shove boolean_xor float_frominteger)
Zero cases best partial simplification: (float_stackdepth vector_integer_stackdepth 5 integer_fromboolean integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 65 98 38 43 29 1 32 25 20 21 111 97 63 1 45 31 23 33 38 26 22 41 36 26 44 92 1 26 18)
Population mean number of elite cases: 1.22
Count of perfect (error zero) individuals by case: (76 0 98 0 0 0 0 0 0 20 0 0 0 0 0 45 0 0 0 38 26 0 0 0 0 0 92 0 0 0)
Population mean number of perfect (error zero) cases: 0.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove float_empty boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 83918.46766577646
Median total errors in population: 3132.3233042168335
Error averages by case: (1303.7844563408307 1296.1422573458594 1303.6528153041231 1311.3794020161563 1307.3517860687405 1292.5187302312713 1322.739537663511 1335.2939924852792 1323.5684719737947 1330.464254394438 1311.3995092372286 1320.366268827967 1325.9982314210995 1634.0367273241009 9364.169048916248 1317.0661754448772 1321.2855358753222 1318.929789231236 1722.9946382294936 1334.890849028984 1323.6617374134537 1534.3702294296793 33964.81690986582 3758.1103276750187 1599.0856777260035 1311.7940043634455 1321.0619373983202 1342.7618384749421 1372.0041592233504 1292.7683668459235)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 16.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.365
Average program size in population (points): 38.363
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.142
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15437310
--- Timings ---
Current time: 1481488407187 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup vector_integer_empty integer_mod integer_pop float_frominteger integer_flush)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove boolean_stackdepth integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult float_mult vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec vector_integer_butlast integer_fromboolean vector_integer_shove integer_swap vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest vector_integer_yank integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (boolean_stackdepth in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot integer_eq 5 integer_fromboolean integer_swap vector_integer_yank integer_swap integer_div integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 1.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3072.8
Zero cases best mean error: 102.42667
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 57 103 47 41 30 42 32 23 24 23 132 84 70 2 29 36 31 19 28 38 27 53 24 35 28 91 42 30 28)
Population mean number of elite cases: 1.33
Count of perfect (error zero) individuals by case: (85 0 103 0 0 0 0 0 0 24 0 0 0 0 2 29 0 0 0 28 38 0 0 0 0 0 91 0 0 0)
Population mean number of perfect (error zero) cases: 0.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 91409.788133312
Median total errors in population: 3128.520720045033
Error averages by case: (1293.4477615776289 1296.1352009147577 1293.5052901832298 1302.8170523043534 1298.2035130784716 1302.1528173247586 1322.3438603326954 1325.9577790645058 1313.1294922738225 1325.3242540861452 1302.6771649080129 1313.0989642893655 1316.0227685241045 1681.1699798441757 11001.583847518094 1309.730185898534 1310.2185785008821 1308.2559512529242 1786.3326873607814 1324.9869301681385 1313.3365670788503 1567.6558031273958 39842.26054198117 3717.897692904204 1622.0876894783003 1303.8103760415313 1313.9044591375039 1342.3405407098546 1356.9665977795366 1302.4337856681927)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.275
Average program size in population (points): 38.274
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.164
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16555560
--- Timings ---
Current time: 1481488415968 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times float_sin vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger integer_flush)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction float_fromboolean} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_lt} {:close 0, :instruction integer_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction float_shove} {:close 0, :instruction float_dec} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_lte} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_xor 5 boolean_and boolean_yankdup float_fromboolean vector_integer_reverse vector_integer_yank float_lt integer_max float_frominteger integer_sub vector_integer_emptyvector float_eq boolean_dup_times in1 boolean_shove float_dec float_div float_yankdup in1 integer_yankdup float_frominteger integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_div float_shove float_dec integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove vector_integer_emptyvector vector_integer_length float_lte float_frominteger float_frominteger)
Zero cases best partial simplification: (5 float_lt float_frominteger in1 float_dec vector_integer_pushall float_yankdup integer_div float_shove float_dec integer_max float_dup_times float_lte)
Zero cases best errors: [0.0 4.2 0.0 7.6 1.2000000000000002 3.8 3.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 2.0 55.8 421.2 1915.2 83.8 9.4 12.0 10000 82.8 3.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 13076.2
Zero cases best mean error: 435.87332
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 61 105 43 41 22 50 21 29 20 30 135 89 75 17 38 26 26 26 34 37 24 50 32 30 36 125 50 28 32)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (108 0 105 0 0 0 0 0 0 20 0 0 0 0 17 38 0 0 0 34 37 0 0 0 0 0 125 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 95367.09666187543
Median total errors in population: 3128.520720045033
Error averages by case: (1203.5948491610081 1207.0093234656842 1213.4552578376858 1212.65589576531 1208.746826431233 1222.4049244933933 1272.525758889843 1254.8256352573812 1243.236256335255 1238.8727884325137 1212.37295594541 1224.0383414696137 1245.8516062952087 1634.9523778983921 13168.22008564171 1221.8809546628263 1221.1753435884632 1221.7747343658236 1746.6369876328104 1245.0311798199273 1263.3600585666209 1566.2127527434602 43512.01226831191 3866.799682511991 1510.4713212162228 1212.452312994625 1223.1264178224965 1282.5129287863138 1278.247989892833 1232.6388456392974)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.458
Average program size in population (points): 38.457
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.179
Error (vector) diversity:			 0.183
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17679300
--- Timings ---
Current time: 1481488424818 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times float_fromboolean vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Zero cases best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth float_sin in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 2328.2000000000003
Zero cases best mean error: 77.60667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 55 94 53 44 34 38 25 33 31 20 123 63 68 21 33 36 32 25 43 48 42 34 30 19 27 113 38 26 31)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (114 0 94 0 0 0 0 0 0 31 0 0 0 0 21 33 0 0 0 43 48 0 0 0 0 0 113 0 0 0)
Population mean number of perfect (error zero) cases: 0.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup float_sub vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 105011.75773586257
Median total errors in population: 3126.3887066197185
Error averages by case: (1113.4815169866597 1117.056070536062 1113.5154632183194 1124.7234977377693 1118.64421703091 1122.4324499883805 1132.4299567277722 1134.5233400556808 1133.3094545525628 1153.0987054157622 1123.8869811027473 1137.994958288757 1135.7780926556843 1638.0185752015566 14882.036340214792 1132.6670358357874 1129.9947569206572 1134.8612132348044 1773.3453210212053 1135.3689899148478 1133.0907536617235 1547.3458351856143 53225.18840087585 4344.262318488775 1528.8771534743576 1123.8711382661445 1137.9520181675334 1162.462290606999 1198.9244189166543 1122.616471578015)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 30.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.293
Average program size in population (points): 38.292
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.178
Error (vector) diversity:			 0.181
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18798090
--- Timings ---
Current time: 1481488433564 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction float_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush float_shove boolean_not integer_sub boolean_or float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger integer_flush boolean_not)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction float_gte} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_lt integer_rot float_sin boolean_pop in1 vector_integer_dup vector_integer_nth vector_integer_dup_items float_stackdepth integer_swap float_mult vector_integer_last vector_integer_stackdepth vector_integer_emptyvector vector_integer_last integer_rot boolean_flush vector_integer_indexof float_gte 5 boolean_xor vector_integer_subvec boolean_invert_second_then_and integer_fromboolean vector_integer_shove float_mult vector_integer_yank float_swap vector_integer_conj boolean_dup_times vector_integer_dup integer_swap vector_integer_rest integer_rot integer_div integer_stackdepth boolean_pop float_sin boolean_xor float_frominteger)
Zero cases best partial simplification: (in1 float_stackdepth vector_integer_last 5 integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 62 115 70 41 31 38 25 25 24 22 126 77 79 28 33 25 36 30 31 59 27 1 23 29 25 119 38 25 37)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (81 0 115 0 0 0 0 0 0 24 0 0 0 0 28 33 0 0 0 31 59 0 0 0 0 0 119 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup float_sub vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove float_flush boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 87114.17469578574
Median total errors in population: 3121.7928955891293
Error averages by case: (1213.4480995914746 1216.5046152211066 1213.2930174317428 1222.3508228161452 1217.6154136711311 1212.1576970738506 1232.223220845802 1234.3653612837377 1233.2980954013485 1244.189043570705 1223.1750003367104 1232.3421506831755 1236.3450100474342 1603.6175452072089 10119.01812119349 1229.0126835810365 1231.9455296085703 1235.193294512212 1696.1706938268796 1234.7073653223804 1232.9934479266387 1476.672821115972 38258.50364479637 4077.010560767577 1567.1259120837533 1223.0471035437354 1232.7709875830008 1252.2975941460581 1300.3936265156312 1212.3862160808355)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.223
Average program size in population (points): 38.221
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.204
Error (vector) diversity:			 0.208
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19914780
--- Timings ---
Current time: 1481488441987 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 float_mult integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_shove vector_integer_pop vector_integer_empty float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 4.6 2.2 2.8 1.6 1.4 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2372.3999999999996
Zero cases best mean error: 79.08
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 64 119 43 41 23 55 25 33 27 31 104 74 63 22 40 27 34 20 44 72 23 42 32 29 34 98 55 22 31)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (108 0 119 0 0 0 0 0 0 27 0 0 0 0 22 40 0 0 0 44 72 0 0 0 0 0 98 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_last} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_last vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup float_sub vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 91430.11271664187
Median total errors in population: 3117.327630167817
Error averages by case: (1253.429626033077 1266.5288175131407 1253.1496531556604 1262.2004425854664 1247.7676631605375 1252.3362652720782 1262.3640755514195 1264.3648570531834 1263.4705733685623 1274.0665354119708 1261.995887206764 1261.0484885791766 1266.036568608164 1625.0252184189903 10538.47791697514 1269.2739443611374 1279.1498736270473 1270.8649858237131 1706.960851450955 1264.6201902793778 1263.0477686081613 1512.6530967827964 36987.99356118632 8414.247014544933 1518.4741985287005 1261.0218921155576 1270.2765685902073 1272.402996307411 1344.360199921279 1242.5029856209678)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.852
Average program size in population (points): 38.852
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.2
Error (vector) diversity:			 0.206
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 21050340
--- Timings ---
Current time: 1481488450431 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times integer_rot vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Zero cases best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Zero cases best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop vector_integer_conj float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2328.2000000000003
Zero cases best mean error: 77.60667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 56 135 57 53 36 42 15 21 25 27 93 88 2 26 48 22 37 19 50 88 26 47 30 22 59 109 43 21 27)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (117 0 135 0 0 0 0 0 0 25 0 0 0 0 26 48 0 0 0 50 88 0 0 0 0 0 109 0 0 0)
Population mean number of perfect (error zero) cases: 0.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_last} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_shove} {:close 2, :instruction float_flush} {:close 1, :instruction float_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_last vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup float_sub vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_butlast integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_dec integer_shove float_flush float_empty boolean_invert_second_then_and boolean_shove vector_integer_emptyvector float_frominteger)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_yankdup float_yankdup integer_dup integer_dec integer_shove boolean_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 3.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 422.2 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2182.4
Mean: 72.746666
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2.0617854211704388E8
Median total errors in population: 3133.973639593127
Error averages by case: (1163.3592834159476 1166.4653084697075 1193.1949616370637 1191.6888841833609 1167.528856456368 1182.1144387613533 1202.199390752821 1194.293905875381 1193.5161150694632 1224.468185596402 1174.1283722579378 1232.165916426427 1196.1700116144566 13786.56140985636 74280.38136815885 1178.8750529388665 1180.9972127394954 1184.3053604088009 26474.879575073683 1205.1999699019589 1192.7450891762971 1422.3742951661166 2.0499797868625867E8 996229.8386647885 40793.516048985926 1198.0181330558542 1271.4888046539222 1212.2257786415767 1298.3882993932607 1172.3420913804614)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.578
Average program size in population (points): 38.577
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.231
Error (vector) diversity:			 0.234
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 22177680
--- Timings ---
Current time: 1481488459179 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max integer_empty float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 4.6 2.2 2.8 1.6 1.4 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2372.3999999999996
Lexicase best mean error: 79.08
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty boolean_xor in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger integer_max)
Zero cases best errors: [0.0 4.2 0.0 4.6 2.2 2.8 1.6 1.4 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2372.3999999999996
Zero cases best mean error: 79.08
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 66 122 43 56 17 45 35 20 26 39 79 78 26 30 36 1 42 19 47 111 19 42 20 25 59 91 47 18 32)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (140 0 122 0 0 0 0 0 0 26 0 0 0 0 30 36 0 0 0 47 111 0 0 0 0 0 91 0 0 0)
Population mean number of perfect (error zero) cases: 0.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Total: 2328.2000000000003
Mean: 77.60667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 78810.49107577286
Median total errors in population: 3117.327630167817
Error averages by case: (1093.1368516988118 1096.195786828492 1092.9718387886726 1101.7206038664592 1097.2490613690836 1092.0875605516337 1102.168180258689 1104.718000348263 1103.1864344967566 1121.0036129477696 1103.0872279442483 1109.628333583349 1106.066909630785 1425.9327000844053 9359.310839168993 1107.623065832227 1112.2479647855002 1109.4555041159415 1516.5688541356353 1104.3367929878184 1102.5507108952652 1326.7238497352714 34394.772860774516 3968.5319400688136 1374.9484544373731 1101.5574537513123 1110.0545729120345 1112.139956288235 1168.208874031875 1092.3062794547002)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.556
Average program size in population (points): 38.556
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.211
Error (vector) diversity:			 0.213
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 23304360
--- Timings ---
Current time: 1481488467722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_shove vector_integer_pop vector_integer_empty float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max integer_empty vector_integer_conj float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 8.4 1.7999999999999998 2.8 1.6 12.6 0.19999999999999996 5.0 6.199999999999999 0.8000000000000007 4.4 3.0 62.0 3.0 18.2 25.4 28.200000000000003 1.0 0.0 40.8 569.8 1419.2 31.799999999999997 5.4 1.0 1.6 77.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2338.4
Lexicase best mean error: 77.94666
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_shove vector_integer_pop vector_integer_empty float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty boolean_shove in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 8.4 1.7999999999999998 2.8 1.6 12.6 0.19999999999999996 5.0 6.199999999999999 0.8000000000000007 4.4 3.0 62.0 3.0 18.2 25.4 28.200000000000003 1.0 0.0 40.8 569.8 1419.2 31.799999999999997 5.4 1.0 1.6 77.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2338.4
Zero cases best mean error: 77.94666
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 46 109 44 52 23 49 28 26 30 54 73 86 33 22 38 29 34 29 44 114 1 39 2 31 41 92 53 28 29)
Population mean number of elite cases: 1.42
Count of perfect (error zero) individuals by case: (138 0 109 0 0 0 0 0 0 30 0 0 0 0 22 38 0 0 0 44 114 0 0 0 0 0 92 0 0 0)
Population mean number of perfect (error zero) cases: 0.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_lt} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_rot float_shove float_lte integer_max float_dup_times vector_integer_remove boolean_dup float_lt vector_integer_last boolean_or vector_integer_nth float_lte 5 boolean_dup float_mod integer_div vector_integer_yank boolean_dup_times boolean_eq boolean_dup boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove 5 boolean_dup float_mod integer_add vector_integer_yank float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_max 5 integer_div 5 integer_add float_frominteger)
Errors: [2.0 0.7999999999999998 2.0 1.5999999999999996 0.7999999999999998 4.8 4.6 4.6 3.2 7.0 7.199999999999999 6.800000000000001 1.4000000000000004 43.0 216.0 3.0 16.2 10.399999999999999 37.8 3.0 3.0 48.8 220.2 113.20000000000005 70.8 6.4 7.0 4.6 18.799999999999997 4.2]
Total: 873.2
Mean: 29.106667
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 160428.66470365843
Median total errors in population: 3117.327630167817
Error averages by case: (1023.0799147099377 1026.8195327362312 1022.9129626154157 1033.2797561543757 1026.9605530530157 1021.8955041401853 1021.9788465938357 1024.016128611611 1023.0703149956032 1052.0061270441763 1032.2994673557805 1042.1675932038422 1025.7941197680966 1384.862607520958 8555.577874050257 1037.1475586312827 1039.3617162262437 1045.4017240143646 1483.0308703880853 1024.3272830208844 1022.3943411625705 1237.46772193663 37420.85403064848 85127.20839763577 1356.6234370513441 1032.876279086948 1043.0762107280586 1022.0301386730044 1198.1056635299224 1022.0380283717387)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 37.871
Average program size in population (points): 38.87
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.215
Error (vector) diversity:			 0.217
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 24440490
--- Timings ---
Current time: 1481488476065 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_xor 5 float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (5 in1 float_yankdup vector_integer_pushall integer_yankdup 5 integer_add vector_integer_conj float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth float_frominteger float_yankdup float_inc)
Lexicase best errors: [8.0 5.2 6.0 0.40000000000000036 5.8 1.8 1.6 1.4 4.2 5.0 2.1999999999999993 3.8000000000000007 0.40000000000000036 55.0 250.0 0.0 11.2 17.4 48.8 8.0 0.0 47.8 413.2 1907.2 75.8 9.6 4.0 6.6 74.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2976.4
Lexicase best mean error: 99.21333
Lexicase best size: 46
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 1, :instruction float_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction float_gt} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_first} {:close 0, :instruction boolean_yankdup} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction float_yankdup} {:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 0, :instruction float_add} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction float_lte} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_occurrencesof} {:close 1, :instruction float_sin} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte})
Zero cases best program: (float_lte vector_integer_reverse 5 integer_lte float_sin vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_swap vector_integer_nth vector_integer_empty float_gt vector_integer_take integer_gte integer_rot boolean_dup in1 vector_integer_first boolean_yankdup integer_fromboolean float_yankdup vector_integer_butlast in1 float_add boolean_stackdepth float_fromboolean boolean_shove float_lte boolean_dup_items vector_integer_occurrencesof float_sin boolean_dup_items integer_mult vector_integer_eq boolean_stackdepth float_mod boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger integer_lte)
Zero cases best partial simplification: (5 float_sin integer_stackdepth vector_integer_empty boolean_dup in1 vector_integer_first boolean_yankdup integer_fromboolean float_fromboolean boolean_dup_items boolean_dup_items boolean_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 47
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 64 105 52 51 26 50 22 27 27 45 60 98 33 24 41 29 45 30 36 120 28 43 38 23 53 85 52 25 29)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (124 0 105 0 0 0 0 0 0 27 0 0 0 0 24 41 0 0 0 36 120 0 0 0 0 0 85 0 0 0)
Population mean number of perfect (error zero) cases: 0.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub})
Best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult vector_integer_rot in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub)
Partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_stackdepth in1 integer_dup_times float_fromboolean vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Total: 2328.2000000000003
Mean: 77.60667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 79567.24517195193
Median total errors in population: 3117.327630167817
Error averages by case: (882.9547727957239 886.8094432758218 882.9003341513148 892.5642611667445 887.3494702835576 881.8650424636243 882.0329427017431 884.1460027793923 883.1033351805211 914.2483222632217 891.8213592181697 902.37838621436 885.8213623145026 1267.8985038980072 10185.076742551066 898.4904292389667 899.8974392646013 899.5745249330758 1377.0044871699688 884.489724249187 882.5329069466932 1139.0913662738722 40092.13085817951 3768.139432508859 1199.6308323422825 892.2502412594962 903.0801210300933 882.0119713218768 955.9398134750388 882.010742500682)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 38.586
Average program size in population (points): 39.585
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.234
Error (vector) diversity:			 0.236
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 25598070
--- Timings ---
Current time: 1481488484614 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub})
Lexicase best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult vector_integer_rot in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub)
Lexicase best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger boolean_invert_second_then_and)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2328.2000000000003
Lexicase best mean error: 77.60667
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub})
Zero cases best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult vector_integer_rot in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub)
Zero cases best partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall boolean_yank integer_yankdup vector_integer_empty integer_mod integer_pop float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2328.2000000000003
Zero cases best mean error: 77.60667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 64 110 35 65 27 43 30 24 19 46 77 81 35 22 31 28 41 28 43 124 26 42 23 17 50 95 47 24 33)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (110 0 110 0 0 0 0 0 0 19 0 0 0 0 22 31 0 0 0 43 124 0 0 0 0 0 95 0 0 0)
Population mean number of perfect (error zero) cases: 0.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove float_dec boolean_shove float_dec float_div float_yankdup in1 integer_yankdup boolean_frominteger integer_yankdup float_dup_times vector_integer_pushall float_yankdup boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth integer_lt integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (in1 integer_yankdup vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dup boolean_stackdepth integer_lt integer_max float_frominteger integer_empty)
Errors: [1.0 3.2 1.0 9.4 2.8 0.2 0.4 13.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 16.2 17.6 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 25.200000000000003 3.5999999999999996 5.0 0.6 59.8 0.8]
Total: 2319.6
Mean: 77.32
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 78124.92331601288
Median total errors in population: 3121.7824081873314
Error averages by case: (1202.7925876888874 1216.422739566692 1202.734092096748 1211.856639973268 1206.1384766532647 1211.8128094657836 1211.9712612538256 1213.817114265156 1202.9717389365198 1228.1116485143393 1211.6637412280927 1219.6956238163968 1205.8557537971587 1517.7732475101304 7933.670855355399 1215.169378423675 1220.4674017454608 1220.487358933608 1600.0419707947576 1203.951292429327 1212.4518421343637 1403.791355428012 32205.021553002254 4006.031659853871 1514.5883995712754 1212.17330191321 1221.7650455222802 1201.9437381285034 1277.80809653891 1211.9425914718481)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 38.469
Average program size in population (points): 39.466
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.243
Error (vector) diversity:			 0.247
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 26752140
--- Timings ---
Current time: 1481488493175 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq vector_integer_conj boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dup float_eq boolean_dup_items vector_integer_eq boolean_stackdepth float_frominteger float_yankdup integer_dup float_eq integer_dec boolean_stackdepth integer_max boolean_not float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 4.6 2.2 1.8 1.6 0.3999999999999999 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2369.3999999999996
Lexicase best mean error: 78.98
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq vector_integer_conj boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall float_frominteger float_yankdup integer_dup float_eq boolean_not boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 4.6 2.2 1.8 1.6 0.3999999999999999 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2369.3999999999996
Zero cases best mean error: 78.98
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 47 83 48 63 26 38 13 18 27 38 61 92 1 32 48 20 26 26 39 151 37 40 29 26 55 61 41 37 26)
Population mean number of elite cases: 1.34
Count of perfect (error zero) individuals by case: (92 0 83 0 0 0 0 0 0 27 0 0 0 0 32 48 0 0 0 39 151 0 0 0 0 0 61 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_rot} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and})
Best program: (boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_sub integer_gte boolean_shove vector_integer_pop float_rot vector_integer_subvec vector_integer_replacefirst boolean_dup boolean_dup boolean_xor boolean_shove in1 boolean_dup_items float_lt float_dup_times integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items float_lte boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and)
Partial simplification: (in1 vector_integer_pushall integer_gte in1 boolean_dup_items vector_integer_pushall integer_dup integer_yankdup integer_dup_items float_mod integer_add boolean_dup_times integer_add float_frominteger)
Errors: [0.0 3.2 0.0 16.4 9.8 0.2 0.4 13.6 7.2 14.0 1.8000000000000007 15.2 9.6 54.0 21.0 23.0 11.2 41.6 85.2 7.0 2.0 36.8 244.8 1355.2 81.2 11.6 20.0 0.6 50.8 0.8]
Total: 2138.2000000000003
Mean: 71.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 92056.77802564779
Median total errors in population: 3126.7434671939154
Error averages by case: (1202.9723207305226 1215.9670175346726 1213.0545512297501 1214.2356299311925 1207.0299021811893 1222.010676557137 1212.0206211557975 1213.8631758257668 1203.01543991675 1234.929292073698 1212.5743321336497 1224.618477871507 1205.9506120555543 1617.0929387552915 10016.810896294546 1217.689762531885 1220.8629764432355 1220.5629348746245 1732.5030409427218 1204.3504159347171 1212.4111927845327 1447.9630077245138 43296.95067410597 4337.27078370962 1613.742161475351 1214.0407974343427 1228.0871523439152 1202.1449744200902 1280.0054347514051 1212.0468319239471)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.362
Average program size in population (points): 40.362
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.243
Error (vector) diversity:			 0.245
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 27933000
--- Timings ---
Current time: 1481488502037 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq vector_integer_conj boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dup float_eq vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max vector_integer_remove vector_integer_conj float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 4.6 2.2 1.8 1.6 0.3999999999999999 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2369.3999999999996
Lexicase best mean error: 78.98
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction float_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_sub} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_shove vector_integer_pop vector_integer_empty float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec float_sub boolean_stackdepth float_mod integer_max integer_empty float_sub vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec float_sub boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 8.4 1.7999999999999998 2.8 1.6 12.6 0.19999999999999996 5.0 6.199999999999999 0.8000000000000007 4.4 3.0 62.0 3.0 18.2 25.4 28.200000000000003 1.0 0.0 40.8 569.8 1419.2 31.799999999999997 5.4 1.0 1.6 77.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2338.4
Zero cases best mean error: 77.94666
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 62 86 43 82 24 50 25 22 20 42 77 91 3 17 35 19 38 31 58 146 29 29 30 30 44 68 50 22 25)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (94 0 86 0 0 0 0 0 0 20 0 0 0 3 17 35 0 0 0 58 146 0 0 0 0 0 68 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_rot} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and})
Best program: (boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_sub integer_gte boolean_shove vector_integer_pop float_rot vector_integer_subvec vector_integer_replacefirst boolean_dup boolean_dup boolean_xor boolean_shove in1 boolean_dup_items float_lt float_dup_times integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items float_lte boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and)
Partial simplification: (in1 vector_integer_pushall integer_gte boolean_xor boolean_shove in1 integer_yankdup vector_integer_pushall integer_dup integer_yankdup integer_dup_items integer_add boolean_dup_times integer_add float_frominteger)
Errors: [0.0 3.2 0.0 16.4 9.8 0.2 0.4 13.6 7.2 14.0 1.8000000000000007 15.2 9.6 54.0 21.0 23.0 11.2 41.6 85.2 7.0 2.0 36.8 244.8 1355.2 81.2 11.6 20.0 0.6 50.8 0.8]
Total: 2138.2000000000003
Mean: 71.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 361052.31020681496
Median total errors in population: 3128.520720045033
Error averages by case: (1182.7213669565645 1195.886574519502 1182.741205599362 1193.6326991663568 1187.6939880247603 1191.7755775282278 1191.858858062122 1193.299886465872 1182.8366411170462 1221.0723816977259 1193.554754232794 1207.4265022767543 1185.839861154195 1898.4210384475018 19748.526623662103 1200.0469567269 1201.188343489458 1201.4511487789289 2130.891668028491 1184.327878176374 1192.3454733827161 1483.3786426554168 302316.0556805053 4218.246528924197 1727.7754547156433 1193.8643097293639 1210.2174313941657 1181.9546488186568 1261.4364139157299 1191.8416686630367)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.892
Average program size in population (points): 40.891
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.235
Error (vector) diversity:			 0.243
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 29129760
--- Timings ---
Current time: 1481488510781 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq vector_integer_conj boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (in1 vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_frominteger float_yankdup integer_dup float_eq integer_dec vector_integer_eq boolean_dup_items boolean_stackdepth float_mod float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 4.6 2.2 1.8 1.6 0.3999999999999999 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2369.3999999999996
Lexicase best mean error: 78.98
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq vector_integer_conj boolean_not vector_integer_pushall boolean_dup_items vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (in1 float_dup_times vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dup float_eq boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 4.6 2.2 1.8 1.6 0.3999999999999999 6.2 9.0 7.199999999999999 0.8000000000000007 8.6 17.0 222.0 8.0 17.2 16.6 4.799999999999997 1.0 0.0 55.8 29.80000000000001 1856.2 24.200000000000003 2.5999999999999996 4.0 1.6 60.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2369.3999999999996
Zero cases best mean error: 78.98
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 42 101 40 56 34 47 33 26 22 53 76 69 24 25 47 17 34 29 59 136 26 28 26 29 54 73 47 19 23)
Population mean number of elite cases: 1.38
Count of perfect (error zero) individuals by case: (87 0 101 0 0 0 0 0 0 22 0 0 0 24 25 47 0 0 0 59 136 0 0 0 0 0 73 0 0 0)
Population mean number of perfect (error zero) cases: 0.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and})
Best program: (boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_sub integer_yankdup boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec integer_add boolean_dup boolean_dup boolean_xor boolean_shove in1 boolean_dup_items float_lt float_dup_times integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup float_eq float_flush integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items float_lte boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and)
Partial simplification: (vector_integer_empty in1 boolean_dup_items vector_integer_pushall integer_dup integer_yankdup integer_dup_items integer_add boolean_dup_times integer_add float_frominteger)
Errors: [0.0 3.2 0.0 16.4 9.8 0.2 0.4 13.6 7.2 14.0 1.8000000000000007 15.2 9.6 54.0 21.0 23.0 11.2 41.6 85.2 7.0 2.0 36.8 244.8 1355.2 81.2 11.6 20.0 0.6 50.8 0.8]
Total: 2138.2000000000003
Mean: 71.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 85781.55648533144
Median total errors in population: 3133.973639593127
Error averages by case: (1132.7896038062447 1156.7323881398345 1142.8237519914178 1142.1901667292175 1137.9916762214937 1161.7758801595253 1161.827249870453 1163.6257602184144 1142.9223119515018 1163.9228653122166 1143.3768188795207 1152.1349633769407 1145.8653436950876 1507.4921441409317 10405.046768722053 1148.552748103718 1152.5147596854208 1150.1041785566765 1612.2434065536056 1144.1585200804686 1162.5035871784487 1387.8443711582863 38982.45321220824 3953.6311098049523 1431.5543810536012 1141.8898623442262 1153.6044872632503 1131.9637446973456 1206.1267461511434 1161.8936772773316)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 29.80000000000001 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.618
Average program size in population (points): 40.616
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.252
Error (vector) diversity:			 0.255
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 30318300
--- Timings ---
Current time: 1481488519903 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction float_max} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup})
Lexicase best program: (float_gt boolean_and vector_integer_flush float_pop in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_lte vector_integer_reverse 5 integer_lte boolean_not vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_max boolean_frominteger vector_integer_remove boolean_dup vector_integer_shove integer_inc float_yankdup vector_integer_pushall vector_integer_yank integer_dup float_max float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup)
Lexicase best partial simplification: (in1 integer_yankdup vector_integer_pushall 5 integer_lte boolean_shove in1 boolean_frominteger vector_integer_remove boolean_dup vector_integer_pushall integer_dec boolean_stackdepth integer_max float_frominteger)
Lexicase best errors: [0.0 8.8 0.0 2.4000000000000004 0.20000000000000018 2.8 2.6 12.6 1.2 3.0 9.2 1.8000000000000007 3.4000000000000004 23.0 202.0 7.0 16.2 39.6 6.799999999999997 0.0 7.0 31.799999999999997 324.2 7081.8 73.8 9.4 11.0 2.6 227.2 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 8113.6
Lexicase best mean error: 270.45334
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction float_max} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup})
Zero cases best program: (float_gt boolean_and vector_integer_flush float_pop in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_lte vector_integer_reverse 5 integer_lte boolean_not vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_max boolean_frominteger vector_integer_remove boolean_dup vector_integer_shove integer_inc float_yankdup vector_integer_pushall vector_integer_yank integer_dup float_max float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup)
Zero cases best partial simplification: (in1 vector_integer_pushall float_lte integer_lte boolean_shove integer_stackdepth in1 boolean_frominteger vector_integer_remove boolean_dup vector_integer_pushall float_max integer_dec boolean_stackdepth integer_max float_frominteger integer_max)
Zero cases best errors: [0.0 8.8 0.0 2.4000000000000004 0.20000000000000018 2.8 2.6 12.6 1.2 3.0 9.2 1.8000000000000007 3.4000000000000004 23.0 202.0 7.0 16.2 39.6 6.799999999999997 0.0 7.0 31.799999999999997 324.2 7081.8 73.8 9.4 11.0 2.6 227.2 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 8113.6
Zero cases best mean error: 270.45334
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 61 104 33 76 31 49 26 24 23 39 72 74 38 20 64 24 34 26 71 131 25 1 18 1 50 60 49 31 30)
Population mean number of elite cases: 1.36
Count of perfect (error zero) individuals by case: (73 0 104 0 0 0 0 0 0 23 0 0 0 38 20 64 0 0 0 71 131 0 0 0 0 0 60 0 0 0)
Population mean number of perfect (error zero) cases: 0.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_rot boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger boolean_stackdepth float_mod boolean_not float_frominteger integer_max integer_empty vector_integer_remove boolean_stackdepth boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_rot boolean_dup_times integer_empty boolean_invert_second_then_and boolean_not integer_empty boolean_stackdepth float_frominteger float_inc)
Errors: [1.0 1.2000000000000002 2.0 11.4 4.8 2.8 2.6 15.6 1.2 8.0 3.1999999999999993 2.1999999999999993 3.4000000000000004 6.0 59.0 6.0 15.2 25.4 31.200000000000003 4.0 1.0 37.8 222.2 1716.2 28.799999999999997 2.4000000000000004 2.0 2.6 74.8 2.2]
Total: 2296.2000000000003
Mean: 76.54
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 79580.2466955805
Median total errors in population: 3127.6756750422182
Error averages by case: (1112.7959916257864 1116.0928436329034 1122.7956487520269 1122.1795834850625 1116.5098409490413 1121.7353422045092 1121.8098013890262 1113.4977772526781 1122.8057446271778 1138.583010822298 1123.5776285465327 1129.8055797454533 1135.7844265667188 1421.6670695735081 7798.456488309864 1125.6950076066908 1133.2797834925898 1129.5210016033348 1506.3014060732617 1123.895508573702 1122.407129237357 1311.935654082935 31721.459819128697 8472.71185651371 1398.471296918755 1132.7778603975885 1132.4479438823887 1131.9020457673157 1187.5587570110963 1131.7848478086657)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.012
Average program size in population (points): 41.01
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.26
Error (vector) diversity:			 0.264
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 31518660
--- Timings ---
Current time: 1481488528809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_shove vector_integer_pop integer_min float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor integer_dec float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_inc integer_lte)
Lexicase best partial simplification: (integer_lt in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger float_inc)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 4.0 17.2 26.4 29.200000000000003 2.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2336.8
Lexicase best mean error: 77.89333
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_shove vector_integer_pop integer_min float_sin vector_integer_replacefirst integer_lt boolean_dup boolean_xor integer_dec float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_inc integer_lte)
Zero cases best partial simplification: (in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec vector_integer_eq boolean_stackdepth integer_max float_frominteger float_inc)
Zero cases best errors: [1.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 4.0 17.2 26.4 29.200000000000003 2.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 76.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2336.8
Zero cases best mean error: 77.89333
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 66 91 42 55 32 42 29 24 26 48 68 69 25 22 51 25 35 27 70 131 19 3 20 24 59 76 42 22 31)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (78 0 91 0 0 0 0 0 0 26 0 0 0 25 22 51 0 0 0 70 131 0 0 0 0 0 76 0 0 0)
Population mean number of perfect (error zero) cases: 0.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_or} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult boolean_shove in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean float_sin vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub boolean_or float_frominteger)
Partial simplification: (vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall vector_integer_flush integer_yankdup integer_mod integer_pop float_frominteger integer_dec boolean_or)
Errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Total: 2328.2000000000003
Mean: 77.60667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 73620.18943983206
Median total errors in population: 3133.973639593127
Error averages by case: (1142.939192884924 1156.2170756751348 1142.8425124448315 1151.3309650741644 1146.046515200438 1161.6443324766665 1151.7798585394555 1163.910214415931 1152.7537180842469 1167.0334283211919 1153.8461533223472 1158.9989588274777 1155.752302409646 1428.1540814997072 8398.882083903263 1155.1995662881322 1163.8458217727082 1161.354955196481 1503.8414313166622 1143.676539433243 1162.3403676813123 1393.3742239466221 29007.932330603933 3875.569266687627 1399.217258945803 1152.2211822877782 1161.113551921843 1141.8452785448678 1214.7470486827453 1151.7792234430044)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.385
Average program size in population (points): 40.383
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.255
Error (vector) diversity:			 0.259
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 32700210
--- Timings ---
Current time: 1481488537180 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_xor 5 float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (5 in1 vector_integer_pushall integer_yankdup 5 integer_add vector_integer_yank float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup float_inc)
Lexicase best errors: [8.0 5.2 6.0 0.40000000000000036 5.8 1.8 1.6 1.4 4.2 5.0 2.1999999999999993 3.8000000000000007 0.40000000000000036 55.0 250.0 0.0 11.2 17.4 48.8 8.0 0.0 47.8 413.2 1907.2 75.8 9.6 4.0 6.6 74.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2976.4
Lexicase best mean error: 99.21333
Lexicase best size: 46
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (boolean_eq integer_empty vector_integer_first float_mult in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 60 81 44 80 20 43 39 21 26 51 57 62 45 25 74 28 44 23 60 104 21 28 26 20 45 67 44 23 26)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (83 0 81 0 0 0 0 0 0 26 0 0 0 45 25 74 0 0 0 60 104 0 0 0 0 0 67 0 0 0)
Population mean number of perfect (error zero) cases: 0.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 2, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_mod} {:close 0, :instruction float_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_yank} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_sub})
Best program: (boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth vector_integer_concat integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_yank boolean_eq vector_integer_subvec boolean_xor boolean_stackdepth integer_rot float_sin boolean_rot in1 float_rot float_mult vector_integer_rot in1 integer_mod float_lt integer_dup_times integer_rot float_fromboolean boolean_fromfloat vector_integer_pushall boolean_yank vector_integer_flush integer_yankdup vector_integer_empty integer_mod integer_pop vector_integer_replacefirst float_frominteger float_dup_items vector_integer_conj boolean_invert_first_then_and boolean_invert_second_then_and integer_flush integer_dec integer_flush boolean_rot boolean_not integer_sub)
Partial simplification: (boolean_shove vector_integer_stackdepth integer_inc vector_integer_stackdepth vector_integer_stackdepth boolean_stackdepth in1 integer_dup_times vector_integer_pushall integer_yankdup integer_mod integer_pop float_frominteger)
Errors: [0.0 3.2 0.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 1.2]
Total: 2328.2000000000003
Mean: 77.60667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 78059.50677808486
Median total errors in population: 3128.520720045033
Error averages by case: (1102.854046732415 1105.9580948489324 1102.8609470033862 1111.889828014724 1106.294007990808 1091.7672056755603 1091.9498667342104 1093.9669144901945 1093.0248038757506 1129.6905295140689 1113.6728825957114 1120.86518823791 1105.8977974569557 1432.6125400101744 8587.392721917762 1115.824822399676 1122.8043380366194 1120.1170215112306 1524.4140662154464 1093.9500960271569 1102.548198097218 1321.450119919966 34298.77588560451 3951.2237845213867 1421.4129821547017 1113.271957451813 1123.5803279350864 1091.9585414688509 1175.529542843828 1091.9477187989385)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.574
Average program size in population (points): 40.573
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.241
Error (vector) diversity:			 0.248
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 33887430
--- Timings ---
Current time: 1481488545712 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max vector_integer_remove float_frominteger float_dup)
Lexicase best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2374.3999999999996
Lexicase best mean error: 79.14667
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 41 94 42 69 34 48 27 25 30 52 53 72 31 19 59 31 36 21 76 145 21 26 35 25 53 58 51 23 21)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (86 0 94 0 0 0 0 0 0 30 0 0 0 31 19 59 0 0 0 76 145 0 0 0 0 0 58 0 0 0)
Population mean number of perfect (error zero) cases: 0.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add integer_div boolean_dup_times integer_add float_frominteger integer_max integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 integer_add integer_div integer_add float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 46.0 4.0 17.2 27.4 30.200000000000003 3.0 2.0 32.8 575.8 1418.2 29.799999999999997 4.4 1.0 0.4 76.8 0.8]
Total: 2324.000000000001
Mean: 77.46667
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 85002.83533118613
Median total errors in population: 3124.7785859118612
Error averages by case: (1172.8060852034062 1205.8732529421445 1172.7766157818862 1191.3273778261948 1187.172939800506 1211.791422994503 1201.9367875513965 1203.7197470341816 1162.725271718337 1213.1331282113238 1192.591899722309 1201.2816810165368 1165.7120884486412 1543.8511080537946 10792.609904600295 1188.373707474867 1200.944193727708 1200.748019259657 1640.2088560808359 1173.8650890765591 1192.190404650871 1448.8925739033837 36968.65921705453 3709.266407269954 1441.3542463774252 1191.6852049525116 1202.3455294999794 1171.9566322182598 1251.04918206519 1201.9867566690016)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.883
Average program size in population (points): 40.881
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.267
Error (vector) diversity:			 0.27
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 35083920
--- Timings ---
Current time: 1481488554299 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction float_inc} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_shove vector_integer_pop integer_min float_sin vector_integer_replacefirst boolean_xor boolean_dup boolean_xor integer_dec float_rot float_mult boolean_shove in1 boolean_dup_items float_min float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_inc boolean_not)
Lexicase best partial simplification: (in1 boolean_dup_items vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger float_inc)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 4.0 17.2 26.4 29.200000000000003 2.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2336.8
Lexicase best mean error: 77.89333
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction integer_add})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup integer_add)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_mod float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max boolean_not float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 52 97 44 66 19 42 23 18 41 63 65 76 32 26 60 26 34 16 64 135 29 28 25 1 51 69 43 25 29)
Population mean number of elite cases: 1.39
Count of perfect (error zero) individuals by case: (87 0 97 0 0 0 0 0 0 41 0 0 0 32 26 60 0 0 0 64 135 0 0 0 0 0 69 0 0 0)
Population mean number of perfect (error zero) cases: 0.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add integer_div boolean_dup_times integer_add float_frominteger integer_max integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 integer_add integer_div integer_add float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 46.0 4.0 17.2 27.4 30.200000000000003 3.0 2.0 32.8 575.8 1418.2 29.799999999999997 4.4 1.0 0.4 76.8 0.8]
Total: 2324.000000000001
Mean: 77.46667
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 82270.61245862351
Median total errors in population: 3117.327630167817
Error averages by case: (1222.7731037987874 1235.5291022767901 1222.8651880772984 1231.968885390429 1226.1505078357434 1281.7744327101966 1281.9559054137487 1283.705001914045 1252.5947012933962 1249.3172509344113 1233.057654806269 1240.8292165471796 1245.3369685845964 1557.6402386488503 8574.066452421468 1235.7640195622926 1242.5870999039282 1241.7324680283978 1649.0183030280823 1233.878498732781 1272.316227776944 1444.0539222789446 34796.782300674284 4001.8149184487684 1526.4810028100094 1232.8467072301564 1243.2374957084235 1271.982726026175 1296.561846276874 1241.9903114843376)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.507
Average program size in population (points): 40.507
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.27
Error (vector) diversity:			 0.275
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 36269130
--- Timings ---
Current time: 1481488562691 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 1, :instruction float_inc} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_shove vector_integer_pop integer_min float_sin vector_integer_replacefirst boolean_xor boolean_dup boolean_xor integer_dec float_rot float_mult boolean_shove in1 boolean_dup_items float_min float_dup_times vector_integer_pushall boolean_dup_items vector_integer_take vector_integer_eq boolean_stackdepth float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_inc boolean_not)
Lexicase best partial simplification: (vector_integer_replacefirst in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec boolean_stackdepth integer_max float_frominteger float_inc)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 4.0 17.2 26.4 29.200000000000003 2.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2336.8
Lexicase best mean error: 77.89333
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (integer_fromfloat integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max float_yankdup float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 57 100 25 64 27 35 26 31 29 47 70 85 26 23 59 32 29 23 65 126 22 34 22 23 68 79 37 25 32)
Population mean number of elite cases: 1.40
Count of perfect (error zero) individuals by case: (82 0 100 0 0 0 0 0 0 29 0 0 0 26 23 59 0 0 0 65 126 0 0 0 0 0 79 0 0 0)
Population mean number of perfect (error zero) cases: 0.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction float_flush} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_lt float_flush integer_lt boolean_dup boolean_xor vector_integer_first float_rot float_mult boolean_shove in1 float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_max integer_empty float_yankdup boolean_invert_second_then_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (vector_integer_empty in1 in1 boolean_dup_items vector_integer_pushall integer_add vector_integer_yank boolean_dup_times integer_empty float_yankdup boolean_invert_second_then_and float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.8 1.8 1.6 14.6 0.19999999999999996 7.0 4.199999999999999 1.1999999999999993 4.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 0.0 38.8 223.2 1717.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 1.2]
Total: 2290.2000000000003
Mean: 76.34
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 67265.97332572858
Median total errors in population: 3117.327630167817
Error averages by case: (893.0329085618039 895.9278179334699 902.8721731059607 901.8258032331039 897.2652391621813 981.9288899971336 912.0858666311177 913.7616948644778 912.646707819623 918.3243169455001 902.3591864531759 909.622812654663 905.3372530509744 1190.0461106792118 7749.0250507865585 905.9632595506205 911.6233614966345 910.9910140585326 1270.565560515141 903.7981364889653 912.4143966203548 1102.4591555655234 30162.88641556569 3603.926132600117 1150.4737919123274 901.4718038787745 910.4993656676891 972.0749583217026 968.6848540170668 892.0792875906025)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.298
Average program size in population (points): 40.296
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.275
Error (vector) diversity:			 0.281
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 37448070
--- Timings ---
Current time: 1481488571289 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 10.2 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2336.6000000000004
Lexicase best mean error: 77.886665
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_shove vector_integer_pop boolean_not vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup boolean_or float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove integer_lte boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Zero cases best partial simplification: (integer_stackdepth in1 vector_integer_remove vector_integer_pushall 5 integer_add vector_integer_yank integer_lte integer_empty boolean_stackdepth float_frominteger float_inc)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3072.8
Zero cases best mean error: 102.42667
Zero cases best size: 46
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 73 103 34 67 19 60 22 19 33 42 59 68 22 27 41 29 34 23 78 142 24 1 26 15 63 65 65 24 19)
Population mean number of elite cases: 1.37
Count of perfect (error zero) individuals by case: (73 0 103 0 0 0 0 0 0 33 0 0 0 22 27 41 0 0 0 78 142 0 0 0 0 0 65 0 0 0)
Population mean number of perfect (error zero) cases: 0.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Best program: (boolean_shove vector_integer_stackdepth boolean_shove float_dec float_div float_yankdup in1 integer_lte vector_integer_nth float_lte 5 boolean_dup float_mod integer_div vector_integer_yank boolean_dup_times boolean_eq boolean_dup boolean_dup boolean_xor vector_integer_eq 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc)
Partial simplification: (vector_integer_stackdepth in1 vector_integer_nth 5 integer_div 5 integer_add float_frominteger float_inc)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 1.7999999999999998 5.8 5.6 2.6 4.2 6.0 6.199999999999999 6.800000000000001 0.40000000000000036 42.0 243.0 2.0 15.2 9.399999999999999 43.8 3.0 4.0 47.8 398.2 112.20000000000005 78.8 6.4 8.0 5.6 17.799999999999997 5.2]
Total: 1092.2
Mean: 36.406666
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 84950.99925184551
Median total errors in population: 3133.973639593127
Error averages by case: (1272.7541766912318 1285.757932106189 1272.6110774646033 1281.732532199084 1276.7961788604152 1381.6400917967414 1351.8182752291268 1353.44895143433 1342.3857966363837 1300.1702819123539 1283.0266067263371 1290.9251715425214 1285.1673782622386 1612.6852779035005 9188.082613810657 1286.5607179851363 1292.5612686319603 1291.1809154471237 1706.244761020277 1273.6962722227963 1351.9972920235457 1504.057132125431 35397.69523830529 3981.0621589153475 1563.0927004142238 1282.0278417574414 1292.6867323462054 1311.8334942344156 1345.5195518913467 1291.7808319493138)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 38.999
Average program size in population (points): 39.998
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.285
Error (vector) diversity:			 0.291
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 38618040
--- Timings ---
Current time: 1481488579611 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 10.2 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2336.6000000000004
Lexicase best mean error: 77.886665
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 integer_sub vector_integer_pushall integer_max 5 integer_sub integer_empty float_yankdup integer_dup_times float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 10.2 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2336.6000000000004
Zero cases best mean error: 77.886665
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 54 98 32 65 24 38 26 30 36 55 67 73 39 23 64 38 38 21 66 155 19 20 19 22 79 77 42 26 33)
Population mean number of elite cases: 1.46
Count of perfect (error zero) individuals by case: (82 0 98 0 0 0 0 0 0 36 0 0 0 39 23 64 0 0 0 66 155 0 0 0 0 0 77 0 0 0)
Population mean number of perfect (error zero) cases: 0.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_lte} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Best program: (boolean_shove vector_integer_stackdepth boolean_shove float_dec float_div float_yankdup in1 integer_lte vector_integer_nth float_lte 5 boolean_dup float_mod integer_div vector_integer_yank boolean_dup_times boolean_eq boolean_dup boolean_dup boolean_xor vector_integer_eq 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc)
Partial simplification: (vector_integer_stackdepth in1 vector_integer_nth 5 integer_div 5 integer_add float_frominteger float_inc)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 1.7999999999999998 5.8 5.6 2.6 4.2 6.0 6.199999999999999 6.800000000000001 0.40000000000000036 42.0 243.0 2.0 15.2 9.399999999999999 43.8 3.0 4.0 47.8 398.2 112.20000000000005 78.8 6.4 8.0 5.6 17.799999999999997 5.2]
Total: 1092.2
Mean: 36.406666
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 68268.19455426137
Median total errors in population: 3117.0900900056295
Error averages by case: (1042.8875221680858 1045.8205142321087 1042.8227236343928 1040.7080613524292 1036.440388240005 1061.8879314049225 1042.001940929746 1043.3127302874807 1022.6991940805209 1055.3430791518338 1051.566643984695 1048.3664843942722 1025.469145538082 1317.6009434989112 7374.4932564988 1045.1228331226225 1062.08655408523 1055.0034061224892 1382.8761987918297 1033.603136947944 1042.2083936352888 1236.6340132791804 27350.579116101086 4203.584064169848 1291.6282150502634 1042.249590034534 1059.3411667519483 1042.1478084051073 1117.7658431405036 1051.943655227365)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.773
Average program size in population (points): 40.772
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.284
Error (vector) diversity:			 0.287
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 39811230
--- Timings ---
Current time: 1481488588142 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty float_dec in1 vector_integer_pushall integer_max 5 boolean_xor integer_sub integer_empty integer_dup_times float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 10.2 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2336.6000000000004
Lexicase best mean error: 77.886665
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 integer_yankdup vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub integer_empty integer_dup_times float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 10.2 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2336.6000000000004
Zero cases best mean error: 77.886665
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 71 95 37 65 26 32 21 24 35 52 52 61 43 17 63 33 30 29 74 146 26 28 29 28 65 65 46 30 27)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (76 0 95 0 0 0 0 0 0 35 0 0 0 43 17 63 0 0 0 74 146 0 0 0 0 0 65 0 0 0)
Population mean number of perfect (error zero) cases: 0.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger})
Best program: (float_yankdup in1 integer_sub integer_sub integer_yankdup boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_sub integer_yankdup boolean_shove vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst integer_add float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_sub integer_yankdup integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 4.0 29.4 4.8 0.2 0.4 30.6 1.8 14.0 1.8000000000000007 15.2 6.4 74.0 56.0 19.0 12.2 26.4 50.2 2.0 2.0 32.8 572.8 918.2 193.2 27.6 25.0 0.6 67.8 0.8]
Total: 2191.0
Mean: 73.03333
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 82416.44097167399
Median total errors in population: 3117.327630167817
Error averages by case: (1052.9769448341683 1066.1718729099282 1053.057471962451 1062.7715488883532 1056.6617345774796 1101.7996162778206 1071.9020979719796 1073.4461538530566 1062.5560811733317 1082.597434391917 1062.2088152932831 1072.846775501165 1065.5997762168938 1438.7134146456272 9530.549247885529 1067.904696356665 1072.0825390702605 1074.3828999170537 1535.6656238052192 1063.9221554896856 1072.3890700070558 1307.5411391965426 38517.41562877766 4037.0921171704913 1374.9608223893501 1063.3809976229 1074.3912120775678 1091.9580688917388 1137.691036988485 1071.8039775304142)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.907
Average program size in population (points): 40.906
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.282
Error (vector) diversity:			 0.286
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41008440
--- Timings ---
Current time: 1481488596378 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items float_frominteger float_yankdup float_eq integer_dec integer_dec boolean_stackdepth integer_max float_frominteger float_yankdup)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 103 97 39 59 29 36 26 28 31 37 48 73 33 25 53 25 31 34 80 167 25 34 33 29 72 65 49 13 27)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (76 0 97 0 0 0 0 0 0 31 0 0 0 33 25 53 0 0 0 80 167 0 0 0 0 0 65 0 0 0)
Population mean number of perfect (error zero) cases: 0.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_inc} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_eq} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove vector_integer_pop float_inc float_sin vector_integer_replacefirst integer_lt boolean_dup vector_integer_concat vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items float_frominteger float_sub integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove boolean_eq float_yankdup float_dup boolean_frominteger)
Partial simplification: (boolean_shove float_rot float_mult in1 vector_integer_pushall boolean_dup_items float_frominteger integer_empty integer_max 5 integer_sub boolean_dup_times integer_empty boolean_invert_second_then_and integer_empty boolean_stackdepth float_frominteger)
Errors: [1.0 5.2 1.0 5.4 1.2000000000000002 1.8 1.6 9.6 3.2 2.0 9.2 3.8000000000000007 5.6 0.0 65.0 0.0 20.2 13.600000000000001 25.200000000000003 1.0 0.0 43.8 223.2 1717.2 21.200000000000003 0.40000000000000036 1.0 1.6 63.8 1.2]
Total: 2249.0
Mean: 74.96667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 87991.85180825989
Median total errors in population: 3121.7824081873314
Error averages by case: (1112.6029057899932 1115.7693059470837 1112.736044013846 1122.9952609103752 1116.78451144512 1131.6281900475883 1111.714762809318 1113.4051857321347 1112.346873054497 1142.7738664163624 1123.535872198234 1133.2446677637251 1115.7989589913986 1508.6188323759095 10403.921426215022 1128.054333587485 1133.585996164099 1130.4728252923064 1621.7754221102364 1113.7735405268709 1112.4127293551073 1365.2845479696318 41656.80674984338 4085.6332700591934 1474.0996295101631 1124.869381265913 1136.2366129107963 1131.788827913526 1187.5520997657638 1111.6291782749327)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.679
Average program size in population (points): 40.678
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.267
Error (vector) diversity:			 0.272
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 42198810
--- Timings ---
Current time: 1481488605598 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty vector_integer_replacefirst in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger integer_empty float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (boolean_xor vector_integer_empty in1 float_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 76 86 37 80 29 29 30 27 28 59 60 71 35 24 57 32 38 26 68 152 21 27 26 28 67 71 42 28 22)
Population mean number of elite cases: 1.46
Count of perfect (error zero) individuals by case: (79 0 86 0 0 0 0 0 0 28 0 0 0 35 24 57 0 0 0 68 152 0 0 0 0 0 71 0 0 0)
Population mean number of perfect (error zero) cases: 0.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_inc} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove vector_integer_pop float_inc float_sin vector_integer_replacefirst integer_lt boolean_dup vector_integer_concat vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items float_frominteger float_sub integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (in1 vector_integer_pushall boolean_dup_items float_frominteger integer_empty integer_max 5 integer_sub boolean_dup_times integer_empty float_yankdup boolean_invert_second_then_and integer_empty boolean_stackdepth float_frominteger)
Errors: [1.0 5.2 1.0 5.4 1.2000000000000002 1.8 1.6 9.6 3.2 2.0 9.2 3.8000000000000007 5.6 0.0 65.0 0.0 20.2 13.600000000000001 25.200000000000003 1.0 0.0 43.8 223.2 1717.2 21.200000000000003 0.40000000000000036 1.0 1.6 63.8 1.2]
Total: 2249.0
Mean: 74.96667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 166878.69917523713
Median total errors in population: 3117.327630167817
Error averages by case: (1142.6986897989004 1145.6161061920243 1142.7700066466084 1142.7892261691125 1146.1879111598107 1151.762667383176 1151.904889669484 1153.3293657770778 1152.6096617433059 1158.9090433829865 1143.5234681235704 1150.4174677920207 1155.5618185177975 1474.575536368836 7918.599838330634 1153.3033409070813 1155.5792065616545 1165.8713116274319 1541.9158721395365 1153.6181751072036 1152.4868652358775 1349.9738088833217 32447.248865490154 94103.48438899324 1415.456685432968 1142.9947133227167 1151.7764157959884 1151.9198257241198 1320.0266922004448 1141.7873107612372)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.119
Average program size in population (points): 41.116
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.285
Error (vector) diversity:			 0.291
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 43402380
--- Timings ---
Current time: 1481488614768 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 76 92 26 71 13 34 35 21 49 43 49 92 41 22 60 20 37 23 74 154 25 35 25 27 82 72 44 31 2)
Population mean number of elite cases: 1.46
Count of perfect (error zero) individuals by case: (87 0 92 0 0 0 0 0 0 49 0 0 0 41 22 60 0 0 0 74 154 0 0 0 0 0 72 0 0 0)
Population mean number of perfect (error zero) cases: 0.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_inc} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove vector_integer_pop float_inc float_sin vector_integer_replacefirst integer_lt boolean_dup vector_integer_concat vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items float_frominteger float_sub integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (float_rot in1 vector_integer_pushall boolean_dup_items float_frominteger integer_empty integer_max 5 integer_sub boolean_dup_times integer_empty boolean_invert_second_then_and integer_empty boolean_stackdepth float_frominteger)
Errors: [1.0 5.2 1.0 5.4 1.2000000000000002 1.8 1.6 9.6 3.2 2.0 9.2 3.8000000000000007 5.6 0.0 65.0 0.0 20.2 13.600000000000001 25.200000000000003 1.0 0.0 43.8 223.2 1717.2 21.200000000000003 0.40000000000000036 1.0 1.6 63.8 1.2]
Total: 2249.0
Mean: 74.96667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 80348.21289137995
Median total errors in population: 3117.327630167817
Error averages by case: (1102.8210514040895 1106.07809645683 1102.879752672635 1112.499669966814 1106.5558528529202 1111.8353235903248 1111.994197601572 1123.392247907026 1102.5387414749596 1129.6390724332207 1113.1604751850987 1121.2688182723489 1095.5113166362864 1445.9345460901193 8807.778355632581 1115.280430488869 1123.9310757539272 1118.596116112467 1545.6173925375294 1103.8418133153805 1102.3599254876692 1326.4157854360594 36224.41191402426 3975.2991464704323 1415.7194709412893 1113.1685052161538 1123.4172604766054 1091.976300584989 1172.4413290826335 1101.8489072749776)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 39.866
Average program size in population (points): 40.864
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.275
Error (vector) diversity:			 0.281
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 44598360
--- Timings ---
Current time: 1481488623565 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub vector_integer_take integer_empty integer_dup_times float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec float_eq integer_dec boolean_stackdepth integer_max float_frominteger integer_empty)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 50
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 94 101 34 85 23 34 20 23 39 73 65 77 39 24 61 32 36 23 69 163 28 39 17 29 74 75 44 21 14)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (86 0 101 0 0 0 0 0 0 39 0 0 0 39 24 61 0 0 0 69 163 0 0 0 0 0 75 0 0 0)
Population mean number of perfect (error zero) cases: 0.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction float_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup vector_integer_concat boolean_yankdup float_lte integer_div integer_shove vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max vector_integer_remove boolean_stackdepth boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 integer_sub vector_integer_pushall integer_div integer_shove float_frominteger boolean_stackdepth float_frominteger integer_max float_yankdup float_inc)
Errors: [0.0 2.2 2.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 5.199999999999999 1.1999999999999993 5.4 5.0 220.0 5.0 16.2 26.4 2.799999999999997 3.0 1.0 54.8 31.80000000000001 1417.2 26.200000000000003 4.6 6.0 1.6 75.8 0.19999999999999996]
Total: 1938.8
Mean: 64.62666
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 3.595989945294744E8
Median total errors in population: 3121.7824081873314
Error averages by case: (1212.7434779990194 1216.917218013219 1212.817770934876 1226.3187758428846 1221.075379109313 1221.817293599786 1211.916204711743 1213.4699119660163 1212.4973952757764 1451.766875165451 1225.8732839331726 1274.6623009142015 1215.2096038561806 32904.715120382185 4.000779358977251E7 1289.6372542403317 1233.8744741339376 1230.831304271701 51072.4624229198 1223.8244893198184 1212.450733721807 21689.380784720517 3.194402936518134E8 12662.292406839084 3991.9674655436816 1223.9222048839608 1322.7894376111703 1211.9558756342383 1308.2696096578557 1211.8288117065467)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.271
Average program size in population (points): 41.267
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.279
Error (vector) diversity:			 0.284
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 45806490
--- Timings ---
Current time: 1481488632191 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty vector_integer_subvec in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_pop vector_integer_empty in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty float_yankdup integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup boolean_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.6000000000004
Zero cases best mean error: 77.72
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 75 115 24 57 30 37 34 26 38 52 69 61 36 34 52 35 41 21 73 162 20 30 23 16 82 77 54 24 30)
Population mean number of elite cases: 1.51
Count of perfect (error zero) individuals by case: (83 0 115 0 0 0 0 0 0 38 0 0 0 36 34 52 0 0 0 73 162 0 0 0 0 0 77 0 0 0)
Population mean number of perfect (error zero) cases: 0.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_first float_rot boolean_shove integer_dup vector_integer_shove boolean_or vector_integer_stackdepth boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_rot float_shove float_lte vector_integer_pushall float_eq float_flush integer_dec vector_integer_eq boolean_invert_second_then_and float_mod integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_frominteger)
Partial simplification: (boolean_shove in1 vector_integer_pushall integer_rot integer_dec integer_max 5 integer_div float_frominteger)
Errors: [3.0 4.2 3.0 7.6 4.2 0.2 0.4 0.3999999999999999 1.8 12.0 12.2 12.8 6.4 48.0 222.0 8.0 21.2 15.399999999999999 42.8 3.0 2.0 53.8 226.2 118.20000000000005 75.8 11.4 13.0 0.4 23.799999999999997 0.8]
Total: 953.9999999999998
Mean: 31.8
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 83262.8245807524
Median total errors in population: 3133.9268083146812
Error averages by case: (1282.695888137706 1296.1363993381296 1282.6455128902576 1281.5900175443328 1286.4415119542123 1291.691855445285 1281.8236597556215 1273.6102753979467 1272.3368288204163 1299.5977547163186 1282.6340334451759 1290.0080169904577 1275.2436361680518 1602.116326481375 9305.870538691634 1295.703482932991 1293.8523725944601 1289.2748456745096 1691.6492257023551 1273.7277354233674 1282.2696462839233 1495.91465547145 34041.407010770265 3957.54240957425 1545.4680230170109 1291.8816714127488 1291.9418830488326 1271.7991962697613 1344.2082277217605 1291.741939077918)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.226
Average program size in population (points): 41.222
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.283
Error (vector) diversity:			 0.288
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 47013270
--- Timings ---
Current time: 1481488640561 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Lexicase best partial simplification: (vector_integer_empty float_div float_yankdup in1 vector_integer_pushall float_yankdup integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 83 119 29 53 32 29 19 24 43 67 70 94 36 24 61 13 33 35 74 152 24 26 20 23 92 82 40 27 29)
Population mean number of elite cases: 1.56
Count of perfect (error zero) individuals by case: (105 0 119 0 0 0 0 0 0 43 0 0 0 36 24 61 0 0 0 74 152 0 0 0 0 0 82 0 0 0)
Population mean number of perfect (error zero) cases: 0.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (boolean_stackdepth integer_rot float_sin float_yankdup in1 integer_yankdup integer_sub vector_integer_pushall float_eq float_flush integer_dec vector_integer_eq boolean_invert_second_then_and float_mod integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_max 5 integer_div float_frominteger)
Errors: [3.0 4.2 3.0 8.6 4.2 0.2 0.4 3.4 1.8 12.0 12.2 12.8 6.4 49.0 61.0 8.0 21.2 15.399999999999999 44.8 2.0 2.0 11.799999999999997 311.2 118.20000000000005 81.8 12.4 13.0 0.4 23.799999999999997 0.8]
Total: 848.9999999999998
Mean: 28.3
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 70438.20407810227
Median total errors in population: 3133.9268083146812
Error averages by case: (1242.7173343480963 1235.5940279404056 1232.655806383744 1241.3514472341558 1245.547176109712 1231.7533913475677 1231.912918918529 1233.5332807347695 1232.359975458563 1251.7970965811514 1241.9697780751608 1247.8564746568516 1234.9236977036996 1500.3603629799136 5173.612265396426 1252.754946509123 1263.1074197151331 1249.560789668708 1561.9156486506342 1233.5212306500362 1232.2987186947792 1382.2533312081985 26522.603608512036 4163.797450814248 1523.9147433226572 1242.151059581133 1250.8355659176475 1241.8791915587306 1307.857818491401 1231.807520939112)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.875
Average program size in population (points): 41.872
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.301
Error (vector) diversity:			 0.309
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 48239520
--- Timings ---
Current time: 1481488649066 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Lexicase best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 45
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec boolean_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq float_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty)
Zero cases best partial simplification: (boolean_yank integer_empty in1 float_lt vector_integer_pushall boolean_dup_items integer_mult boolean_stackdepth float_frominteger float_yankdup float_eq integer_dec integer_dec vector_integer_eq boolean_stackdepth integer_max integer_empty float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 5.6 2.2 2.8 1.6 1.4 5.2 10.0 8.2 1.8000000000000007 7.6 18.0 223.0 8.0 18.2 15.600000000000001 5.799999999999997 0.0 0.0 55.8 28.80000000000001 1857.2 23.200000000000003 1.5999999999999996 3.0 1.6 61.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2374.3999999999996
Zero cases best mean error: 79.14667
Zero cases best size: 47
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 92 112 31 68 24 32 29 23 24 59 65 72 32 20 49 30 42 23 61 135 23 17 22 24 77 78 39 31 27)
Population mean number of elite cases: 1.47
Count of perfect (error zero) individuals by case: (111 0 112 0 0 0 0 0 0 24 0 0 0 32 20 49 0 0 0 61 135 0 0 0 0 0 78 0 0 0)
Population mean number of perfect (error zero) cases: 0.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction 5} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_div float_yankdup in1 integer_yankdup integer_max integer_yankdup integer_lt vector_integer_pushall float_yankdup integer_dec vector_integer_eq boolean_invert_second_then_and float_mod integer_max 5 in1 boolean_swap integer_fromboolean integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_max 5 integer_div float_frominteger)
Errors: [3.0 4.2 3.0 8.6 4.2 0.2 0.4 3.4 1.8 12.0 12.2 12.8 6.4 49.0 61.0 8.0 21.2 15.399999999999999 44.8 2.0 2.0 11.799999999999997 311.2 118.20000000000005 81.8 12.4 13.0 0.4 23.799999999999997 0.8]
Total: 848.9999999999998
Mean: 28.3
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 80512.09017634389
Median total errors in population: 3133.973639593127
Error averages by case: (1462.53247171503 1405.585742156164 1392.5665533527558 1401.1414374364929 1465.7750450733076 1411.705790505781 1401.852902636207 1413.363786256142 1392.3325058279231 1415.693831648047 1402.2329378576176 1409.2151516940837 1395.359450612512 1698.843380909956 7093.812506730099 1474.028244918083 1483.739228953794 1409.2652776775788 1767.7788798818376 1383.7739866527631 1402.166311313734 1641.858716748862 29967.553072742223 4009.289706221271 1682.0954674149084 1401.565691048303 1411.0508396595892 1461.7858705618548 1462.367541714312 1391.7578464227668)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.3
Average program size in population (points): 41.297
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.298
Error (vector) diversity:			 0.306
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 49448520
--- Timings ---
Current time: 1481488657420 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub vector_integer_take integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.6000000000004
Zero cases best mean error: 77.72
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 81 113 38 69 26 35 24 17 30 73 65 70 27 35 50 23 37 33 68 151 20 23 25 27 71 74 42 23 18)
Population mean number of elite cases: 1.49
Count of perfect (error zero) individuals by case: (99 0 113 0 0 0 0 0 0 30 0 0 0 27 35 50 0 0 0 68 151 0 0 0 0 0 74 0 0 0)
Population mean number of perfect (error zero) cases: 0.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup vector_integer_concat float_shove float_lte integer_div integer_shove vector_integer_remove float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dec vector_integer_eq boolean_stackdepth boolean_xor integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_div integer_shove integer_dec boolean_stackdepth integer_max float_frominteger)
Errors: [2.0 4.2 0.0 8.4 5.2 0.2 0.6 3.4 1.8 9.0 7.199999999999999 0.8000000000000007 6.4 3.0 222.0 3.0 18.2 28.4 4.799999999999997 1.0 2.0 56.8 29.80000000000001 1419.2 24.200000000000003 2.5999999999999996 4.0 0.4 77.8 0.8]
Total: 1947.2
Mean: 64.90667
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 76858.58782647482
Median total errors in population: 3137.1059270199557
Error averages by case: (1432.714723492517 1336.013121559443 1332.6229678014704 1341.471025873736 1435.3776272763155 1321.7149123373056 1321.7952098666515 1343.7084514348944 1322.2446243833192 1354.1796609508453 1341.4721942444069 1348.5741577884553 1315.1432387112607 1621.3390921188784 6806.27393281025 1445.1964974704208 1441.7534539640335 1349.3110067684427 1686.017679186933 1323.5612461239243 1322.215398667033 1603.9731773048977 28178.713326978355 4116.232755079693 1593.5452985369595 1341.5721376594172 1349.6500998771344 1411.770115640449 1408.690122774655 1311.740569792862)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.725
Average program size in population (points): 41.723
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.302
Error (vector) diversity:			 0.31
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 50670270
--- Timings ---
Current time: 1481488665741 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_pop vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times boolean_not float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 57 108 38 96 30 29 27 36 37 60 54 85 35 16 55 26 30 30 69 138 20 24 22 16 71 76 27 34 25)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (104 0 108 0 0 0 0 0 0 37 0 0 0 35 16 55 0 0 0 69 138 0 0 0 0 0 76 0 0 0)
Population mean number of perfect (error zero) cases: 0.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_first float_rot float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall vector_integer_nth float_lte 5 boolean_dup vector_integer_contains integer_div vector_integer_yank boolean_dup_times boolean_eq boolean_dup vector_integer_pushall boolean_xor vector_integer_first float_rot float_mult boolean_shove 5 boolean_dup float_mod integer_add vector_integer_yank float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 integer_div 5 integer_add float_frominteger)
Errors: [2.0 0.7999999999999998 2.0 3.5999999999999996 0.7999999999999998 4.8 4.6 1.6 3.2 7.0 7.199999999999999 7.800000000000001 1.4000000000000004 43.0 244.0 3.0 16.2 10.399999999999999 44.8 2.0 3.0 48.8 399.2 113.20000000000005 79.8 7.4 9.0 4.6 18.799999999999997 4.2]
Total: 1098.2
Mean: 36.606667
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 80241.24732575806
Median total errors in population: 3133.9268083146812
Error averages by case: (1472.5893959805564 1336.4129012597996 1332.751966553901 1341.790875621262 1474.8177148687744 1331.7798088562408 1321.8817852566747 1343.3776659460302 1332.473364305703 1355.0354444244006 1343.5625441633533 1350.578859164109 1335.5314202221568 1658.8208930491821 6510.7727687120705 1485.1073363021485 1483.69709908038 1351.559491561116 1722.0765784277605 1343.723997955508 1332.058644579813 1624.3387674761382 31119.54149027093 4366.0035842208345 1684.9662078145707 1342.9886111787641 1352.5634480828335 1461.8819633409007 1406.791781187634 1321.7709158946855)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.874
Average program size in population (points): 41.872
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.295
Error (vector) diversity:			 0.301
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 51896490
--- Timings ---
Current time: 1481488673989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty in1 integer_sub vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 66 105 47 100 25 35 28 26 35 72 65 77 38 28 58 33 41 39 63 149 15 17 29 23 80 64 44 26 21)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (96 0 105 0 0 0 0 0 0 35 0 0 0 38 28 58 0 0 0 63 149 0 0 0 0 0 64 0 0 0)
Population mean number of perfect (error zero) cases: 0.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_inc} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 0, :instruction float_mod} {:close 0, :instruction integer_yank} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove vector_integer_pop float_inc float_sin vector_integer_replacefirst in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup vector_integer_contains integer_yankdup float_yankdup vector_integer_pushall integer_dec float_mod integer_yank vector_integer_conj integer_add float_frominteger integer_max integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_yankdup integer_dec integer_yank integer_add float_frominteger integer_max 5 integer_sub float_frominteger)
Errors: [6.0 8.2 3.0 4.4 8.2 5.2 5.4 8.4 2.2 1.0 10.2 4.800000000000001 4.6 1.0 66.0 1.0 21.2 30.4 24.200000000000003 3.0 3.0 44.8 25.80000000000001 1423.2 20.200000000000003 1.4000000000000004 0.0 4.4 64.8 5.8]
Total: 1811.8000000000002
Mean: 60.393333
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 83906.93053300965
Median total errors in population: 3133.895071245046
Error averages by case: (1412.6401876993016 1346.870061917748 1342.7443404593441 1341.244358867833 1415.7663119942354 1371.799904803342 1361.9046934680794 1373.314595303701 1352.4595995690577 1349.0694405934264 1342.0380404682924 1340.4047004589327 1355.109172812903 1671.0798404884345 8793.332785680821 1426.2415869741678 1430.4891567522757 1339.2368524521432 1738.5699813966216 1343.6335620404732 1372.077145279346 1624.340187147513 33129.44096926629 3879.892255667908 1600.8228902887613 1342.4204128931394 1342.213755245865 1421.8903635949707 1394.0702024426275 1351.8131769822658)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.008
Average program size in population (points): 42.007
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.288
Error (vector) diversity:			 0.295
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 53126730
--- Timings ---
Current time: 1481488682517 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Lexicase best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_occurrencesof float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 45
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Zero cases best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_occurrencesof float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Zero cases best partial simplification: (vector_integer_empty vector_integer_subvec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup float_dup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 80 113 38 110 22 30 28 24 36 71 66 70 40 30 67 34 34 26 65 159 25 34 31 31 85 57 32 22 24)
Population mean number of elite cases: 1.57
Count of perfect (error zero) individuals by case: (86 0 113 0 0 0 0 0 0 36 0 0 0 40 30 67 0 0 0 65 159 0 0 0 0 0 57 0 0 0)
Population mean number of perfect (error zero) cases: 0.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 1, :instruction float_stackdepth})
Best program: (boolean_shove integer_dec float_div float_yankdup boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup 5 float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup float_yankdup boolean_or integer_yank vector_integer_conj integer_add float_frominteger integer_max integer_empty integer_max 5 boolean_xor integer_add float_frominteger integer_max integer_dec float_stackdepth)
Partial simplification: (in1 vector_integer_pushall 5 in1 integer_yankdup integer_yank vector_integer_conj integer_add float_frominteger integer_max 5 boolean_xor integer_add float_frominteger)
Errors: [4.0 1.7999999999999998 6.0 14.4 1.7999999999999998 4.8 4.6 1.6 12.2 11.0 0.1999999999999993 5.199999999999999 14.6 9.0 56.0 9.0 11.2 20.4 34.2 7.0 3.0 34.8 35.80000000000001 1413.2 30.200000000000003 8.6 10.0 5.6 54.8 4.2]
Total: 1829.2
Mean: 60.97333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 76815.16183018037
Median total errors in population: 3132.2316670877053
Error averages by case: (1332.5056929322259 1236.3439564853109 1272.6832729169291 1241.8907035185368 1324.6045308348753 1251.7286002555568 1261.7865481117678 1253.4209608798874 1242.284526116191 1245.2948252375254 1252.13226083808 1242.0194419759544 1245.361985661446 1589.2794214480914 5490.131442857011 1335.7231043545612 1341.539973555996 1239.724028042231 1636.178291221571 1253.5327279438948 1252.2645097064828 1455.50966562098 31857.260261077467 4000.4122155037885 1596.8693981918552 1234.4504942600433 1254.170643271203 1341.7948889831125 1292.5682605989796 1241.6951977789618)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.916
Average program size in population (points): 41.916
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.292
Error (vector) diversity:			 0.301
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 54354210
--- Timings ---
Current time: 1481488691080 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Lexicase best program: (boolean_shove vector_integer_pop float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec boolean_invert_second_then_and float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Lexicase best partial simplification: (boolean_xor vector_integer_empty float_dec float_div float_yankdup in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup vector_integer_remove boolean_stackdepth float_frominteger float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 47
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec vector_integer_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_dup float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq vector_integer_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items float_yank boolean_stackdepth float_frominteger float_yankdup float_eq float_flush integer_dec integer_dec vector_integer_eq boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.4 0.7999999999999998 2.8 1.6 11.6 0.19999999999999996 4.0 7.199999999999999 1.8000000000000007 4.4 2.0 63.0 2.0 19.2 25.4 27.200000000000003 0.0 0.0 41.8 568.8 1420.2 32.8 6.4 2.0 1.6 78.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2339.4
Zero cases best mean error: 77.98
Zero cases best size: 47
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 67 126 42 110 31 42 32 28 31 62 78 74 32 24 53 31 31 43 73 156 19 29 28 17 66 84 51 21 19)
Population mean number of elite cases: 1.62
Count of perfect (error zero) individuals by case: (116 0 126 0 0 0 0 0 0 31 0 0 0 32 24 53 0 0 0 73 156 0 0 0 0 0 84 0 0 0)
Population mean number of perfect (error zero) cases: 0.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 1, :instruction float_stackdepth})
Best program: (boolean_shove integer_dec float_div float_yankdup boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup 5 float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div float_yankdup in1 integer_yankdup float_yankdup boolean_or integer_yank vector_integer_conj integer_add float_frominteger integer_max integer_empty integer_max 5 boolean_xor integer_add float_frominteger integer_max integer_dec float_stackdepth)
Partial simplification: (in1 vector_integer_pushall 5 in1 integer_yankdup integer_yank vector_integer_conj integer_add float_frominteger integer_max 5 integer_add float_frominteger)
Errors: [4.0 1.7999999999999998 6.0 14.4 1.7999999999999998 4.8 4.6 1.6 12.2 11.0 0.1999999999999993 5.199999999999999 14.6 9.0 56.0 9.0 11.2 20.4 34.2 7.0 3.0 34.8 35.80000000000001 1413.2 30.200000000000003 8.6 10.0 5.6 54.8 4.2]
Total: 1829.2
Mean: 60.97333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 61681.264058551926
Median total errors in population: 3117.0900900056295
Error averages by case: (1062.469553105421 966.3611036102941 992.6803237847978 990.300756409028 1074.7288073165496 1011.7446870431208 1021.7791717647882 1003.6836508009726 1012.4649721874301 1003.5811123937884 1002.0057964714996 998.0146663509996 1025.4226376522995 1271.986114389544 5647.4064589211575 1075.7056911282486 1091.9440493759962 1010.1025604802937 1305.9283134086736 993.5188762343306 1012.059819738081 1213.9249826903308 24075.018348153466 3463.5498942984354 1214.8318670879275 991.703438777779 998.6026275018213 1091.8172758141914 1056.2290723949359 1001.6974292658484)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.036636664790277884 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.442
Average program size in population (points): 42.442
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.291
Error (vector) diversity:			 0.303
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 55597470
--- Timings ---
Current time: 1481488700408 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty})
Zero cases best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec vector_integer_subvec vector_integer_yank integer_lt boolean_rot integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_dup float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq vector_integer_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty)
Zero cases best partial simplification: (vector_integer_subvec integer_empty in1 float_dup_times vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dec float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.4 0.7999999999999998 2.8 1.6 11.6 0.19999999999999996 4.0 7.199999999999999 1.8000000000000007 4.4 2.0 63.0 2.0 19.2 25.4 27.200000000000003 0.0 0.0 41.8 568.8 1420.2 32.8 6.4 2.0 1.6 78.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2339.4
Zero cases best mean error: 77.98
Zero cases best size: 47
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 85 121 38 102 1 30 1 23 33 46 74 83 37 24 60 27 36 42 78 146 16 31 23 26 67 83 43 26 26)
Population mean number of elite cases: 1.53
Count of perfect (error zero) individuals by case: (98 0 121 0 0 0 0 0 0 33 0 0 0 37 24 60 0 0 0 78 146 0 0 0 0 0 83 0 0 0)
Population mean number of perfect (error zero) cases: 0.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 1, :instruction float_lte} {:close 0, :instruction integer_swap} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_gt} {:close 1, :instruction vector_integer_last} {:close 0, :instruction boolean_or} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_set} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_first float_rot float_mult boolean_shove 5 integer_lte float_sin vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_swap vector_integer_nth boolean_invert_first_then_and float_gt vector_integer_last boolean_or vector_integer_nth float_lte 5 boolean_dup float_mod integer_div vector_integer_yank vector_integer_set boolean_eq boolean_dup boolean_dup boolean_xor vector_integer_eq 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and boolean_frominteger float_inc)
Partial simplification: (5 float_sin vector_integer_contains integer_stackdepth in1 integer_swap vector_integer_nth float_lte 5 boolean_dup integer_div 5 integer_add vector_integer_remove integer_add float_frominteger float_inc)
Errors: [4.0 2.8 4.0 1.5999999999999996 2.8 6.8 6.6 3.6 5.2 5.0 5.199999999999999 5.800000000000001 0.5999999999999996 41.0 242.0 1.0 14.2 8.399999999999999 42.8 4.0 5.0 46.8 397.2 111.20000000000005 77.8 5.4 7.0 6.6 16.799999999999997 6.2]
Total: 1087.4
Mean: 36.246666
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 66616.1925236472
Median total errors in population: 3117.0900900056295
Error averages by case: (1302.5264634347366 1235.689195958081 1242.6035850589378 1239.450044508812 1294.6439621643156 1241.6964698509425 1241.8229951456692 1233.4616666990125 1232.2251043606161 1251.2230417450896 1243.1857562937244 1246.8614212625523 1235.443557579472 1508.127883364152 5492.4100789849645 1304.9777357460437 1304.2722833189164 1248.5858120246216 1538.8920542786436 1243.1892291367076 1232.1128238437548 1424.050856872832 22606.5842283909 3673.190425969159 1461.9386329232443 1241.5229325951502 1247.951055657763 1301.7579387248218 1304.0876398294001 1241.7076479242564)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.781
Average program size in population (points): 41.781
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.301
Error (vector) diversity:			 0.31
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 56820900
--- Timings ---
Current time: 1481488709260 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (boolean_xor vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 78 128 48 93 28 36 14 20 33 63 77 64 36 37 58 27 46 23 86 172 23 23 26 38 80 91 41 21 28)
Population mean number of elite cases: 1.64
Count of perfect (error zero) individuals by case: (107 0 128 0 0 0 0 0 0 33 0 0 0 36 37 58 0 0 0 86 172 0 0 0 0 0 91 0 0 0)
Population mean number of perfect (error zero) cases: 0.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_dup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_dup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_frominteger})
Best program: (float_gt boolean_and vector_integer_flush vector_integer_flush float_pop in1 integer_yankdup vector_integer_swap integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_rot boolean_dup_times boolean_or vector_integer_conj integer_add float_frominteger float_rot in1 float_frominteger float_rot in1 vector_integer_dup float_yankdup vector_integer_pushall vector_integer_contains float_lte integer_max integer_shove in1 vector_integer_dup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_remove float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_add float_frominteger in1 float_frominteger float_rot vector_integer_dup float_yankdup vector_integer_pushall vector_integer_contains integer_max integer_shove in1 vector_integer_dup float_yankdup vector_integer_pushall float_yankdup integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_remove float_frominteger)
Errors: [2.0 7.2 2.0 3.5999999999999996 4.2 0.2 0.4 3.4 1.8 8.0 6.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 17.2 17.6 3.799999999999997 2.0 8.0 55.8 30.80000000000001 1418.2 25.200000000000003 4.4 5.0 0.6 59.8 0.8]
Total: 1945.0
Mean: 64.833336
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 72032.33698310549
Median total errors in population: 3117.0900900056295
Error averages by case: (1202.3761571444836 1115.8923035757598 1112.5620698491105 1120.5211019095132 1215.2546668124915 1161.7051257695318 1141.7465756711229 1143.737181329205 1162.1147837517537 1125.7949916879354 1121.5555652042658 1119.4831890338178 1158.2840093645111 1431.8665627930936 6996.666520876786 1216.4204804035678 1212.1253412441279 1129.2795330791348 1482.1840280620295 1143.4515025751193 1152.1822230710036 1381.0716257766235 29136.794230884178 3678.7233238454987 1366.1026214395843 1114.965304248794 1120.2168016450714 1251.706621495553 1175.9450294675767 1141.607511094361)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.156
Average program size in population (points): 42.156
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.294
Error (vector) diversity:			 0.301
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 58055580
--- Timings ---
Current time: 1481488717977 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (in1 float_yankdup vector_integer_pushall integer_dup_items integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times float_frominteger integer_max float_yankdup float_min float_inc float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction float_mult} {:close 1, :instruction float_dec} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty})
Zero cases best program: (float_div float_yankdup integer_empty vector_integer_first float_rot float_mult float_dec in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items vector_integer_dup float_yank boolean_stackdepth float_mod float_mod float_frominteger float_yankdup integer_dup float_eq float_flush integer_dec integer_dup float_eq vector_integer_flush integer_dec vector_integer_eq boolean_stackdepth float_mod integer_max integer_empty float_yankdup vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty)
Zero cases best partial simplification: (integer_empty in1 vector_integer_pushall boolean_dup_items boolean_stackdepth float_frominteger float_yankdup integer_dec float_eq integer_dec boolean_stackdepth integer_max float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.4 0.7999999999999998 2.8 1.6 11.6 0.19999999999999996 4.0 7.199999999999999 1.8000000000000007 4.4 2.0 63.0 2.0 19.2 25.4 27.200000000000003 0.0 0.0 41.8 568.8 1420.2 32.8 6.4 2.0 1.6 78.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2339.4
Zero cases best mean error: 77.98
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 95 136 46 96 31 40 20 24 23 63 88 64 35 27 49 28 38 30 73 174 23 22 28 31 81 95 39 19 24)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (93 0 136 0 0 0 0 0 0 23 0 0 0 35 27 49 0 0 0 73 174 0 0 0 0 0 95 0 0 0)
Population mean number of perfect (error zero) cases: 0.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_dup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_dup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_frominteger})
Best program: (float_gt boolean_and vector_integer_flush vector_integer_flush float_pop in1 integer_yankdup vector_integer_swap integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_rot boolean_dup_times boolean_or vector_integer_conj integer_add float_frominteger float_rot in1 float_frominteger float_rot in1 vector_integer_dup float_yankdup vector_integer_pushall vector_integer_contains float_lte integer_max integer_shove in1 vector_integer_dup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_remove float_frominteger)
Partial simplification: (vector_integer_flush float_pop in1 vector_integer_pushall boolean_or vector_integer_conj integer_add float_frominteger in1 float_frominteger in1 vector_integer_dup float_yankdup vector_integer_pushall vector_integer_contains integer_max integer_shove vector_integer_dup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_remove float_frominteger)
Errors: [2.0 7.2 2.0 3.5999999999999996 4.2 0.2 0.4 3.4 1.8 8.0 6.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 17.2 17.6 3.799999999999997 2.0 8.0 55.8 30.80000000000001 1418.2 25.200000000000003 4.4 5.0 0.6 59.8 0.8]
Total: 1945.0
Mean: 64.833336
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 71590.63519903472
Median total errors in population: 3117.0900900056295
Error averages by case: (1262.430290768673 1185.7032834316062 1162.7217067391032 1190.7373210791357 1264.8521177325924 1171.856398777936 1161.8846064729316 1164.0072851912958 1142.1891868557427 1174.6015768883335 1191.414945434852 1168.9903239281102 1129.9074480788354 1474.1448074080001 6258.293842562217 1275.9219476080175 1251.7392696047582 1169.3459295447662 1514.257823036936 1163.4073427810367 1142.2030822303489 1410.4985108430742 28230.05413841086 3922.318138155188 1422.859207684875 1166.292206177742 1169.8723744890044 1251.8057129913536 1224.6003617995711 1171.7240123279396)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.799
Average program size in population (points): 41.798
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.295
Error (vector) diversity:			 0.302
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 59279550
--- Timings ---
Current time: 1481488726794 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (boolean_xor vector_integer_empty float_yankdup in1 vector_integer_pushall integer_max 5 boolean_xor integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty in1 float_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger vector_integer_rot integer_empty float_yankdup boolean_stackdepth float_frominteger vector_integer_remove float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.6000000000004
Zero cases best mean error: 77.72
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 78 148 58 83 29 36 19 25 38 57 84 54 33 40 52 31 37 21 92 181 18 27 21 34 81 82 46 23 13)
Population mean number of elite cases: 1.64
Count of perfect (error zero) individuals by case: (97 0 148 0 0 0 0 0 0 38 0 0 0 33 40 52 0 0 0 92 181 0 0 0 0 0 82 0 0 0)
Population mean number of perfect (error zero) cases: 0.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction float_lte} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction boolean_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_set} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Best program: (float_lte vector_integer_reverse 5 integer_lte boolean_not vector_integer_contains boolean_shove integer_stackdepth in1 float_lte integer_max float_dup_times vector_integer_remove boolean_dup vector_integer_shove integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup 5 boolean_dup float_mod integer_div vector_integer_yank vector_integer_set boolean_eq boolean_dup boolean_dup boolean_xor vector_integer_eq 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max)
Partial simplification: (5 vector_integer_contains in1 vector_integer_remove vector_integer_pushall 5 integer_div 5 integer_add integer_add float_frominteger)
Errors: [5.0 8.8 4.0 0.5999999999999996 9.8 4.8 6.6 1.6 3.2 14.0 0.8000000000000007 6.199999999999999 1.4000000000000004 37.0 756.0 14.0 12.2 12.600000000000001 34.2 2.0 3.0 188.2 168.8 109.20000000000005 51.8 3.4000000000000004 7.0 5.6 3.799999999999997 6.2]
Total: 1481.8
Mean: 49.393333
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 63694.62723352355
Median total errors in population: 3115.961252531594
Error averages by case: (1252.4545609384509 1225.5933193170385 1182.4989072288347 1199.341458460493 1244.6330268999716 1251.8306773736524 1251.8779758205708 1243.7056839647512 1162.1746469872332 1161.5892179056727 1201.5746357666342 1156.2250340818284 1159.2506849987726 1397.4151230253 5552.834623791495 1254.3269338930988 1212.5707276749122 1159.3431346887398 1427.2277868785184 1203.2244059723093 1232.0419256434905 1349.8502495658452 21268.653520080592 3517.7732346703515 1367.595880790555 1155.4360748136637 1157.159709478121 1281.8134502783678 1212.8957025253903 1251.7149200090307)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.881
Average program size in population (points): 41.881
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.307
Error (vector) diversity:			 0.313
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 60505980
--- Timings ---
Current time: 1481488735344 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (in1 vector_integer_pushall float_yankdup integer_dup_items integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times float_frominteger integer_max float_yankdup float_min float_inc float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Zero cases best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_occurrencesof float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Zero cases best partial simplification: (vector_integer_empty vector_integer_subvec in1 integer_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger float_yankdup float_dup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 84 136 62 104 24 34 21 19 39 58 73 62 34 26 64 26 35 33 85 178 22 31 21 22 92 101 39 20 20)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (86 0 136 0 0 0 0 0 0 39 0 0 0 34 26 64 0 0 0 85 178 0 0 0 0 0 101 0 0 0)
Population mean number of perfect (error zero) cases: 0.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction float_mult} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sub} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction vector_integer_conj})
Best program: (boolean_shove integer_dup vector_integer_shove boolean_or float_mult boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items float_frominteger float_sub integer_empty integer_max 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj integer_add float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup vector_integer_conj)
Partial simplification: (boolean_shove boolean_shove in1 vector_integer_pushall boolean_dup_items float_frominteger integer_empty integer_max 5 integer_sub boolean_dup_times integer_empty boolean_invert_second_then_and integer_empty boolean_stackdepth float_frominteger)
Errors: [1.0 5.2 1.0 5.4 1.2000000000000002 1.8 1.6 9.6 3.2 2.0 9.2 3.8000000000000007 5.6 0.0 65.0 0.0 20.2 13.600000000000001 25.200000000000003 1.0 0.0 43.8 223.2 1717.2 21.200000000000003 0.40000000000000036 1.0 1.6 63.8 1.2]
Total: 2249.0
Mean: 74.96667
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 61095.781861844276
Median total errors in population: 3115.4
Error averages by case: (1272.6656462157753 1225.5807067979797 1172.7113766973896 1149.0790663664006 1274.5082994443655 1241.9207814620854 1231.9200671749024 1233.5543364572684 1152.3767838451354 1150.373461382171 1151.6743519067504 1146.3784472232219 1160.032566236275 1380.6770028562619 4774.412499933793 1283.788893473744 1243.4831965031935 1159.393337350012 1401.7496138096021 1193.1784148088711 1252.1787259273754 1371.472219770016 19574.07949152569 3526.9499857931983 1357.8939285266285 1145.9255762850487 1147.0389297827162 1291.9255590519083 1207.0832906336725 1221.7753046029386)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.004
Average program size in population (points): 42.003
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.307
Error (vector) diversity:			 0.315
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 61736100
--- Timings ---
Current time: 1481488744084 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty float_yankdup integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2331.6000000000004
Lexicase best mean error: 77.72
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Zero cases best partial simplification: (vector_integer_empty vector_integer_subvec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.6000000000004
Zero cases best mean error: 77.72
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 81 142 58 74 30 28 27 13 25 50 79 69 38 38 62 21 32 31 100 170 21 27 25 31 75 90 34 23 25)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (109 0 142 0 0 0 0 0 0 25 0 0 0 38 38 62 0 0 0 100 170 0 0 0 0 0 90 0 0 0)
Population mean number of perfect (error zero) cases: 0.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lt} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_shove float_dec float_div float_yankdup in1 integer_yankdup integer_lt vector_integer_pushall float_yankdup vector_integer_butlast float_shove float_lte 5 boolean_dup float_mod float_yankdup vector_integer_pushall float_yankdup integer_yankdup float_yankdup vector_integer_pushall boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (float_div in1 vector_integer_pushall 5 boolean_dup integer_yankdup integer_dup_items integer_add float_frominteger float_frominteger float_yankdup float_min float_inc float_inc)
Errors: [1.0 1.2000000000000002 2.0 8.4 2.8 1.8 1.6 15.6 0.19999999999999996 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 4.0 0.0 37.8 321.2 1416.2 42.8 4.4 2.0 1.6 74.8 1.2]
Total: 2101.2
Mean: 70.04
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 64515.03065966849
Median total errors in population: 3117.0900900056295
Error averages by case: (1352.5833110460399 1325.5760785624707 1282.7375356641394 1239.2648569631544 1344.9185943775296 1331.799672640886 1341.8256972097433 1333.7644899354448 1242.4249485206255 1239.8709491224868 1241.5396515986251 1236.9255624474274 1251.0701360227329 1489.471664732252 4876.678363756561 1355.3681644073913 1291.8136881737926 1248.7271413676579 1504.770537284812 1263.135277519877 1342.1747502700441 1451.646106953698 20450.77866366154 3534.2136377437137 1457.2257514586945 1238.316932450455 1237.7598829339972 1381.8749139783235 1295.1097879687518 1331.6639108957377)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.364
Average program size in population (points): 42.363
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.337
Error (vector) diversity:			 0.345
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 62977020
--- Timings ---
Current time: 1481488752559 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Lexicase best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_occurrencesof float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 boolean_xor integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger integer_max float_yankdup)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2351.2000000000003
Lexicase best mean error: 78.37334
Lexicase best size: 45
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_div} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction float_max})
Zero cases best program: (float_div boolean_shove boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_occurrencesof float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max integer_empty float_yankdup float_dup float_max)
Zero cases best partial simplification: (vector_integer_empty vector_integer_subvec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty float_yankdup integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth boolean_not float_frominteger integer_empty float_frominteger float_yankdup float_dup)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 25.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2351.2000000000003
Zero cases best mean error: 78.37334
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 90 126 49 82 26 28 22 28 29 53 73 69 42 29 59 20 38 30 83 155 33 30 17 41 79 92 33 27 14)
Population mean number of elite cases: 1.60
Count of perfect (error zero) individuals by case: (101 0 126 0 0 0 0 0 0 29 0 0 0 42 29 59 0 0 0 83 155 0 0 0 0 0 92 0 0 0)
Population mean number of perfect (error zero) cases: 0.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 1, :instruction vector_integer_set} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction float_div} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_shove} {:close 0, :instruction float_min} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Best program: (boolean_xor 5 float_yank vector_integer_indexof boolean_not vector_integer_set vector_integer_contains float_div in1 integer_lt vector_integer_pushall float_yankdup vector_integer_butlast float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_dec vector_integer_dup_items vector_integer_remove vector_integer_conj boolean_not float_frominteger float_shove float_min float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_butlast 5 integer_add float_frominteger vector_integer_dup_items float_frominteger float_min float_inc)
Errors: [0.0 2.2 1.0 9.4 3.8 0.8 0.6 2.6 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 195.0 5.0 16.2 26.4 0.20000000000000284 3.0 1.0 38.8 317.2 1417.2 66.8 4.4 4.0 0.6 75.8 0.19999999999999996]
Total: 2215.8
Mean: 73.86
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 63328.88362909809
Median total errors in population: 3117.0900900056295
Error averages by case: (1352.5797232226232 1305.5626457504345 1312.7069732078319 1209.8811112556027 1334.344750060209 1331.7022025390522 1321.8481774705974 1323.8888416034208 1212.3951808749125 1200.8684042669952 1203.2368132200481 1197.9481528957137 1217.5835677885782 1707.34754176083 3537.9221010713586 1343.8089258480643 1242.5737027565724 1220.0032091973123 1539.027401267515 1203.2087055480645 1322.0236688706984 1421.2898094698755 19875.385959029856 3923.239838931066 2124.284740767287 1206.425231484824 1203.5511140602193 1361.8247278966458 1260.742114314343 1311.6782926676392)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.609
Average program size in population (points): 41.605
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.331
Error (vector) diversity:			 0.339
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 64195290
--- Timings ---
Current time: 1481488761202 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty in1 float_yankdup vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty float_yankdup in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 81 145 49 91 19 31 17 28 27 59 91 71 31 28 49 27 34 24 98 167 21 27 18 41 76 113 49 23 22)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (98 0 145 0 0 0 0 0 0 27 0 0 0 31 28 49 0 0 0 98 167 0 0 0 0 0 113 0 0 0)
Population mean number of perfect (error zero) cases: 0.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_lte} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 0, :instruction integer_lte} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_dup_times} {:close 0, :instruction float_gte} {:close 0, :instruction float_eq} {:close 0, :instruction float_flush} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_sin} {:close 0, :instruction boolean_xor} {:close 0, :instruction float_frominteger})
Best program: (boolean_shove float_lte vector_integer_reverse 5 integer_lte float_sin vector_integer_contains boolean_shove in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_dec vector_integer_subvec integer_sub integer_min vector_integer_conj boolean_not float_dup_times float_gte float_eq float_flush integer_dec vector_integer_eq boolean_invert_second_then_and float_mod integer_max integer_empty float_yankdup float_sin boolean_xor float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_sub integer_min integer_dec integer_max float_frominteger)
Errors: [2.0 7.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 7.2 8.0 6.199999999999999 0.1999999999999993 9.6 16.0 62.0 10.0 16.2 17.6 3.799999999999997 2.0 2.0 40.8 42.80000000000001 1855.2 25.200000000000003 3.5999999999999996 5.0 0.6 59.8 0.8]
Total: 2214.6
Mean: 73.82
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 64470.566031850285
Median total errors in population: 3115.4
Error averages by case: (1372.472406625614 1395.3573568509169 1442.593116429052 1189.5489244321398 1385.0602189285837 1381.754267224635 1381.8110439509983 1413.4939254448575 1192.377767831107 1201.288424038094 1191.1184318646892 1196.9573319111837 1187.602290813495 1432.7008742455491 4825.932923218524 1384.5498804871852 1211.2749951503258 1250.3860733177194 1458.9649552062363 1203.101033439992 1371.9283508395526 1410.7649865607295 20489.448730241063 3666.096638817745 1420.2651832991648 1194.2276275490244 1198.2295240432563 1381.8373062620478 1257.7826602059636 1381.638782620971)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 40.704
Average program size in population (points): 41.704
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.332
Error (vector) diversity:			 0.34
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 65416410
--- Timings ---
Current time: 1481488769459 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (in1 vector_integer_pushall float_yankdup integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times vector_integer_conj boolean_not float_frominteger integer_max float_yankdup boolean_invert_second_then_and float_min float_inc boolean_frominteger float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty vector_integer_replacefirst float_yankdup in1 integer_yankdup vector_integer_pushall float_yankdup integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 72 135 52 94 19 35 28 22 39 48 56 72 31 30 55 15 37 29 100 159 31 48 31 34 65 70 47 27 21)
Population mean number of elite cases: 1.61
Count of perfect (error zero) individuals by case: (104 0 135 0 0 0 0 0 0 39 0 0 0 31 30 55 0 0 0 100 159 0 0 0 0 0 70 0 0 0)
Population mean number of perfect (error zero) cases: 0.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 1, :instruction vector_integer_set} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction boolean_xor} {:close 1, :instruction vector_integer_first} {:close 0, :instruction float_rot} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_shove integer_dec float_div float_yankdup vector_integer_set boolean_shove integer_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup integer_inc float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times integer_yankdup vector_integer_conj boolean_xor vector_integer_first float_rot integer_add float_frominteger boolean_frominteger float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_dup_items 5 integer_sub integer_yankdup integer_add float_frominteger float_inc float_inc)
Errors: [3.0 6.8 3.0 31.4 12.8 1.8 1.6 32.6 0.19999999999999996 17.0 3.8000000000000007 18.2 4.4 46.0 54.0 9.0 10.2 22.4 52.2 9.0 0.0 30.799999999999997 574.8 916.2 195.2 5.6 22.0 1.6 9.799999999999997 1.2]
Total: 2096.6
Mean: 69.886665
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 72076.39202882908
Median total errors in population: 3123.406906681678
Error averages by case: (1322.5902494763857 1365.892657783517 1302.67225287286 1239.5190093750236 1315.0324754894957 1381.794733589129 1381.9630597021758 1383.9728287120588 1272.4814708912727 1255.250996621057 1240.893589915121 1250.1885349478996 1268.5978780997955 1571.4684033004557 6181.694057278294 1327.549494590545 1270.1044342645546 1279.5962012865548 1592.7118700365495 1273.1439486265263 1372.0260394026589 1430.013419149008 26093.2620660302 3700.8269585183 1474.057946787318 1244.5818235215415 1250.8582440336636 1351.9756226051602 1309.922007535125 1371.7497543869856)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.065
Average program size in population (points): 42.063
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.297
Error (vector) diversity:			 0.304
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 66648360
--- Timings ---
Current time: 1481488778167 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty float_dec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 74 133 54 97 31 34 23 25 33 62 78 74 37 38 62 24 46 33 80 167 25 27 17 31 81 109 46 33 22)
Population mean number of elite cases: 1.69
Count of perfect (error zero) individuals by case: (97 0 133 0 0 0 0 0 0 33 0 0 0 37 38 62 0 0 0 80 167 0 0 0 0 0 109 0 0 0)
Population mean number of perfect (error zero) cases: 0.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction float_div} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_shove} {:close 0, :instruction float_lte} {:close 0, :instruction 5} {:close 0, :instruction boolean_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_shove} {:close 0, :instruction float_min} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Best program: (boolean_xor 5 float_yank vector_integer_indexof float_div in1 integer_lt vector_integer_pushall float_yankdup vector_integer_butlast float_shove float_lte 5 boolean_dup float_mod integer_add vector_integer_yank boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_dec vector_integer_dup_items vector_integer_remove vector_integer_conj boolean_not float_frominteger float_shove float_min float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall 5 float_mod integer_add vector_integer_yank float_frominteger vector_integer_dup_items float_frominteger float_min float_inc)
Errors: [0.0 2.2 1.0 9.4 3.8 0.8 0.6 2.6 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 195.0 5.0 16.2 26.4 0.20000000000000284 3.0 1.0 38.8 317.2 1417.2 66.8 4.4 4.0 0.6 75.8 0.19999999999999996]
Total: 2215.8
Mean: 73.86
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 63089.66815314677
Median total errors in population: 3124.022082307666
Error averages by case: (1072.818780386332 1275.8187700120388 1052.950518696698 1010.2010177227614 1094.6556765703472 1171.8586232454932 1171.9252529283285 1163.8322858378149 1042.5989352840174 1021.0371894171086 1011.2503398914442 1018.5791511322474 1038.916117434834 1266.619721983932 3966.0981468301447 1094.6226540278478 1061.9214819312347 1182.2392825445372 1287.8316925303561 1013.334954955973 1162.1621358106843 1183.8462481278227 20712.39936836201 8359.94675181833 1244.44534460889 1014.1173567843002 1018.6970224777104 1112.0038370284542 1091.1515652102812 1171.7879295549478)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.034738166866692954)
Average genome size in population (length): 41.186
Average program size in population (points): 42.186
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.317
Error (vector) diversity:			 0.322
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 67883940
--- Timings ---
Current time: 1481488786657 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (boolean_xor vector_integer_empty float_dec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 68 101 57 95 30 34 29 26 35 43 74 80 35 22 63 25 33 42 82 178 17 25 25 34 74 85 37 21 1)
Population mean number of elite cases: 1.58
Count of perfect (error zero) individuals by case: (105 0 101 0 0 0 0 0 0 35 0 0 0 35 22 63 0 0 0 82 178 0 0 0 0 0 85 0 0 0)
Population mean number of perfect (error zero) cases: 0.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 6} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_eq integer_mult vector_integer_eq vector_integer_flush 6 vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj in1 boolean_swap integer_fromboolean integer_div float_eq vector_integer_pushall float_yankdup boolean_or integer_yank vector_integer_conj integer_add float_frominteger)
Partial simplification: (vector_integer_stackdepth in1 vector_integer_pushall integer_dup_items boolean_dup_items integer_eq integer_mult float_frominteger boolean_dup_times in1 integer_fromboolean vector_integer_pushall float_yankdup integer_yank integer_add float_frominteger)
Errors: [1.0 3.2 5.0 9.4 2.8 0.2 0.4 13.6 7.2 6.0 34.8 0.1999999999999993 9.6 4.0 61.0 4.0 12.2 27.4 29.200000000000003 3.0 2.0 39.8 570.8 918.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1878.3999999999999
Mean: 62.613335
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 64266.070563792644
Median total errors in population: 3122.6000000000004
Error averages by case: (1302.6475527805374 1475.5173771503116 1282.704925943183 1268.6915443969208 1314.9015665048105 1321.807392832873 1321.8126482405225 1323.6978991517162 1282.3488628484579 1280.1404487321877 1270.5431929445715 1278.2463364383088 1289.6989183398484 1499.9146347647818 5072.058956839282 1324.6309804743944 1300.1117204461448 1458.8533427918444 1522.35557879366 1273.09324218483 1322.0686265620748 1424.635684022739 19313.51302050539 3767.8099831990667 1450.2747777670586 1272.0072795598217 1276.9293250581554 1321.937747702458 1341.352190375641 1311.7648064411142)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.677
Average program size in population (points): 41.676
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.326
Error (vector) diversity:			 0.331
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 69104250
--- Timings ---
Current time: 1481488795304 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_dec integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty vector_integer_replacefirst in1 vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger integer_max)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_dec integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty float_yankdup in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger vector_integer_remove float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 82 105 69 88 19 45 22 25 33 53 79 76 36 30 70 21 33 43 74 174 26 36 25 33 69 81 51 28 28)
Population mean number of elite cases: 1.65
Count of perfect (error zero) individuals by case: (92 0 105 0 0 0 0 0 0 33 0 0 0 36 30 70 0 0 0 74 174 0 0 0 0 0 81 0 0 0)
Population mean number of perfect (error zero) cases: 0.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction boolean_eq} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 6} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction float_eq} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_stackdepth integer_fromfloat boolean_eq vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_eq integer_mult vector_integer_eq vector_integer_flush 6 vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj in1 boolean_swap integer_fromboolean integer_div float_eq vector_integer_pushall float_yankdup boolean_or integer_yank vector_integer_conj integer_add float_frominteger)
Partial simplification: (vector_integer_stackdepth in1 integer_yankdup vector_integer_pushall float_yankdup float_yankdup integer_dup_items boolean_dup_items integer_eq integer_add float_frominteger boolean_dup_times in1 integer_fromboolean vector_integer_pushall float_yankdup integer_yank integer_add float_frominteger)
Errors: [1.0 3.2 5.0 9.4 2.8 0.2 0.4 13.6 7.2 6.0 34.8 0.1999999999999993 9.6 4.0 61.0 4.0 12.2 27.4 29.200000000000003 3.0 2.0 39.8 570.8 918.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1878.3999999999999
Mean: 62.613335
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 61604.67713075822
Median total errors in population: 3115.4
Error averages by case: (1223.003396337539 1465.7965325811565 1173.0044896619456 1149.0960532844515 1214.8637199525974 1241.8807670497913 1231.9828523015872 1233.9144648677325 1152.6005402909059 1160.6976310546872 1151.571458307075 1157.519512103714 1158.8011511514287 1394.72968691178 4770.215785755925 1225.127934052775 1216.7067968262668 1420.4180419332724 1411.4557796366494 1143.5072248185802 1242.1476969273754 1376.1572838054367 19599.975605320316 3768.474217385513 1347.9506857277001 1142.5927056517046 1157.188061127844 1212.0538882750318 1229.4059321632835 1231.8372354942428)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 41.085
Average program size in population (points): 42.085
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.318
Error (vector) diversity:			 0.324
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 70336800
--- Timings ---
Current time: 1481488803898 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times float_frominteger integer_max float_yankdup float_min float_inc float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction float_shove} {:close 0, :instruction float_min} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_shove float_gt boolean_and vector_integer_flush float_pop in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty vector_integer_remove vector_integer_conj vector_integer_dup float_frominteger float_rot in1 boolean_dup_items float_lt float_dup_times float_shove float_min float_yankdup integer_add boolean_stackdepth boolean_not float_frominteger integer_max integer_empty float_yankdup float_dup boolean_frominteger float_inc integer_lte)
Zero cases best partial simplification: (in1 vector_integer_pushall boolean_empty float_frominteger boolean_dup_items boolean_stackdepth float_frominteger float_inc)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 38
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (113 66 126 77 107 27 32 14 28 29 53 63 87 31 28 58 35 37 39 88 188 23 35 23 34 67 78 34 32 22)
Population mean number of elite cases: 1.67
Count of perfect (error zero) individuals by case: (113 0 126 0 0 0 0 0 0 29 0 0 0 31 28 58 0 0 0 88 188 0 0 0 0 0 78 0 0 0)
Population mean number of perfect (error zero) cases: 0.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (vector_integer_reverse in1 vector_integer_pushall integer_max 5 integer_sub float_frominteger integer_max float_frominteger float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 63387.99656085641
Median total errors in population: 3122.8
Error averages by case: (1392.6272740497352 1525.3956136298043 1362.766846787013 1308.5631264456497 1374.1504370405623 1451.7523226842661 1451.8061885134466 1413.5268178460651 1372.3718938632817 1318.419534946601 1310.188444498199 1316.873456122913 1367.3555378137664 1537.4499198652338 3960.1255882796 1383.775527054269 1339.4603412345505 1468.455430108941 1546.4675155249556 1343.1003604300022 1441.9373005853472 1426.486503435381 17674.33447240031 3919.4435789325116 1500.2559753733856 1310.9082253965996 1316.4859063495705 1431.9087739266063 1379.8864034916928 1441.7172442262256)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.761
Average program size in population (points): 41.761
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.329
Error (vector) diversity:			 0.334
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 71559630
--- Timings ---
Current time: 1481488812436 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_dec integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Lexicase best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2352.2000000000003
Lexicase best mean error: 78.40667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_dec integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub vector_integer_take integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth boolean_not float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 62 117 65 93 21 37 26 19 38 73 71 72 33 30 50 32 38 33 75 176 28 26 21 35 74 90 45 17 26)
Population mean number of elite cases: 1.63
Count of perfect (error zero) individuals by case: (110 0 117 0 0 0 0 0 0 38 0 0 0 33 30 50 0 0 0 75 176 0 0 0 0 0 90 0 0 0)
Population mean number of perfect (error zero) cases: 0.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_invert_first_then_and vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_max 5 integer_sub boolean_not float_frominteger integer_max float_frominteger float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 65065.75186635231
Median total errors in population: 3126.833203886758
Error averages by case: (1342.6511473676953 1565.526840416761 1302.808577295556 1279.939433933449 1344.4980459211188 1381.7597832172864 1361.7900117209067 1363.9586625373959 1292.3339366315504 1290.4720750966642 1281.4188373302302 1289.3438368068626 1289.8744629406888 1519.3565869967324 4521.2215680232375 1354.3487601298207 1320.8242646357094 1498.9758948807435 1540.4320125040747 1293.2628926181276 1352.0695238127737 1420.004600555647 19682.689702259708 3966.800362482433 1556.7567253327845 1282.8880193008501 1288.93668061497 1361.86658045417 1357.2394989976085 1361.7025415368585)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.992
Average program size in population (points): 41.99
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.314
Error (vector) diversity:			 0.321
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 72789390
--- Timings ---
Current time: 1481488820857 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_dup_items integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times float_frominteger integer_max float_yankdup float_min float_inc float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 boolean_xor integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth boolean_not float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 77 127 73 79 21 33 23 20 37 69 70 60 38 31 68 29 38 34 89 195 26 38 21 43 78 77 41 21 22)
Population mean number of elite cases: 1.68
Count of perfect (error zero) individuals by case: (99 0 127 0 0 0 0 0 0 37 0 0 0 38 31 68 0 0 0 89 195 0 0 0 0 0 77 0 0 0)
Population mean number of perfect (error zero) cases: 0.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_max 5 integer_sub vector_integer_conj float_frominteger integer_max float_frominteger integer_max float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 55490.6190283175
Median total errors in population: 3093.8632830518527
Error averages by case: (1112.7975558845462 1275.684517195653 1072.5827860801448 1049.0323580376364 1094.3691373541826 1211.6792701328743 1201.7133941447223 1173.7054589149557 1152.2728303015979 1058.6441156016872 1050.765700399009 1056.5972643521202 1136.6617909097997 1281.8153077929371 3506.0526680228227 1104.0346359789792 1099.9947444591046 1239.6428339800889 1287.331798307082 1083.0808700430744 1201.9522857442555 1171.4430204726714 17120.423696496022 3856.068830060938 1293.1851443636501 1050.414086644959 1057.2562081280353 1161.8849642811178 1127.8863554937623 1201.645398739163)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 41.348
Average program size in population (points): 42.344
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.328
Error (vector) diversity:			 0.334
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 74029830
--- Timings ---
Current time: 1481488829431 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 2, :instruction vector_integer_subvec} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc})
Lexicase best program: (boolean_shove vector_integer_subvec in1 integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_dup_items integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger boolean_dup_times float_frominteger integer_max float_yankdup float_min float_inc float_inc)
Lexicase best errors: [4.0 1.7999999999999998 0.0 0.40000000000000036 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 5.0 2.8000000000000007 3.1999999999999993 4.4 24.0 254.0 8.0 11.2 23.4 36.8 0.0 0.0 49.8 420.2 1893.2 0.7999999999999972 21.6 12.0 2.6 59.8 1.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 2847.4
Lexicase best mean error: 94.91333
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty float_dec in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 75 158 53 78 23 47 29 21 41 47 84 61 31 35 55 19 42 23 110 180 26 47 24 38 64 91 52 24 23)
Population mean number of elite cases: 1.71
Count of perfect (error zero) individuals by case: (111 0 158 0 0 0 0 0 0 41 0 0 0 31 35 55 0 0 0 110 180 0 0 0 0 0 91 0 0 0)
Population mean number of perfect (error zero) cases: 0.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_max 5 integer_sub float_frominteger integer_max float_frominteger boolean_invert_second_then_and float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 69409.29264716973
Median total errors in population: 3093.8632830518527
Error averages by case: (1322.4930254330393 1465.569029451792 1302.483140871428 1280.2974638961643 1314.6945440642037 1371.6123963177122 1361.680699955883 1373.7560514501195 1332.09646103531 1281.710922752389 1270.8397375539212 1278.4128518716295 1335.8209241348736 1568.1419501418795 4786.163486136113 1325.1227588427323 1299.9685596440072 1478.3610288987365 1592.5268710657504 1313.1260431508376 1361.92983522182 1401.9366883313367 23853.064941860084 4015.23483867538 1519.1652205660512 1270.8200197707274 1279.2152748625542 1371.7768474261593 1339.6947895253381 1341.5762442618598)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.853
Average program size in population (points): 41.852
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.322
Error (vector) diversity:			 0.331
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 75255420
--- Timings ---
Current time: 1481488837954 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction float_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_tan} {:close 0, :instruction boolean_or} {:close 0, :instruction float_min} {:close 0, :instruction float_cos} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_gte} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (float_lte boolean_shove in1 boolean_dup_items in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty vector_integer_remove vector_integer_conj vector_integer_dup float_frominteger float_rot in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_fromboolean boolean_shove integer_dup_items boolean_dup_items integer_stackdepth float_sin integer_stackdepth vector_integer_remove vector_integer_dup_times vector_integer_empty integer_yank float_lt integer_yankdup float_tan boolean_or float_min float_cos boolean_yankdup vector_integer_swap vector_integer_flush float_gte boolean_dup_times)
Lexicase best partial simplification: (in1 in1 vector_integer_pushall boolean_empty vector_integer_remove vector_integer_conj float_frominteger float_rot boolean_dup_items float_dup_times float_fromboolean float_sin integer_stackdepth vector_integer_empty float_lt float_tan float_min float_cos float_gte)
Lexicase best errors: [1.0 3.2 0.0 9.4 4.330459972016328 0.2366366647902779 0.036636664790277884 2.963363335209722 1.363363335209722 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 10.344531405364613 17.2 27.85969769413186 29.200000000000003 2.563363335209722 2.0 39.8 423.8579836156446 1418.2 30.799999999999997 4.4 0.0 0.036636664790277884 76.8 0.36336333520972214]
Lexicase best number of elite cases: 5
Lexicase best total error: 2188.756036022368
Lexicase best mean error: 72.958534
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 75 143 58 98 29 46 31 18 35 56 89 93 42 30 64 24 31 45 95 153 20 1 17 37 70 97 48 31 21)
Population mean number of elite cases: 1.71
Count of perfect (error zero) individuals by case: (109 0 143 0 0 0 0 0 0 35 0 0 0 42 30 64 0 0 0 95 153 0 0 0 0 0 97 0 0 0)
Population mean number of perfect (error zero) cases: 0.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction float_dup} {:close 0, :instruction boolean_frominteger})
Best program: (boolean_shove float_gt boolean_and vector_integer_flush float_pop in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty float_yankdup vector_integer_pushall float_yankdup boolean_or integer_dup_items 5 boolean_xor vector_integer_subvec integer_sub boolean_dup_times vector_integer_remove vector_integer_conj vector_integer_empty float_frominteger integer_max integer_empty float_yankdup vector_integer_subvec vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_yankdup float_dup boolean_frominteger)
Partial simplification: (boolean_shove in1 vector_integer_pushall boolean_empty integer_dup_items 5 integer_sub boolean_dup_times vector_integer_empty float_frominteger integer_max integer_empty float_yankdup vector_integer_conj float_frominteger integer_max integer_empty float_yankdup boolean_stackdepth float_frominteger float_yankdup)
Errors: [1.0 3.2 0.0 9.4 3.8 2.8 2.6 0.3999999999999999 1.2 6.0 5.199999999999999 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 17.2 27.4 29.200000000000003 0.0 1.0 39.8 143.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Total: 1906.6000000000001
Mean: 63.553333
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 55589.32688487316
Median total errors in population: 3093.8632830518527
Error averages by case: (1112.6604605527966 1235.6517357792793 1062.6335378234041 1059.6862260555658 1114.3404951185316 1131.6653302531454 1121.776179249521 1133.900645408777 1072.4209095004403 1069.3190846802308 1061.3773974047872 1066.648577220823 1067.9701516781042 1265.3607096581266 4420.077482730731 1122.920370393236 1091.39424467149 1211.488301476095 1287.0283506975989 1053.2165642230352 1132.130563258398 1216.4640316535006 16984.318696994233 3739.1922012748823 1254.1447174716925 1060.781628214689 1065.9748923697762 1121.8982300944622 1141.2584190379393 1111.6267499279297)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 41.062
Average program size in population (points): 42.062
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.332
Error (vector) diversity:			 0.338
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 76487280
--- Timings ---
Current time: 1481488846725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction float_lt} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_tan} {:close 0, :instruction boolean_or} {:close 0, :instruction float_min} {:close 0, :instruction float_cos} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_gte} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (float_lte boolean_shove in1 boolean_dup_items in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty vector_integer_remove vector_integer_conj vector_integer_dup float_frominteger float_rot in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_fromboolean boolean_shove integer_dup_items boolean_dup_items integer_stackdepth float_sin integer_stackdepth vector_integer_remove vector_integer_dup_times vector_integer_empty integer_yank float_lt integer_yankdup float_tan boolean_or float_min float_cos boolean_yankdup vector_integer_swap vector_integer_flush float_gte boolean_dup_times)
Lexicase best partial simplification: (in1 in1 vector_integer_pushall boolean_empty vector_integer_remove vector_integer_conj float_frominteger in1 boolean_dup_items float_dup_times float_fromboolean float_sin integer_stackdepth float_lt float_tan float_min float_cos float_gte)
Lexicase best errors: [1.0 3.2 0.0 9.4 4.330459972016328 0.2366366647902779 0.036636664790277884 2.963363335209722 1.363363335209722 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 10.344531405364613 17.2 27.85969769413186 29.200000000000003 2.563363335209722 2.0 39.8 423.8579836156446 1418.2 30.799999999999997 4.4 0.0 0.036636664790277884 76.8 0.36336333520972214]
Lexicase best number of elite cases: 5
Lexicase best total error: 2188.756036022368
Lexicase best mean error: 72.958534
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_empty vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger vector_integer_rot integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 37
Percent parens: 0.027
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 99 135 64 65 24 55 28 25 36 51 102 69 38 23 65 23 25 34 120 157 28 30 28 26 85 98 50 18 18)
Population mean number of elite cases: 1.73
Count of perfect (error zero) individuals by case: (106 0 135 0 0 0 0 0 0 36 0 0 0 38 23 65 0 0 0 120 157 0 0 0 0 0 98 0 0 0)
Population mean number of perfect (error zero) cases: 0.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_eq} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_eq} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 6} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (boolean_shove float_dec float_div float_yankdup in1 boolean_shove in1 boolean_dup_items integer_dup_items float_dup_times integer_lte integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_dup integer_dup_items vector_integer_conj boolean_dup_items float_lt float_dup_times vector_integer_pushall integer_eq float_frominteger vector_integer_eq vector_integer_flush 6 vector_integer_conj integer_add float_frominteger float_frominteger float_frominteger integer_max boolean_dup_items float_yankdup integer_lt boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 in1 float_yankdup vector_integer_pushall float_yankdup integer_dup integer_dup_items vector_integer_conj boolean_dup_items vector_integer_pushall integer_eq float_frominteger vector_integer_flush 6 integer_add float_frominteger float_frominteger float_frominteger integer_max boolean_dup_items float_yankdup float_inc)
Errors: [0.0 2.2 1.0 10.4 2.8 1.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 37.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 2.2]
Total: 1792.2
Mean: 59.74
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 71019.90776764076
Median total errors in population: 3077.5
Error averages by case: (1342.5716651402224 1405.4536053412423 1302.4108129074148 1290.2581229073207 1354.6688401824347 1331.7047911231778 1341.7152082489838 1333.5878536604453 1322.0503015191564 1303.399805753788 1291.0001495320937 1297.899126814753 1295.0542897578714 1591.0777115480487 5986.760183348624 1355.5229230941159 1368.9945926853875 1419.7799812393553 1614.6078673283885 1283.0652710545019 1331.9637059649372 1494.1892502203964 24339.90190417306 3845.5104484742583 1531.6986829490859 1299.792124389631 1298.3669363277345 1361.8692202490474 1363.3729224083627 1321.6594692969898)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.871
Average program size in population (points): 41.869
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.332
Error (vector) diversity:			 0.337
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 77713410
--- Timings ---
Current time: 1481488855760 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_tan} {:close 0, :instruction boolean_or} {:close 0, :instruction float_min} {:close 0, :instruction float_cos} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_gte} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (float_lte boolean_shove in1 boolean_dup_items in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty vector_integer_remove vector_integer_conj vector_integer_dup float_frominteger float_rot in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_fromboolean boolean_shove integer_dup_items boolean_dup_items integer_stackdepth float_sin integer_stackdepth vector_integer_remove vector_integer_dup_times vector_integer_empty integer_yank vector_integer_first integer_yankdup float_tan boolean_or float_min float_cos boolean_yankdup vector_integer_swap vector_integer_flush float_gte boolean_dup_times)
Lexicase best partial simplification: (in1 in1 vector_integer_pushall boolean_empty vector_integer_remove vector_integer_conj float_frominteger boolean_dup_items float_dup_times float_fromboolean float_sin float_tan float_min float_cos boolean_yankdup float_gte)
Lexicase best errors: [1.0 3.2 0.0 9.4 10000 0.2366366647902779 0.036636664790277884 2.963363335209722 1.363363335209722 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.563363335209722 2.0 39.8 10000 1418.2 30.799999999999997 4.4 0.0 0.036636664790277884 76.8 0.36336333520972214]
Lexicase best number of elite cases: 5
Lexicase best total error: 21753.763363335212
Lexicase best mean error: 725.1254
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_xor} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction integer_dup_times} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_xor vector_integer_pop vector_integer_empty vector_integer_subvec vector_integer_replacefirst vector_integer_dup float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec integer_sub vector_integer_take integer_empty float_yankdup integer_dup_times vector_integer_conj boolean_not float_frominteger vector_integer_rot integer_empty float_yankdup vector_integer_remove boolean_stackdepth boolean_not float_frominteger vector_integer_remove integer_empty float_frominteger integer_max)
Zero cases best partial simplification: (vector_integer_empty in1 vector_integer_pushall integer_max 5 integer_sub integer_empty integer_dup_times float_frominteger integer_empty float_yankdup boolean_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 2.8 2.6 0.3999999999999999 1.2 6.0 26.8 0.1999999999999993 3.4000000000000004 4.0 61.0 4.0 16.2 27.4 29.200000000000003 0.0 1.0 39.8 570.8 1418.2 30.799999999999997 9.4 0.0 2.6 76.8 2.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 2352.2000000000003
Zero cases best mean error: 78.40667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 89 141 67 87 30 52 19 25 37 65 94 58 28 23 49 29 35 25 112 172 20 28 24 42 79 102 48 14 18)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (103 0 141 0 0 0 0 0 0 37 0 0 0 28 23 49 0 0 0 112 172 0 0 0 0 0 102 0 0 0)
Population mean number of perfect (error zero) cases: 0.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_max 5 integer_sub float_frominteger integer_max float_frominteger float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 64762.5325649323
Median total errors in population: 3093.8
Error averages by case: (1362.439231348449 1464.8680324425595 1362.4312145000717 1310.0699526192143 1534.2833454328354 1371.7113502754216 1381.6069515993986 1363.5274096853575 1302.142942433265 1308.712739023248 1310.61944669804 1306.1898081315062 1305.7813470100148 1540.2242788899775 3949.0491358203585 1373.0987465788123 1379.5846849500651 1452.9845677815642 1556.5263588637354 1292.8066896607943 1371.9099830072812 1470.5198298729233 19645.542884860042 3823.487857777927 1516.1868159476626 1300.764325152062 1307.170388087497 1371.746336298255 1364.9503542319544 1361.5955559521153)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.686
Average program size in population (points): 41.683
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.315
Error (vector) diversity:			 0.323
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 78933990
--- Timings ---
Current time: 1481488864425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_lte} {:close 1, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_rot} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction float_lt} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction float_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_empty} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_tan} {:close 0, :instruction boolean_or} {:close 0, :instruction float_min} {:close 0, :instruction float_cos} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_gte} {:close 1, :instruction boolean_dup_times})
Lexicase best program: (float_lte boolean_shove in1 boolean_dup_items in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_dup boolean_empty vector_integer_remove vector_integer_conj vector_integer_dup float_frominteger float_rot in1 boolean_dup_items float_lt float_dup_times vector_integer_pushall boolean_dup_items integer_mult float_fromboolean boolean_shove integer_dup_items boolean_dup_items integer_stackdepth float_sin integer_stackdepth vector_integer_remove vector_integer_dup_times vector_integer_empty integer_yank vector_integer_first integer_yankdup float_tan boolean_or float_min float_cos boolean_yankdup vector_integer_swap vector_integer_flush float_gte boolean_dup_times)
Lexicase best partial simplification: (in1 in1 vector_integer_pushall boolean_empty vector_integer_remove vector_integer_conj float_frominteger boolean_dup_items float_dup_times integer_mult float_fromboolean float_sin vector_integer_empty float_tan float_min float_cos float_gte)
Lexicase best errors: [1.0 3.2 0.0 9.4 10000 0.2366366647902779 0.036636664790277884 2.963363335209722 1.363363335209722 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.563363335209722 2.0 39.8 10000 1418.2 30.799999999999997 4.4 0.0 0.036636664790277884 76.8 0.36336333520972214]
Lexicase best number of elite cases: 5
Lexicase best total error: 21753.763363335212
Lexicase best mean error: 725.1254
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_xor} {:close 1, :instruction 5} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction boolean_not} {:close 0, :instruction float_sin} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_add} {:close 0, :instruction float_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_fromfloat} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_shove boolean_xor 5 float_yank vector_integer_indexof boolean_not float_sin in1 boolean_shove integer_fromboolean integer_shove integer_yankdup float_yankdup vector_integer_pushall float_yankdup float_yankdup vector_integer_pushall float_yankdup boolean_rot integer_dup_items vector_integer_conj integer_add float_frominteger vector_integer_empty boolean_stackdepth boolean_not float_frominteger integer_max boolean_or integer_dup_items vector_integer_conj integer_add float_frominteger boolean_dup_times vector_integer_remove vector_integer_conj boolean_not float_frominteger integer_max integer_empty boolean_fromfloat boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Zero cases best partial simplification: (5 in1 integer_shove vector_integer_pushall boolean_rot integer_dup_items integer_add float_frominteger vector_integer_empty boolean_stackdepth float_frominteger integer_max integer_dup_items integer_add float_frominteger float_frominteger boolean_fromfloat float_min float_inc float_inc)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 0.3999999999999999 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3072.8
Zero cases best mean error: 102.42667
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 67 126 63 70 17 61 24 29 28 63 85 61 38 29 68 27 39 37 87 157 24 27 20 34 77 86 60 13 26)
Population mean number of elite cases: 1.66
Count of perfect (error zero) individuals by case: (121 0 126 0 0 0 0 0 0 28 0 0 0 38 29 68 0 0 0 87 157 0 0 0 0 0 86 0 0 0)
Population mean number of perfect (error zero) cases: 0.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_reverse} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_dec} {:close 0, :instruction float_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction boolean_not} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_empty} {:close 0, :instruction float_yankdup} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_min} {:close 1, :instruction float_inc} {:close 3, :instruction 5} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction integer_lte})
Best program: (vector_integer_pop vector_integer_reverse 5 vector_integer_subvec vector_integer_replacefirst float_dec float_div float_yankdup in1 integer_yankdup integer_sub integer_yankdup float_yankdup vector_integer_pushall float_yankdup integer_max 5 boolean_xor vector_integer_subvec boolean_xor vector_integer_subvec integer_sub boolean_and vector_integer_conj boolean_not float_frominteger integer_max integer_empty float_frominteger integer_max integer_empty float_yankdup boolean_invert_second_then_and float_min float_inc 5 boolean_frominteger float_inc integer_lte)
Partial simplification: (in1 vector_integer_pushall integer_max 5 vector_integer_subvec integer_sub float_frominteger integer_max float_frominteger float_min float_inc float_inc)
Errors: [2.0 1.2000000000000002 4.0 0.40000000000000036 0.7999999999999998 2.2 1.4 6.4 4.8 2.0 10.2 3.8000000000000007 9.4 6.0 59.0 5.0 18.2 19.6 16.200000000000003 1.0 5.0 37.8 140.8 1416.2 61.8 11.4 8.0 2.4 57.8 1.8]
Total: 1916.6000000000001
Mean: 63.886665
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 63012.784798475164
Median total errors in population: 3095.6557498094926
Error averages by case: (1252.5028738457406 1375.1826716045694 1332.4718503359127 1210.265041279848 1374.6710921309752 1321.624531162697 1311.6051115790071 1313.8255889033403 1312.078431607818 1218.6295112700752 1210.224602154157 1215.6112331588208 1315.3622442008348 1435.233005668387 4036.8511577653567 1242.0601342592186 1258.726367652422 1433.0971904052149 1461.386397337311 1263.0784234067169 1331.8725069999145 1334.999172140431 19717.141771119448 3957.9375405207375 1426.4432351194534 1240.4374453146845 1217.0805315119296 1311.7100552684878 1279.1137276545292 1301.561353097175)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.03445288563430607 0.036636664790277884 0.01948499375341406 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.036636664790277884 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 40.872
Average program size in population (points): 41.869
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.337
Error (vector) diversity:			 0.347
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 80160150
--- Timings ---
Current time: 1481488873649 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
