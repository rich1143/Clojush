Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x523a7801 clojush.problems.ec_ai_demos.mean$all_errors@523a7801]
parent-selection = :epsilon-lexicase
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x523a7801 clojush.problems.ec_ai_demos.mean$all_errors@523a7801]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :epsilon-lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5f0a2638 clojush.pushgp.report$default_problem_specific_initial_report@5f0a2638]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x77cb452c clojush.pushgp.report$default_problem_specific_report@77cb452c]
random-seed = 30 -90 82 122 120 19 -67 117 -9 38 -111 -97 57 123 -41 -106
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "1f8391e7-43b8-439c-8b0b-bea781199660"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast float_mult float_tan integer_inc integer_dup_times integer_dup vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_set integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_last float_frominteger)
Errors: [2.0 7.2 1.0 3.5999999999999996 4.2 0.2 0.4 3.4 7.2 8.0 6.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 16.2 17.6 3.799999999999997 2.0 2.0 55.8 30.80000000000001 1855.2 25.200000000000003 3.5999999999999996 5.0 0.6 59.8 0.8]
Total: 2378.6
Mean: 79.28667
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 279662.09238311736
Median total errors in population: 300000
Error averages by case: (9310.218674503147 9310.474326813977 9310.21774232959 9310.725874503136 9310.296994442328 9320.094623778143 9320.097656453769 9320.21702527156 9320.152025271558 9311.086670855324 9312.42094272485 9311.175163633536 9320.628025271566 9315.915027913243 9327.886610261328 9310.691871703893 9319.343842680568 9311.88239265189 9314.333669822117 9310.19634060307 9320.25142527156 9313.948155232663 9338.813985451749 9441.706242680566 9365.871627424644 9311.788442680572 9311.56217168209 9320.098814982783 9319.889193193218 9320.106823028977)
Error minima by case: (1.0 1.2000000000000002 1.0 3.5999999999999996 0.20000000000000018 0.04085521580168275 0.11633781453677378 0.6000000000000001 0.24259227534509775 8.0 6.199999999999999 0.1999999999999993 0.40000000000000036 16.0 221.0 2.0 16.2 17.6 3.799999999999997 0.0 0.4425922753450977 9.799999999999997 30.80000000000001 1389.2 25.200000000000003 3.5999999999999996 5.0 0.11633781453677378 59.8 0.04147098480789646)
Average genome size in population (length): 26.013
Average program size in population (points): 26.997
Average percent parens in population: 0.059
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.027
Error (vector) diversity:			 0.027
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 780390
--- Timings ---
Current time: 1481489984994 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_max} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_dup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (vector_integer_yankdup float_dup vector_integer_conj vector_integer_remove in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall float_dup_items integer_pop vector_integer_subvec integer_stackdepth float_max float_mod float_rot float_yank vector_integer_replace vector_integer_yank float_mult float_tan integer_inc integer_dup_times integer_dup vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_set integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_pop integer_stackdepth float_tan integer_inc integer_dup_times in1 integer_add vector_integer_set integer_max float_frominteger)
Errors: [1.0 3.2 1.0 9.4 2.8 0.2 0.4 13.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 16.2 17.6 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 25.200000000000003 3.5999999999999996 5.0 0.6 59.8 0.8]
Total: 2319.6
Mean: 77.32
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 37450.32092124392
Median total errors in population: 3039.4
Error averages by case: (973.4019507513912 977.8613369374722 972.9519507513911 979.6456426077929 972.8119568054532 971.0936101794641 971.179940881992 972.737897107779 974.3294971077628 983.2914426078041 1099.405830464825 993.0116567956786 975.1866567956788 1126.4180304648382 1261.8119507513916 977.4847132546068 1586.982297734468 990.5883132546057 1031.0200890257217 971.8682971077703 979.4902082380322 1019.5687369374998 1812.8957568054689 2631.5754970686116 4876.581895699467 1053.3121823654087 1024.302872928763 971.3163408819772 1346.85570525056 971.3386636802632)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 60.0 2.0 1.8000000000000007 3.3999999999999986 2.799999999999997 0.0 0.0 9.799999999999997 30.80000000000001 469.20000000000005 25.200000000000003 2.4000000000000004 0.0 0.11633781453677378 6.200000000000003 0.04147098480789646)
Average genome size in population (length): 31.067
Average program size in population (points): 32.066
Average percent parens in population: 0.034
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 409
Genome diversity (% unique Plush genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.307
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1712400
--- Timings ---
Current time: 1481489991941 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_last} {:close 2, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap vector_integer_last float_cos integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger float_dup in1 integer_dec in1 integer_dup_times integer_dup_times integer_min)
Partial simplification: (in1 vector_integer_last in1 integer_dec vector_integer_nth integer_inc float_frominteger)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 4.8 0.8 0.6 2.4 0.8 7.0 27.8 0.1999999999999993 5.4 25.0 255.0 5.0 15.2 26.4 4.799999999999997 2.0 9.0 179.2 144.8 1417.2 26.200000000000003 7.4 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 2209.0
Mean: 73.63333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 46736.55679616149
Median total errors in population: 3039.4
Error averages by case: (1152.6588628096663 1135.0460628096578 1133.493862809666 1141.5378628096669 1123.1210628096665 1191.597655038885 1191.6470259946966 1145.9840628096679 1183.4864628096664 1143.6758628096661 1202.7098628096585 1145.3596628096577 1195.242462809665 1350.948862809666 1945.6628628096662 1126.528862809666 1430.4774628096536 1176.9866628096645 1290.6618628096637 1142.9998628096662 1186.2828628096663 1189.4142628096813 7082.548062809647 2640.51746280968 3944.029262809662 1213.621662809665 1181.2158628096663 1171.7562259946978 1395.7110628096789 1181.6328560819186)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.07987335076852736 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 56.0 1.0 1.8000000000000007 3.3999999999999986 2.799999999999997 0.0 0.0 0.7999999999999972 30.80000000000001 446.20000000000005 25.200000000000003 0.40000000000000036 0.0 0.11633781453677378 5.200000000000003 0.04147098480789646)
Average genome size in population (length): 33.578
Average program size in population (points): 34.578
Average percent parens in population: 0.031
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.096
Error (vector) diversity:			 0.097
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2719740
--- Timings ---
Current time: 1481489999668 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_last} {:close 2, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap vector_integer_last float_cos integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger float_dup in1 integer_dec in1 integer_dup_times integer_dup_times integer_min)
Partial simplification: (in1 vector_integer_last in1 integer_dec vector_integer_nth integer_inc float_frominteger)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 4.8 0.8 0.6 2.4 0.8 7.0 27.8 0.1999999999999993 5.4 25.0 255.0 5.0 15.2 26.4 4.799999999999997 2.0 9.0 179.2 144.8 1417.2 26.200000000000003 7.4 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 2209.0
Mean: 73.63333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 53062.70969105732
Median total errors in population: 3049.4
Error averages by case: (1173.0043731177113 1165.5995959108284 1163.6173150677703 1171.6354444031238 1173.583448609323 1271.9637292075647 1211.950813345604 1285.2072676205491 1283.301749671 1174.6067084952097 1199.1148486093139 1182.5858275526314 1259.7535496709982 1385.1801037900461 2093.713218068064 1167.5238275526356 1289.6799690502105 1213.9553339180875 1363.0465828011445 1213.3785690502182 1244.8905496709988 1224.1542374055625 11648.622526241057 4427.150718309125 2870.3325624064964 1211.4194486093181 1200.4908275526354 1211.956013345604 1379.173972108956 1202.1165598956804)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.07987335076852736 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 19.0 1.0 1.8000000000000007 2.3999999999999986 1.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 24.200000000000003 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 34.164
Average program size in population (points): 35.164
Average percent parens in population: 0.031
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.133
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3744660
--- Timings ---
Current time: 1481490007454 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap vector_integer_last integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger float_dup in1 integer_dec in1 integer_dup_times integer_dup_times integer_min)
Partial simplification: (in1 vector_integer_last in1 integer_dec vector_integer_nth integer_inc float_frominteger)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 4.8 0.8 0.6 2.4 0.8 7.0 27.8 0.1999999999999993 5.4 25.0 255.0 5.0 15.2 26.4 4.799999999999997 2.0 9.0 179.2 144.8 1417.2 26.200000000000003 7.4 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 2209.0
Mean: 73.63333
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 85857.15061905557
Median total errors in population: 3032.0
Error averages by case: (1162.5903424331857 1148.495018628659 1182.5628322565797 1162.1816300819598 1146.814470507547 1281.5601188140733 1241.6975411387932 1225.7126294392858 1292.7606373635658 1185.0967099246373 1170.2577564672774 1172.4583731636283 1288.9958844156622 1569.4178126410375 12384.86072490628 1160.2225597625115 1207.419131562529 1195.9802100232707 1642.6500929382762 1184.0746210713578 1283.6889850479042 1480.0221965914006 26033.750066145298 13127.033690169623 1772.6493842164832 1200.4363272830237 1176.3178800092921 1241.519498546516 1294.0399489548493 1241.8835445511302)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.07987335076852736 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 19.0 1.0 1.8000000000000007 2.3999999999999986 1.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 34.383
Average program size in population (points): 35.382
Average percent parens in population: 0.031
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.161
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4776150
--- Timings ---
Current time: 1481490015469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_last} {:close 2, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_yank})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap vector_integer_last float_cos integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger float_dup in1 integer_dec integer_min vector_integer_yank)
Partial simplification: (in1 vector_integer_last in1 integer_dec vector_integer_nth integer_inc float_frominteger integer_min)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 4.8 0.8 0.6 2.4 0.8 7.0 27.8 0.1999999999999993 5.4 25.0 255.0 5.0 15.2 26.4 4.799999999999997 2.0 9.0 179.2 144.8 1417.2 26.200000000000003 7.4 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 2209.0
Mean: 73.63333
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 222955.43108023054
Median total errors in population: 3049.4
Error averages by case: (1083.1204807577485 1089.5616907609249 1092.7891393386742 1071.8515194071535 1076.364278588667 1181.7865363358483 1151.7606060832507 1136.2514763114407 1173.0947968976395 1086.3837904101836 1090.1816645145839 1079.350009490975 1159.5242128716704 1341.0533149635278 7715.540811009367 1077.3705218533762 1109.7503912299544 1117.9800121250817 1361.5270135921862 1083.8250081968183 1173.6140568821668 1328.5119515712306 17188.965051826628 166437.3396232502 1696.2219292460538 1087.179034632378 1093.3181881268 1121.6954896724803 1417.3645101134125 1132.1539701706095)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.07987335076852736 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 19.0 1.0 0.1999999999999993 2.3999999999999986 1.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 35.804
Average program size in population (points): 36.804
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.185
Error (vector) diversity:			 0.188
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5850270
--- Timings ---
Current time: 1481490023661 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_last} {:close 2, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 1, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap vector_integer_last float_cos integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger float_dup in1 integer_dec in1 integer_dup_times integer_dup_times integer_min)
Partial simplification: (in1 vector_integer_last in1 integer_dec vector_integer_nth integer_inc float_frominteger integer_dec)
Errors: [3.0 1.7999999999999998 3.0 2.5999999999999996 4.8 0.8 0.6 2.4 0.8 7.0 27.8 0.1999999999999993 5.4 25.0 255.0 5.0 15.2 26.4 4.799999999999997 2.0 9.0 179.2 144.8 1417.2 26.200000000000003 7.4 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 2209.0
Mean: 73.63333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 159154.187751238
Median total errors in population: 3046.5999999999995
Error averages by case: (1112.8747063796031 1129.1910935920534 1132.556272102184 1122.4279464700512 1116.7207652705836 1221.7972967166536 1181.665522481898 1205.9126689771433 1233.0712807432324 1141.1270890664082 1126.3134036388706 1129.7446831976742 1208.2221012342766 1449.3945000537312 9709.01437362146 1129.9130006827181 1145.5482075067719 1162.93217472423 1491.2903714610663 1143.7397937248604 1213.255095422318 1425.6143501783195 26393.524569281333 90369.65741308621 1519.9822550774475 1124.8642459872847 1130.1704577775981 1171.6340067183899 1349.908099877052 1162.1200061870986)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.042178717650422304 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 19.0 0.0 0.1999999999999993 1.3999999999999986 1.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 35.886
Average program size in population (points): 36.884
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.195
Error (vector) diversity:			 0.198
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6926850
--- Timings ---
Current time: 1481490031949 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast integer_dup float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_take in1 vector_integer_rest vector_integer_butlast float_rot vector_integer_pushall float_cos 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_mult integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [2.0 3.2 1.0 3.5999999999999996 2.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 1781.6000000000001
Mean: 59.386665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 342164.10554785025
Median total errors in population: 3045.484453957632
Error averages by case: (1013.0702522839973 1038.5284948966273 1032.5968572232614 1035.9976790910068 1027.0214409912935 1121.7461994285466 1131.5748109940725 1105.621103394654 1152.9986907165262 1056.5263923707719 1046.1233357828228 1046.7364054404568 1128.8240120026844 1672.1689279061284 19065.75412638072 1029.9674330674502 1079.2792326764934 1064.4146600623922 1840.5395186598225 1093.9251483163034 1123.4582726111435 1364.3766626514443 286077.68632034934 5163.772305674431 2132.4975343318006 1038.7154316663987 1050.8976213368226 1131.5443684017973 1215.7101219758802 1082.0321871667845)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 20.0 0.0 0.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 36.602
Average program size in population (points): 37.6
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.223
Error (vector) diversity:			 0.231
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8024910
--- Timings ---
Current time: 1481490040707 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_first in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall vector_integer_concat 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank vector_integer_yank float_mult integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 70689.07273372264
Median total errors in population: 3015.2
Error averages by case: (1042.9725159275804 1018.1804517022244 1032.5159463628108 1042.3491699038227 1026.7934893863455 1101.8994905995526 1131.711356279216 1095.3772539150743 1143.0350752669506 1060.1920931167208 1042.5945902154242 1050.4934935181252 1137.249176437693 1359.9100659282126 9790.484503593367 1038.6869848233853 1115.0101293899122 1073.419475579938 1405.771709242854 1093.8393788859696 1133.2506525075873 1283.373052528833 25646.407208126766 4426.88552406711 1820.115473683368 1041.5883920249976 1050.4218419162767 1211.7476836836024 1210.6079231830888 1062.1886319259334)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 37.588
Average program size in population (points): 38.588
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.25
Error (vector) diversity:			 0.256
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9152550
--- Timings ---
Current time: 1481490049443 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_pop in1 vector_integer_occurrencesof vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove vector_integer_pushall vector_integer_replacefirst 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 73284.58381618076
Median total errors in population: 3045.3999999999996
Error averages by case: (1052.882756965912 1058.4581013201478 1072.5631596089415 1064.9417852198237 1066.9471648976269 1171.6669178903142 1121.5667245041625 1124.5759599586054 1142.6454388713844 1082.4640150765874 1067.7190326058833 1071.5997273570972 1127.513801707651 1407.2026973284865 11584.21924194898 1069.9424701758853 1149.2200552651732 1109.8505453065432 1467.9591524178502 1103.7262744943596 1123.1364038379127 1479.6618305057198 25736.22111549508 4290.231077447433 1902.4070191180897 1084.0144654814903 1071.736777684507 1161.4513245041614 1226.064435725382 1091.9943434596826)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.058879991940132825 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.04147098480789646)
Average genome size in population (length): 37.612
Average program size in population (points): 38.611
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.264
Error (vector) diversity:			 0.276
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10280910
--- Timings ---
Current time: 1481490058372 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_pop in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove integer_dup_items vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_tan integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 78939.9530601419
Median total errors in population: 2992.2
Error averages by case: (1122.7598363561358 1127.6724684628455 1112.3976981722176 1113.3020827171924 1125.9039052328278 1221.68351015575 1241.5497020954717 1224.976813527805 1232.424731959907 1136.0517433138818 1119.7642093816617 1121.002008415009 1206.941668238606 1436.3840399850792 6720.568186140434 1135.7620595539656 1151.9909413676846 1168.3218051791528 1417.670884354065 1193.307161922169 1222.9343476628667 1272.40450019331 18868.19468386525 9006.523751748535 12957.541600933664 1111.3734435974623 1126.3412691001527 1261.4741020954712 1600.7413045151573 1181.9885998983025)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.7999999999999972 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.005675189449654838)
Average genome size in population (length): 38.046
Average program size in population (points): 39.046
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.274
Error (vector) diversity:			 0.288
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11422290
--- Timings ---
Current time: 1481490067651 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_nth in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 238917.38130911824
Median total errors in population: 3015.0
Error averages by case: (1143.0704909534577 1168.8065713727199 1182.6541654802606 1154.5971079494818 1186.8182673272945 1291.8915540779847 1321.7418132500416 1304.7847584883625 1292.8948026781623 1171.2723756015114 1143.4973299950595 1160.1060990593471 1247.9355872375272 1496.7475729014982 11086.87796243545 1200.3952973099779 1168.2696640492532 1224.4652491365819 1522.0070266858909 1273.677664733074 1273.021332394339 1525.6589164108495 24903.43195455724 168249.51351698826 1771.2595450810074 1163.0719183464857 1150.4523204539437 1351.674435970512 1554.603144020969 1232.1828641669265)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 29.80000000000001 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.005675189449654838)
Average genome size in population (length): 38.667
Average program size in population (points): 39.667
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.307
Error (vector) diversity:			 0.315
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12582300
--- Timings ---
Current time: 1481490076939 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_swap in1 float_yank vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 307091.9794070197
Median total errors in population: 3046.6000000000004
Error averages by case: (1352.814653421292 1367.5366879440767 1442.4555999560728 1364.8377159442641 1396.7445697301664 1541.6787280837482 1581.5491728894262 1474.1681369196265 1532.7066868638458 1384.5688740253986 1364.128547477852 1376.4007579822576 1496.8542930045146 2184.17107593193 11249.398898655501 1428.2274531486773 1405.9565296318815 1563.5974906057388 2054.534136431968 1483.515510260244 1522.9624997133321 1665.9972435017137 80351.45895474631 172153.0811423566 3623.4065422284243 1415.791474365781 1377.3625493030238 1591.4502667347144 1882.6395503767055 1461.9836647847133)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 4.200000000000003 0.005675189449654838)
Average genome size in population (length): 38.625
Average program size in population (points): 39.623
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.328
Error (vector) diversity:			 0.338
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13741050
--- Timings ---
Current time: 1481490086291 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_shove} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_swap} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (integer_shove float_mult vector_integer_last in1 vector_integer_subvec integer_swap float_cos vector_integer_concat float_sub vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 integer_swap vector_integer_butlast vector_integer_stackdepth vector_integer_remove float_dec vector_integer_pushall vector_integer_replacefirst float_cos 5 vector_integer_dup_times in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1905618.5584879257
Median total errors in population: 3025.4
Error averages by case: (1253.1639058088003 1269.16059330209 1332.7437466644171 1248.8409091700967 1287.4486766376851 1381.916040976969 1401.8073876140757 1333.7628166577915 1382.7213264991485 1280.5989046362615 1245.3680810321846 1259.8976830204622 1367.7983447999834 2340.3592927548493 26529.44868935136 1345.370808031933 1266.3849527640439 1369.3021219856969 3246.9157369921445 1324.157105911996 1383.34478557203 2076.7029800804125 1061872.4821810531 776306.4905813386 2081.8558104087833 1273.9993809935088 1258.8637820528797 1431.7412738178177 2123.731099663888 1342.1794883337932)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.1205845018010745 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 39.552
Average program size in population (points): 40.551
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.332
Error (vector) diversity:			 0.341
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14927610
--- Timings ---
Current time: 1481490095874 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_occurrencesof vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_tan integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 343699.43809671863
Median total errors in population: 2989.6000000000004
Error averages by case: (1183.4008299816983 1187.6882802479847 1162.5455446189358 1174.1215486674187 1177.0606294567615 1261.785331204755 1331.6291432014264 1273.6712215650357 1252.7119830447234 1195.1491194221765 1180.1239903057099 1193.415263243763 1258.7929336136751 1588.800577941037 23922.81989733756 1220.3724170592025 1222.6917616822318 1245.2184932129774 2163.330769034764 1223.7718871553193 1303.308008781851 2307.453534245129 29932.871551956934 253252.35540981102 1955.3574406769205 1176.7480264236883 1185.7191191114052 1301.5793211659377 1622.9563718931568 1241.9876906531356)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 39.994
Average program size in population (points): 40.994
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.333
Error (vector) diversity:			 0.338
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16127430
--- Timings ---
Current time: 1481490105615 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 253264.11601584213
Median total errors in population: 2973.0
Error averages by case: (1123.8374960966833 1119.188693655336 1133.0027232990362 1114.0944434857436 1117.1196334555707 1212.3837904930012 1232.187029339633 1144.6074464361159 1223.2638829823654 1132.0193980036393 1125.034179527475 1120.549568908385 1237.5473052279635 1443.072800479608 22554.311199898213 1129.660933933027 1147.8478431159945 1178.5768096507752 2010.6998156668892 1174.243088209083 1223.7245789882227 2178.0761265627975 23590.11968458292 172707.93598648606 1707.4859651853785 1141.217038110166 1121.8380649113324 1242.1450788034556 1465.6917888486246 1212.6336214978348)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.041470984807896516 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 11.199999999999989 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 39.499
Average program size in population (points): 40.497
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.332
Error (vector) diversity:			 0.339
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17312400
--- Timings ---
Current time: 1481490115260 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall vector_integer_concat 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 457831.3311563154
Median total errors in population: 2969.4000000000005
Error averages by case: (1273.010180268634 1247.5521478155301 1332.474954267995 1273.7491986279742 1256.4869274636787 1301.801612226796 1391.6368673951533 1353.8497646898813 1382.6735226877443 1290.8101401426113 1273.9070143794138 1280.0402904986863 1378.180540754047 1624.0088019629572 21272.195332201438 1268.6155176864734 1298.818129708062 1320.1829837795826 2198.1670683726834 1353.5076650240999 1372.9871318622907 2235.313681867652 24535.6153130862 373447.7330632881 1858.8343788007908 1314.5271255467387 1282.3509037920803 1391.582752965568 1698.7397695865225 1321.9783755647761)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.041470984807896516 0.0013360351468790221 0.25887999194013256 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.189
Average program size in population (points): 41.188
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.338
Error (vector) diversity:			 0.341
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 18518070
--- Timings ---
Current time: 1481490125072 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_tan integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 485610.719485827
Median total errors in population: 2965.4
Error averages by case: (1113.499037975917 1087.201026779045 1132.3702053553063 1092.594713647016 1095.991425036153 1131.6897603731363 1191.567624543441 1194.1683841850722 1162.7597938008735 1106.974119974138 1111.644238850673 1099.1622477051387 1167.81341282922 1400.315797292016 21895.34825875691 1096.9689272029589 1135.2940972613737 1134.9097676582694 3060.656518319206 1133.3978720243415 1162.7486097023366 2142.8200159272224 18212.267404976956 410638.2217087788 1778.7037312763523 1141.7957155479235 1118.5302005772828 1161.5081726754122 1537.9255056002967 1171.871191188176)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.25887999194013256 0.057514420030123636 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 1.0 0.0 1.1999999999999993 1.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.183
Average program size in population (points): 41.182
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.36
Error (vector) diversity:			 0.363
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19723560
--- Timings ---
Current time: 1481490134993 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 567086.8808180818
Median total errors in population: 2973.0
Error averages by case: (1263.0754001373239 1267.422456578808 1302.3491185376945 1262.5354892420198 1265.739530241377 1271.7968122877346 1371.6382078756487 1333.4893247158918 1382.5164014372335 1275.8394610828977 1261.9008408937689 1268.3561063227007 1377.8064606394655 1559.7524268012794 15771.66451771935 1276.1912177399327 1287.460924503263 1307.862637892383 2103.2263084667184 1313.178227620443 1373.1899547652815 2036.5360674037906 17616.81129985444 495544.24415012024 1821.6564997676917 1261.571878702128 1268.7963953013223 1391.5603253556353 1986.778320750791 1261.9340553207157)
Error minima by case: (0.0 0.18935824662338163 0.0 0.048360827459086764 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.1999103740052035 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 1.0 0.0 1.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.336
Average program size in population (points): 41.334
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.354
Error (vector) diversity:			 0.362
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 20933640
--- Timings ---
Current time: 1481490144922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_swap vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall float_cos 5 float_dup in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 580546.2945838227
Median total errors in population: 2964.600000000001
Error averages by case: (1592.6218821295772 1617.2290725901646 1622.3010541040828 1590.746276162323 1585.8307359816151 1661.7778615657164 1691.6006072813548 1653.5847635706125 1722.4963572062402 1605.3561056162835 1588.9349791257716 1596.2176595737028 1717.1674876680488 1869.7899299952755 23583.61076538099 1597.1298462665422 1598.3152081430505 1632.1713876433134 1874.6383748292542 1653.1923746183809 1723.0062022828417 2901.0987713076643 19068.577195245787 491325.45158830466 1885.365741290756 1628.987091439872 1595.4704686837556 1691.5979326364259 2010.129382266015 1661.8974809064716)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.1999103740052035 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 1.0 0.0 1.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.104
Average program size in population (points): 41.1
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.342
Error (vector) diversity:			 0.349
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 22136760
--- Timings ---
Current time: 1481490155184 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_swap vector_integer_nth in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove float_swap float_dec vector_integer_pushall float_cos 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 335068.14760358713
Median total errors in population: 2946.9000000000005
Error averages by case: (1462.8065888565516 1446.9854286340922 1472.437326800431 1441.1903632504752 1426.4815309913918 1501.8646269889855 1531.7894494946759 1494.0087379575016 1532.4945585441112 1447.8752555880653 1449.8284569344146 1437.5476119886416 1527.0852921741869 1742.8777972992614 17903.428008080788 1428.6453153590667 1458.1387938282262 1457.6042319010176 1788.6871420090858 1473.538266640902 1543.0050471237955 2236.4098036973255 26934.85634968317 248680.29136038598 1735.308183149376 1459.2259833564071 1437.005673126625 1541.737515828504 1553.0262976201361 1521.9666062882402)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.1818659290470721 0.0 0.19060735569486909 0.1999999999999993 0.40000000000000036 2.0 1.0 0.0 1.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 2.799999999999997 0.13657291800043403 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.859
Average program size in population (points): 41.856
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.368
Error (vector) diversity:			 0.375
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 23362530
--- Timings ---
Current time: 1481490165188 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_pop in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall vector_integer_replacefirst 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 348373.89730325685
Median total errors in population: 2967.0
Error averages by case: (1262.9467586364933 1237.2536972108376 1262.5653484176519 1222.4699959177508 1227.1521932264818 1361.8604351936774 1371.7221499720986 1343.786368242823 1362.5534895091328 1242.6384078395429 1230.8525938230387 1239.075236223626 1336.9884913033627 1580.657823436488 29606.95620321132 1241.4355379290876 1229.0063001113808 1240.7093941653409 1619.4521308105095 1323.6511694361468 1363.0921494036904 2698.7426015840497 28659.91787025515 253153.83688290155 1470.7406494391132 1219.0259009379072 1237.8255402130485 1421.6610612048523 1323.2769177694338 1282.0440049302044)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.256
Average program size in population (points): 41.253
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.366
Error (vector) diversity:			 0.373
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 24570210
--- Timings ---
Current time: 1481490175321 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_nth in1 float_max vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 float_dup in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_mult integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 166484.87823917108
Median total errors in population: 2938.0
Error averages by case: (1183.2315257757464 1157.4849135359966 1192.840091197069 1162.712797319538 1167.0937131846988 1232.1389124721268 1262.0593024836962 1254.4213632789183 1242.9302167699907 1180.6337542852282 1175.8814797027644 1178.6878669935493 1237.330572783724 1467.1951996855519 18857.090424893388 1179.3488676745196 1193.590366930621 1185.0418833996303 1515.6092391110908 1243.8226804005735 1253.41260864106 1988.179434216219 26681.885923069498 86580.95250418836 1552.3127692585833 1195.6043937862255 1179.5640213585098 1271.970324564967 1289.5248548571471 1222.3262333525954)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 13.199999999999989 80.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.0013360351468790221 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.422
Average program size in population (points): 41.421
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.402
Error (vector) diversity:			 0.41
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 25782870
--- Timings ---
Current time: 1481490185484 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_shove in1 vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove vector_integer_pushall 5 float_dup in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 250061.72776946108
Median total errors in population: 2899.8
Error averages by case: (1382.9201042133764 1386.939030362534 1392.7412134301262 1391.1767046881198 1386.8173375504784 1431.782812373391 1451.7406932340248 1414.35790444871 1432.6730142387291 1410.78109258322 1391.1892668268306 1398.9397016497448 1436.860623627293 1717.6364520993043 18050.419798477502 1398.9133285165374 1405.6731979410433 1409.8195048834884 1765.187813854582 1403.614830142615 1453.1673840493077 2080.31791985832 25591.37728617502 166625.419656452 1596.217186013753 1400.3709645704503 1396.5971463298526 1461.664833336502 1584.4226162166785 1411.9883513150394)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.2829419696157931 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.04147098480789646)
Average genome size in population (length): 39.29
Average program size in population (points): 40.288
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.37
Error (vector) diversity:			 0.375
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 26961570
--- Timings ---
Current time: 1481490195772 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_items})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_dup_items)
Partial simplification: (vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 404052.5755460637
Median total errors in population: 2887.3999999999996
Error averages by case: (1183.2256560916192 1188.4012880530195 1202.8478630197535 1183.104051296433 1177.1883992446826 1282.0338852109205 1241.9142414271803 1204.406047910073 1232.7292657543665 1200.9029814400863 1184.0050125353055 1189.1697564695291 1237.8446018707768 1499.8109882449319 15664.331885443427 1190.0913550968157 1211.2046593079847 1227.6638483751021 1525.977912642859 1193.7103823449165 1243.3592051965204 1783.563833590199 23910.71651200853 329886.00289223844 1494.3177063023375 1202.2472102088807 1187.5367712215027 1281.8333101390956 1610.214473010251 1232.219550361316)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.04147098480789646)
Average genome size in population (length): 39.611
Average program size in population (points): 40.608
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.378
Error (vector) diversity:			 0.387
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 28149900
--- Timings ---
Current time: 1481490205940 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (vector_integer_yankdup integer_dup_times vector_integer_butlast vector_integer_pushall float_dup_items integer_pop float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall float_cos float_sub 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank vector_integer_yank float_mult integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 162807.7544147783
Median total errors in population: 2860.8
Error averages by case: (1162.9010494884492 1136.9956057270974 1152.6395922768638 1141.1983884904785 1136.7619950795372 1171.8998556998556 1171.827058539414 1164.4751709747034 1172.6642612868716 1157.9495425843359 1141.1013185542338 1148.349975639275 1167.174820534048 1437.1835661639825 21130.64971063754 1137.8708355103533 1174.645914620313 1152.6715117531355 1467.864748318376 1163.6269959892559 1173.0192761012358 1831.271491371292 23110.99208051452 85675.24665032438 1344.1082106773977 1161.1140247829821 1145.783840717191 1171.7595766691184 1341.930374580851 1162.076971172181)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.04217871765042247 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.1805150062465859 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 80.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 39.935
Average program size in population (points): 40.934
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.395
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 29347950
--- Timings ---
Current time: 1481490216297 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (vector_integer_yankdup integer_dup_times vector_integer_butlast vector_integer_pushall float_dup_items integer_pop float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1760.0
Mean: 58.666668
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 137532.9574259867
Median total errors in population: 2866.6
Error averages by case: (1163.1510825220817 1156.6372493039994 1152.9130199138588 1139.3340591905787 1135.3319127529066 1211.897059986208 1201.6887936769358 1194.0571542423552 1202.7884508873583 1149.8485119988788 1139.7197839276885 1145.8383997443477 1187.2443603104807 1325.1215606220662 8092.924614912535 1143.6038877560154 1151.708094475702 1163.722073497517 1331.6946285557683 1163.4074531769543 1193.0017754875478 1272.7547894317358 12480.818949462964 84758.30322386001 1282.7354025113466 1141.6467156389854 1144.2625998125388 1201.7144283396265 1313.052205936671 1192.0351840511114)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.05449996619138653 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 3.8000000000000114 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 40.081
Average program size in population (points): 41.079
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.379
Error (vector) diversity:			 0.383
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 30550380
--- Timings ---
Current time: 1481490226745 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 527799.8643737836
Median total errors in population: 2852.1000000000004
Error averages by case: (952.8476447670862 945.9956637994123 972.5974059154984 933.0167766218377 925.4697708322607 981.6277965435879 961.4459578730315 954.0329387219822 992.3577031702064 947.9719037172634 929.8212922116111 921.0993058043671 1006.3141659384321 1401.0616185163676 8936.348618184044 935.0715227973049 940.4234935948023 948.5162729436344 1639.151025306319 913.3377110420182 1002.7613666345178 1035.1508018366567 471351.3083380967 20030.230993536923 1431.836393951864 941.5749621650639 940.4417850120433 991.4534916332868 1004.8814775999995 931.7161750163028)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 4.800000000000011 80.79999999999995 0.20000000000000284 0.17983296317335906 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 40.179
Average program size in population (points): 41.178
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.393
Error (vector) diversity:			 0.398
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 31755750
--- Timings ---
Current time: 1481490236997 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_first float_pop in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 61235.24600957444
Median total errors in population: 2865.3999999999996
Error averages by case: (1243.001034587705 1236.0474201106306 1222.775760136774 1218.308478940079 1205.2051181946165 1261.7851263701812 1281.7696272622857 1274.1922144698904 1302.559050734532 1230.5035963036453 1219.5122768875588 1225.7923950240074 1306.4790395390532 1407.8346699676856 9940.593398638886 1213.3372165338685 1228.5782962815979 1229.4193386378015 1425.3663157587605 1233.4587628247784 1312.9579095055199 1313.987628479295 13649.624996294033 3406.1060110096405 1356.425788679547 1229.6173909428037 1224.7010436178355 1301.7330917960599 1291.6025527524746 1241.970459292928)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 4.800000000000011 80.79999999999995 0.20000000000000284 0.17983296317335906 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 40.012
Average program size in population (points): 41.012
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.416
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 32956110
--- Timings ---
Current time: 1481490247441 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 215873.64113564463
Median total errors in population: 2861.8876697202677
Error averages by case: (1022.91721361574 1016.0011425465285 1002.8993179711994 999.5288210643972 1005.3821083789375 1071.6461232668164 1041.5325448774538 1083.674840887203 1082.5001959124754 1011.610043856911 1000.0232220717045 1007.1872662846794 1076.9617160085609 1207.2392707235174 8862.73506817737 1014.471473951038 1022.2661668675979 1046.960736686842 1215.37132547823 1013.3574613397213 1113.0660258893254 1097.3324098474038 13196.168643231042 165124.8375351121 1137.6578588719683 1001.0975955668491 1005.4649072908302 1101.5285018790769 1260.5403783809634 1031.681219607743)
Error minima by case: (0.0 0.03567368289639106 0.0 0.05597888911063009 0.20000000000000018 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.7999999999999972 0.0 0.0 0.20000000000000284 17.19999999999999 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 40.349
Average program size in population (points): 41.349
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.393
Error (vector) diversity:			 0.398
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 34166580
--- Timings ---
Current time: 1481490257826 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_occurrencesof vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove float_swap vector_integer_pushall 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank float_tan integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 51156.68712593961
Median total errors in population: 2863.8
Error averages by case: (1082.9925026703777 1055.4149910407423 1063.00661972219 1058.9839894840932 1045.4443919899563 1071.6834404299022 1051.638354995051 1103.6223326335498 1112.582517637849 1068.6531611268451 1059.558747216057 1065.3744289645733 1116.897261802706 1206.627603390652 6537.823848091442 1054.090775466533 1061.570779739696 1089.8105192678033 1235.9469801733105 1033.324913662457 1123.0515601449765 1144.2555974654651 12004.767551945459 3156.207755021591 1165.7981747116687 1059.5816362214043 1063.6740651936518 1091.6068392139198 1120.9167912330786 1051.7789952826492)
Error minima by case: (0.0 0.0431975046920714 0.0 0.05597888911063009 0.20000000000000018 0.04012947630268077 0.0013360351468790221 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.1205845018010745 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 40.105
Average program size in population (points): 41.103
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.415
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 35369730
--- Timings ---
Current time: 1481490268558 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (vector_integer_first float_shove in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove integer_dup_items vector_integer_pushall 5 in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 60592.43146060776
Median total errors in population: 2879.6298111393135
Error averages by case: (1252.937970098696 1255.9982712871172 1272.8283521419712 1239.7970315302935 1246.069204414323 1301.5372468775481 1291.3665935364654 1334.0728853831117 1332.3641029540327 1255.9204251787557 1239.9828618953452 1248.8782943915055 1336.4123210644095 1496.480365332278 5719.750174098154 1268.1957507457596 1252.6537208237994 1273.9428190252224 1513.2949522536405 1263.501796551481 1352.4659682196148 1406.0826253227065 16037.736805845067 3582.481866776233 1420.3812728313392 1249.9220370498176 1245.3687024857654 1301.396080396991 1319.0787230802869 1281.5322390160868)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.09391564547484021 0.19982074801040728 0.0 0.1999999999999993 0.13636611578703395 0.40000000000000036 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.1232058513667766 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.03598527973564403)
Average genome size in population (length): 39.868
Average program size in population (points): 40.865
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.396
Error (vector) diversity:			 0.4
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 36565770
--- Timings ---
Current time: 1481490279165 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof vector_integer_rest float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 5 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank vector_integer_yank float_mult float_tan integer_inc integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_pop in1 vector_integer_rest vector_integer_butlast vector_integer_stackdepth vector_integer_remove float_dec vector_integer_pushall vector_integer_replacefirst 5 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_inc integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 0.8 0.4 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 5.4 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 1.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1761.8
Mean: 58.726665
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 43993.74269414795
Median total errors in population: 2852.3999999999996
Error averages by case: (1102.9140889137032 1095.2142255278084 1092.9251186074023 1088.9144457929387 1095.1110544334601 1131.6723192268082 1141.4812910921808 1143.9234689856212 1132.3430786601439 1110.831640676209 1098.3885218394705 1106.2830034514013 1146.257494488089 1290.8611254934365 2794.0632735239533 1104.805614517839 1128.8255726780942 1117.6886853684418 1278.554214079626 1093.110247033159 1182.4715832122051 1207.6471751070878 7129.512834766793 3371.4522732104524 1199.2832773084485 1097.741859531188 1101.9357962804213 1121.5073590033662 1156.3838781976235 1131.6381731405834)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.1232058513667766 80.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.0061265507738474945)
Average genome size in population (length): 40.318
Average program size in population (points): 41.318
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.372
Error (vector) diversity:			 0.375
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 37775310
--- Timings ---
Current time: 1481490289460 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 4} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 4 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank integer_mult float_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_swap vector_integer_take in1 vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_dec vector_integer_pushall float_cos 4 in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger)
Errors: [0.0 3.2 1.0 3.5999999999999996 3.8 2.8 0.4 0.6000000000000001 2.2 6.0 5.199999999999999 0.1999999999999993 2.4000000000000004 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 3.5999999999999996 0.0 1.6 76.8 0.8]
Total: 1760.5999999999997
Mean: 58.68667
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 39538.807751506596
Median total errors in population: 2847.0000000000005
Error averages by case: (982.7138792741458 1005.3586929727267 992.7934240237657 988.7190215899757 985.0551120311823 1011.4879648731571 1041.3323702233263 1073.6087553841364 1052.2458589983335 997.7454738325015 987.5732739984539 994.3481464288691 1056.770006313095 1132.7485216889158 1710.296713668254 994.3806799990997 1009.9265450588271 1014.9976521738889 1131.3674103551039 1013.0080584478642 1102.4958570194244 1044.5392701915996 6895.412240865483 3152.279473179826 1075.5707850223255 989.1094758517312 991.3326909787922 1031.3366438254573 1058.6814070055682 1021.5723462307825)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.1205845018010745 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 79.98829096255645 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.0061265507738474945)
Average genome size in population (length): 40.349
Average program size in population (points): 41.346
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.36
Error (vector) diversity:			 0.366
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 38985780
--- Timings ---
Current time: 1481490299843 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 4} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 4 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank integer_mult float_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove vector_integer_pushall float_sub 4 vector_integer_dup_times in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_mult integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Errors: [0.0 3.2 1.0 3.5999999999999996 3.8 2.8 0.4 0.6000000000000001 2.2 6.0 5.199999999999999 0.1999999999999993 2.4000000000000004 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 3.5999999999999996 0.0 1.6 76.8 0.8]
Total: 1760.5999999999997
Mean: 58.68667
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 43639.61568066618
Median total errors in population: 2847.0000000000005
Error averages by case: (1112.8390300054548 1115.6123806666606 1092.8086651106757 1088.3179631304806 1085.1246510738024 1201.542050536915 1201.445114003963 1193.6462419662591 1212.2170814592323 1100.154127537623 1087.8475800456742 1094.176671838149 1216.3407940610887 1251.2226458273408 3097.845143054068 1094.9370157321475 1108.944416992649 1138.9022123941209 1240.2751848563894 1103.0173658538217 1292.3570462944197 1200.893472442635 6147.76148840278 3283.993573565668 1164.1937801705535 1097.4368857210493 1090.7061974963935 1181.4351095375157 1151.9680355561372 1191.6537553325456)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0013360351468790221 0.09391564547484021 0.1999103740052035 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.7999999999999972 0.40000000000000036 0.0 0.0013360351468790221 3.200000000000003 0.0061265507738474945)
Average genome size in population (length): 39.953
Average program size in population (points): 40.95
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.395
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 40184370
--- Timings ---
Current time: 1481490310162 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 4} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 4 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_dec integer_min integer_yank integer_mult float_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 float_max vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 4 in1 integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_dec integer_min integer_yank integer_mult integer_stackdepth integer_max integer_swap integer_yank float_frominteger)
Errors: [1.0 3.2 1.0 3.5999999999999996 3.8 2.8 0.4 0.6000000000000001 2.2 6.0 5.199999999999999 0.1999999999999993 2.4000000000000004 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 3.5999999999999996 0.0 1.6 76.8 0.8]
Total: 1759.5999999999997
Mean: 58.65333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 43888.12326555979
Median total errors in population: 2862.4000000000005
Error averages by case: (1142.9345964281213 1165.7088152393508 1163.0153067236997 1148.6471790556561 1144.9277029508128 1251.5648560587451 1221.4975273807095 1243.716873268638 1192.1880909019928 1159.6207026512473 1148.6602129837624 1155.6595162461424 1196.234905611645 1336.2511259983467 1622.6182725786819 1154.62734609973 1171.4464019428513 1178.8558655464226 1315.620033141745 1173.0035218445025 1292.6478712055475 1194.7989236232659 6426.206303887421 3514.6547892502213 1262.4405441514868 1149.6774475210964 1152.3515770759057 1181.4804064926564 1225.3636186280166 1201.7029310713822)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.09391564547484021 0.1999103740052035 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.7999999999999972 0.40000000000000036 0.0 0.1144599298685961 2.799999999999997 0.03598527973564403)
Average genome size in population (length): 39.696
Average program size in population (points): 40.694
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.395
Error (vector) diversity:			 0.398
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41375250
--- Timings ---
Current time: 1481490320590 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 4} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first float_pop vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 4 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank integer_mult float_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (in1 vector_integer_butlast vector_integer_stackdepth vector_integer_remove float_swap vector_integer_pushall vector_integer_replacefirst float_sub 4 in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_mult integer_stackdepth integer_max integer_swap integer_yank float_frominteger)
Errors: [0.0 3.2 1.0 3.5999999999999996 3.8 2.8 0.4 0.6000000000000001 2.2 6.0 5.199999999999999 0.1999999999999993 2.4000000000000004 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 3.5999999999999996 0.0 1.6 76.8 0.8]
Total: 1760.5999999999997
Mean: 58.68667
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 41786.90896034279
Median total errors in population: 2831.6
Error averages by case: (892.9849023492499 905.3214188924044 882.7487808899851 888.8760130931771 884.8014060640977 951.5860925913795 931.4882278817778 963.2155189570859 922.0964766304695 898.3506157603753 888.7666945935675 893.8077863414136 936.2785331599762 1053.3686740093092 2353.725000986701 893.831468300881 901.3357397522757 920.7266578794892 1038.2061732349896 893.0242260331206 992.7046411432813 989.0975335119402 6024.897428111816 8276.949853608585 1003.3899740667592 888.0074922455417 891.4208715324307 941.4775491734041 952.7586562443486 931.6645533030273)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.20000000000000284 0.40000000000000036 0.0 0.1144599298685961 2.799999999999997 0.03598527973564403)
Average genome size in population (length): 40.313
Average program size in population (points): 41.313
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.384
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 42584640
--- Timings ---
Current time: 1481490331046 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_first} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_nth} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_sub} {:close 0, :instruction 4} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 0, :instruction float_mult} {:close 0, :instruction float_tan} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_min})
Best program: (float_swap vector_integer_first vector_integer_take vector_integer_nth float_shove vector_integer_take in1 vector_integer_occurrencesof float_max float_yank vector_integer_butlast vector_integer_stackdepth float_rot vector_integer_remove float_swap integer_dup_items float_dec vector_integer_pushall vector_integer_replacefirst float_cos vector_integer_concat float_sub 4 float_dup vector_integer_dup_times in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth vector_integer_indexof integer_min integer_yank integer_mult float_mult float_tan integer_stackdepth integer_max integer_swap integer_yank float_frominteger integer_min)
Partial simplification: (float_shove in1 float_max vector_integer_butlast vector_integer_stackdepth vector_integer_remove vector_integer_pushall 4 in1 float_max integer_dup_times integer_yankdup integer_dec vector_integer_nth integer_min integer_yank integer_mult integer_stackdepth integer_max integer_swap integer_yank float_frominteger)
Errors: [0.0 3.2 1.0 3.5999999999999996 3.8 2.8 0.4 0.6000000000000001 2.2 6.0 5.199999999999999 0.1999999999999993 2.4000000000000004 4.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 3.5999999999999996 0.0 1.6 76.8 0.8]
Total: 1760.5999999999997
Mean: 58.68667
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 43102.902671921176
Median total errors in population: 2875.8
Error averages by case: (1152.9032277165552 1135.179070489097 1162.68768359069 1139.1468937166553 1145.1490821516093 1201.4456177802674 1181.354321760031 1233.2249084603995 1201.9980798043377 1150.2306808934754 1147.8473766696907 1143.8159469339132 1206.6060998454939 1303.5430803825307 2644.301301564068 1154.5529708146112 1159.454078428868 1178.6545697129932 1290.5422095666815 1152.955623480046 1262.5938469256648 1239.7474605216853 4852.595229689745 3577.066665993713 1228.3223205535555 1139.871535894707 1150.8110702405027 1201.3670356902717 1203.4427205151803 1161.4919621341721)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0596222786279309 0.2829419696157931 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.20000000000000284 0.40000000000000036 0.0 0.1144599298685961 2.799999999999997 0.03598527973564403)
Average genome size in population (length): 40.334
Average program size in population (points): 41.334
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.404
Error (vector) diversity:			 0.411
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 43794660
--- Timings ---
Current time: 1481490341601 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 integer_dup_times vector_integer_butlast vector_integer_pushall vector_integer_shove in1 integer_add vector_integer_last vector_integer_butlast integer_min integer_dup_times float_sin integer_add vector_integer_flush 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39190.63019617506
Median total errors in population: 2847.2570513300516
Error averages by case: (1043.005866262484 1045.4687491801362 1052.8931384411258 1048.0853263685328 1044.8701824462225 1071.5710634274149 1071.4570853520809 1093.6958192191346 1082.5311474549947 1059.39391314111 1048.6359896464703 1054.149714673563 1086.6921616367808 1211.9804193733273 2472.376109638774 1054.0145549917384 1060.7367970844714 1068.4850242475895 1191.7617376539563 1063.0743364874572 1112.7845361128782 1149.1476256312574 4305.9699231010645 3201.8313057282426 1158.5150755086875 1049.443648019462 1051.0747158260633 1071.5031739411436 1113.7598099199215 1051.721245659012)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.0596222786279309 0.3999999999999999 0.10929742682568167 0.0 0.1999999999999993 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.20000000000000284 0.40000000000000036 0.0 0.1144599298685961 2.799999999999997 0.03594774521801558)
Average genome size in population (length): 39.922
Average program size in population (points): 40.92
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.38
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 44992320
--- Timings ---
Current time: 1481490351987 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (float_inc in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min vector_integer_nth integer_dup_times integer_add 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42927.28617369142
Median total errors in population: 2847.6000000000004
Error averages by case: (1122.7902890113946 1115.5073759128534 1132.6355654620668 1118.9097561933759 1115.1156443168388 1161.3787305569597 1181.285786969066 1233.3886062077925 1182.0931322774902 1123.1585987381989 1108.4000000689048 1116.217651322813 1176.9913346882615 1318.189296971191 2618.7977411478582 1125.7085682847426 1127.2547061121622 1139.7726393882301 1289.3166048149328 1142.909096898035 1242.4569003827278 1215.3529615570633 5608.833939517359 3224.8208257118017 1287.4799950454783 1109.2523805717822 1111.8781812195941 1161.292999940559 1174.5382558340445 1141.5586085678603)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.09391564547484021 0.10929742682568167 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 79.98829096255645 0.20000000000000284 0.40000000000000036 0.0 0.1144599298685961 2.533190320073288 0.03598527973564403)
Average genome size in population (length): 40.073
Average program size in population (points): 41.073
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.389
Error (vector) diversity:			 0.395
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 46194510
--- Timings ---
Current time: 1481490362419 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast float_rot vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times integer_add vector_integer_flush vector_integer_swap 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43158.12815912519
Median total errors in population: 2852.3999999999996
Error averages by case: (1172.7369098476986 1165.078431426227 1162.6645524087912 1158.2907685980495 1174.7393682659424 1211.3453781425762 1251.2371400068898 1303.1551093632575 1272.043250293009 1171.954044969587 1159.238896288623 1166.5216454522601 1266.6922035868388 1361.6185302213612 1671.3165892118984 1174.5999188236563 1171.378682341179 1184.3526590193812 1332.855305703773 1212.7651539031183 1322.1650587502795 1210.3810203399232 5323.39230717376 3260.221562955218 1322.3167185331329 1159.8159868647776 1162.7579089846622 1251.269194973138 1219.7289903410062 1181.494872335189)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.08518455069019559 0.041470984807896516 0.1144599298685961 0.15740772465490238 0.10929742682568167 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.03598527973564403)
Average genome size in population (length): 39.715
Average program size in population (points): 40.715
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.399
Error (vector) diversity:			 0.408
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 47385960
--- Timings ---
Current time: 1481490372919 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times integer_add vector_integer_pushall float_swap 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger vector_integer_rest)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44207.29659144416
Median total errors in population: 2847.6000000000004
Error averages by case: (1182.5869183831144 1154.5528574795685 1202.3475755536494 1158.2223765397707 1135.0037833904944 1261.308438749405 1231.1658857833006 1303.2605413564058 1212.0168593561416 1162.1359927577532 1147.9284923475411 1154.5290366831664 1226.648757133602 1338.8114862694597 2676.600924003634 1145.1027447757438 1169.1358499198652 1171.6106095855796 1318.3524427457387 1192.8464827354085 1342.007785146407 1246.9591951479092 5646.204132575205 3197.513289121532 1270.254654182443 1178.390275304135 1150.6682774742433 1221.2719629124613 1198.3718754535146 1211.487088576957)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.15159297494940738 0.041470984807896516 0.1144599298685961 0.3999999999999999 0.10929742682568167 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 6.800000000000011 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.03598527973564403)
Average genome size in population (length): 39.909
Average program size in population (points): 40.907
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.375
Error (vector) diversity:			 0.379
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 48583230
--- Timings ---
Current time: 1481490383377 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj vector_integer_concat integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap)
Partial simplification: (in1 float_dec vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times vector_integer_rest vector_integer_conj integer_add 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34202.40338092478
Median total errors in population: 2847.2570513300516
Error averages by case: (902.5801077454219 914.9018721215266 892.6326097795356 907.8710936946268 914.7821546802453 971.3578349282207 941.2340223265662 993.2606725893644 942.1642620416591 921.366746420918 918.6155197590895 915.4631109168511 927.1197571261191 1095.6307780282839 1454.7974003890565 915.1418899391168 921.0170216328761 930.9877566839618 1066.820820949256 912.9576271668142 1002.2345570227895 965.1064838264979 4260.816526919932 2854.680585480998 1086.888887188342 909.3626827461101 922.3970992192695 951.3521236961938 967.3943037795906 921.4670721255428)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.15159297494940738 0.03665572881693843 0.1144599298685961 0.15740772465490238 0.10929742682568167 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 6.800000000000011 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.018687197377963094)
Average genome size in population (length): 40.5
Average program size in population (points): 41.498
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.388
Error (vector) diversity:			 0.393
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 49798230
--- Timings ---
Current time: 1481490393779 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min vector_integer_nth vector_integer_indexof integer_dup_times float_sin integer_add vector_integer_pushall 5 integer_mult in1 vector_integer_nth integer_min in1 integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43488.23174981212
Median total errors in population: 2874.2000000000003
Error averages by case: (1142.654140790803 1144.7919956467208 1182.7201259684132 1148.3816705428078 1134.80532553444 1231.265264114366 1221.255978276381 1263.5583915841112 1231.842774395953 1160.7641025852772 1172.6595060319703 1158.413892744217 1227.3985412798054 1339.1671939099797 1654.331740632888 1144.4407202950154 1185.7859662665714 1168.3335320807914 1315.9877965572616 1182.9726061126767 1292.367599106056 1188.197066275097 5720.749053463978 3430.6653661217797 1461.1677408709115 1162.48683922429 1166.767871346033 1241.2668270284885 1231.5674275910337 1181.4646934340142)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.03665572881693843 0.1144599298685961 0.15740772465490238 0.19999999999999996 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 0.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.03598527973564403)
Average genome size in population (length): 40.136
Average program size in population (points): 41.136
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.409
Error (vector) diversity:			 0.415
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 51002310
--- Timings ---
Current time: 1481490404213 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast float_rot vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times vector_integer_shove integer_add 5 integer_mult in1 vector_integer_nth integer_min vector_integer_last integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49182.4549430414
Median total errors in population: 2853.7999999999997
Error averages by case: (1262.536872238018 1244.6918084477386 1292.4838938515627 1237.6843632813013 1234.4163122247803 1361.3897268292685 1361.24528091041 1333.9110454342288 1371.830678067083 1228.4650470279455 1237.6022612200773 1234.1680693444005 1356.0721794268748 1378.3093141090635 1673.947373855174 1243.6305210866035 1238.8964296516037 1264.5646193339558 1348.562738586899 1262.8048565705171 1402.234239978859 1267.3395082911516 4514.93390428648 7995.886837157481 1335.767984581821 1267.5413952491765 1240.5809755647515 1371.2780632352844 1278.1599623652285 1341.5186808336775)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.18935824662338163 0.03665572881693843 0.1144599298685961 0.15740772465490238 0.04147098480789646 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 0.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.274
Average program size in population (points): 40.268
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.413
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 52180530
--- Timings ---
Current time: 1481490414993 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 integer_add vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times integer_add 5 integer_mult vector_integer_dup_times in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 36089.34131915849
Median total errors in population: 2849.3999999999996
Error averages by case: (1002.6928175581506 1004.6679556842437 992.655788873223 998.2560236405194 985.1061652510931 1041.4844298209794 1031.31043437704 1003.9513799182595 1032.110018687887 991.7091493521268 988.9506809950144 987.0925245144382 1047.3916301936642 1165.2228183332452 1454.6229398237158 984.9318686198085 1009.8056852333956 1002.7401238808907 1133.0546232510692 993.0102315592459 1062.207618510179 1029.8157945924927 4014.3604109691255 2846.14863365581 1189.4822819061694 1010.234345080258 993.9280253985442 1041.3939158264661 1039.4610591695257 1011.5419444819146)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.18935824662338163 0.03665572881693843 0.1144599298685961 0.15740772465490238 0.19999999999999996 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 6.800000000000011 79.98829096255645 0.20000000000000284 0.17983296317335906 0.0 0.1144599298685961 1.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.472
Average program size in population (points): 40.472
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.378
Error (vector) diversity:			 0.383
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 53364690
--- Timings ---
Current time: 1481490425690 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 float_frominteger vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 float_dec vector_integer_butlast float_mod vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times float_frominteger vector_integer_flush vector_integer_pushall 5 integer_mult vector_integer_dup_times in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 125496.21689417674
Median total errors in population: 2853.7999999999997
Error averages by case: (1172.6050931775228 1174.787084707169 1172.5780293684263 1168.9626403987381 1175.2469191278828 1251.3539287960991 1221.2418888226525 1244.5809845580873 1231.8932555458248 1182.7849364794697 1168.391351417908 1177.0059164652694 1225.851131951488 1366.7589448332476 1727.1833288714329 1185.502561870069 1178.7400982323752 1191.8212708200933 1344.1164276250406 1162.9731025987783 1302.250206150024 1222.0173205762455 6567.611724249727 84324.17443456933 1307.5061028190096 1167.6280125765488 1172.7465637521586 1251.2945133903079 1225.0549439451922 1231.5541764807554)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.18935824662338163 0.03665572881693843 0.1144599298685961 0.3999999999999999 0.19999999999999996 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 6.800000000000011 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 1.7999999999999972 0.035910159187876434)
Average genome size in population (length): 39.62
Average program size in population (points): 40.618
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.376
Error (vector) diversity:			 0.38
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 54553290
--- Timings ---
Current time: 1481490436185 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 float_frominteger vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 float_dec vector_integer_butlast float_mod vector_integer_pushall vector_integer_last in1 integer_add vector_integer_last integer_min integer_dup_times vector_integer_conj float_frominteger 5 integer_mult vector_integer_dup_times in1 vector_integer_nth integer_min integer_add float_frominteger integer_swap)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 123502.88327590155
Median total errors in population: 2847.6000000000004
Error averages by case: (1102.562748052117 1094.6742199981095 1082.5841450305475 1108.1020150732552 1084.580626478595 1181.2998831066238 1141.2099756650962 1113.5678606209212 1152.0931618033294 1117.4817959945149 1108.6777716060303 1113.9139709385627 1165.9991766631983 1239.2901059724638 2516.921718664173 1102.965862719441 1119.977960039188 1133.325580047316 1225.8003999315142 1092.9468213552484 1182.0580927093754 1204.4085236954388 5266.337682907522 84870.5472050922 1207.822961503616 1098.0741446543914 1111.701336183365 1151.2477772959364 1261.2253853750067 1151.4843667247803)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.03665572881693843 0.1144599298685961 0.3999999999999999 0.19999999999999996 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 13.199999999999989 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 1.7999999999999972 0.035910159187876434)
Average genome size in population (length): 39.555
Average program size in population (points): 40.552
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.41
Error (vector) diversity:			 0.415
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 55739940
--- Timings ---
Current time: 1481490446730 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 float_frominteger vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast float_rot vector_integer_pushall in1 integer_add vector_integer_last integer_min integer_dup_times float_frominteger vector_integer_flush 5 integer_mult in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42146.21329481221
Median total errors in population: 2838.6
Error averages by case: (1172.5835023442344 1175.1221106677085 1172.517175553757 1177.8620325011195 1174.9475600561 1221.4884281718514 1201.3825855873329 1213.4870477690947 1203.0016523689083 1189.4883942111992 1168.7047827940419 1175.1908489530117 1226.0813397595239 1334.5093269309195 2630.9279687089625 1183.821256532624 1192.6808836700952 1184.1642377917533 1296.3905860364746 1192.7278406371504 1252.304387049215 1302.1674677514775 3379.121140765148 3359.5394374233406 1266.7470234393697 1166.9167077316386 1171.0909460274545 1231.3992565676704 1338.1982380014517 1191.6491290095826)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.03665572881693843 0.1144599298685961 0.3999999999999999 0.04147098480789646 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 11.199999999999989 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 0.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.599
Average program size in population (points): 40.599
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.4
Error (vector) diversity:			 0.406
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 56927910
--- Timings ---
Current time: 1481490457288 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 float_frominteger vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last integer_min vector_integer_nth integer_dup_times float_frominteger 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 38511.90570272182
Median total errors in population: 2847.6000000000004
Error averages by case: (1092.568599170875 1074.7377658669625 1092.6461165354667 1097.5799827599822 1064.8848851178846 1101.4170718610558 1111.3924189239847 1123.8589446709937 1122.5614405672713 1088.2475438778902 1089.1569591968996 1085.810482712992 1156.3085934322576 1224.9611707038393 1551.2155797962148 1093.7427816353277 1100.789829890738 1094.141552402619 1199.1588628550455 1092.8675293755173 1192.1275118996991 1161.1581562342883 3765.121815231895 2966.0121484885003 1198.9849964301798 1097.9334428457992 1092.583725301333 1131.322744016215 1147.027151013248 1101.5858999068644)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.3999999999999999 0.04147098480789646 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 13.199999999999989 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 0.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.547
Average program size in population (points): 40.544
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.414
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 58114320
--- Timings ---
Current time: 1481490467913 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_inc} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup_times} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_sin} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_swap} {:close 2, :instruction float_sub} {:close 0, :instruction 5} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 1, :instruction float_frominteger} {:close 1, :instruction integer_swap} {:close 0, :instruction vector_integer_rest})
Best program: (float_inc in1 float_dec integer_dup_times vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_indexof vector_integer_swap vector_integer_replacefirst integer_dup_times float_sin vector_integer_rest vector_integer_shove vector_integer_last vector_integer_conj in1 float_frominteger vector_integer_flush vector_integer_pushall vector_integer_swap vector_integer_remove float_swap float_sub 5 integer_mult vector_integer_dup_times vector_integer_dup_times in1 vector_integer_nth vector_integer_butlast integer_min vector_integer_last float_mod in1 integer_add float_frominteger integer_swap vector_integer_rest)
Partial simplification: (in1 vector_integer_butlast vector_integer_pushall in1 integer_add vector_integer_last vector_integer_butlast integer_min integer_dup_times float_frominteger 5 integer_mult in1 vector_integer_nth integer_min integer_add float_frominteger)
Errors: [1.0 0.7999999999999998 2.0 23.4 4.2 0.8 0.4 3.4 1.8 26.0 0.1999999999999993 14.2 6.4 74.0 1.0 5.0 12.2 18.6 83.2 3.0 2.0 20.799999999999997 323.2 918.2 16.799999999999997 2.4000000000000004 5.0 0.4 67.8 1.2]
Total: 1639.4
Mean: 54.646667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42673.272508924994
Median total errors in population: 2841.6000000000004
Error averages by case: (1202.4738851719142 1194.4588116929724 1222.5446967085343 1217.4257368632234 1204.50282741186 1261.3591281758004 1261.3209677023465 1303.4925893088346 1272.2686429740224 1218.4765506299234 1208.485349286574 1216.046739145067 1266.2828867025535 1374.4706999837515 1777.0056663554394 1203.7801785342417 1230.9246447028981 1225.9501981764934 1345.2676783324614 1232.6694138643225 1341.8404277020502 1317.3460049431 3949.223627707517 3035.422266067628 1339.1273652227985 1217.8343820233051 1211.9663455765133 1281.3040269571386 1268.5846421339459 1271.4161288677583)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.3999999999999999 0.04147098480789646 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 0.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.727
Average program size in population (points): 40.727
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.386
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 59306130
--- Timings ---
Current time: 1481490478562 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_dup} {:close 2, :instruction vector_integer_butlast} {:close 0, :instruction float_mod} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_dec} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_add} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction float_dup})
Best program: (vector_integer_replacefirst in1 float_dec vector_integer_dup vector_integer_butlast float_mod float_rot vector_integer_pushall vector_integer_shove vector_integer_last float_dec in1 integer_add vector_integer_last vector_integer_butlast integer_min vector_integer_nth vector_integer_shove vector_integer_swap vector_integer_replacefirst integer_dup_times integer_mod float_inc vector_integer_subvec integer_inc integer_add float_yank vector_integer_yank float_inc vector_integer_replace vector_integer_yank float_inc vector_integer_subvec integer_inc float_frominteger 5 float_dup)
Partial simplification: (in1 vector_integer_dup vector_integer_butlast vector_integer_pushall vector_integer_shove vector_integer_last in1 integer_add vector_integer_last integer_min integer_dup_times integer_mod integer_inc integer_add integer_inc float_frominteger)
Errors: [1.0 1.2000000000000002 2.0 11.4 2.2 1.8 1.6 1.4 9.2 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 4.0 0.0 37.8 32.80000000000001 1416.2 28.799999999999997 2.4000000000000004 2.0 2.6 74.8 1.2]
Total: 1795.0
Mean: 59.833332
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 205338.99652578853
Median total errors in population: 2852.7999999999997
Error averages by case: (1142.5562046931007 1154.7783416176032 1152.6265888769285 1157.3773549471762 1154.6586083546283 1201.287770843481 1181.2350185620942 1224.2654453555479 1192.2771341856123 1179.5105459025485 1158.6429390168107 1167.6942393633733 1196.6513474718263 1360.983360718527 3718.55892925471 1164.980543288751 1160.946999639829 1177.5070568834217 1310.9855169104117 1172.7361389665793 1232.1985543438645 1387.9730433843235 4196.142904694124 164952.59044068924 1300.5423989133035 1168.1737408237213 1152.9784723219 1221.2673214917133 1215.4916752440442 1181.3778890269666)
Error minima by case: (0.0 0.18935824662338163 0.0 0.05597888911063009 0.20000000000000018 0.041470984807896516 0.1144599298685961 0.15740772465490238 0.04147098480789646 0.0 0.19060735569486909 0.1999999999999993 0.056986598718789416 1.0 0.0 0.0 0.19114869070959628 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 17.19999999999999 79.98829096255645 0.20000000000000284 0.13657291800043403 0.0 0.1144599298685961 0.7999999999999972 0.018687197377963094)
Average genome size in population (length): 39.753
Average program size in population (points): 40.75
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.392
Error (vector) diversity:			 0.398
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 60498720
--- Timings ---
Current time: 1481490489362 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
