Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
parent-selection = :tournament
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :tournament
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = -15 0 -26 -48 120 57 -58 -13 38 -63 120 -7 -3 -98 -44 -125
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "e5d6f936-6942-4576-a9fb-4b3a52ea7b43"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_rot} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div float_rot float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_stackdepth integer_stackdepth integer_mult vector_integer_first vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup integer_div float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup vector_integer_stackdepth integer_sub integer_yankdup integer_div float_frominteger)
Errors: [3.0 6.2 3.0 10.6 1.2000000000000002 0.2 0.4 3.4 1.8 14.0 13.2 14.8 6.4 64.0 61.0 6.0 22.2 21.4 56.8 3.0 2.0 25.799999999999997 140.2 1918.2 86.8 12.4 15.0 0.4 85.8 0.8]
Total: 2600.000000000001
Mean: 86.666664
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 279534.5265370324
Median total errors in population: 300000
Error averages by case: (9310.180665429054 9310.449265429057 9310.183665429055 9310.667665429044 9310.296865429058 9310.0730614849 9310.082094160527 9310.23046542906 9310.14006542905 9311.029665429054 9310.833465429056 9310.922265429052 9310.396665429063 9314.440665429054 9328.055665429054 9310.705665429054 9311.448465429057 9311.967665429065 9313.94966542905 9310.186665429053 9310.150665429053 9314.008265429049 9338.350065429058 9461.618665429056 9315.853865429051 9310.792265429065 9310.953665429053 9310.079094160526 9316.394665429052 9310.084986070977)
Error minima by case: (0.0 0.7999999999999998 1.0 3.4000000000000004 0.20000000000000018 0.08366218546322618 0.11633781453677383 0.6000000000000001 0.19999999999999996 4.0 5.199999999999999 0.8000000000000007 0.40000000000000036 14.0 61.0 5.0 10.2 5.399999999999999 5.799999999999997 1.0 0.0 4.799999999999997 140.2 1910.2 58.8 6.4 5.0 0.11633781453677383 31.799999999999997 0.04147098480789646)
Average genome size in population (length): 25.293
Average program size in population (points): 26.276
Average percent parens in population: 0.062
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.023
Error (vector) diversity:			 0.023
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 758790
--- Timings ---
Current time: 1481491111445 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_rot} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div float_rot float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_stackdepth integer_stackdepth integer_mult vector_integer_first vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup integer_div float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup vector_integer_stackdepth integer_stackdepth integer_mult integer_sub integer_yankdup integer_div float_frominteger)
Errors: [3.0 6.2 3.0 10.6 1.2000000000000002 0.2 0.4 3.4 1.8 14.0 13.2 14.8 6.4 64.0 61.0 6.0 22.2 21.4 56.8 3.0 2.0 25.799999999999997 140.2 1918.2 86.8 12.4 15.0 0.4 85.8 0.8]
Total: 2600.000000000001
Mean: 86.666664
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 197938.13796096187
Median total errors in population: 300000
Error averages by case: (6560.881467094418 6562.181867094452 6560.893467094418 6563.280267094393 6561.43406709445 6560.379957619428 6560.409353673195 6561.110267094442 6560.6722670944 6565.089467094419 6564.160867094455 6564.592267094384 6561.937267094445 6582.073467094418 6648.652467094418 6563.442467094419 6567.263867094455 6569.633667094445 6579.739067094386 6560.906467094419 6560.728467094418 6579.705867094384 6701.394067094454 7287.801067094457 6589.315067094384 6563.930267094445 6564.749467094419 6560.3973536731955 6590.957867094385 6560.4241515411795)
Error minima by case: (0.0 0.20000000000000018 1.0 1.5999999999999996 0.20000000000000018 0.08366218546322618 0.11633781453677383 0.6000000000000001 0.19999999999999996 4.0 5.199999999999999 0.8000000000000007 0.40000000000000036 14.0 61.0 4.0 10.2 5.399999999999999 5.799999999999997 1.0 0.0 4.799999999999997 140.2 1895.2 58.8 5.4 5.0 0.11633781453677383 20.799999999999997 0.04147098480789646)
Average genome size in population (length): 26.058
Average program size in population (points): 27.042
Average percent parens in population: 0.056
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.029
Error (vector) diversity:			 0.029
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1540530
--- Timings ---
Current time: 1481491113445 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_rot} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div float_rot float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_stackdepth integer_stackdepth integer_mult vector_integer_first vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup integer_div float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup vector_integer_stackdepth integer_stackdepth integer_mult integer_sub integer_yankdup integer_div float_frominteger)
Errors: [3.0 6.2 3.0 10.6 1.2000000000000002 0.2 0.4 3.4 1.8 14.0 13.2 14.8 6.4 64.0 61.0 6.0 22.2 21.4 56.8 3.0 2.0 25.799999999999997 140.2 1918.2 86.8 12.4 15.0 0.4 85.8 0.8]
Total: 2600.000000000001
Mean: 86.666664
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 49535.41470687233
Median total errors in population: 3115.4
Error averages by case: (1561.914310598449 1564.497110598431 1561.939310598449 1567.2744534944293 1562.7301105984334 1571.494964278314 1571.4693563858634 1562.2379105984419 1571.6143105984538 1571.7210534944145 1569.5166534943958 1570.5572534944345 1573.9547105984334 1613.3970534944146 1771.4530534944147 1567.5140534944146 1577.1646534943957 1582.3056534943985 1607.957653494435 1561.971310598449 1571.691310598449 1606.8388534944352 1901.3044534943926 3246.8518534944506 1631.4014534944356 1568.9102534943986 1570.9600534944145 1571.4547563858632 1631.9292534944354 1571.3875250312187)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 4.0 5.071447982724319 0.8000000000000007 0.40000000000000036 14.0 61.0 2.8714479827243196 10.2 5.399999999999999 5.799999999999997 0.0 0.0 4.799999999999997 72.80000000000001 1895.2 58.8 4.27144798272432 5.0 0.11633781453677378 20.799999999999997 0.010723334903638526)
Average genome size in population (length): 29.214
Average program size in population (points): 30.211
Average percent parens in population: 0.043
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.043
Error (vector) diversity:			 0.044
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2416950
--- Timings ---
Current time: 1481491115548 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_first vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup integer_stackdepth integer_mult integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 28045.321924152664
Median total errors in population: 3055.0
Error averages by case: (842.1813196752632 843.4661196752579 842.2263196752632 846.6513663507643 841.433119675259 842.6784547780244 862.6278547780202 862.2937196752628 862.3895196752624 851.2759663507768 849.322566350771 849.9521663507827 863.2747196752757 896.2629663507768 1031.6359663507767 846.1319663507768 857.927566350771 861.6673663507908 890.4135663507845 862.3033196752631 862.4513196752631 883.7881663507836 1157.1527663507597 2601.96616635078 916.604766350786 848.6413663507902 850.6739663507768 862.6254547780202 912.753766350786 842.5482547780218)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 5.0 4.90899380861525 0.1999999999999993 0.40000000000000036 4.0 61.0 2.7089938086152507 13.90899380861525 5.399999999999999 19.200000000000003 0.0 0.0 25.799999999999997 72.80000000000001 1418.2 25.200000000000003 3.5999999999999996 0.0 0.4 20.799999999999997 0.07144798272431863)
Average genome size in population (length): 31.806
Average program size in population (points): 32.804
Average percent parens in population: 0.034
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 139
Genome diversity (% unique Plush genomes):	 0.375
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.045
Error (vector) diversity:			 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3371130
--- Timings ---
Current time: 1481491117693 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_take} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_first vector_integer_pushall vector_integer_take float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items float_sub integer_dup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22427.49899766615
Median total errors in population: 2600.000000000001
Error averages by case: (662.6717063177127 665.4753063177131 662.6807063177127 669.1010851889018 661.740706317715 660.6728736420861 660.8257063177213 663.2075063177215 661.8875063177105 672.8672851889127 671.609485188913 672.3978851889121 665.4957063177231 718.6912851889126 770.8862851889127 666.3242851889127 680.2714851889119 681.4246851889237 712.1812851889152 662.7747063177128 662.0717063177128 692.9152851889147 852.4190851889044 2531.975885188912 739.5398851889153 670.9210851889236 673.0152851889127 660.8271063177209 739.4936851889154 661.1325063177107)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.19999999999999996 2.0 4.90899380861525 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 13.90899380861525 5.399999999999999 3.799999999999997 1.0 0.0 19.799999999999997 30.80000000000001 1418.2 25.200000000000003 3.5999999999999996 0.0 0.11633781453677378 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 33.426
Average program size in population (points): 34.426
Average percent parens in population: 0.031
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 343
Genome diversity (% unique Plush genomes):	 0.379
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 343
Syntactic diversity (% unique Push programs):	 0.379
Total error diversity:				 0.064
Error (vector) diversity:			 0.066
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4373910
--- Timings ---
Current time: 1481491119954 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_first vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot vector_integer_flush integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 24162.5616
Median total errors in population: 2600.000000000001
Error averages by case: (722.532 725.8193999999967 722.578 729.6143999999878 721.6457999999969 720.2185999999971 720.4020000000118 723.5788000000123 721.6988000000028 732.728 731.8797999999969 732.7912000000034 725.9142000000131 776.366 807.661 726.119 740.6251999999957 741.3124000000132 771.1060000000059 722.65 721.892 750.0784000000044 899.4805999999866 2569.107400000002 797.8518000000071 731.0582000000131 733.041 720.4044000000101 801.6376000000084 720.7696000000027)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 5.199999999999999 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 5.199999999999999 5.399999999999999 3.799999999999997 2.0 1.0 25.799999999999997 30.80000000000001 1418.2 25.200000000000003 1.5999999999999996 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 33.917
Average program size in population (points): 34.917
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 302
Genome diversity (% unique Plush genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.059
Error (vector) diversity:			 0.063
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5391420
--- Timings ---
Current time: 1481491122204 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction float_add} {:close 0, :instruction float_shove} {:close 1, :instruction vector_integer_length} {:close 1, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction integer_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction float_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_yank integer_mod float_add float_shove vector_integer_length vector_integer_length integer_pop integer_sub float_dec vector_integer_replacefirst integer_rot vector_integer_conj vector_integer_dup_times integer_shove float_shove float_dup_items integer_fromfloat in1 vector_integer_indexof integer_dup float_mod integer_dup vector_integer_pushall vector_integer_flush float_stackdepth integer_pop float_flush integer_stackdepth integer_yankdup integer_mod vector_integer_pushall vector_integer_dup float_frominteger vector_integer_take integer_pop integer_dup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_stackdepth integer_yankdup integer_mod integer_pop float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2330.6000000000004
Mean: 77.68667
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 26769.623999999993
Median total errors in population: 2600.000000000001
Error averages by case: (811.864 815.177199999991 811.898 818.7941999999944 812.0729999999971 810.2615999999913 810.432400000012 815.6572000000059 811.8214000000088 820.488 819.9593999999911 818.9106000000016 815.9378000000123 850.656 908.427 815.698 829.647799999991 838.6270000000129 852.5990000000023 812.346 812.011 845.1520000000088 1084.635599999997 2506.734000000001 873.3836000000098 819.0718000000123 819.335 810.4362000000077 886.774000000012 810.8152000000078)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 4.199999999999999 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 2.1999999999999993 5.399999999999999 3.799999999999997 1.0 1.0 11.799999999999997 30.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 34.944
Average program size in population (points): 35.944
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 122
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.088
Error (vector) diversity:			 0.093
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6439740
--- Timings ---
Current time: 1481491124543 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction float_add} {:close 0, :instruction float_shove} {:close 1, :instruction vector_integer_length} {:close 1, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction integer_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction float_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_yank integer_mod float_add float_shove vector_integer_length vector_integer_length integer_pop integer_sub float_dec vector_integer_replacefirst integer_rot vector_integer_conj vector_integer_dup_times integer_shove float_shove float_dup_items integer_fromfloat in1 vector_integer_indexof integer_dup float_mod integer_dup vector_integer_pushall vector_integer_flush float_stackdepth integer_pop float_flush integer_stackdepth integer_yankdup integer_mod vector_integer_pushall vector_integer_dup float_frominteger vector_integer_take integer_pop integer_dup float_frominteger integer_inc)
Partial simplification: (vector_integer_length in1 vector_integer_pushall integer_pop integer_stackdepth integer_yankdup integer_mod float_frominteger float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2330.6000000000004
Mean: 77.68667
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 21686.504
Median total errors in population: 2339.000000000001
Error averages by case: (641.253 643.7351999999981 640.607 648.0376000000058 642.6958000000005 660.3357999999961 660.53320000001 650.1557999999947 661.9800000000033 646.836 646.7743999999964 642.204999999999 666.1002000000087 653.722 745.601 644.806 658.4829999999963 664.8200000000104 670.3141999999976 642.035 662.106 682.7776000000058 1100.2260000000128 2109.0443999999707 680.9584000000046 645.781600000009 642.75 660.5122000000072 710.4206000000075 660.8970000000032)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 4.199999999999999 0.1999999999999993 1.4000000000000004 0.0 60.0 0.0 2.1999999999999993 4.399999999999999 3.799999999999997 0.0 1.0 25.799999999999997 30.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 7.799999999999997 0.19999999999999996)
Average genome size in population (length): 34.502
Average program size in population (points): 35.5
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 292
Genome diversity (% unique Plush genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.074
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7474800
--- Timings ---
Current time: 1481491126913 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction float_add} {:close 0, :instruction float_shove} {:close 1, :instruction vector_integer_length} {:close 1, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction integer_dup} {:close 0, :instruction float_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction float_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_yank integer_mod float_add float_shove vector_integer_length vector_integer_length integer_pop integer_sub float_dec vector_integer_replacefirst integer_rot vector_integer_conj vector_integer_dup_times integer_shove float_shove float_dup_items vector_integer_reverse in1 vector_integer_indexof integer_dup float_mod integer_dup vector_integer_pushall vector_integer_flush float_stackdepth integer_pop float_flush integer_stackdepth integer_yankdup integer_mod vector_integer_pushall vector_integer_dup float_frominteger vector_integer_take integer_pop integer_dup float_frominteger integer_inc)
Partial simplification: (float_shove in1 vector_integer_pushall integer_pop integer_stackdepth integer_yankdup integer_mod integer_pop float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 2330.6000000000004
Mean: 77.68667
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 24192.2884
Median total errors in population: 2339.000000000001
Error averages by case: (721.16 723.4783999999953 720.388 728.3488000000087 723.0608000000043 750.314599999994 750.6246000000093 730.5049999999924 751.8206000000064 726.922 726.2305999999951 721.6355999999959 755.9632000000113 731.837 847.178 725.005 737.9735999999948 745.4962000000116 751.3739999999951 722.145 751.922 769.4696000000064 1232.8624000000173 2149.8193999999726 757.5730000000068 725.2156000000105 721.832 750.5228000000081 790.7256000000092 750.8850000000045)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 2.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 60.0 0.0 2.1999999999999993 4.399999999999999 3.799999999999997 1.0 1.0 11.799999999999997 30.80000000000001 1417.2 25.200000000000003 1.4000000000000004 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 34.508
Average program size in population (points): 35.506
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 275
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 275
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.055
Error (vector) diversity:			 0.056
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8510040
--- Timings ---
Current time: 1481491129231 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger)
Errors: [1.0 7.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 8.0 5.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 17.2 17.6 3.799999999999997 2.0 2.0 55.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1963.8
Mean: 65.46
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22836.420800000004
Median total errors in population: 2339.000000000001
Error averages by case: (671.012 673.3166000000018 670.41 678.449600000008 672.937399999999 730.3523999999968 730.7710000000002 678.4563999999986 731.8156000000062 676.625 675.7930000000016 671.4288000000013 735.9826000000096 680.305 767.541 674.74 687.2660000000001 695.1432000000099 699.440599999998 672.098 731.827 712.5748000000034 1168.9466000000155 2094.11099999997 705.931400000002 674.9786000000094 671.717 730.5205999999996 741.1350000000065 730.7945999999987)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.8 4.0 4.199999999999999 0.1999999999999993 0.40000000000000036 4.0 60.0 4.0 2.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 25.799999999999997 30.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 36.087
Average program size in population (points): 37.086
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 129
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9592650
--- Timings ---
Current time: 1481491131625 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (vector_integer_replacefirst in1 vector_integer_pushall integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger)
Errors: [1.0 7.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 8.0 5.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 17.2 17.6 3.799999999999997 2.0 2.0 55.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1963.8
Mean: 65.46
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 23566.408400000008
Median total errors in population: 2330.6000000000004
Error averages by case: (700.992 703.2033999999927 700.259 708.484000000009 702.7664000000069 740.2893999999933 741.2437999999908 704.5312000000084 741.6598000000093 706.201 705.5235999999926 700.9825999999929 745.8768000000117 708.491 788.263 704.351 716.7241999999927 724.9148000000112 728.077199999993 701.952 741.797 741.090600000009 1197.1166000000171 2118.1087999999713 734.1080000000077 704.8062000000109 701.285 740.5629999999904 771.7586000000098 740.9883999999918)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 4.0 4.199999999999999 0.1999999999999993 0.40000000000000036 4.0 60.0 1.0 14.2 4.399999999999999 2.799999999999997 1.0 1.0 25.799999999999997 30.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 37.663
Average program size in population (points): 38.663
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 292
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.056
Error (vector) diversity:			 0.057
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10722540
--- Timings ---
Current time: 1481491134036 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger)
Errors: [1.0 7.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 8.0 5.199999999999999 0.1999999999999993 9.6 16.0 221.0 10.0 17.2 17.6 3.799999999999997 2.0 2.0 55.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1963.8
Mean: 65.46
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22110.823600000025
Median total errors in population: 2330.6000000000004
Error averages by case: (661.034 663.3404000000011 660.27 668.4440000000077 662.8277999999987 660.2406000000007 661.2737999999938 663.4336000000089 661.834999999999 666.302 665.6680000000015 661.0312000000017 666.1018000000095 669.124 756.844 664.588 676.9146000000012 684.8404000000094 687.7598000000012 661.955 661.917 702.4398000000024 1145.142600000013 2102.926799999972 694.7180000000019 664.9340000000095 661.397 660.5525999999934 731.9212000000023 661.0466000000017)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.8 4.0 4.199999999999999 0.1999999999999993 1.4000000000000004 4.0 60.0 4.0 15.2 4.399999999999999 3.799999999999997 1.0 1.0 30.799999999999997 30.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 37.396
Average program size in population (points): 38.396
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 248
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.049
Error (vector) diversity:			 0.049
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11844420
--- Timings ---
Current time: 1481491136395 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_dup_items integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 6.2 1.0 10.4 3.2 0.8 0.6 2.4 8.2 7.0 4.199999999999999 1.1999999999999993 10.6 15.0 220.0 9.0 16.2 18.6 2.799999999999997 3.0 1.0 54.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 1957.0
Mean: 65.23333
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 22973.866787954958
Median total errors in population: 2330.6000000000004
Error averages by case: (691.0934161468366 693.8226536436163 690.3699899924966 698.3741919179442 693.0191455000362 690.3237999999964 691.0846161468331 693.328400000008 692.2308000000031 696.8339999608263 695.8129455000285 691.5587596879086 696.2860000000067 702.2933666807969 805.780512812325 695.4277596879128 706.909516337809 713.9972596977004 716.1922898229518 691.9817163378145 691.916 734.1956112953887 1117.0206333891977 2128.059283849247 725.8017467798985 695.0287455000415 691.8347596879129 690.5975403023004 761.7315111302689 690.9598161468352)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 4.0 2.1999999999999993 0.1999999999999993 1.4000000000000004 4.0 60.0 3.0 2.1999999999999993 4.399999999999999 1.7999999999999972 1.0 1.0 29.799999999999997 2.8000000000000114 1417.2 25.200000000000003 3.4000000000000004 0.0 0.14030230586813974 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 37.714
Average program size in population (points): 38.712
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 121
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.071
Error (vector) diversity:			 0.071
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12975840
--- Timings ---
Current time: 1481491138852 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1795.8
Mean: 59.86
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 19623.236800000006
Median total errors in population: 2246.0000000000005
Error averages by case: (581.175 585.3116000000018 580.388 588.1002000000069 583.5652000000005 590.367200000002 590.6694000000032 583.2636000000086 594.1647999999996 587.606 586.1164000000012 581.3984000000027 597.5817999999995 596.216 755.993 587.762 597.7456000000012 600.8411999999996 597.0579999999995 581.927 592.171 631.5752000000007 812.7622000000069 2024.3311999999698 616.1516000000004 585.0300000000088 581.844 590.6285999999934 650.6898000000019 590.8027999999986)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 2.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 3.0 2.1999999999999993 4.399999999999999 1.7999999999999972 1.0 1.0 30.799999999999997 4.800000000000011 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 36.602
Average program size in population (points): 37.602
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 323
Genome diversity (% unique Plush genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 323
Syntactic diversity (% unique Push programs):	 0.412
Total error diversity:				 0.099
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14073900
--- Timings ---
Current time: 1481491141365 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1795.8
Mean: 59.86
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 20898.492000000024
Median total errors in population: 1963.8
Error averages by case: (621.146 626.5134000000013 620.358 628.4744000000076 624.0672000000013 620.2914000000011 620.543800000008 623.3064000000085 626.1098000000003 628.261 625.9760000000007 621.4462000000011 628.5885999999922 640.495 897.148 629.51 637.6120000000002 639.2591999999921 631.0649999999988 622.125 622.185 681.8907999999994 901.7040000000017 2042.8931999999704 658.8996000000001 625.0472000000092 621.712 620.682799999993 690.3184000000015 620.8625999999989)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.8 2.0 0.8000000000000007 0.1999999999999993 1.4000000000000004 4.0 21.0 3.0 2.1999999999999993 0.3999999999999986 1.7999999999999972 1.0 1.0 36.8 28.80000000000001 918.2 25.200000000000003 3.4000000000000004 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 33.729
Average program size in population (points): 34.729
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 452
Genome diversity (% unique Plush genomes):	 0.364
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 452
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15085770
--- Timings ---
Current time: 1481491143732 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup float_frominteger integer_inc)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 7.2 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1795.8
Mean: 59.86
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 24011.779884405114
Median total errors in population: 1963.8
Error averages by case: (731.1114161468366 736.4094161468303 730.5624161468365 738.4300161468449 734.0906161468307 730.4090161468326 730.628016146843 733.1876161468468 736.1544161468311 738.3664161468366 735.9910161468301 731.9726161468311 738.5012161468285 751.2144161468366 984.5094161468365 739.4284161468366 747.42041614683 749.4746161468287 742.4154161468423 732.3264161468366 732.1524161468366 794.1420161468458 820.906416146845 2175.339616146814 766.2448161468438 734.9576161468466 732.0554161468366 730.8344161468299 801.6916161468461 730.8522161468402)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 39.0 3.0 1.1999999999999993 4.399999999999999 1.7999999999999972 1.0 0.0 30.799999999999997 28.80000000000001 1416.2 16.799999999999997 2.4000000000000004 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 33.587
Average program size in population (points): 34.586
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 286
Genome diversity (% unique Plush genomes):	 0.404
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.404
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 16093380
--- Timings ---
Current time: 1481491146134 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (float_tan vector_integer_dup_times in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 8.2 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 1.6 75.8 0.19999999999999996]
Total: 1793.0
Mean: 59.766666
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 23727.535600000014
Median total errors in population: 1957.0
Error averages by case: (690.876 705.5483999999906 690.876 698.9476000000095 693.766999999992 700.6122000000004 700.7013999999997 702.8906000000129 706.5897999999925 698.141 695.7869999999912 692.6627999999936 698.5503999999947 716.875 970.645 698.112 706.9203999999911 711.6905999999947 715.5932000000072 692.515 701.816 752.3482000000148 1350.4970000000123 2351.784399999997 732.6628000000123 694.8896000000128 692.912 701.0927999999918 760.5364000000155 700.6949999999993)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 0.0 1.1999999999999993 3.3999999999999986 0.7999999999999972 1.0 0.0 17.200000000000003 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 3.799999999999997 0.19999999999999996)
Average genome size in population (length): 35.087
Average program size in population (points): 36.087
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 250
Genome diversity (% unique Plush genomes):	 0.393
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 250
Syntactic diversity (% unique Push programs):	 0.393
Total error diversity:				 0.094
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17145990
--- Timings ---
Current time: 1481491148598 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 1790.2
Mean: 59.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27398.12960000001
Median total errors in population: 1795.8
Error averages by case: (851.112 853.9613999999899 850.682 858.2110000000097 853.85099999999 850.5707999999945 850.6846000000079 853.3360000000133 856.3845999999918 856.516 855.5247999999901 851.4501999999909 856.7674000000069 861.745 982.047 855.414 866.6471999999902 873.2622000000074 873.1651999999963 852.244 852.032 896.1498000000115 922.5340000000112 2251.7513999999846 883.91780000001 854.642200000013 851.782 850.9489999999886 919.9106000000119 850.8844000000055)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 3.0 1.1999999999999993 3.3999999999999986 0.7999999999999972 1.0 0.0 29.799999999999997 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 38.948
Average program size in population (points): 39.947
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 402
Genome diversity (% unique Plush genomes):	 0.376
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 402
Syntactic diversity (% unique Push programs):	 0.376
Total error diversity:				 0.085
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 18314430
--- Timings ---
Current time: 1481491151191 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_sub integer_yankdup float_rot float_frominteger integer_inc)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 1790.2
Mean: 59.673332
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 30417.448600000018
Median total errors in population: 1795.8
Error averages by case: (951.199 953.3123999999843 950.52 958.2354000000093 953.9509999999839 950.4907999999862 950.6394000000113 953.5118000000128 956.1475999999866 956.227 955.7381999999843 951.2353999999862 955.9780000000114 959.674 1046.578 954.551 966.8111999999844 974.0560000000132 976.7727999999889 952.124 952.175 990.7854000000158 1028.5082000000145 2404.5994000000037 984.4140000000151 954.8174000000117 951.481 950.8507999999896 1021.1286000000177 950.9358000000137)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 4.0 4.199999999999999 0.1999999999999993 0.40000000000000036 3.0 60.0 3.0 1.8000000000000007 4.399999999999999 2.799999999999997 0.0 1.0 23.799999999999997 28.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 40.503
Average program size in population (points): 41.501
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 430
Genome diversity (% unique Plush genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 430
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.069
Error (vector) diversity:			 0.069
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 19529520
--- Timings ---
Current time: 1481491153910 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove vector_integer_length float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_sub integer_yankdup float_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 1790.2
Mean: 59.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 33351.98846047537
Median total errors in population: 1795.8
Error averages by case: (1040.8959692713497 1042.9860728680408 1040.6473112944284 1048.6541413946372 1043.578566450973 1040.5562624219342 1040.6160624219444 1043.2511375852919 1045.9876503034425 1046.7534712340755 1045.5754185637109 1041.7093718219994 1045.6390624219534 1054.5430552120554 1173.144848531562 1044.7735718220126 1056.6201376840122 1063.8444806486614 1075.1556921754766 1042.2111376840292 1041.8634624219399 1080.4829238401287 1122.6939894714942 2674.633614043035 1077.8881307528509 1044.6828185637407 1042.0415718220127 1040.9707038929125 1108.859761433734 1040.7280624219454)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 4.199999999999999 0.1999999999999993 0.40000000000000036 4.0 60.0 3.0 1.8000000000000007 3.3999999999999986 2.799999999999997 0.0 1.0 29.799999999999997 28.80000000000001 1417.2 25.200000000000003 3.4000000000000004 0.0 0.4 3.799999999999997 0.19999999999999996)
Average genome size in population (length): 40.356
Average program size in population (points): 41.356
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 252
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.079
Error (vector) diversity:			 0.079
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 20740200
--- Timings ---
Current time: 1481491156627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_stackdepth vector_integer_subvec integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1784.6000000000001
Mean: 59.486668
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 36518.09851334927
Median total errors in population: 1793.0
Error averages by case: (1130.6644596976942 1132.8208596976785 1130.889459697694 1138.7358596976967 1133.2808596976786 1130.6931403023118 1130.6421403023044 1132.8614596976984 1135.4822596976874 1136.887459697694 1135.1796596976774 1131.8654596976796 1135.3448596976982 1144.480459697694 1260.013459697694 1135.041459697694 1146.0916596976763 1153.1826596976978 1164.3130596976812 1132.471459697694 1131.5504596976941 1169.4036596977116 1658.7094596977101 2793.3222596976975 1166.436059697711 1134.3172596976983 1132.177459697694 1131.178740302303 1199.5342596977125 1130.5267403023)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 59.0 2.0 2.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 29.799999999999997 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 41.245
Average program size in population (points): 42.243
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 168
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.081
Error (vector) diversity:			 0.081
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 21977550
--- Timings ---
Current time: 1481491159381 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_yank} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_yank vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items integer_dup integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yank integer_sub integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1784.6000000000001
Mean: 59.486668
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 43410.573599999996
Median total errors in population: 1793.0
Error averages by case: (1370.998 1373.1347999999778 1370.631 1378.2307999999903 1373.522999999978 1370.5551999999898 1370.6187999999943 1373.1643999999862 1373.3966000000098 1376.246 1375.3155999999765 1371.6211999999812 1375.4951999999869 1382.564 1464.477 1374.597 1385.7453999999764 1393.0923999999877 1400.800399999984 1372.173 1371.791 1408.3390000000225 1892.2636000000207 2776.7352000000224 1408.420000000022 1374.5191999999868 1371.907 1370.8531999999975 1438.6098000000238 1370.7558000000104)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 59.0 4.0 1.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.007
Average program size in population (points): 43.005
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 225
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.076
Error (vector) diversity:			 0.076
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 23237760
--- Timings ---
Current time: 1481491162184 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (float_tan vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_rot integer_yank integer_sub integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace vector_integer_pushall integer_sub float_dup_items integer_dup integer_stackdepth integer_dup integer_yank integer_sub integer_yankdup integer_sub integer_yankdup float_shove integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1784.6000000000001
Mean: 59.486668
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 35403.725799999986
Median total errors in population: 1790.2
Error averages by case: (1121.222 1123.3257999999844 1120.48 1128.119600000005 1123.8145999999851 1120.446799999985 1120.6072000000077 1123.3538000000076 1122.0894000000148 1126.059 1125.6055999999842 1121.2717999999861 1125.8730000000073 1128.985 1209.53 1124.543 1136.290999999984 1143.5934000000059 1146.7411999999874 1122.04 1122.061 1159.6576000000161 1196.8522000000144 2481.4863999999952 1153.3736000000156 1124.7652000000069 1121.498 1120.6370000000065 1188.4776000000168 1120.925000000015)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 2.0 1.8000000000000007 3.3999999999999986 3.799999999999997 0.0 0.0 30.799999999999997 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.592
Average program size in population (points): 43.592
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 266
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.06
Error (vector) diversity:			 0.06
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 24515520
--- Timings ---
Current time: 1481491165036 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1783.6000000000001
Mean: 59.453335
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 41775.730922231734
Median total errors in population: 1790.2
Error averages by case: (1291.0965574077247 1293.2495574077016 1290.5025574077247 1298.5243574077235 1293.661357407702 1290.378157407706 1290.510957407722 1293.251557407722 1292.0465574077439 1296.7935574077246 1295.6271574077014 1291.8627574077054 1295.6987574077214 1307.7935574077246 1430.2185574077246 1294.8845574077247 1306.0679574077003 1313.2351574077206 1329.0767574077083 1292.0225574077247 1291.8815574077246 1329.8191574077484 2272.931957407726 2935.4207574077614 1332.5147574077457 1294.8883574077217 1292.2425574077247 1290.5539574077218 1358.1999574077502 1290.774957407743)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 4.0 1.8000000000000007 4.399999999999999 2.799999999999997 1.0 0.0 0.7999999999999972 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.727
Average program size in population (points): 43.727
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 208
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.07
Error (vector) diversity:			 0.07
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 25797330
--- Timings ---
Current time: 1481491167792 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_yankdup float_rot integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1783.6000000000001
Mean: 59.453335
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 39280.88424677319
Median total errors in population: 1790.2
Error averages by case: (1250.8858595801673 1252.9254810998616 1250.6736656342405 1258.3310691993283 1253.4286457662377 1250.477334365752 1250.5189207519957 1253.0774059365453 1252.057405936565 1256.3637978544846 1255.182922274338 1251.6290691993092 1255.3758059365462 1259.3286540101626 1334.8381583495268 1254.6952172319284 1265.857452034269 1273.2318125461638 1276.8812352463628 1252.1432059365463 1251.5772059365465 1288.2727685424356 1318.136713931697 2606.688949671745 1282.6554691993495 1254.4032220833826 1251.822922274361 1250.6099207519958 1318.2044185925117 1250.6095368988395)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.03665572881693843 0.16334427118306158 0.3999999999999999 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 1.4000000000000004 4.0 59.0 4.0 1.8000000000000007 4.399999999999999 1.7999999999999972 0.0 0.0 30.799999999999997 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.16334427118306158 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.595
Average program size in population (points): 44.593
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 124
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 27105180
--- Timings ---
Current time: 1481491170582 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 integer_sub vector_integer_pushall float_mod integer_sub vector_integer_pushall float_dup_items float_sub integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup float_rot integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1783.6000000000001
Mean: 59.453335
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 47980.71184446848
Median total errors in population: 1790.0
Error averages by case: (1541.0163856997178 1543.0106729648464 1541.4740099409144 1548.5559885821842 1543.4128507737078 1541.1696000000159 1541.066200000012 1542.915827625373 1542.1210000000183 1546.9490000391727 1545.3530507737069 1542.5204040904127 1545.3591999999855 1551.2222848031977 1633.8123576971732 1545.3892040904313 1555.5074255990978 1562.4209336332408 1566.876547615117 1542.8174255991207 1541.685 1578.4952112106034 1618.404284763186 2871.442707424833 1573.0807329525474 1544.5682507737158 1542.8292040904314 1541.1690000000121 1605.2222837257068 1540.844799999984)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 4.0 1.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 29.799999999999997 28.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.19
Average program size in population (points): 44.186
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 139
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.079
Error (vector) diversity:			 0.08
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 28400880
--- Timings ---
Current time: 1481491173411 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_stackdepth integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1783.6000000000001
Mean: 59.453335
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 53030.15039999999
Median total errors in population: 1784.6000000000001
Error averages by case: (1710.396 1712.4255999999777 1711.05 1718.1559999999884 1722.8685999999775 1710.7890000000202 1710.6456000000157 1712.4413999999827 1711.1242000000204 1716.395 1714.547399999977 1711.9669999999805 1714.7541999999844 1719.712 1796.276 1714.91 1724.670599999977 1731.4323999999833 1735.7787999999841 1712.425 1711.121 1746.6854000000233 1782.8102000000188 3014.3634000000234 1741.0312000000208 1713.807399999984 1712.205 1710.7106000000183 1774.287600000024 1710.3637999999796)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 59.0 4.0 2.8000000000000007 3.3999999999999986 1.7999999999999972 1.0 0.0 29.799999999999997 29.80000000000001 1416.2 25.200000000000003 1.4000000000000004 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.808
Average program size in population (points): 44.805
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 148
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.065
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 29715120
--- Timings ---
Current time: 1481491176164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction float_dup_times} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult float_dup_times vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [0.0 2.2 1.0 10.4 3.2 0.8 0.6 2.4 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 2.0 1.0 38.8 31.80000000000001 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 1783.6000000000001
Mean: 59.453335
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 49730.4898460284
Median total errors in population: 1784.6000000000001
Error averages by case: (1600.5669421196826 1602.60854211966 1601.2279421196827 1608.371742119669 1603.130942119661 1600.9108578803307 1600.8134578803265 1602.752942119666 1601.3181421197035 1606.5259421196827 1604.6039421196595 1602.1067421196626 1604.9327421196663 1610.0599421196828 1686.8619421196827 1604.9569421196827 1614.508942119658 1621.858742119667 1626.410542119665 1602.4489421196827 1601.2949421196827 1636.9727421197078 1673.3313421197033 2908.068142119706 1631.1895421197057 1603.9219421196665 1602.2569421196827 1600.8742578803347 1664.9927421197085 1600.610377275692)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 5.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 4.0 1.8000000000000007 3.3999999999999986 2.799999999999997 0.0 0.0 9.799999999999997 29.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.14030230586813974 19.799999999999997 0.16017028665036603)
Average genome size in population (length): 43.693
Average program size in population (points): 44.691
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 101
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.083
Error (vector) diversity:			 0.084
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 31025910
--- Timings ---
Current time: 1481491179022 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction float_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_inc integer_dup float_dup_items float_sub float_inc integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_inc integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [1.0 1.2000000000000002 2.0 11.4 3.2 0.8 0.6 2.4 0.8 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 2.0 0.0 37.8 31.80000000000001 1416.2 28.799999999999997 2.4000000000000004 2.0 0.6 74.8 0.19999999999999996]
Total: 1780.6000000000001
Mean: 59.353333
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 45851.62192997715
Median total errors in population: 1784.3999999999999
Error averages by case: (1470.4649306484503 1472.3995352434242 1471.1403323749703 1478.3841832385888 1473.1206532614315 1470.7918286550541 1470.7081871840644 1472.7595738459434 1471.1511738459758 1476.477260900704 1474.8689327702064 1471.8949832385779 1474.947773845944 1479.3122798492914 1553.383478656576 1474.8930239687452 1485.6083168593327 1492.4304886307577 1496.9303326349857 1472.0651738459549 1471.2871738459548 1506.8817029401907 1550.1171218201875 2794.1791045481004 1502.380783238621 1474.0080645485173 1472.1781327702297 1470.7705871840703 1535.5465324388856 1470.5402831433703)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 4.0 1.8000000000000007 4.399999999999999 2.799999999999997 1.0 0.0 29.799999999999997 29.80000000000001 1416.2 25.200000000000003 2.4000000000000004 0.0 0.14030230586813974 18.799999999999997 0.10929742682568167)
Average genome size in population (length): 43.13
Average program size in population (points): 44.129
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 32319810
--- Timings ---
Current time: 1481491181786 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction float_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_inc integer_dup float_dup_items float_sub float_inc integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_inc integer_stackdepth integer_stackdepth integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [1.0 1.2000000000000002 2.0 11.4 3.2 0.8 0.6 2.4 0.8 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 2.0 0.0 37.8 31.80000000000001 1416.2 28.799999999999997 2.4000000000000004 2.0 0.6 74.8 0.19999999999999996]
Total: 1780.6000000000001
Mean: 59.353333
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 40834.910415450184
Median total errors in population: 1783.6000000000001
Error averages by case: (1270.4313805150064 1272.4231805149877 1271.1493805150064 1278.9291805150078 1272.9129805149873 1280.8883805150263 1270.726980515006 1282.6147805150067 1280.9825805150253 1277.2133805150063 1276.6237805149867 1272.5119805149889 1285.1541805150075 1287.4593805150064 1405.830380515006 1275.1143805150064 1293.5001805149866 1292.686980515005 1306.8139805149922 1271.9053805150063 1281.3103805150063 1309.0433805150262 1816.6213805150219 2913.5235805150282 1357.2517805150253 1275.1573805150074 1273.1813805150064 1270.743980515006 1341.7977805150279 1270.406580514986)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 5.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 1.0 2.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 8.799999999999997 30.80000000000001 582.8 15.799999999999997 1.4000000000000004 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.134
Average program size in population (points): 43.132
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 223
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.072
Error (vector) diversity:			 0.072
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 33583830
--- Timings ---
Current time: 1481491184529 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction float_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_inc integer_dup float_dup_items float_sub float_inc integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_inc integer_stackdepth integer_stackdepth integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [1.0 1.2000000000000002 2.0 11.4 3.2 0.8 0.6 2.4 0.8 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 2.0 0.0 37.8 31.80000000000001 1416.2 28.799999999999997 2.4000000000000004 2.0 0.6 74.8 0.19999999999999996]
Total: 1780.6000000000001
Mean: 59.353333
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 33399.73207389319
Median total errors in population: 1783.6000000000001
Error averages by case: (1050.474889129773 1052.4278891297602 1051.215889129773 1058.8274891297833 1053.0306891297596 1050.957689129787 1050.7864891297595 1052.6388891297854 1050.975089129786 1056.874889129773 1055.56008912976 1052.1992891297596 1055.171689129785 1062.727889129773 1141.891889129773 1055.020889129773 1067.055889129759 1073.502689129787 1080.5574891297624 1051.970889129773 1051.378889129773 1088.5938891297878 1145.0018891297857 2465.939089129772 1097.7254891297864 1054.5730891297849 1052.650889129773 1050.7914891297596 1118.7630891297895 1050.4456891297589)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08912977299851078 0.2891297729985108 0.6000000000000001 0.19999999999999996 4.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 1.0 2.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 9.799999999999997 30.80000000000001 1416.2 26.200000000000003 2.4000000000000004 0.0 0.2891297729985108 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 41.797
Average program size in population (points): 42.795
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 186
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.068
Error (vector) diversity:			 0.07
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 34837740
--- Timings ---
Current time: 1481491187197 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction float_inc} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_inc integer_dup float_dup_items float_sub float_inc integer_dup vector_integer_length integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (vector_integer_dup_times in1 vector_integer_replace vector_integer_pushall integer_sub float_dup_items integer_inc integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [1.0 1.2000000000000002 2.0 11.4 3.2 0.8 0.6 2.4 0.8 8.0 3.1999999999999993 2.1999999999999993 4.4 6.0 59.0 6.0 15.2 25.4 31.200000000000003 2.0 0.0 37.8 31.80000000000001 1416.2 28.799999999999997 2.4000000000000004 2.0 0.6 74.8 0.19999999999999996]
Total: 1780.6000000000001
Mean: 59.353333
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 35795.2127954566
Median total errors in population: 1783.6000000000001
Error averages by case: (1130.4620907025733 1132.2940907025559 1131.1570907025732 1138.4350907025787 1132.8274907025545 1130.881509297447 1130.711109297418 1132.3268907025824 1130.92189070259 1136.6700907025734 1135.1266907025547 1132.014890702556 1134.9830907025812 1140.7320907025733 1231.1290907025732 1134.9690907025733 1146.3158907025543 1153.1096907025808 1158.4516907025607 1131.8240907025734 1131.2250907025732 1170.055490702593 1224.3262907025883 2553.300490702581 1165.4076907025908 1134.2068907025814 1132.4280907025734 1130.7261092974181 1197.830690702594 1130.362309297407)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 5.0 3.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 59.0 2.0 1.8000000000000007 3.3999999999999986 1.7999999999999972 1.0 0.0 29.799999999999997 30.80000000000001 1416.2 26.200000000000003 2.4000000000000004 0.0 0.4 18.799999999999997 0.10929742682568167)
Average genome size in population (length): 41.504
Average program size in population (points): 42.499
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.077
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 36082860
--- Timings ---
Current time: 1481491189886 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult vector_integer_pushall integer_fromfloat float_dup_times integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 20.0 11.2 25.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1577.3999999999999
Mean: 52.58
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 35779.245567728234
Median total errors in population: 1783.6000000000001
Error averages by case: (1130.7289589242746 1132.0333589242548 1131.4709589242746 1138.8179589242761 1132.8055589242545 1131.0135589242966 1130.852358924272 1132.3949589242782 1130.9287589242876 1136.9249589242747 1134.4909589242538 1132.2237589242552 1134.6959589242772 1140.2909589242747 1220.7789589242745 1135.2179589242746 1145.4587589242524 1152.6943589242767 1158.5911589242585 1131.7929589242747 1130.8459589242746 1168.1063589242976 1222.3727589242926 2555.102958924282 1163.0113589242956 1133.6969589242772 1132.5089589242746 1130.869358924272 1198.0309589242981 1130.4927589242525)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 5.0 2.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 58.0 4.0 1.8000000000000007 2.3999999999999986 1.7999999999999972 0.0 0.0 19.799999999999997 30.80000000000001 917.2 26.200000000000003 1.4000000000000004 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 41.435
Average program size in population (points): 42.432
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 183
Genome diversity (% unique Plush genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.087
Error (vector) diversity:			 0.088
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 37325910
--- Timings ---
Current time: 1481491192618 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace vector_integer_pushall integer_sub float_inc float_dup_items integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_take integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 20.0 11.2 25.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1577.3999999999999
Mean: 52.58
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 39732.23739999999
Median total errors in population: 1780.6000000000001
Error averages by case: (1261.092 1261.7967999999767 1261.822 1269.031799999996 1262.7865999999758 1261.0384000000265 1260.8678000000027 1262.3737999999971 1260.9468000000177 1267.266 1264.223999999976 1262.6949999999783 1264.2309999999973 1271.702 1354.0 1265.511 1275.0769999999754 1282.1537999999948 1288.9553999999835 1261.824 1260.561 1297.7006000000258 1345.5712000000196 2738.579000000021 1293.425000000023 1263.4309999999966 1263.003 1260.8808000000026 1329.1730000000264 1260.5175999999735)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 5.0 2.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 58.0 4.0 1.8000000000000007 3.3999999999999986 1.7999999999999972 1.0 0.0 18.799999999999997 31.80000000000001 916.2 14.799999999999997 0.40000000000000036 1.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 41.59
Average program size in population (points): 42.588
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 391
Genome diversity (% unique Plush genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 391
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.081
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 38573610
--- Timings ---
Current time: 1481491195380 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_take integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 20.0 11.2 25.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1577.3999999999999
Mean: 52.58
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 35148.33980381283
Median total errors in population: 1780.6000000000001
Error averages by case: (1101.0997934604277 1101.5577934604094 1101.8737934604278 1110.0351934604325 1102.8539934604064 1100.8671934604504 1100.6895934604197 1102.4365934604343 1100.9313934604472 1108.3197934604277 1104.1619934604078 1103.1657934604082 1104.212993460435 1117.1037934604278 1236.2177934604279 1106.1047934604278 1115.2119934604068 1122.4859934604337 1139.0511934604115 1101.850793460428 1100.4147934604277 1139.0287934604494 1183.480393460447 2733.970393460452 1136.349993460447 1103.393193460435 1103.4267934604277 1100.7075934604197 1166.99519346045 1100.3403934604055)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.034536153148034376 0.2345361531480344 0.3999999999999999 0.19999999999999996 5.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 58.0 3.0 2.8000000000000007 3.3999999999999986 1.7999999999999972 0.0 0.0 19.799999999999997 30.80000000000001 917.2 26.200000000000003 1.4000000000000004 1.0 0.2345361531480344 15.200000000000003 0.19999999999999996)
Average genome size in population (length): 41.728
Average program size in population (points): 42.724
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 399
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 399
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.075
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 39825450
--- Timings ---
Current time: 1481491198317 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_fromfloat integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup float_rot integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 20.0 11.2 25.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1577.3999999999999
Mean: 52.58
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 36034.02
Median total errors in population: 1780.6000000000001
Error averages by case: (1141.258 1141.5795999999882 1142.129 1151.3068000000028 1142.8543999999838 1140.838400000017 1140.6627999999955 1142.3140000000033 1140.8810000000146 1149.66 1144.1315999999879 1144.296999999986 1144.2958000000044 1158.26 1243.788 1147.017 1154.8929999999843 1162.3850000000027 1178.601199999989 1141.829 1140.607 1177.4364000000157 1222.1914000000122 2491.6960000000045 1173.2012000000109 1143.5040000000038 1144.484 1140.6767999999956 1206.9260000000168 1140.315599999983)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 58.0 4.0 6.199999999999999 12.399999999999999 0.7999999999999972 0.0 0.0 17.799999999999997 30.80000000000001 915.2 26.200000000000003 1.4000000000000004 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.525
Average program size in population (points): 43.522
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 276
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.07
Error (vector) diversity:			 0.072
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41101200
--- Timings ---
Current time: 1481491201102 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot integer_min float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (float_mod in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 20.0 11.2 25.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1577.3999999999999
Mean: 52.58
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 40684.828529813356
Median total errors in population: 1779.6000000000001
Error averages by case: (1271.7279866117979 1271.8028000000004 1272.8439866117978 1286.563999999998 1272.9107999999828 1270.940400000018 1270.7700000000016 1272.5319999999977 1271.048000000016 1285.538 1274.335586611798 1278.2533999999841 1274.5845999999992 1311.676 1436.777986611798 1280.957 1283.584986611781 1292.2699999999982 1339.6093999999866 1271.9410101425667 1271.085 1302.7304000000186 1816.5256000000136 2769.5828000000156 1305.9743999999996 1274.1364000000003 1278.5159866117979 1270.7920000000017 1334.394000000019 1270.423999999982)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 20.0 3.0 1.8000000000000007 4.399999999999999 0.7999999999999972 1.0 0.0 1.7999999999999972 31.80000000000001 915.2 15.799999999999997 0.40000000000000036 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.825
Average program size in population (points): 43.822
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 173
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.087
Error (vector) diversity:			 0.089
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 42385950
--- Timings ---
Current time: 1481491203879 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_replacefirst vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult float_dup_times integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 19.0 12.2 26.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1573.0
Mean: 52.433334
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 41850.40129013445
Median total errors in population: 1577.3999999999999
Error averages by case: (1321.7987163378145 1322.0503163378282 1323.2187163378144 1341.780116337807 1322.9313163377951 1320.8367163378348 1320.669716337822 1322.6333163378076 1320.9971163378336 1341.5177163378144 1324.6927163378275 1332.4821163377976 1324.9881163378075 1381.3257163378144 1477.7977163378146 1334.7357163378144 1332.5979163377951 1342.1243163378037 1413.4451163377994 1321.9087163378144 1321.2197163378144 1347.1911163378347 1885.6625163378305 2413.057516337818 1358.8397163378013 1325.06971633782 1332.8617163378144 1320.695716337822 1380.9419163378361 1320.3297163377943)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 1.0 6.199999999999999 12.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 897.2 14.799999999999997 0.40000000000000036 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.547
Average program size in population (points): 43.545
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 306
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 306
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.071
Error (vector) diversity:			 0.072
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 43662360
--- Timings ---
Current time: 1481491206588 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 5.0 11.2 26.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1563.3999999999999
Mean: 52.113335
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57082.864857458815
Median total errors in population: 1577.3999999999999
Error averages by case: (1521.8107163378145 1522.3073163378322 1523.2307163378146 1542.602516337805 1522.861516337793 1520.8020836622084 1520.6393163378302 1522.4341163377985 1520.9617163378355 1541.9467163378145 1524.7567163378324 1532.785116337795 1525.1907163378023 1585.6147163378146 2096.0907163378147 1535.1107163378144 1532.4397163377932 1542.083116337801 1621.4759163377978 1521.8387163378145 1521.2477163378144 1556.3109163378374 1626.258716337832 11858.532516337562 1557.8967163377963 1525.2631163378264 1533.2147163378145 1520.66071633783 1586.1859163378379 1520.3109163377917)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 20.0 2.0 0.8000000000000007 12.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 82.79999999999995 24.200000000000003 2.4000000000000004 0.0 0.11633781453677378 3.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.073
Average program size in population (points): 43.072
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 263
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.067
Error (vector) diversity:			 0.068
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 44924550
--- Timings ---
Current time: 1481491209319 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 5.0 11.2 26.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1563.3999999999999
Mean: 52.113335
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 36706.99164939531
Median total errors in population: 1577.3999999999999
Error averages by case: (1161.8059749319182 1162.3001063504137 1163.253013685928 1182.3959569008543 1163.053248570436 1160.8130014805167 1160.6563152165177 1162.695761648862 1161.051915216542 1182.4258960490545 1165.046278670598 1173.2008771437363 1165.3441152165299 1223.888003656126 1337.4864742434966 1175.2115267735594 1173.4419130995984 1182.960235257551 1253.99737455959 1162.012861627054 1161.275115216524 1191.901502403646 1282.0239760821016 2294.191678693323 1219.129379685066 1165.77638922983 1173.7236044159824 1160.678873745533 1224.9130799020122 1160.3371997224165)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 20.0 1.0 5.199999999999999 12.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 469.20000000000005 15.799999999999997 1.4000000000000004 0.0 0.11633781453677378 6.200000000000003 0.04147098480789646)
Average genome size in population (length): 42.448
Average program size in population (points): 43.448
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 209
Genome diversity (% unique Plush genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.082
Error (vector) diversity:			 0.083
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 46197990
--- Timings ---
Current time: 1481491212096 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_inc float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup integer_inc float_frominteger)
Errors: [2.0 1.7999999999999998 4.0 30.4 3.2 0.8 0.6 2.4 0.8 29.0 3.8000000000000007 16.2 5.4 75.0 140.0 5.0 11.2 26.4 119.2 2.0 1.0 19.799999999999997 31.80000000000001 917.2 26.200000000000003 4.6 16.0 0.6 66.8 0.19999999999999996]
Total: 1563.3999999999999
Mean: 52.113335
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42003.31360000001
Median total errors in population: 1577.3999999999999
Error averages by case: (1341.689 1342.1194000000166 1343.063 1362.1465999999955 1343.078999999979 1340.7516000000146 1340.6320000000035 1342.6447999999937 1341.1128000000203 1362.045 1344.6430000000164 1352.6739999999816 1345.2371999999928 1401.076 1507.541 1354.529 1352.8745999999794 1362.3169999999927 1431.6375999999839 1341.987 1341.406 1369.7908000000211 1447.425000000017 2436.5977999999986 1372.9179999999835 1344.9880000000041 1352.866 1340.6508000000035 1402.4592000000223 1340.4123999999854)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 4.0 6.199999999999999 7.399999999999999 0.7999999999999972 0.0 0.0 1.7999999999999972 30.80000000000001 917.2 23.200000000000003 1.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 42.004
Average program size in population (points): 43.004
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 166
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.091
Error (vector) diversity:			 0.093
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 47458110
--- Timings ---
Current time: 1481491214853 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_pop} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall float_pop float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_min float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items float_sub integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult vector_integer_take integer_yankdup integer_sub integer_yankdup float_shove float_rot float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1559.0
Mean: 51.966667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62039.444426518756
Median total errors in population: 1577.3999999999999
Error averages by case: (1381.3807012053976 1382.0779012054097 1382.7877012053975 1402.5231012053919 1383.2601012053753 1380.5714987946062 1380.5346987946027 1382.9323012053915 1381.3459012054182 1401.4567012053974 1386.0015012054155 1392.5539012053769 1386.002101205392 1443.8917012053976 2287.6587012053974 1392.9907012053975 1401.1045012053758 1403.0175012053928 1479.1641012053801 1382.1727012053975 1381.7177012053976 1423.2381012054216 1496.6647012054161 20461.17530120477 1466.2125012053784 1385.8597012054038 1393.5787012053975 1380.559498794603 1456.5431012054219 1380.4670987945985)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.4105028244435036 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 2.0 1.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.6105028244435036 1.7999999999999972 30.80000000000001 82.79999999999995 15.799999999999997 1.4000000000000004 0.0 0.4 6.200000000000003 0.10929742682568167)
Average genome size in population (length): 41.668
Average program size in population (points): 42.665
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.091
Error (vector) diversity:			 0.095
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 48708150
--- Timings ---
Current time: 1481491217649 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction integer_div} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_shove} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min integer_div float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove vector_integer_length float_shove float_dup float_frominteger integer_inc)
Partial simplification: (in1 integer_sub vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup float_shove integer_sub integer_yankdup float_dup float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1559.0
Mean: 51.966667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 40148.863567728244
Median total errors in population: 1563.8
Error averages by case: (1281.3399589242747 1281.8823589242834 1282.7789589242745 1302.263958924274 1283.0603589242537 1280.678958924287 1280.590158924276 1282.7579589242744 1281.136158924294 1302.0899589242747 1284.156158924291 1292.4563589242553 1285.5583589242744 1340.9199589242746 1434.9639589242747 1289.0259589242746 1292.7955589242542 1303.095358924273 1372.654158924258 1282.0439589242746 1281.6269589242747 1306.718158924296 1385.1749589242913 2347.2959589242637 1311.3375589242569 1284.5991589242751 1292.6949589242747 1280.6049589242764 1342.158558924297 1280.403758924262)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 21.0 3.0 1.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 82.79999999999995 23.200000000000003 1.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.273
Average program size in population (points): 44.272
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 118
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.084
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 50006340
--- Timings ---
Current time: 1481491220508 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_pop} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall float_pop float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_min float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items float_sub integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult vector_integer_pushall integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1559.0
Mean: 51.966667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 46932.11453127443
Median total errors in population: 1563.3999999999999
Error averages by case: (1501.7496790509238 1502.4580790509413 1503.099679050924 1521.9590790509117 1503.0124790509 1500.8350387976466 1500.7020790509325 1502.7112790509118 1501.037279050948 1521.6786790509238 1504.1746790509421 1512.4896790509022 1505.0662790509123 1559.9886790509238 1674.9666790509239 1505.1676790509239 1511.7324790508987 1522.5632790509112 1589.7588790509042 1501.9986790509238 1501.3026790509239 1531.3824790509482 1598.3406790509453 2738.218679050933 1530.4246790509046 1504.7198790509347 1512.5676790509237 1500.7152790509324 1566.8636790509502 1500.4284790509028)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.07987335076852736 0.12012664923147265 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 0.0 1.1999999999999993 3.3999999999999986 3.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 82.79999999999995 23.200000000000003 1.4000000000000004 0.0 0.12012664923147265 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.497
Average program size in population (points): 44.491
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.074
Error (vector) diversity:			 0.075
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 51311250
--- Timings ---
Current time: 1481491223369 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_pop} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall float_pop float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_min float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1559.0
Mean: 51.966667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47773.18865561201
Median total errors in population: 1563.3999999999999
Error averages by case: (1531.7087163378144 1532.3174460977589 1533.0317163378145 1551.8669111302547 1533.3120161468194 1530.8130000000067 1530.7544000000041 1532.9751999999903 1531.381000000017 1551.580911130262 1534.4996669380746 1542.3781576594647 1535.415957659471 1589.5216669380616 1695.8747163378146 1535.1009899924966 1542.4672898229378 1552.7703899924861 1619.0823477292472 1532.281 1531.617839071529 1559.2500460977633 1633.0472161468506 2715.4195328330284 1561.0725841843382 1534.8067657766478 1542.489008797188 1530.7718000000045 1594.9355624538696 1530.644799999993)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 3.0 0.1999999999999993 3.3999999999999986 3.799999999999997 1.0 1.0 0.7999999999999972 29.80000000000001 417.20000000000005 6.799999999999997 1.5999999999999996 0.0 0.4 5.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.467
Average program size in population (points): 44.464
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 52615260
--- Timings ---
Current time: 1481491226173 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_concat} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_pop} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub float_rot integer_dup integer_add integer_stackdepth vector_integer_take integer_dup vector_integer_length integer_stackdepth integer_mult vector_integer_concat vector_integer_pushall float_pop float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove integer_min float_frominteger integer_inc)
Partial simplification: (vector_integer_dup_times in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_stackdepth integer_mult vector_integer_pushall integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 3.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 139.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1559.0
Mean: 51.966667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49778.91222020832
Median total errors in population: 1559.0
Error averages by case: (1601.3465608002286 1601.8140748668454 1602.5665926623797 1621.2222860535765 1603.5409608002044 1600.4729251331546 1600.5707578087904 1603.095474866815 1601.6393607811222 1620.9924428251231 1603.966686053606 1611.8276270538668 1605.51876483769 1658.3971536722347 1758.6319262337718 1604.4885608002287 1612.5315743757153 1623.024711263821 1688.2359756832336 1602.5031184416498 1601.8558748668297 1628.5304183868018 1691.956340336404 2718.800503467632 1630.6103790244365 1604.3585648377166 1611.920146558793 1600.6516437421894 1663.0610561646213 1600.779757808815)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 20.0 2.0 1.8000000000000007 4.399999999999999 2.799999999999997 0.0 1.0 2.799999999999997 29.80000000000001 81.79999999999995 16.799999999999997 1.5999999999999996 0.0 0.11633781453677378 5.200000000000003 0.04147098480789646)
Average genome size in population (length): 43.363
Average program size in population (points): 44.361
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 203
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.082
Error (vector) diversity:			 0.083
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 53916150
--- Timings ---
Current time: 1481491228973 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 61.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1478.0
Mean: 49.266666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 40255.517223792944
Median total errors in population: 1559.0
Error averages by case: (1281.146000793098 1281.8610007931109 1282.438000793098 1301.5972007930911 1283.6956007930812 1280.2774007930814 1280.44320079309 1283.21560079309 1281.754200793114 1301.565000793098 1283.7758007931106 1292.0416007930833 1285.78460079309 1340.4320007930983 1449.9620007930982 1284.417000793098 1292.6920007930808 1304.207800793089 1370.791200793085 1282.638000793098 1281.907000793098 1311.0766007931156 1372.5298007931121 2451.249200793111 1310.261200793085 1284.2100007931053 1292.091000793098 1280.4432007930893 1346.2356007931164 1280.778400793115)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.8000000000000007 0.1999999999999993 1.4000000000000004 4.0 61.0 2.0 1.8000000000000007 4.399999999999999 3.799999999999997 1.0 1.0 2.799999999999997 29.80000000000001 81.79999999999995 16.799999999999997 2.4000000000000004 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.391
Average program size in population (points): 44.388
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 227
Genome diversity (% unique Plush genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.067
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 55217880
--- Timings ---
Current time: 1481491231712 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (float_min in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 61.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1478.0
Mean: 49.266666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50976.34978566337
Median total errors in population: 1559.0
Error averages by case: (1641.1044609792418 1641.7726609792592 1642.360460979242 1661.2240609792295 1643.6098609792182 1640.3303000507474 1640.4821000507523 1643.288860979225 1641.655260979265 1661.088460979242 1643.4088609792584 1651.8300609792218 1645.5018609792235 1699.098460979242 1802.253460979242 1644.2584609792418 1651.6888609792177 1663.1098609792227 1728.5852609792234 1642.5874609792418 1641.8254609792418 1670.1104609792656 1731.0642609792603 2754.7756609792596 1668.514460979225 1643.9700609792526 1651.723460979242 1640.4823000507527 1703.842260979267 1640.802300050794)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 1.4000000000000004 3.0 61.0 3.0 1.8000000000000007 4.399999999999999 3.799999999999997 0.0 0.0 2.799999999999997 30.80000000000001 918.2 2.799999999999997 0.40000000000000036 0.0 0.4 20.799999999999997 0.11953576453822612)
Average genome size in population (length): 42.824
Average program size in population (points): 43.821
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.07
Error (vector) diversity:			 0.071
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 56502600
--- Timings ---
Current time: 1481491234451 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_mod vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 integer_sub vector_integer_pushall vector_integer_replace integer_sub float_dup_items float_sub integer_dup integer_dup integer_dup integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup integer_yankdup integer_sub integer_yankdup float_shove float_rot float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 29.4 4.2 0.2 0.4 3.4 1.8 28.0 2.8000000000000007 15.2 6.4 74.0 61.0 4.0 12.2 27.4 118.2 3.0 2.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 3.5999999999999996 15.0 0.4 67.8 0.8]
Total: 1478.0
Mean: 49.266666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49400.0868
Median total errors in population: 1559.0
Error averages by case: (1581.177 1582.0100000000168 1582.352 1601.4753999999864 1583.6519999999757 1580.3781999999762 1580.5173999999827 1583.316199999983 1581.7102000000232 1600.894 1583.6892000000173 1591.8629999999803 1585.669599999985 1638.974 1747.3 1584.511 1592.2087999999753 1604.1399999999828 1667.5083999999827 1582.633 1581.876 1611.0790000000245 1674.891000000019 2898.264000000026 1609.9179999999824 1584.1980000000144 1591.83 1580.5173999999831 1650.697800000026 1580.8362000000236)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 21.0 1.0 1.8000000000000007 4.399999999999999 3.799999999999997 1.0 1.0 2.799999999999997 30.80000000000001 918.2 25.200000000000003 2.4000000000000004 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.13
Average program size in population (points): 44.125
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 144
Genome diversity (% unique Plush genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.077
Error (vector) diversity:			 0.077
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 57796500
--- Timings ---
Current time: 1481491237314 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dup vector_integer_subvec integer_dup vector_integer_subvec integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50462.36488763833
Median total errors in population: 1559.0
Error averages by case: (1621.1361585290153 1621.787758529033 1622.0611585290153 1641.5353585290006 1623.5623585289902 1620.3586414709594 1620.5046414709664 1623.2279585289982 1621.66315852904 1641.0261585290152 1623.7861585290336 1631.8815585289938 1625.4761585289984 1679.0401585290153 1765.3901585290153 1624.2571585290152 1632.29955852899 1643.2373585289963 1708.4743585289962 1622.5931585290152 1621.8911585290152 1647.456958529041 1711.3127585290363 2833.5135585290277 1650.1097585289956 1624.1705585290301 1631.9051585290154 1620.5060414709671 1687.378758529042 1620.8210414710102)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 21.0 2.0 1.8000000000000007 4.399999999999999 3.799999999999997 0.0 1.0 2.799999999999997 30.80000000000001 81.79999999999995 16.799999999999997 0.40000000000000036 0.0 0.4 20.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.39
Average program size in population (points): 44.387
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.082
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 59098200
--- Timings ---
Current time: 1481491240123 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest vector_integer_yankdup vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest vector_integer_dup_times in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53314.79356016759
Median total errors in population: 1559.0
Error averages by case: (1720.975301258305 1721.5183012583248 1721.162301258305 1741.2075012582884 1723.511101258279 1720.22218186289 1720.3769818628955 1723.0599012582845 1721.5427012583314 1740.956301258305 1723.4417012583253 1731.6631012582814 1725.4075012582844 1778.364301258305 1834.6083012583051 1723.967301258305 1732.0887012582793 1742.8947012582828 1808.4439012582839 1722.5003012583052 1721.7883012583052 1748.5545012583307 1798.9131012583266 2839.5671012583184 1747.8651012582843 1723.8443012583211 1731.570301258305 1720.3795818628957 1783.6963012583317 1720.7025818629431)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 21.0 1.0 8.2 17.6 3.799999999999997 1.0 0.0 2.799999999999997 30.80000000000001 918.2 16.799999999999997 0.40000000000000036 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.926
Average program size in population (points): 44.924
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 234
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.067
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 60415980
--- Timings ---
Current time: 1481491242963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items float_sub integer_dup vector_integer_subvec integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53338.92128789523
Median total errors in population: 1478.0
Error averages by case: (1720.9663018764118 1721.4426171054345 1720.4033018764117 1741.4140171054057 1723.4844171053971 1730.2748977100086 1730.4338977100142 1723.2346171054037 1731.557217105441 1740.9890171054187 1723.3836596977114 1731.6012171053992 1735.4420171054019 1778.1550171054187 1804.2253018764118 1723.9890171054187 1732.1780447375354 1742.5328171054016 1808.4744171054008 1722.5099022899694 1731.8220171054188 1745.8094171054413 1805.5178171054376 2821.1288171054316 1747.8442171054014 1723.8514171054314 1731.584459697694 1730.432097710014 1783.4946171054414 1730.7446977100526)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.2596976941318603 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 60.0 4.0 2.1999999999999993 17.6 3.799999999999997 1.0 0.45969769413186023 2.799999999999997 30.80000000000001 81.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.911
Average program size in population (points): 45.906
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 324
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 61763310
--- Timings ---
Current time: 1481491245858 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace integer_flush integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace vector_integer_pushall integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dup integer_dup integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60392.39246399538
Median total errors in population: 1478.0
Error averages by case: (1890.972 1891.5726000000138 1890.349 1912.1543999999817 1893.4085999999756 1890.2531999999753 1890.4087850398398 1892.9910939156223 1891.498600000025 1912.135 1893.4350000000188 1902.2897999999784 1895.4023999999765 1967.062 2055.614 1894.233 1901.8401999999749 1912.171799999975 2008.49719999998 1892.453 1891.892 1919.414800000025 2867.832399999963 3974.4430000000684 1929.8695999999807 1893.912800000018 1902.191 1890.4067999999766 1952.9724000000258 1890.7159850398882)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.09391564547484021 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 61.0 1.0 0.1999999999999993 17.6 9.799999999999997 1.0 1.0 1.7999999999999972 2.8000000000000114 418.20000000000005 23.200000000000003 1.5999999999999996 0.0 0.4 15.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.517
Average program size in population (points): 45.513
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 259
Genome diversity (% unique Plush genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.06
Error (vector) diversity:			 0.06
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 63098820
--- Timings ---
Current time: 1481491248739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_pushall float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_replace vector_integer_pushall float_inc integer_sub vector_integer_pushall float_dup_items integer_dup float_sub integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56289.405
Median total errors in population: 1478.0
Error averages by case: (1820.983 1821.6439999999989 1820.335 1839.7859999999819 1823.4597999999778 1820.2693999999767 1820.4289999999776 1823.1357999999786 1821.5444000000234 1839.295 1822.790600000017 1830.9313999999792 1825.9229999999773 1877.032 1913.079 1823.909 1832.3175999999762 1842.2089999999753 1906.6979999999808 1822.473 1822.343 1851.0684000000226 1902.1260000000204 2939.6038000000217 1846.5307999999827 1823.254000000015 1830.815 1820.4287999999774 1884.2512000000243 1820.7400000000232)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 60.0 3.0 2.1999999999999993 5.399999999999999 3.799999999999997 1.0 1.0 4.799999999999997 30.80000000000001 81.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.548
Average program size in population (points): 45.544
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 167
Genome diversity (% unique Plush genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.071
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 64435260
--- Timings ---
Current time: 1481491251649 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_fromfloat integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60738.50184760047
Median total errors in population: 1472.3999999999999
Error averages by case: (1970.9687425026698 1971.7247425026474 1970.2827425026699 1989.0897425026503 1973.3559425026444 1970.2744185273161 1970.4320185273182 1973.1055425026468 1971.5242573181456 1988.5537425026698 1972.37634250269 1980.018742502646 1976.4819425026449 2024.6737425026697 2054.10274250267 1973.8057425026698 1983.1665425026433 1991.9317425026427 2053.629342502649 1972.4147425026697 1972.9338573181192 1997.5951425026967 2052.563742502692 3059.373942502696 1996.6045425026496 1972.7393425026885 1980.0387425026697 1970.4300185273182 2033.5725425026972 1970.7364573181453)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.7574077246549022 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 3.0 6.199999999999999 8.399999999999999 3.799999999999997 0.4425922753450977 0.0 2.799999999999997 29.80000000000001 918.2 21.200000000000003 0.40000000000000036 0.0 0.14030230586813974 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.523
Average program size in population (points): 45.519
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 303
Genome diversity (% unique Plush genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.075
Error (vector) diversity:			 0.077
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 65770950
--- Timings ---
Current time: 1481491254569 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items vector_integer_subvec integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_sub integer_yankdup float_rot float_shove float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55994.1756118578
Median total errors in population: 1472.3999999999999
Error averages by case: (1790.9968003952595 1791.728000395237 1790.3418003952595 1809.7056003952393 1793.4188003952377 1800.2960003952367 1800.454400395235 1803.1956003952369 1791.570400395282 1809.4368003952593 1792.8360003952764 1800.5446003952397 1796.7480003952342 1852.4328003952594 1891.3708003952597 1794.0368003952594 1804.297800395237 1812.4876003952334 1884.492400395242 1802.4528003952594 1803.1848003952593 1817.305800395283 2335.1540003952587 2954.3124003952844 1831.852800395242 1793.2168003952793 1800.8288003952593 1790.4570003952356 1854.2574003952834 1800.7620003952823)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 21.0 3.0 8.2 5.399999999999999 3.799999999999997 0.0 0.0 4.799999999999997 30.80000000000001 918.2 23.200000000000003 0.40000000000000036 0.0 0.4 20.799999999999997 0.8)
Average genome size in population (length): 44.239
Average program size in population (points): 45.237
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 312
Genome diversity (% unique Plush genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 312
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.067
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 67098120
--- Timings ---
Current time: 1481491257451 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51930.04774690014
Median total errors in population: 1472.3999999999999
Error averages by case: (1670.9951585290153 1671.8947585289934 1670.3231585290152 1690.0575585290005 1673.4709585289936 1680.2771562864104 1670.439556286415 1683.1821585289977 1681.600958529038 1689.7141585290153 1672.396158529032 1680.3651585289952 1686.8217585289967 1727.3831585290152 1766.9471585290153 1674.0371585290152 1683.688158528992 1692.7217585289968 1756.9239585289968 1672.4951585290153 1683.1941585290153 1701.5939585290375 1755.2105585290349 2855.1497585290344 1697.733158528998 1672.7851585290293 1680.2881585290152 1680.4387562864158 1737.1641585290388 1670.7547562864572)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 61.0 3.0 4.199999999999999 17.6 3.799999999999997 1.0 0.0 2.799999999999997 30.80000000000001 79.79999999999995 4.799999999999997 1.5999999999999996 0.0 0.4 10.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.076
Average program size in population (points): 46.072
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 289
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.066
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 68450400
--- Timings ---
Current time: 1481491260279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_shove vector_integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_dup_times in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dup vector_integer_subvec integer_dup vector_integer_subvec integer_dup integer_dec integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup integer_yankdup integer_sub integer_yankdup float_rot float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 27.4 4.2 0.2 0.4 3.4 1.8 26.0 0.8000000000000007 13.2 8.4 72.0 61.0 4.0 14.2 27.4 116.2 3.0 4.0 22.799999999999997 30.80000000000001 920.2 23.200000000000003 1.5999999999999996 13.0 0.4 69.8 0.8]
Total: 1472.3999999999999
Mean: 49.08
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51502.02843841837
Median total errors in population: 1472.3999999999999
Error averages by case: (1660.983805799416 1661.8391114697142 1660.2758057994158 1680.331405041213 1663.4927559621765 1660.2691062719853 1660.4259062719855 1663.240625667374 1661.6072256674197 1679.8196050412314 1662.3277533089972 1670.4260411330201 1666.9126411330178 1717.31575330898 1748.8458057994158 1663.9774196133235 1673.903214043295 1682.8808196132998 1747.5921659305095 1662.5202256673965 1663.2307615440045 1689.328511469759 1739.4707559622188 2792.253341790716 1687.672598650317 1662.7123792464668 1670.3481190503803 1660.4225062719854 1726.851565617182 1660.7507062720315)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.8596976941318601 0.2596976941318603 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 60.0 1.0 4.199999999999999 17.6 3.799999999999997 1.0 0.9955743020119492 2.799999999999997 30.80000000000001 79.79999999999995 23.200000000000003 0.40000000000000036 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.295
Average program size in population (points): 46.291
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 259
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.073
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 69809250
--- Timings ---
Current time: 1481491263221 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 4.8 0.0 65.4 4.2 0.2 0.4 3.4 1.8 68.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 13.200000000000003 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1192.0
Mean: 39.733334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62336.86573101633
Median total errors in population: 1472.3999999999999
Error averages by case: (2010.9526850398631 2011.8837910061666 2010.2626425465432 2029.9343896903167 2013.3479425922496 2010.231699999974 2010.386699999971 2012.9644999999714 2011.513100000026 2029.4452086120075 2012.142055393403 2020.1995814295822 2016.5469149601076 2069.99773422433 2095.3942925274837 2013.7463559934008 2022.9408997114288 2032.122742592245 2101.354629069988 2012.3845 2013.0916850398633 2039.6051495291194 2083.9314871733995 3482.0131519800166 2038.661855713938 2012.5190553934058 2020.0437814296047 2010.3886999999713 2078.163199367785 2010.6953000000262)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.09999999999999998 1.4 1.3 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 21.0 2.0 6.199999999999999 17.6 2.799999999999997 1.0 0.1850398632615189 2.799999999999997 30.80000000000001 77.79999999999995 16.799999999999997 0.40000000000000036 0.0 0.09999999999999998 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.197
Average program size in population (points): 45.194
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 226
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.076
Error (vector) diversity:			 0.076
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 71135160
--- Timings ---
Current time: 1481491266067 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 integer_sub vector_integer_pushall integer_sub float_inc float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_sub integer_yankdup float_frominteger integer_inc)
Errors: [1.0 4.8 0.0 65.4 4.2 0.2 0.4 3.4 1.8 68.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 13.200000000000003 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1192.0
Mean: 39.733334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48245.578879127694
Median total errors in population: 1472.3999999999999
Error averages by case: (1550.982027218581 1551.85462721856 1550.271027218581 1570.645227218563 1553.5212272185595 1550.3035428611242 1550.466142861125 1553.1482272185608 1551.613627218602 1570.257027218581 1552.393027218597 1560.686227218562 1557.0194272185602 1608.862027218581 1637.834027218581 1553.993027218581 1563.8072272185586 1572.9494272185584 1639.5686272185633 1552.529027218581 1553.281027218581 1580.5916272186028 1633.2476272185995 2714.217027218599 1578.8570272185646 1552.8770272185973 1560.679027218581 1550.465142861125 1617.8736272186034 1550.784942861167)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.6421787176504223 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 61.0 3.0 6.199999999999999 5.399999999999999 3.799999999999997 1.0 0.8421787176504223 2.799999999999997 30.80000000000001 77.79999999999995 23.200000000000003 1.5999999999999996 0.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.89
Average program size in population (points): 45.887
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 211
Genome diversity (% unique Plush genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.065
Error (vector) diversity:			 0.066
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 72481860
--- Timings ---
Current time: 1481491268943 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest float_min vector_integer_dup_times float_tan vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 4.8 0.0 65.4 4.2 0.2 0.4 3.4 1.8 68.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 13.200000000000003 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1192.0
Mean: 39.733334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58991.463622214615
Median total errors in population: 1472.3999999999999
Error averages by case: (1890.9564425922754 1891.807442592253 1890.2794425922752 1911.4720425922537 1893.4114425922517 1890.2655574076998 1890.4215574076973 1893.1040425922488 1891.5472425923 1911.3074425922753 1892.5122425922937 1901.208242592253 1896.6990425922475 1959.0464425922753 2059.1834425922752 1893.8684425922754 1902.7556425922505 1912.0938425922463 1995.640242592255 1892.4444425922754 1893.1574425922754 1919.942442592299 1971.5354425922967 3492.418442592315 1924.5802425922557 1892.9688425922968 1901.1354425922752 1890.4227574076974 1954.5464425923014 1890.7314425923)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.7999999999999998 0.2 0.15740772465490227 0.6000000000000001 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 56.0 4.0 6.199999999999999 17.6 3.799999999999997 1.0 1.0 2.799999999999997 30.80000000000001 77.79999999999995 23.200000000000003 1.5999999999999996 0.0 0.15740772465490227 11.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.0
Average program size in population (points): 44.996
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 162
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.065
Error (vector) diversity:			 0.066
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 73801860
--- Timings ---
Current time: 1481491271809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 61.4 4.2 0.2 0.4 3.4 1.8 64.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 9.200000000000003 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1160.0
Mean: 38.666668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57961.55127295013
Median total errors in population: 1472.3999999999999
Error averages by case: (1870.9907434146933 1872.3437480096718 1870.3221451412132 1893.781396004822 1873.4478660276704 1870.2982280831568 1870.4567866121715 1873.1687866121727 1871.5771866122234 1893.9150736669471 1873.602745536492 1883.186796004819 1876.952186612172 1941.5300926155344 1958.034291422819 1873.9188367349882 1882.5055296255737 1892.1789013969847 1973.856745401226 1872.478986612198 1873.396986612198 1899.5993157064283 1954.949734586432 3099.6021173143454 1907.3843960048218 1874.0180773147913 1882.9529455364725 1870.457586612172 1939.87814520513 1870.7648959096502)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.1866121978067943 0.38661219780679434 1.6 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 21.0 4.0 1.8000000000000007 7.600000000000001 3.799999999999997 2.0 1.0 2.799999999999997 30.80000000000001 73.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.38661219780679434 20.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.03
Average program size in population (points): 45.024
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 121
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.07
Error (vector) diversity:			 0.07
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 75122760
--- Timings ---
Current time: 1481491274690 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dup vector_integer_subvec integer_dup integer_dup integer_dec integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger integer_inc)
Errors: [1.0 0.7999999999999998 0.0 61.4 4.2 0.2 0.4 3.4 1.8 64.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 9.200000000000003 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1160.0
Mean: 38.666668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64485.4126143789
Median total errors in population: 1472.3999999999999
Error averages by case: (2090.9714255991207 2093.2128255991183 2090.360425599121 2121.8264255991 2093.389225599096 2090.263374400853 2090.4101744008494 2093.2664255990926 2091.494625599147 2122.8134255991204 2096.9918255991415 2109.4166255991 2097.252825599091 2191.3344255991206 2181.4634255991205 2093.970425599121 2100.9084255990974 2111.75422559909 2231.8068255991093 2092.4394255991206 2093.726425599121 2119.4180255991228 2180.387625599136 3110.7754255991267 2153.5196255991063 2097.358425599143 2109.2704255991207 2090.41017440085 2154.48742559914 2090.712225599147)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.174400879193934 1.4 0.19999999999999996 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 21.0 3.0 1.8000000000000007 5.399999999999999 5.799999999999997 1.0 0.0 3.799999999999997 30.80000000000001 73.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.174400879193934 14.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.023
Average program size in population (points): 45.017
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 254
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 254
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.075
Error (vector) diversity:			 0.075
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 76443450
--- Timings ---
Current time: 1481491277599 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 integer_div integer_sub vector_integer_pushall integer_sub float_dup_items vector_integer_subvec integer_dup integer_dup integer_dup integer_dec integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 61.4 4.2 0.2 0.4 3.4 1.8 64.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 9.200000000000003 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1160.0
Mean: 38.666668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58171.03963051759
Median total errors in population: 1192.0
Error averages by case: (1871.0288729943595 1874.711472994374 1870.4948729943596 1912.2064989170974 1873.5952729943356 1870.3132729943347 1870.4716729943373 1873.5132729943377 1871.588672994384 1914.965298917113 1880.6162989171314 1897.4984989170912 1878.0764729943364 2012.582298917113 1984.5662989171128 1874.5362989171128 1878.461498917088 1892.443098917089 2062.1776989170935 1872.5948729943595 1874.3548729943595 1908.2078989170989 1982.3924989171323 2947.1244989171078 1962.9448989170942 1881.0496989171277 1896.9792989171128 1870.4694729943374 1940.292698917138 1870.781272994384)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.7999999999999998 0.01857414446171929 0.2185741444617193 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 21.0 3.0 1.8000000000000007 5.399999999999999 3.799999999999997 1.0 0.0 3.799999999999997 24.19999999999999 73.79999999999995 13.200000000000003 0.40000000000000036 0.0 0.2185741444617193 14.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.517
Average program size in population (points): 45.511
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 420
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 420
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.079
Error (vector) diversity:			 0.08
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 77778960
--- Timings ---
Current time: 1481491280486 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec float_mult integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dec integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 61.4 4.2 0.2 0.4 3.4 1.8 64.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 9.200000000000003 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1160.0
Mean: 38.666668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54969.872877307345
Median total errors in population: 1192.0
Error averages by case: (1771.0471850398633 1774.4609285520344 1770.477142546543 1815.7112523156395 1773.5340814295805 1770.2636910061667 1770.4326910061643 1773.2142910061648 1771.571891006216 1818.3264523156595 1781.6745172149497 1799.731099367737 1778.634699367732 1922.951117214931 1884.1857925274837 1774.1966112736882 1778.1115141746047 1792.5881999999742 1977.9223274985072 1772.5092910061915 1774.6773516391725 1802.285728552 1863.5960741516587 2627.8508118469044 1872.8676106765663 1782.2415389939777 1799.6071335264069 1770.4308910061645 1834.0268700382828 1770.744091006216)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 1.8 5.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 21.0 2.0 1.8000000000000007 5.399999999999999 3.799999999999997 1.0 1.3516391725409134 2.799999999999997 30.80000000000001 73.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 14.200000000000003 0.8)
Average genome size in population (length): 44.972
Average program size in population (points): 45.969
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 436
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 436
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.085
Error (vector) diversity:			 0.085
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 79128120
--- Timings ---
Current time: 1481491283442 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup vector_integer_subvec integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup integer_yankdup float_rot integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 51.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1111.0
Mean: 37.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59975.18093019619
Median total errors in population: 1192.0
Error averages by case: (1931.0314731403098 1934.204007495256 1930.4378748668298 1975.199520522883 1933.4698955623098 1930.282441470959 1930.4449999999706 1933.1483999999723 1931.5612000000256 1977.7439981850112 1940.8878258623563 1959.0239670521025 1938.4853576594517 2081.975772941398 2043.6790211484356 1934.1618401152869 1937.7736328363308 1952.571504777281 2135.225706518289 1932.48 1934.9608390715289 1960.9131751919383 2017.9497641210708 3006.8898635351184 2027.6877935769758 1941.3056564792346 1958.4279677214627 1930.446399999971 2002.0599210467838 1930.7511092974528)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 2.4 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 25.0 1.0 0.1999999999999993 5.399999999999999 17.799999999999997 1.0 0.0 3.799999999999997 24.19999999999999 73.79999999999995 4.799999999999997 0.40000000000000036 0.0 0.4 14.200000000000003 0.10929742682568167)
Average genome size in population (length): 44.477
Average program size in population (points): 45.474
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 345
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 345
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.08
Error (vector) diversity:			 0.081
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 80462430
--- Timings ---
Current time: 1481491286357 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 51.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1111.0
Mean: 37.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55099.77681611787
Median total errors in population: 1192.0
Error averages by case: (1771.0841349597831 1773.4103349597985 1770.432134959783 1813.707934959766 1773.5073349597615 1770.3353022841316 1770.4837349597597 1773.1237349597602 1771.6035349598062 1816.5111349597832 1780.4241349598005 1798.5141349597634 1779.7789349597595 1922.7451349597832 1889.7741349597832 1774.267134959783 1779.4965349597608 1792.75493495976 1976.0299349597638 1772.5021349597832 1775.999134959783 1802.1869349597675 1865.5727349598021 2755.5975349597757 1870.3661349597655 1780.8605349597995 1797.8791349597832 1770.4801349597597 1839.5533349598063 1770.7947349598057)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 1.5163378145367739 3.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 21.0 2.0 0.1999999999999993 5.399999999999999 3.799999999999997 0.0 1.7163378145367738 6.799999999999997 30.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.348
Average program size in population (points): 45.345
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 187
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.102
Error (vector) diversity:			 0.103
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 81792870
--- Timings ---
Current time: 1481491289295 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_shove float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 51.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1111.0
Mean: 37.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54163.96145745881
Median total errors in population: 1160.0
Error averages by case: (1741.0267163378144 1732.2055163378266 1740.3507163378144 1781.7873163377985 1743.5937163377944 1730.3534836621645 1740.5153163377965 1743.4913163377983 1741.6919163378352 1784.5357163378144 1749.3233163378306 1767.8179163377945 1751.0869163377984 1893.9027163378144 1846.1407163378144 1744.2797163378145 1750.1635163377935 1763.2311163377976 1948.585916337795 1742.5507163378145 1747.1877163378144 1766.2397163378005 1845.9523163378335 2728.0477163378055 1840.0449163377964 1749.9665163378288 1767.3257163378144 1740.5123163377968 1811.225716337837 1730.8245163378356)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 3.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 29.0 2.0 0.1999999999999993 17.6 3.799999999999997 0.0 1.0 2.799999999999997 28.19999999999999 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.347
Average program size in population (points): 45.347
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 243
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 243
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 83123280
--- Timings ---
Current time: 1481491292257 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_shove float_rot float_frominteger integer_inc)
Partial simplification: (in1 integer_sub vector_integer_pushall vector_integer_replace integer_sub float_dup_items vector_integer_subvec integer_dup integer_dup integer_dup integer_dec float_mult integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 51.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1111.0
Mean: 37.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53065.52035651708
Median total errors in population: 1160.0
Error averages by case: (1671.0754590650147 1672.1692737366152 1670.3024165716947 1707.8423364425125 1673.6465166174044 1680.4163219541106 1680.573754629743 1683.6620740251328 1671.7056740251746 1709.6432703702055 1679.9824089218675 1698.809127297513 1680.6192737365866 1841.6231541374295 1807.706066552635 1674.4311300185525 1680.2267098850562 1692.954116617406 1909.423945420078 1672.5842740251512 1676.8140737366066 1697.0921141067408 1789.1626611985491 3481.716239609975 1783.660043486063 1680.566408921865 1698.637327297534 1680.572754629743 1737.0135554547803 1680.8878740251748)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.39971145522037865 3.0 61.0 1.0 1.8000000000000007 17.6 3.799999999999997 0.0 0.0 5.200000000000003 30.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.704
Average program size in population (points): 45.703
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 190
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.104
Error (vector) diversity:			 0.105
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 84464400
--- Timings ---
Current time: 1481491295228 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_add} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_add float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup float_sub integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 41.2 10.4 210.0 61.0 4.0 6.199999999999999 27.4 292.2 3.0 6.0 51.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 1111.0
Mean: 37.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54493.0926
Median total errors in population: 1160.0
Error averages by case: (1761.027 1762.7331999999924 1760.282 1781.6221999999811 1763.5767999999744 1760.3125999999734 1760.4697999999785 1763.4857999999783 1761.5910000000267 1781.558 1770.6200000000208 1789.288999999975 1769.1161999999774 1915.57 1848.86 1763.92 1768.0231999999733 1782.6781999999766 1971.449999999977 1762.572 1765.501 1794.0640000000094 1858.5736000000222 2513.119000000001 1859.451399999979 1771.0136000000177 1788.692 1760.4707999999785 1822.6632000000275 1760.7870000000269)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 61.0 1.0 1.8000000000000007 10.399999999999999 9.799999999999997 0.0 1.0 9.200000000000003 30.80000000000001 73.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 45.188
Average program size in population (points): 46.185
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 224
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.094
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 85820040
--- Timings ---
Current time: 1481491298225 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_add} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_add float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup float_pop integer_dup integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_rot float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 51.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1092.6
Mean: 36.42
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58957.05012853465
Median total errors in population: 1111.0
Error averages by case: (1891.0702576178212 1893.699257617798 1890.3832576178213 1900.2528576177965 1893.9968576177953 1890.3104576177939 1890.4668576177874 1893.5424576177895 1891.5882576178485 1898.3082576178213 1901.9594576178429 1919.6210576177975 1898.0856576177869 2050.9982576178213 2019.0712576178212 1894.8152576178213 1898.451457617794 1913.120457617786 2098.464457617798 1892.689257617821 1894.4852576178212 1938.5910576178467 2021.706457617845 3098.120257617791 2011.3790576177998 1902.0436576178454 1919.3192576178212 1890.4396576177876 1969.2912576178492 1890.7788576178489)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 1.6 1.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 1.8000000000000007 5.399999999999999 3.799999999999997 1.0 0.0 1.2000000000000028 30.80000000000001 65.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.4 14.200000000000003 0.8)
Average genome size in population (length): 44.216
Average program size in population (points): 45.212
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 314
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.092
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 87146520
--- Timings ---
Current time: 1481491301206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_add} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_add float_rot float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items vector_integer_subvec integer_dup integer_dup float_sub integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup integer_fromfloat integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 0.7999999999999998 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 51.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1092.6
Mean: 36.42
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59848.40834703722
Median total errors in population: 1111.0
Error averages by case: (1901.0252061265508 1903.2964061265297 1900.3562061265507 1910.906006126536 1903.575006126529 1900.2993938734255 1900.4585938734272 1903.65100612653 1901.5606061265746 1909.4722061265506 1911.6410061265694 1930.0196061265299 1908.2964061265293 2069.511206126551 2036.8682061265506 1904.4692061265507 1907.7688061265274 1922.4022061265289 2134.518606126532 1902.5482061265507 1904.4342061265506 1943.548806126573 2013.7818061265702 3705.5884061265465 2013.5564061265318 1912.216806126566 1929.7112061265507 1900.4575938734276 1961.7020061265753 1900.7670061265744)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.3938734492261525 1.4 0.19999999999999996 4.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 22.0 0.0 1.8000000000000007 0.6000000000000014 19.200000000000003 0.0 0.0 9.200000000000003 24.19999999999999 73.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.3938734492261525 14.200000000000003 0.0061265507738474945)
Average genome size in population (length): 44.087
Average program size in population (points): 45.081
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 290
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.1
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 88469130
--- Timings ---
Current time: 1481491304213 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_add} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup float_max integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_add float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_rot float_frominteger integer_inc)
Errors: [1.0 0.7999999999999998 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 51.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1092.6
Mean: 36.42
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55413.052756181554
Median total errors in population: 1111.0
Error averages by case: (1721.0197222685458 1723.2483063576535 1720.3747222685458 1730.007551225769 1723.6510540468228 1720.2986366557059 1720.4573633442476 1723.5309633442484 1721.5753633442941 1728.2783512257859 1731.7206182311288 1750.1514512475678 1728.494451247565 1887.3420182311106 1928.0507222685458 1724.738622224263 1728.1317032748434 1744.2458222242383 1950.1953266886128 1722.574763344271 1724.6563073653822 1764.798906357694 2811.1724540468026 3432.0170095646354 1839.9469749652503 1732.3890119176074 1749.9428956960212 1720.4477633442477 1788.8185365156141 1720.7753633442937)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.03665572881693843 0.16334427118306158 2.4 0.8 4.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 60.0 1.0 1.8000000000000007 16.4 19.200000000000003 0.0 1.0 9.200000000000003 30.80000000000001 73.79999999999995 4.799999999999997 0.40000000000000036 0.0 0.16334427118306158 14.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.706
Average program size in population (points): 45.704
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 281
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 281
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.101
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 89810310
--- Timings ---
Current time: 1481491307226 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 5.2 0.0 3.5999999999999996 4.2 0.2 0.4 3.4 1.8 8.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 41.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1083.1999999999998
Mean: 36.106667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57118.416473404424
Median total errors in population: 1111.0
Error averages by case: (1841.0959210252126 1843.2174235276148 1840.4626835284282 1849.8654592995074 1843.6103270792632 1840.3326673815677 1840.4884673815611 1843.6380673815615 1841.6054673816159 1847.9942673424182 1851.1594299874778 1869.3994141614621 1848.347121025182 1993.0293713972578 1937.2247390073042 1844.3620270695046 1847.6202250410477 1862.2489270792526 2046.7478773933285 1842.5722673815917 1844.6889210252127 1883.9362573741116 1949.641729715748 2816.5187310502097 1939.0350712964012 1851.6012299874803 1868.802414161484 1840.4864673815614 1907.876633158256 1840.8068673816158)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.7999999999999998 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 61.0 1.0 1.8000000000000007 12.399999999999999 3.799999999999997 0.0 0.0 2.200000000000003 20.19999999999999 73.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.341
Average program size in population (points): 45.333
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 231
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.104
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 91140540
--- Timings ---
Current time: 1481491310279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dec integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 5.2 0.0 3.5999999999999996 4.2 0.2 0.4 3.4 1.8 8.0 10.8 37.2 14.4 206.0 61.0 4.0 10.2 27.4 288.2 3.0 10.0 41.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 1083.1999999999998
Mean: 36.106667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61627.17842626671
Median total errors in population: 1111.0
Error averages by case: (2001.1464203447197 2002.7219683817207 2000.4374203447196 2008.8478921453495 2003.4788248695534 2000.2915601702623 2000.448760170255 2003.2500398296831 2001.5430398297378 2007.0974921453728 2010.4023570446639 2028.0143391974498 2008.9901391974402 2147.4331570446443 2089.54342034472 2003.9251823762563 2008.4407540043183 2022.1443823762236 2201.7279673282283 2002.4730398297133 2005.2583914688857 2042.9833683817553 2090.6632248695973 2737.039051676616 2098.2238505062815 2010.9499788236967 2027.9151733561205 2000.4441601702551 2060.595309867997 2000.747760170311)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 21.0 1.0 0.1999999999999993 10.399999999999999 7.799999999999997 0.0 0.35163917254091337 5.200000000000003 29.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.16017028665036603)
Average genome size in population (length): 44.381
Average program size in population (points): 45.379
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 152
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.108
Error (vector) diversity:			 0.111
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 92471970
--- Timings ---
Current time: 1481491313287 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_add} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_rot float_add float_rot float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec vector_integer_subvec integer_dup integer_dup integer_dup integer_dec integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [2.0 3.2 1.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 6.800000000000001 33.2 18.4 202.0 62.0 3.0 14.2 28.4 284.2 3.0 14.0 51.8 30.80000000000001 69.79999999999995 125.2 7.6 33.0 0.4 61.8 0.8]
Total: 1079.9999999999998
Mean: 36.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53983.86259999999
Median total errors in population: 1099.6
Error averages by case: (1701.229 1702.1448000000062 1700.468 1710.9131999999895 1703.7633999999782 1700.4055999999778 1700.561599999983 1703.961799999983 1701.7400000000218 1709.614 1710.8540000000173 1729.1215999999804 1710.675199999983 1880.289 1795.858 1704.621 1711.0397999999773 1723.117199999981 1942.9565999999813 1702.606 1706.749 1743.7388000000221 1825.105400000019 3590.5713999999934 1860.5109999999825 1711.1276000000116 1729.249 1700.5549999999837 1769.4412000000227 1700.8744000000222)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 1.8000000000000007 14.399999999999999 3.799999999999997 0.0 1.0 5.200000000000003 30.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.64
Average program size in population (points): 45.636
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 210
Genome diversity (% unique Plush genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.126
Error (vector) diversity:			 0.129
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 93811170
--- Timings ---
Current time: 1481491316283 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_subvec integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dup integer_dup integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger)
Errors: [5.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 18.8 0.1999999999999993 6.4 214.0 61.0 4.0 2.1999999999999993 27.4 29.200000000000003 3.0 2.0 51.8 30.80000000000001 81.79999999999995 137.2 19.6 45.0 0.4 49.8 0.8]
Total: 818.9999999999998
Mean: 27.3
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62879.41982466839
Median total errors in population: 1092.6
Error averages by case: (2001.0606011212906 2001.8024011213024 2000.3696011212905 2009.1016011212728 2003.5464011212678 2000.3931988786856 2000.545798878679 2003.6396011212619 2001.6308011213143 2007.7106011212907 2008.9974011213092 2027.6590011212693 2010.6800011212597 2169.1876011212908 2128.656601121291 2004.1516011212907 2009.2656011212664 2022.1990011212597 2234.4432011212816 2002.4716011212906 2007.0786011212906 2041.016801121313 2114.7422011213102 3854.6528011212354 2109.419801121272 2009.6032011213122 2027.2466011212905 2000.5471988786794 2066.754401121314 2000.8459988787336)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 23.0 1.0 1.8000000000000007 14.399999999999999 3.799999999999997 0.0 0.0 7.200000000000003 30.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.176
Average program size in population (points): 45.172
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 239
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 239
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.107
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 95136450
--- Timings ---
Current time: 1481491319369 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger integer_inc)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 0.1999999999999993 10.4 210.0 61.0 4.0 6.199999999999999 27.4 29.200000000000003 3.0 6.0 55.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 810.9999999999998
Mean: 27.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57379.768013423636
Median total errors in population: 1092.6
Error averages by case: (1851.1719954806342 1852.8217954806373 1850.4549954806344 1858.932795480624 1853.5397954806103 1850.3369582250407 1860.4669909006643 1863.2291954806035 1861.6033954806596 1858.4249954806344 1858.9087954806532 1876.5025954806122 1870.7145954806033 1998.7969954806342 1946.5759954806342 1854.1529954806342 1859.948195480609 1872.4581954806017 2050.3633954806132 1862.4829954806344 1867.0929954806343 1893.1045954806584 1943.1539954806549 2751.3983954806217 1947.8003954806145 1859.602995480658 1876.5269954806342 1860.4753909006643 1917.9313954806598 1850.7931909007207)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.24259227534509775 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 21.0 1.0 1.8000000000000007 17.6 3.799999999999997 0.0 0.4425922753450977 5.200000000000003 30.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.103
Average program size in population (points): 45.099
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 181
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 181
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.134
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 96459540
--- Timings ---
Current time: 1481491322415 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace integer_sub vector_integer_pushall float_inc float_mod integer_sub vector_integer_pushall float_dup_items integer_dup integer_dup integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 0.1999999999999993 10.4 210.0 61.0 4.0 6.199999999999999 27.4 29.200000000000003 3.0 6.0 55.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 810.9999999999998
Mean: 27.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56202.42646635158
Median total errors in population: 1092.6
Error averages by case: (1761.2032579970291 1763.704158347994 1760.4611901705873 1767.1682873495342 1763.5980579970083 1760.3344921451705 1760.4978921451714 1763.462499467993 1761.6863409390219 1768.399687349529 1769.462642481433 1786.8687088606387 1771.1343409389783 1945.0403543548537 2851.318058392289 1764.1749583480062 1770.7800562704876 1783.2558994679928 1997.7040628123568 1762.5328562705095 1767.2229409389993 1855.7984424814367 1867.0337901706057 3104.646345688402 1868.8616992231691 1769.9948424814297 1787.5601088606584 1760.4966921451717 1827.2139101097903 1760.8098921452158)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 1.2000000000000002 0.2 0.4 0.6000000000000001 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 2.0 21.0 2.0 0.1999999999999993 5.399999999999999 3.799999999999997 0.0 0.4425922753450977 5.200000000000003 28.19999999999999 69.79999999999995 13.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.696
Average program size in population (points): 45.694
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 253
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.144
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 97800420
--- Timings ---
Current time: 1481491325474 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_replace vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 0.1999999999999993 10.4 210.0 61.0 4.0 6.199999999999999 27.4 29.200000000000003 3.0 6.0 55.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 810.9999999999998
Mean: 27.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54715.76198295077
Median total errors in population: 1083.1999999999998
Error averages by case: (1761.7749080761587 1764.1779080761376 1760.7899080761588 1766.91210807616 1763.6367080761354 1760.3353080761347 1760.497708076136 1763.3211080761366 1761.670508076183 1767.3709080761587 1769.1861080761778 1782.6501080761373 1771.1803080761365 1915.1059080761588 1850.8655362093612 1763.9479080761587 1769.8319080761355 1782.8307080761365 1940.4639080761374 1762.5659080761586 1767.3539080761586 1800.443308076182 1847.9777362093828 2785.25833620935 1860.624136209341 1769.8825080761753 1787.6299080761587 1760.4993080761355 1836.1559362093851 1760.8215080761831)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 2.4 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 1.8000000000000007 11.399999999999999 13.799999999999997 0.0 1.0 3.200000000000003 28.80000000000001 67.79999999999995 9.200000000000003 0.40000000000000036 0.0 0.4 6.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.633
Average program size in population (points): 45.631
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.122
Error (vector) diversity:			 0.123
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 99139410
--- Timings ---
Current time: 1481491328494 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup integer_yankdup float_shove integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 0.1999999999999993 10.4 210.0 61.0 4.0 6.199999999999999 27.4 29.200000000000003 3.0 6.0 55.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 810.9999999999998
Mean: 27.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51470.52525439825
Median total errors in population: 1079.9999999999998
Error averages by case: (1642.535828479942 1643.3722284799248 1640.949828479942 1647.8232284799344 1643.5970284799232 1640.369228479921 1640.5372284799298 1643.49502847993 1641.6854284799624 1646.3768284799419 1651.6730284799587 1652.601828479924 1649.31322847993 1809.736828479942 1736.835828479942 1643.744828479942 1649.0288284799226 1663.4532284799297 1767.6116284799243 1642.6278284799419 1645.3288284799419 1685.9832284799618 2166.9934284799556 2593.0416284799435 1770.0066284799236 1652.5200284799519 1670.735828479942 1640.534628479929 1707.1668284799628 1640.8452284799625)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.7999999999999998 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 1.8000000000000007 5.399999999999999 3.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 69.79999999999995 13.200000000000003 0.5999999999999996 0.0 0.4 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.539
Average program size in population (points): 45.538
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 208
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.152
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 100475580
--- Timings ---
Current time: 1481491331545 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace integer_yankdup integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger integer_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items float_sub vector_integer_subvec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 14.8 0.1999999999999993 10.4 210.0 61.0 4.0 6.199999999999999 27.4 29.200000000000003 3.0 6.0 55.8 30.80000000000001 77.79999999999995 133.2 15.6 41.0 0.4 53.8 0.8]
Total: 810.9999999999998
Mean: 27.033333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55379.09040000001
Median total errors in population: 818.9999999999998
Error averages by case: (1792.33 1793.2607999999777 1790.55 1799.1309999999812 1793.6835999999764 1790.2633999999746 1790.425399999973 1793.6837999999739 1791.5396000000255 1797.285 1802.8512000000203 1794.2849999999778 1797.098199999974 1947.024 1887.909 1794.235 1796.426999999976 1812.949599999973 1841.0559999999798 1792.651 1793.249 1834.8458000000242 1896.8894000000225 2692.188399999983 1893.1653999999796 1803.4206000000213 1820.7 1790.4165999999734 1864.8412000000249 1790.7354000000253)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 3.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 21.0 1.0 1.8000000000000007 5.399999999999999 3.799999999999997 0.0 0.0 9.200000000000003 30.80000000000001 69.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.951
Average program size in population (points): 44.949
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 227
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.143
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 101794110
--- Timings ---
Current time: 1481491334556 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items integer_dec integer_dup integer_dup vector_integer_subvec integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_min)
Errors: [2.0 4.2 1.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 10.8 0.8000000000000007 14.4 206.0 62.0 3.0 10.2 28.4 28.200000000000003 3.0 10.0 55.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 804.5999999999999
Mean: 26.82
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52267.68968656159
Median total errors in population: 810.9999999999998
Error averages by case: (1691.2897167951369 1693.3459820844296 1690.3677167951369 1699.3164039463038 1693.6381656551584 1690.2922161468132 1690.4576161468203 1693.689616146821 1691.5932161468597 1697.131003946317 1702.023254954308 1692.9374008962056 1697.9224008962103 1845.5970549542894 1782.729716795137 1694.1440000500747 1697.4481394178144 1713.0636000500563 1732.290300542894 1692.6284161468366 1694.2090129210644 1734.6293820844758 1789.7843656552004 2514.469507152259 1791.7082852128265 1702.350260390899 1719.7524081315764 1690.4582161468202 1757.652694205894 1690.7696161468598)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 25.0 1.0 0.1999999999999993 17.6 3.799999999999997 0.0 0.0 13.200000000000003 24.19999999999999 73.79999999999995 16.799999999999997 0.40000000000000036 0.0 0.4 15.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.601
Average program size in population (points): 45.598
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 408
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 408
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.105
Error (vector) diversity:			 0.109
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 103132140
--- Timings ---
Current time: 1481491337658 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_fromfloat integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [2.0 4.2 1.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 10.8 0.8000000000000007 14.4 206.0 62.0 3.0 10.2 28.4 28.200000000000003 3.0 10.0 55.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 804.5999999999999
Mean: 26.82
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55512.21753806281
Median total errors in population: 810.9999999999998
Error averages by case: (1800.9944608065018 1803.326724712114 1800.2820612200594 1808.4847740211474 1803.4843096339514 1800.2471714555447 1800.4032140478193 1803.281418627759 1801.528418627809 1806.0583814668398 1811.491199142812 1802.2731740211452 1808.1922186277586 1954.1366138281962 1886.6392985873947 1803.9274670383134 1807.5341471797765 1822.5145341763039 1838.235544827663 1802.5136186277841 1804.5326186277841 1844.372700057414 1873.9735118752062 2611.3692682094215 1901.3729740211465 1812.040403667669 1829.4829991427903 1800.4032140478196 1868.4017792535858 1800.7193184831217)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.24259227534509775 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 61.0 3.0 1.8000000000000007 17.6 3.799999999999997 1.0 0.4425922753450977 13.200000000000003 30.80000000000001 73.79999999999995 3.799999999999997 0.40000000000000036 0.0 0.14030230586813974 14.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.777
Average program size in population (points): 45.775
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 434
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 434
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 104475450
--- Timings ---
Current time: 1481491340726 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_dup_times} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub vector_integer_subvec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_dup_times vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dup integer_dup float_sub integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup float_shove integer_sub integer_yankdup float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 0.4 3.4 1.8 6.0 10.8 0.1999999999999993 14.4 206.0 61.0 4.0 10.2 27.4 29.200000000000003 3.0 10.0 55.8 30.80000000000001 73.79999999999995 129.2 11.6 37.0 0.4 57.8 0.8]
Total: 802.9999999999998
Mean: 26.766666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62490.241151350434
Median total errors in population: 810.9999999999998
Error averages by case: (1991.0317555861175 1993.5177394392592 1990.3724955853222 1999.4239372528348 1993.538284939294 1990.2827394392584 1990.4401394392544 1993.445739439256 1991.5267394393036 1997.1663419453607 2001.2198862191904 1992.8641721198944 1997.9703394392536 2158.1113745523876 2088.4522737941534 1994.0370991271936 1997.2711851878084 2012.1571716171984 2062.664603120115 1992.5283482364691 1994.408339439281 2034.6496395724766 2090.4496205782434 3976.995471443276 2098.3091508426774 2001.6524323351232 2018.9023615359001 1990.4367394392543 2065.677890805803 1990.7371394393035)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 3.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 21.0 0.0 1.8000000000000007 17.4 3.799999999999997 0.0 0.0 13.200000000000003 30.80000000000001 73.79999999999995 4.799999999999997 0.40000000000000036 0.0 0.4 14.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.848
Average program size in population (points): 44.845
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 374
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 374
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.1
Error (vector) diversity:			 0.101
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 105790890
--- Timings ---
Current time: 1481491343754 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup float_max integer_yankdup float_shove integer_sub integer_yankdup float_frominteger)
Errors: [3.0 5.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 6.800000000000001 1.8000000000000007 18.4 202.0 63.0 3.0 14.2 28.4 27.200000000000003 3.0 14.0 55.8 30.80000000000001 69.79999999999995 125.2 7.6 33.0 0.4 61.8 0.8]
Total: 800.5999999999999
Mean: 26.686666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61611.296757224336
Median total errors in population: 810.9999999999998
Error averages by case: (2001.0728185741445 2003.512818574122 2000.3608185741446 2008.3156185741227 2003.4274185741222 2000.246218574121 2000.400618574114 2003.1378185741146 2001.5098185741679 2005.9378185741446 2011.164618574162 2002.3050185741315 2008.4946185741146 2147.5478185741445 2086.1788185741443 2003.7808185741444 2008.469818574122 2022.0788185741133 2036.1660185741277 2002.4468185741446 2004.8068185741445 2043.7600185741683 2085.683818574163 2905.544418574131 2098.1676185741285 2011.5348185741664 2027.9138185741444 2000.3990185741145 2076.2222185741675 2000.7092185741678)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.6000000000000001 1.8 3.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 3.0 60.0 1.0 1.8000000000000007 5.399999999999999 3.799999999999997 1.0 2.0 13.200000000000003 29.80000000000001 69.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.175
Average program size in population (points): 45.175
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 287
Genome diversity (% unique Plush genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 107116140
--- Timings ---
Current time: 1481491346803 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [2.0 4.2 1.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 6.800000000000001 0.8000000000000007 18.4 202.0 62.0 3.0 14.2 28.4 28.200000000000003 3.0 14.0 55.8 30.80000000000001 69.79999999999995 125.2 7.6 33.0 0.4 61.8 0.8]
Total: 796.5999999999999
Mean: 26.553333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60313.4710717103
Median total errors in population: 810.9999999999998
Error averages by case: (1961.3461305322867 1963.5401305322614 1960.6501305322865 1968.5583305322696 1963.6103305322622 1960.3484694676874 1960.5030694676916 1963.6887305322657 1961.5839305323127 1966.2111305322867 1970.1981305323084 1962.9395305322837 1969.4131305322646 2111.6241305322865 2052.1251305322867 1963.8431305322865 1968.5547305322611 1982.3227305322634 2000.8679305322657 1962.6021305322865 1965.8681305322866 2004.432730532313 2064.1513305323097 2737.240930532283 2060.1821305322646 1970.7981305323037 1987.9921305322866 1960.5014694676915 2026.9667305323128 1960.8062694677394)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 3.0 1.8000000000000007 0.3999999999999986 3.799999999999997 0.0 0.0 9.200000000000003 30.80000000000001 69.79999999999995 1.2000000000000028 0.40000000000000036 0.0 0.4 3.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.393
Average program size in population (points): 45.392
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 226
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.111
Error (vector) diversity:			 0.113
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 108447930
--- Timings ---
Current time: 1481491349824 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_sub} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_sub vector_integer_subvec integer_dup integer_dup_items vector_integer_subvec integer_dup integer_dec integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup integer_dup float_sub integer_dup integer_dup_items integer_dup integer_dec integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_min)
Errors: [2.0 4.2 1.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 6.800000000000001 0.8000000000000007 18.4 202.0 62.0 3.0 14.2 28.4 28.200000000000003 3.0 14.0 55.8 30.80000000000001 69.79999999999995 125.2 7.6 33.0 0.4 61.8 0.8]
Total: 796.5999999999999
Mean: 26.553333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58805.64595896528
Median total errors in population: 804.5999999999999
Error averages by case: (1881.5303184557722 1883.7040544710042 1880.8123184557721 1888.1943235855545 1883.4349158147436 1880.2881999999743 1880.4423999999733 1883.1499999999737 1881.5500000000256 1885.9083235855755 1888.9833336290399 1882.3410917328933 1890.817891732857 2047.815933629019 1965.7756815442278 1883.3193729726631 1892.37926912194 1903.002572972635 1947.5192131026909 1882.457 1887.17910845411 1924.046654471056 1954.3495158147903 3526.2269838381467 1994.8792081044037 1889.6830480894228 1907.3557101684717 1880.4429999999738 1947.3021152183783 1880.7544000000257)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.7999999999999998 0.2 0.4 0.6000000000000001 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 3.0 1.8000000000000007 5.399999999999999 3.799999999999997 0.0 0.0 9.200000000000003 29.80000000000001 69.79999999999995 17.200000000000003 0.40000000000000036 0.0 0.4 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.523
Average program size in population (points): 45.521
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 326
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.119
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 109783620
--- Timings ---
Current time: 1481491352922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall float_inc integer_sub vector_integer_pushall float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 2.8000000000000007 1.1999999999999993 22.4 198.0 63.0 3.0 18.2 28.4 26.200000000000003 3.0 18.0 55.8 30.80000000000001 65.79999999999995 121.2 3.5999999999999996 29.0 0.4 65.8 0.8]
Total: 792.9999999999999
Mean: 26.433332
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61456.90530565364
Median total errors in population: 804.5999999999999
Error averages by case: (1961.5105565505148 1963.763956550492 1960.773556550515 1968.830356550497 1963.4459565504922 1960.2896044794736 1960.4466371551016 1963.1487565504901 1961.553756550539 1966.389556550515 1969.010556550534 1962.8751565505147 1971.5253565504906 2138.694556550515 2046.4915565505148 1963.495556550515 1970.9061565504915 1982.54795655049 2043.0665565504949 1962.4245565505148 1967.8555565505148 2004.5159565505398 2041.3571565505365 3824.037156550464 2071.0965565504944 1969.3043565505322 1987.205556550515 1960.4442371551017 2029.14435655054 1960.7537565505386)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.8 3.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 22.0 2.0 1.8000000000000007 16.6 3.200000000000003 0.0 0.0 5.200000000000003 29.80000000000001 65.79999999999995 13.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.412
Average program size in population (points): 45.409
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 231
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.138
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 111115980
--- Timings ---
Current time: 1481491356087 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 2.8000000000000007 1.1999999999999993 22.4 198.0 63.0 3.0 18.2 28.4 26.200000000000003 3.0 18.0 55.8 30.80000000000001 65.79999999999995 121.2 3.5999999999999996 29.0 0.4 65.8 0.8]
Total: 792.9999999999999
Mean: 26.433332
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60013.9881028306
Median total errors in population: 802.9999999999998
Error averages by case: (1911.8796278718626 1914.13182787184 1911.1076278718626 1918.6978278718493 1913.4632278718404 1910.3509721281137 1910.493789081067 1913.2558278718432 1911.5762278718864 1916.3966278718626 1917.3998278718798 1913.2674278718664 1922.3454278718436 2076.9986278718625 2012.4286278718625 1913.6036278718625 1921.6190278718384 1933.215227871843 1981.7970278718456 1912.4676278718625 1918.7666278718625 1955.5074278718866 2011.1808278718813 3812.2670278718556 2016.5754278718448 1918.104227871876 1935.2676278718627 1910.4931890810674 1988.5330278718861 1910.7966278718861)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.0915235257487716 0.10847647425122842 1.6 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 61.0 2.0 1.8000000000000007 1.3999999999999986 3.799999999999997 0.0 0.0 5.200000000000003 29.80000000000001 42.799999999999955 13.200000000000003 0.40000000000000036 0.0 0.10847647425122842 6.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.213
Average program size in population (points): 45.212
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 225
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 112442370
--- Timings ---
Current time: 1481491359161 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 2.8000000000000007 1.1999999999999993 22.4 198.0 63.0 3.0 18.2 28.4 26.200000000000003 3.0 18.0 55.8 30.80000000000001 65.79999999999995 121.2 3.5999999999999996 29.0 0.4 65.8 0.8]
Total: 792.9999999999999
Mean: 26.433332
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57792.49768491708
Median total errors in population: 800.5999999999999
Error averages by case: (1872.290438869196 1874.5832388691717 1871.457438869196 1878.7932388691754 1873.4822388691719 1870.331444072748 1870.490876748374 1873.3594388691693 1871.6126388692219 1876.173438869196 1876.3100388692148 1873.4208388692125 1883.5160388691695 2017.686438869196 1959.889438869196 1873.335438869196 1882.7554388691708 1893.026038869166 1909.171438869176 1872.430438869196 1879.965438869196 1913.666838869221 1961.1596388692174 2837.71403886919 1965.969438869176 1876.822238869217 1894.018438869196 1870.4902767483738 1947.7682388692215 1870.807076748428)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 2.2810603968150476 0.6810603968150477 3.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 1.8000000000000007 17.6 3.799999999999997 0.0 0.0 5.200000000000003 30.80000000000001 65.79999999999995 9.200000000000003 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.341
Average program size in population (points): 45.336
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 289
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.137
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 113772600
--- Timings ---
Current time: 1481491362254 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod float_mod integer_sub vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_fromfloat integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 2.8000000000000007 1.1999999999999993 22.4 198.0 63.0 3.0 18.2 28.4 26.200000000000003 3.0 18.0 55.8 30.80000000000001 65.79999999999995 121.2 3.5999999999999996 29.0 0.4 65.8 0.8]
Total: 792.9999999999999
Mean: 26.433332
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58295.4419803379
Median total errors in population: 800.5999999999999
Error averages by case: (1892.246892373323 1894.418292373302 1891.308892373323 1898.1906923733043 1893.4220923733026 1890.3617403022838 1890.5189729779117 1893.3212923733008 1891.6424923733452 1895.682892373323 1895.8442923733403 1893.1618923733356 1904.3518923733004 2037.385892373323 1981.899892373323 1893.214892373323 1903.5386923733013 1913.056292373299 1927.4260923733054 1892.408892373323 1900.618892373323 1934.3090923733455 1968.5178923733433 2777.71769237331 1986.0482923733043 1896.5812923733422 1913.583892373323 1890.5173729779121 1963.3096923733453 1890.8348923733452)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 61.0 1.0 1.8000000000000007 14.399999999999999 3.799999999999997 0.0 0.0 1.2000000000000028 29.80000000000001 65.79999999999995 9.200000000000003 0.40000000000000036 0.0 0.11633781453677378 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.237
Average program size in population (points): 45.234
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 191
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.14
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 115099710
--- Timings ---
Current time: 1481491365416 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_length float_max integer_yankdup integer_sub integer_yankdup float_frominteger float_min)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 22.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 787.1999999999998
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54618.28165527075
Median total errors in population: 796.5999999999999
Error averages by case: (1772.6339418423586 1774.8821418423333 1771.4889418423586 1778.3583418423436 1773.466941842334 1770.391341842333 1770.5461418423388 1773.259341842339 1771.666541842384 1775.9009418423586 1775.0811418423773 1773.1953418423552 1785.3515418423378 1916.0999418423585 1859.2279418423586 1773.3089418423585 1784.5847418423323 1793.7861418423379 1808.4233418423391 1772.4599418423586 1781.6279418423585 1814.4109418423848 1857.8463418423792 2568.361941842356 1866.0131418423382 1775.7609418423735 1792.7739418423585 1770.545541842339 1845.9737418423847 1770.853541842384)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 1.8000000000000007 3.3999999999999986 3.799999999999997 0.0 1.0 5.200000000000003 29.80000000000001 61.799999999999955 9.200000000000003 0.40000000000000036 1.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.408
Average program size in population (points): 45.407
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 221
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.145
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 116431950
--- Timings ---
Current time: 1481491368529 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_fromfloat float_max integer_yankdup float_rot integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 22.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 787.1999999999998
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 77352.8146031758
Median total errors in population: 792.9999999999999
Error averages by case: (1923.116668624315 1925.4164686242918 1921.689668624315 1928.9482686242982 1923.338468624292 1920.3691834397412 1920.5215834397425 1923.103668624294 1921.6174686243387 1925.7096686243149 1923.7256686243306 1923.3728686242991 1935.9472686242932 2066.805668624315 2206.504668624315 1923.091668624315 1935.061268624291 1942.867468624292 1961.764468624297 1922.365668624315 1932.467668624315 1965.5878686243389 1999.9916686243346 20747.94806862437 2014.5402686242967 1924.491268624331 1941.319668624315 1920.5215834397427 2009.7814686243385 1920.827268624338)
Error minima by case: (0.0 0.20000000000000018 0.0 1.5999999999999996 0.20000000000000018 0.2 0.15740772465490227 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 22.0 0.0 0.1999999999999993 16.6 2.799999999999997 1.0 0.0 1.2000000000000028 29.80000000000001 61.799999999999955 2.799999999999997 0.40000000000000036 1.0 0.15740772465490227 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.946
Average program size in population (points): 44.944
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 344
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 344
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.127
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 117750330
--- Timings ---
Current time: 1481491371687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items float_sub integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_min)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 22.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 787.1999999999998
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 78094.90673251955
Median total errors in population: 792.9999999999999
Error averages by case: (1913.1744496901906 1915.576849690166 1911.6684496901905 1919.4230496901669 1913.3726496901654 1910.3373302947791 1910.4741302947766 1913.0558496901624 1911.5866496902165 1916.0514496901906 1913.9404496902084 1913.0148496901713 1926.5316496901623 2078.6984496901905 2186.7114496901904 1913.1074496901906 1925.0198496901646 1933.0246496901611 1979.6306496901693 1912.3804496901905 1923.0024496901906 1955.2340496902166 1984.0686496902135 21729.606049690305 2019.0394496901695 1914.5596496902122 1932.7444496901905 1910.4767302947766 1998.632849690216 1910.7616496902137)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 0.1999999999999993 6.399999999999999 3.799999999999997 0.0 0.0 1.2000000000000028 29.80000000000001 61.799999999999955 2.799999999999997 0.40000000000000036 1.0 0.14030230586813974 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.765
Average program size in population (points): 44.758
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 312
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 312
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.131
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 119063280
--- Timings ---
Current time: 1481491374846 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 22.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 787.1999999999998
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62984.3253072709
Median total errors in population: 792.9999999999999
Error averages by case: (2003.0126092729104 2005.0031907270647 2001.6166092729102 2008.237590727068 2003.255190727064 2000.4608092728927 2000.566009272893 2003.0658092728852 2001.505009272936 2005.9713907270898 2004.1809907271038 2003.3889907270702 2016.4507907270652 2174.2523907270897 2086.3653907270896 2003.2173907270897 2015.9175907270642 2022.8353907270644 2088.6535907270686 2002.2446092729103 2012.8406092729103 2043.3489907271162 2532.570390727081 3715.933990727039 2128.72979072707 2004.9793907271041 2022.6343907270898 2000.5666092728932 2071.744390727116 2000.7754092729278)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.20927291022105798 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 14.600000000000001 2.799999999999997 0.0 0.0 1.2000000000000028 29.80000000000001 61.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.723
Average program size in population (points): 44.719
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.147
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 120374970
--- Timings ---
Current time: 1481491377920 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dup integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [4.0 6.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 22.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 787.1999999999998
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57433.875984868006
Median total errors in population: 791.9999999999999
Error averages by case: (1873.0569631432932 1874.918725842713 1871.516707038044 1878.0359922088662 1873.1944767334373 1870.5780232567488 1870.631931776909 1873.0901170455247 1871.4661170455713 1875.662704384825 1873.4581126198505 1872.587879651395 1887.4035170455231 2015.2077790507954 1956.6010006210133 1873.4008450092372 1886.6887126198255 1892.8049434899706 1908.7098221733074 1872.1694333833618 1883.9127170455474 1913.7444689989047 1962.8139043944072 2493.5377504552544 1962.4997170308425 1873.5735568752639 1890.3654767334604 1870.6346559323786 1940.8565639878807 1870.753369273712)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.6421787176504223 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 1.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.8421787176504223 1.2000000000000028 29.80000000000001 57.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.11633781453677378 1.7999999999999972 0.04147098480789646)
Average genome size in population (length): 43.663
Average program size in population (points): 44.657
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 202
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.152
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 121684860
--- Timings ---
Current time: 1481491381015 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_dup integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_dup integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 5.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 21.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 782.8000000000001
Mean: 26.093334
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55463.7000545138
Median total errors in population: 788.1999999999998
Error averages by case: (1753.4184856047416 1756.1020856047203 1751.7424856047417 1759.4484856047259 1753.3690856047203 1750.4981143952418 1750.6195143952425 1753.245285604721 1751.6522856047634 1756.6944856047417 1753.5542856047266 1753.1340856047252 1768.8154856047222 1912.0824856047416 1846.0174856047415 1753.5444856047416 1768.362485604719 1773.4108856047214 1820.4552856047242 1752.3324856047416 1765.1454856047417 1794.7742856047641 1848.2296856047603 3899.6546856047016 1853.2072856047243 1753.2780856047304 1770.0074856047415 1750.6201143952426 1839.4106856047642 1750.8724856047584)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.11439525852354915 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 2.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 1.2000000000000028 29.80000000000001 57.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.11439525852354915 1.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.035
Average program size in population (points): 45.028
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 437
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 437
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.128
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 123005910
--- Timings ---
Current time: 1481491384155 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_fromfloat vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger)
Errors: [3.0 7.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 5.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 770.1999999999998
Mean: 25.673334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57950.202300191355
Median total errors in population: 787.1999999999998
Error averages by case: (1883.4005498722245 1885.6565498721993 1881.7995498722244 1888.2221498722042 1883.4341498722001 1880.5274845470742 1880.6766845470734 1883.3685498721998 1881.785349872249 1885.8815498722245 1882.8163498722022 1882.4081498722055 1898.9305498721988 2020.9965498722245 1968.4605498722244 1883.3975498722245 1898.3035498721988 1903.3539498721977 1916.2697498722046 1882.3855498722244 1895.3825498722244 1923.84374987225 1988.295949872245 2697.554549872211 1971.0285498722046 1882.375349872203 1898.6225498722245 1880.675284547074 1959.3763498722496 1880.9723498722483)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 21.0 1.0 2.1999999999999993 10.399999999999999 2.799999999999997 0.0 0.0 2.799999999999997 29.80000000000001 57.799999999999955 5.200000000000003 0.40000000000000036 1.0 0.14030230586813974 1.7999999999999972 0.07296486883118758)
Average genome size in population (length): 44.179
Average program size in population (points): 45.173
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 497
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 497
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.122
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 124331280
--- Timings ---
Current time: 1481491387251 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_max} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_min})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_length integer_fromfloat float_max vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_min)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup float_shove integer_sub integer_yankdup float_frominteger)
Errors: [3.0 7.2 2.0 8.4 4.2 0.2 0.4 3.4 1.8 5.0 1.1999999999999993 0.1999999999999993 26.4 194.0 63.0 3.0 22.2 28.4 26.200000000000003 3.0 5.0 55.8 30.80000000000001 61.799999999999955 117.2 0.40000000000000036 25.0 0.4 69.8 0.8]
Total: 770.1999999999998
Mean: 25.673334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 75421.42388932582
Median total errors in population: 787.1999999999998
Error averages by case: (1823.3334752659935 1825.6624752659686 1821.7024752659936 1830.547075265972 1823.351275265969 1820.4555247339863 1820.5709247339864 1823.076075265968 1821.6350752660185 1827.3954752659936 1822.9926752659721 1823.6194752659733 1839.3344752659675 1986.0764752659934 2101.7404752659936 1823.3894752659935 1838.5072752659682 1843.371075265967 1896.0558752659729 1822.3484752659936 1835.5144752659935 1865.7082752660187 1903.2748752660154 21640.173675266007 1925.6430752659724 1822.7604752659754 1840.0374752659934 1820.5741247339863 1911.7542752660188 1820.8175582079832)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.2832630217653965 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 1.0 1.8000000000000007 2.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 29.80000000000001 57.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.2832630217653965 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.727
Average program size in population (points): 45.723
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 430
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 430
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.131
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 125673090
--- Timings ---
Current time: 1481491390415 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall integer_sub vector_integer_pushall float_dup_items float_sub integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 57606.02498317843
Median total errors in population: 787.1999999999998
Error averages by case: (1873.0913394392808 1875.2579394392574 1871.509339439281 1878.1269394392586 1873.1307394392575 1870.5581394392746 1870.5867394392726 1872.8351394392523 1871.3885394393055 1875.7173394392807 1872.5219394392607 1872.8895394392607 1888.8547394392535 2013.0753394392807 1955.6303394392808 1873.4063394392808 1887.8121394392565 1892.9723394392524 1912.9773394392619 1872.1143394392807 1885.0643394392807 1914.709339439306 1956.6603394393028 2664.2817394392737 1962.0123394392608 1872.4317394392745 1889.1963394392808 1870.595139439273 1945.9395394393057 1870.6775394392873)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 0.8000000000000007 14.600000000000001 2.799999999999997 0.0 1.0 2.799999999999997 29.80000000000001 54.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.441
Average program size in population (points): 45.44
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 267
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.147
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 127006320
--- Timings ---
Current time: 1481491393546 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 58022.52024838963
Median total errors in population: 782.8000000000001
Error averages by case: (1852.7451760355086 1854.9135760354877 1851.2471760355086 1858.1281760354902 1852.8261760354878 1850.7701433598907 1850.6827760355195 1852.5443760354851 1851.0917760355308 1855.7511760355085 1852.16277603549 1852.8877760354883 1868.8499760354857 2012.1371760355084 1936.8331760355086 1853.6051760355085 1867.5461760354863 1872.671976035485 1921.1063760354891 1851.7991760355085 1864.1001760355084 1894.6021760355313 1932.2697760355288 3608.75417603545 1951.446576035489 1852.4917760355168 1869.7451760355086 1850.6869760355198 1927.5983760355318 1850.5247760354973)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 2.1999999999999993 6.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 58.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.079
Average program size in population (points): 45.074
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 194
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.157
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 128328690
--- Timings ---
Current time: 1481491396648 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 56608.55137383638
Median total errors in population: 782.8000000000001
Error averages by case: (1842.6048824869317 1845.062980409411 1841.2228824869317 1848.320180409414 1842.9137804094112 1840.6798182886503 1840.637618288652 1842.55978040941 1841.1575804094603 1845.979780409435 1842.6955804094137 1842.788380409414 1858.6537804094103 1982.751780409435 1923.6688824869318 1843.521780409435 1858.201682486907 1862.5735804094093 1878.0161804094157 1841.919182135955 1851.163780409435 1883.637580409461 1911.4713804094565 2564.935180409431 1932.1437804094148 1842.5585804094421 1859.2377804094351 1840.638218288652 1916.2907804094611 1840.5442182886331)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 1.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 57.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 1.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.111
Average program size in population (points): 45.11
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 152
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.156
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 129652020
--- Timings ---
Current time: 1481491399761 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 55769.55158749362
Median total errors in population: 770.1999999999998
Error averages by case: (1812.349955190858 1815.3403551908343 1811.473955190858 1817.6589551908323 1813.1277551908345 1810.6000381328215 1810.6396381328213 1812.8155551908287 1811.4401551908818 1815.5949551908582 1812.4677551908371 1812.412355190837 1828.9361551908287 1953.6419551908582 1899.860955190858 1813.395955190858 1828.0821551908339 1833.077955190828 1848.7121551908388 1812.1419551908582 1816.061955190858 1854.7831551908828 1892.6947551908795 2583.277755190849 1898.8463551908378 1812.2629551908508 1828.905955190858 1810.6410381328217 1887.5797551908825 1810.7272381328335)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 60.0 1.0 1.1999999999999993 16.6 2.799999999999997 0.0 0.0 2.799999999999997 29.80000000000001 58.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 1.7999999999999972 0.04147098480789646)
Average genome size in population (length): 44.018
Average program size in population (points): 45.016
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 293
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 293
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 130972560
--- Timings ---
Current time: 1481491402854 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace vector_integer_conj integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub vector_integer_pushall float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 53187.60096772824
Median total errors in population: 770.1999999999998
Error averages by case: (1702.2019589242745 1705.275958924252 1701.4629589242747 1708.8579589242568 1703.081358924252 1700.7839589242767 1700.7619589242781 1702.9963589242534 1701.3625589242993 1706.8549589242746 1702.7363589242543 1703.9971589242539 1719.1709589242532 1860.6489589242747 1805.4859589242747 1703.7299589242746 1718.48055892425 1723.2819589242522 1762.139758924256 1702.0359589242746 1704.3939589242746 1745.1949589242995 2250.5079589242846 2631.0513589242673 1818.6113589242543 1703.002958924277 1720.9419589242746 1700.7591589242784 1777.0659589243 1700.7237589242725)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 21.0 0.0 1.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 58.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.064
Average program size in population (points): 45.062
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 132294480
--- Timings ---
Current time: 1481491405977 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 1.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 765.8000000000001
Mean: 25.526667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 42658.418753316495
Median total errors in population: 765.8000000000001
Error averages by case: (1371.9948582691954 1375.415658269176 1371.1308582691956 1378.9770582691874 1372.9272582691747 1370.9484595793713 1370.800459579362 1372.7654582691869 1371.1042582692169 1376.5258582691956 1372.3178582691764 1372.813258269177 1389.6474582691862 1521.9448582691955 1456.5598582691955 1374.0308582691955 1388.9964582691741 1393.7466582691861 1409.6836582691776 1371.8128582691954 1374.0888582691955 1416.002058269218 1472.334658269216 2190.101458269206 1467.0242582691767 1372.504658269202 1390.5718582691954 1370.8086595793618 1450.304658269218 1370.5336595793365)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.5479741644243015 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 20.0 0.0 0.8000000000000007 4.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 19.19999999999999 57.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.048629243626149066)
Average genome size in population (length): 43.582
Average program size in population (points): 44.581
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 342
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 342
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.149
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 133601940
--- Timings ---
Current time: 1481491409148 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 764.8000000000001
Mean: 25.493334
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53605.1464
Median total errors in population: 765.8000000000001
Error averages by case: (1691.917 1695.1571999999771 1691.147 1699.6675999999834 1692.8783999999764 1691.0976000000223 1690.9342000000179 1693.6211999999803 1691.207400000025 1697.596 1692.7359999999783 1693.0965999999785 1709.0159999999792 1859.35 1804.271 1694.669 1708.0643999999747 1713.7675999999792 1759.6433999999797 1691.703 1693.977 1738.2608000000253 1857.8590000000218 3653.3761999999424 1839.0397999999793 1693.1960000000145 1710.776 1690.9450000000177 1775.526200000025 1690.6497999999774)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 2.5999999999999996 0.0 40.0 0.0 1.1999999999999993 16.4 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 43.098
Average program size in population (points): 44.094
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 337
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.149
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 134894880
--- Timings ---
Current time: 1481491412306 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 764.8000000000001
Mean: 25.493334
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45847.77816772823
Median total errors in population: 765.8000000000001
Error averages by case: (1481.8139589242746 1485.0515589242546 1481.0829589242746 1488.7009589242703 1482.8025589242545 1480.8657589242948 1480.7125589242792 1482.4225589242699 1480.9361589242963 1486.3909589242746 1482.1209589242553 1482.920558924257 1499.7549589242692 1632.1109589242747 1567.9849589242747 1483.8889589242747 1498.3951589242524 1503.3609589242692 1517.2583589242572 1481.7429589242747 1483.8599589242747 1525.3409589242967 1565.5201589242952 2212.9185589242898 1577.042758924256 1482.6087589242773 1500.6869589242747 1480.7137589242793 1558.3665589242964 1480.4009589242544)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 20.0 0.0 1.1999999999999993 15.600000000000001 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 43.67
Average program size in population (points): 44.668
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 326
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 136204980
--- Timings ---
Current time: 1481491415528 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc vector_integer_replace integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_add integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 25.4 195.0 62.0 4.0 21.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 118.2 0.5999999999999996 26.0 0.6 68.8 0.19999999999999996]
Total: 764.8000000000001
Mean: 25.493334
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42696.56044398193
Median total errors in population: 765.8000000000001
Error averages by case: (1351.979998753988 1355.23519875397 1351.201998753988 1359.2645987539736 1352.824798753969 1350.9901190945795 1350.8395190945748 1352.6529987539739 1351.0595987540078 1356.9069987539879 1352.2093987539706 1353.8727987539733 1369.9989987539736 1518.453998753988 1445.932998753988 1354.130998753988 1368.330598753967 1374.4123987539722 1412.1077987539713 1351.767998753988 1354.187998753988 1395.8179987540102 1890.4961987540073 2291.204198753995 1472.90899875397 1353.199198753999 1372.058998753988 1350.8353190945745 1431.1729987540102 1350.5047190945434)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 36.0 0.0 1.1999999999999993 15.600000000000001 2.799999999999997 0.0 1.0 1.7999999999999972 28.80000000000001 58.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.4 0.7999999999999972 0.16017028665036603)
Average genome size in population (length): 43.888
Average program size in population (points): 44.886
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 293
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 293
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.147
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 137521620
--- Timings ---
Current time: 1481491418835 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 1.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 2.5999999999999996 7.0 0.6 69.8 0.19999999999999996]
Total: 512.2
Mean: 17.073334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44465.813541289914
Median total errors in population: 765.8000000000001
Error averages by case: (1431.9106182267094 1435.2118182266909 1431.1651585290153 1439.0154182267 1432.8202182266903 1430.9556414710037 1430.8064414709959 1432.632758529005 1431.0623585290357 1436.8716182267094 1432.3608182266923 1433.0972182266996 1449.1125585290035 1580.7706182267093 1520.8236182267094 1434.0216182267093 1447.865218226688 1453.6474182266952 1471.3108182266922 1431.7971585290152 1433.9741585290153 1475.4314182267315 1519.370418226728 2262.158018226723 1526.0018182266924 1432.9398182267162 1450.3696182267092 1430.8100414709957 1517.020018226731 1430.47910116866)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 40.0 0.0 1.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 58.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.4 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 43.872
Average program size in population (points): 44.87
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.161
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 138837780
--- Timings ---
Current time: 1481491422139 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 1.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 2.5999999999999996 7.0 0.6 69.8 0.19999999999999996]
Total: 512.2
Mean: 17.073334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46778.49548822596
Median total errors in population: 765.4000000000001
Error averages by case: (1511.8866276321385 1515.2982276321195 1511.0626276321386 1518.6538276321244 1512.7962276321184 1510.936942447607 1500.7835424476038 1502.492827632122 1501.0520276321597 1516.4946276321386 1512.092227632121 1512.587227632137 1519.5176276321215 1661.1276276321385 1602.9856276321386 1514.0946276321386 1527.9334276321163 1533.7074276321214 1548.8642276321214 1501.7436276321384 1503.9556276321387 1556.4142276321609 1592.5824276321582 2335.758427632146 1606.5186276321201 1512.658827632153 1530.5076276321386 1500.788742447604 1592.7058276321604 1510.4939424475688)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 20.0 0.0 2.8000000000000007 5.399999999999999 2.799999999999997 0.0 0.4425922753450977 1.7999999999999972 19.19999999999999 54.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.041
Average program size in population (points): 45.035
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 182
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.158
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 140159010
--- Timings ---
Current time: 1481491425386 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup float_rot integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 1.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 2.5999999999999996 7.0 0.6 69.8 0.19999999999999996]
Total: 512.2
Mean: 17.073334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45965.188799999996
Median total errors in population: 765.4000000000001
Error averages by case: (1481.956 1485.27499999998 1481.097 1488.7971999999875 1482.7513999999792 1480.93640000002 1480.7828000000143 1482.4441999999854 1481.0268000000217 1486.339 1482.0697999999811 1482.4533999999887 1499.168999999984 1627.902 1566.991 1483.805 1497.8159999999775 1503.3589999999829 1517.6791999999823 1481.709 1484.034 1525.624800000022 1563.3726000000195 2331.046599999998 1574.8959999999827 1482.4882000000114 1499.996 1480.7868000000142 1568.1100000000224 1480.4745999999798)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 1.1999999999999993 15.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 54.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.325
Average program size in population (points): 45.321
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 339
Genome diversity (% unique Plush genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 141488760
--- Timings ---
Current time: 1481491428583 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult vector_integer_subvec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dup integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 1.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 2.5999999999999996 7.0 0.6 69.8 0.19999999999999996]
Total: 512.2
Mean: 17.073334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50471.44828704307
Median total errors in population: 764.8000000000001
Error averages by case: (1641.8668231072816 1644.9387711442712 1641.0738231072814 1648.2500949079142 1642.7386276321167 1640.9167574077453 1640.771157407749 1642.4900425922501 1640.9970425922975 1646.1118949079348 1642.3291598071912 1642.2713419600145 1657.0715419600142 1771.8685598072063 1725.4958231072815 1643.8715851388185 1656.849356766882 1662.749785138792 1677.6187700907858 1641.7104425922753 1643.8947942314478 1684.4915711443164 1725.626227632158 2242.003254439198 1730.924653268849 1642.7691815862534 1658.1235761186822 1640.775157407749 1710.3821126305563 1640.466357407704)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 1.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 54.799999999999955 5.799999999999997 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 43.966
Average program size in population (points): 44.964
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 372
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 372
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 142807740
--- Timings ---
Current time: 1481491431785 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55358.432337030055
Median total errors in population: 764.8000000000001
Error averages by case: (1781.8874425922754 1784.981442592252 1781.1014425922754 1788.652642592256 1782.72764259225 1790.934157407748 1790.7885574077459 1792.4392425922529 1790.9964425923006 1786.5014425922752 1782.4538425922708 1782.3144425922546 1793.4490425922697 1889.8414425922754 1869.2954425922753 1783.7984425922753 1794.34444259225 1802.656042592253 1829.8220425922566 1791.7204425922753 1783.8414425922754 1823.8966425923022 1866.7590425922986 3017.4080425922434 1863.2650425922734 1782.8290425922926 1794.3614425922754 1790.7897574077458 1854.0838425923023 1790.4919574077012)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 58.0 0.0 1.1999999999999993 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 27.19999999999999 54.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.008
Average program size in population (points): 45.004
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 229
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.142
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 144127980
--- Timings ---
Current time: 1481491435004 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_max vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_max vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup float_rot integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59035.06450173574
Median total errors in population: 512.2
Error averages by case: (1891.7653459056555 1894.7993459056297 1891.0443459056555 1898.0983459056295 1892.759545905629 1890.8128540943706 1890.6650540943747 1892.5553459056257 1890.8661459056825 1896.2433459056556 1892.3093459056688 1892.111945905634 1897.1525459056743 1945.6223459056555 2013.9893459056555 1894.1063459056554 1900.140545905628 1912.3279459056225 1926.2187459056368 1891.7133459056556 1893.5123459056556 1935.055745905683 2949.7355459056084 2686.2677459056385 1952.344545905675 1892.688545905681 1897.8653459056554 1890.6672540943748 1951.2583459056834 1890.3669459056296)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 0.1999999999999993 8.600000000000001 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.14030230586813974 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.444
Average program size in population (points): 45.44
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 437
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 437
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.137
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 145461300
--- Timings ---
Current time: 1481491438276 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56236.8857511959
Median total errors in population: 512.2
Error averages by case: (1841.7891850398632 1844.7947850398375 1841.0471850398633 1847.7845850398403 1842.6577850398369 1840.8855850398888 1840.7337850398897 1842.356185039836 1840.9365850398901 1845.7241850398632 1842.3327850398805 1841.6647850398429 1845.5195850398848 1877.0311850398632 1921.5121850398632 1843.7371850398633 1851.3283850398354 1862.5213850398338 1869.6707850398468 1841.708185039863 1843.6401850398631 1883.6885850398912 1907.060785039887 2415.370385039868 1893.9411850398892 1842.7071850398834 1845.7651850398631 1840.7377850398896 1897.8047850398914 1840.4333850398377)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 2.0 3.1999999999999993 14.399999999999999 2.200000000000003 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.457
Average program size in population (points): 45.455
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 471
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 471
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.136
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 146795010
--- Timings ---
Current time: 1481491441475 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup float_rot integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54600.47467136252
Median total errors in population: 512.2
Error averages by case: (1791.786 1794.7911999999772 1791.0874596976942 1797.853411295363 1792.7200596976716 1790.9592000000227 1790.8086000000228 1792.4115999999767 1790.9850000000238 1795.6115477292603 1792.0898398297297 1791.4144632627626 1795.5770390715495 1826.0703672913303 1873.633996828595 1793.6848632627818 1798.9489999999757 1812.6215999999754 1816.619983698429 1791.758 1793.6549899924967 1833.9207899925216 1865.9534623341576 2224.4475217162094 1843.64609841432 1792.5018398297307 1795.6475919179381 1790.8086000000224 1847.9573455000589 1790.5031999999771)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 57.0 0.0 1.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 62.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.764
Average program size in population (points): 45.761
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 377
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 377
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.123
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 148137930
--- Timings ---
Current time: 1481491444697 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_max vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items float_sub integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59687.79438023249
Median total errors in population: 512.2
Error averages by case: (1961.7647623809353 1954.6665623809126 1961.0317623809353 1967.866362380912 1962.640562380913 1950.8709986490996 1960.722398649103 1962.343562380909 1960.933162380959 1965.7007623809352 1961.8293623809516 1961.2615623809168 1975.4507623809586 1995.7837623809353 2043.6067623809352 1963.6447623809352 1968.676162380911 1982.0135623809085 1988.1247623809193 1971.6697623809353 1973.4967623809353 2002.9313623809612 2030.6195623809572 2382.1127623809316 2011.6325623809598 1962.251562380956 1965.1987623809352 1970.7251986491033 2017.7933623809613 1950.430362380913)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.21813407095292792 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 2.0 0.1999999999999993 9.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.21813407095292792 19.799999999999997 0.1818659290470721)
Average genome size in population (length): 44.439
Average program size in population (points): 45.437
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 274
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 274
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.148
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 149471100
--- Timings ---
Current time: 1481491447930 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall vector_integer_replace integer_sub float_inc float_dup_items float_sub integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61573.388674584196
Median total errors in population: 509.20000000000005
Error averages by case: (2021.7487568024953 2024.6451613974716 2021.0211585290153 2027.9450093926207 2022.5988794154773 2020.8364414710059 2020.6880000000247 2022.262199999975 2020.8868000000214 2025.4810870547492 2021.50055892429 2020.8200093926278 2025.3550000000232 2055.2501060033364 2285.754304810621 2023.5248501227902 2028.7353430133794 2042.1311147847873 2048.188158789034 2021.67 2023.511 2062.836929094234 2080.681547974233 2368.1395307021307 2072.568009392665 2021.943890702594 2024.9709589242746 2020.6920000000248 2076.6175585929286 2020.384309297406)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 1.0 0.8000000000000007 13.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.457
Average program size in population (points): 45.453
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 432
Genome diversity (% unique Plush genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 432
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.118
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 150804810
--- Timings ---
Current time: 1481491451193 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57167.69800865471
Median total errors in population: 509.20000000000005
Error averages by case: (1871.7929013776777 1874.7205013776545 1871.0299013776778 1878.035701377651 1872.725101377654 1870.8720687020725 1870.7195013777064 1872.3309013776493 1870.8955013777015 1875.7489013776776 1871.7175013776948 1870.9295013776589 1875.353901377703 1905.7799013776778 2140.055901377678 1873.6639013776776 1879.035101377653 1892.1821013776478 1898.7157013776612 1871.7419013776778 1873.5579013776776 1913.4255013777033 1939.4325013777002 2294.123901377684 1922.9631013777023 1872.0699013777016 1875.0189013776776 1870.7217013777065 1927.9237013777038 1870.4145013776538)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 57.0 0.0 1.1999999999999993 8.399999999999999 2.799999999999997 0.0 0.0 14.200000000000003 30.80000000000001 61.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.154
Average program size in population (points): 45.15
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 431
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 431
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.122
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 152129430
--- Timings ---
Current time: 1481491454378 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall integer_sub float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51656.11271116066
Median total errors in population: 509.20000000000005
Error averages by case: (1691.9081429432522 1694.885228902971 1691.136142943252 1697.8557526666204 1692.7774853908168 1690.9682577587237 1690.806500350993 1692.4805942666046 1691.0313003510005 1695.6531526666363 1691.5424175659227 1691.099999718716 1695.6603003509906 1727.692817565908 1778.560080865983 1694.0058428975199 1699.0216145255813 1712.7770428975005 1719.6588278494894 1691.755080865983 1693.8237003509769 1735.1916289030185 1764.4590853908605 2169.3737121979034 1744.2533110275872 1692.012742529708 1695.1958338773836 1690.816257758718 1749.2023703892598 1690.5074853908177)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0588799919401328 0.2588799919401328 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 57.0 0.0 3.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.2588799919401328 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.122
Average program size in population (points): 46.119
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 437
Genome diversity (% unique Plush genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 437
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.127
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 153483090
--- Timings ---
Current time: 1481491457729 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_add} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec float_add integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52274.757914917565
Median total errors in population: 509.20000000000005
Error averages by case: (1711.8606280794247 1714.9215387241152 1711.1016420739502 1718.1380048535639 1712.7993056835705 1710.9546768031332 1710.8095044352683 1712.4659193953719 1710.9915193954093 1716.0411381125245 1711.9017978834415 1711.1184162906202 1715.660534861047 1746.8020774725846 1794.0761178881662 1713.8473628704094 1719.1992586177428 1732.854069071238 1737.6135037188515 1711.7682999103945 1713.673455271996 1754.1732098471848 1784.2314102850642 2216.0304975832832 1764.181200990355 1712.1359639806471 1715.1766687717725 1710.8050768031296 1768.9188380267003 1710.5062772166502)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 2.8000000000000007 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.817
Average program size in population (points): 45.812
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 409
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.127
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 154827600
--- Timings ---
Current time: 1481491460938 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc float_mod integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup float_rot integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58381.18349532975
Median total errors in population: 509.20000000000005
Error averages by case: (1901.8337847541602 1904.8193847541368 1901.0529432831754 1907.6744348769294 1902.676943283153 1900.945984754182 1900.8061847541835 1902.4181847541354 1901.0209847541832 1905.6969480985215 1901.6589645871397 1901.1655941467855 1905.5399213270998 1936.8766309745643 1980.6318643327518 1903.8357941468043 1908.9147213270542 1922.443584754134 1929.9661082125904 1901.7097847541602 1903.504925874168 1943.4128436341769 1985.5930784145348 2807.708269751261 1952.9950309745873 1902.069564587143 1905.2278718089094 1900.8083847541836 1957.6647941468295 1900.509984754138)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 5.199999999999999 4.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 58.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.45
Average program size in population (points): 45.448
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 387
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.128
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 156161100
--- Timings ---
Current time: 1481491464175 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc float_mod integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59807.443520847184
Median total errors in population: 509.20000000000005
Error averages by case: (1961.7594856047417 1964.6204856047189 1961.0836441337567 1967.7629357275077 1962.6790441337325 1970.9170856047645 1970.7732856047678 1972.4160856047129 1970.967485604766 1966.160648949103 1961.8744654377206 1961.1540949973662 1965.5218221776834 1995.9223318251454 2048.367565183333 1963.7714949973858 1969.3598221776347 1982.0024856047128 2016.9348090631731 1971.7464856047416 1963.5786267247495 2002.8107444847585 2049.1163792651173 2387.084970601854 2013.407731825169 1962.234865437727 1965.1785726594906 1970.7752856047678 2016.9888949974118 1970.4718856047184)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 13.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.271
Average program size in population (points): 45.266
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 353
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 353
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.139
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 157489230
--- Timings ---
Current time: 1481491467381 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop float_rot integer_dup integer_dec vector_integer_subvec 5 integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub float_dup_items integer_dec integer_dup float_pop float_rot integer_dup integer_dec 5 integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53831.76907332668
Median total errors in population: 509.20000000000005
Error averages by case: (1761.8541024442225 1764.8653024441971 1761.1131024442225 1767.9071024442076 1762.7273024441968 1760.9129024442466 1760.7529024442397 1762.3531024442036 1760.9431024442486 1765.7861024442225 1761.7037024442393 1761.131302444203 1765.6359024442365 1797.6571024442223 1848.4831024442224 1763.7701024442224 1769.0565024441953 1782.9915024442018 1788.669902444205 1761.7251024442223 1763.7101024442225 1805.0903024442493 1832.6215024442456 2317.643502444229 1815.0305024442478 1762.186702444235 1765.3931024442224 1760.7539024442397 1818.8405024442493 1760.459702444198)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 2.8000000000000007 5.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 60.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.777
Average program size in population (points): 45.771
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 349
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.125
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 158832540
--- Timings ---
Current time: 1481491470613 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot vector_integer_rot integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58633.50401545019
Median total errors in population: 509.20000000000005
Error averages by case: (1921.8603805150065 1924.6795805149848 1921.0913805150064 1927.6477805149843 1922.674780514983 1920.935580515028 1920.7895805150306 1922.375980514981 1920.9899805150294 1925.5953805150064 1921.5849805150212 1921.0993805149883 1925.5365805150286 1956.5483805150063 2065.8423805150064 1923.7063805150065 1928.8323805149819 1942.0313805149808 1947.136780514992 1921.7113805150063 1923.5353805150064 1963.186380515031 1991.9717805150271 2433.4969805150067 1972.6657805150294 1921.980980515027 1925.1173805150063 1920.7925805150305 1977.5941805150314 1920.4921805149843)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.1999999999999993 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.321
Average program size in population (points): 45.318
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 332
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 332
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.127
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 160162170
--- Timings ---
Current time: 1481491473830 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51918.1632844051
Median total errors in population: 509.20000000000005
Error averages by case: (1701.9044161468364 1704.8828161468168 1701.1384161468366 1707.914216146824 1702.7638161468167 1700.9848161468558 1700.8374161468514 1702.6136161468216 1701.055216146857 1705.8894161468365 1701.9212161468492 1701.1528161468204 1705.7126161468498 1737.0214161468364 1788.3934161468364 1703.8774161468364 1709.6406161468158 1722.8122161468202 1727.5866161468236 1701.7724161468366 1703.7564161468365 1744.1328161468584 1786.319816146855 2131.1646161468484 1754.6482161468568 1702.2898161468495 1705.2324161468364 1700.8374161468512 1759.3658161468588 1700.5410161468176)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.8000000000000007 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.834
Average program size in population (points): 45.832
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 321
Genome diversity (% unique Plush genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 321
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.134
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 161507190
--- Timings ---
Current time: 1481491477073 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_rot} {:close 0, :instruction float_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup float_rot float_shove integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup float_shove integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 62.799999999999955 62.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 509.20000000000005
Mean: 16.973333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 142216.60606192864
Median total errors in population: 509.20000000000005
Error averages by case: (1781.874142064287 1784.780942064262 1781.068142064287 1789.2245420642648 1782.7315420642606 1780.9563420643121 1780.8105420643114 1782.5049420642617 1781.0215420643142 1795.5421420642872 1782.6643420643056 1784.0547420642658 1785.6087420643094 3832.8951420642875 13870.048142064286 1788.8691420642872 1789.73674206426 1804.2841420642603 3355.227142064325 1781.7241420642872 1783.7271420642871 1823.806342064315 1864.315742064312 74266.8371420637 1921.645142064313 1782.3575420643083 1788.171142064287 1780.8125420643114 2008.7961420643153 1780.5099420642623)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 57.0 0.0 0.1999999999999993 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 61.799999999999955 14.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.479
Average program size in population (points): 45.475
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 302
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 302
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.125
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 162841560
--- Timings ---
Current time: 1481491480313 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57858.418
Median total errors in population: 509.20000000000005
Error averages by case: (1762.016 1765.0091999999772 1761.241 1768.501999999988 1763.0763999999774 1761.2068000000222 1761.0416000000155 1763.2143999999848 1761.2362000000232 1766.509 1761.9486000000145 1761.289199999982 1765.5846000000122 1797.462 1850.456 1764.596 1769.961399999976 1783.0391999999838 1787.794599999986 1761.953 1763.705 1804.8054000000238 5782.43260000001 2381.929200000006 1818.5054000000232 1762.252200000011 1765.103 1761.0496000000155 1820.7556000000247 1760.742799999978)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 57.0 0.0 2.1999999999999993 14.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.665
Average program size in population (points): 45.663
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 260
Genome diversity (% unique Plush genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.13
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 164181510
--- Timings ---
Current time: 1481491483477 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub vector_integer_pushall float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57258.3354
Median total errors in population: 509.20000000000005
Error averages by case: (1881.728 1884.7751999999766 1881.024 1887.7017999999835 1882.6935999999753 1880.8658000000246 1880.714600000023 1882.3311999999773 1880.8976000000248 1885.594 1881.6968000000168 1881.1231999999807 1885.6104000000175 1916.892 1964.469 1883.761 1888.9527999999746 1902.3809999999762 1907.3649999999832 1881.717 1883.493 1923.7066000000254 1949.7670000000228 2279.250800000012 1933.7834000000244 1882.1068000000162 1885.279 1880.717600000023 1937.535000000026 1880.4021999999754)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 2.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.881
Average program size in population (points): 45.879
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 257
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.117
Error (vector) diversity:			 0.121
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 165527940
--- Timings ---
Current time: 1481491486706 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60084.1322
Median total errors in population: 509.20000000000005
Error averages by case: (1971.831 1974.7167999999767 1971.098 1977.5351999999764 1972.6947999999757 1971.032200000024 1970.888600000028 1972.6533999999726 1971.067200000024 1975.502 1971.6994000000152 1971.14199999998 1975.5434000000237 2006.723 2058.493 1973.873 1979.007599999974 1991.9237999999696 1997.7903999999844 1971.749 1973.475 2012.7522000000267 2055.5358000000215 2476.4304000000034 2022.9682000000246 1972.1220000000228 1975.184 1970.890800000028 2027.218800000027 1970.591199999976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 1.8000000000000007 3.6000000000000014 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 58.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.036
Average program size in population (points): 45.033
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 225
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.132
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 166849020
--- Timings ---
Current time: 1481491489905 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51587.89515085375
Median total errors in population: 509.20000000000005
Error averages by case: (1691.8411084165202 1694.805377453284 1691.0730447367537 1697.9833116239306 1692.7015421196588 1690.8458837827413 1690.6926380123548 1692.249561987645 1690.890561987688 1695.9384942079078 1691.4576186277948 1690.989765552733 1695.5709619876793 1727.7093503635856 1776.99685470295 1693.7069135853512 1699.0445483876904 1712.8265088995695 1718.4121315997863 1691.7149022899694 1693.7283619876634 1734.3250648958606 1744.4582102851225 2125.60764602517 1744.0583655527755 1691.8265184368206 1694.9766186277839 1690.6936380123548 1750.383114945936 1690.3865317587213)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 20.0 0.0 0.8000000000000007 5.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 19.19999999999999 57.799999999999955 16.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.11465332585237131)
Average genome size in population (length): 44.571
Average program size in population (points): 45.567
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.151
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 168186150
--- Timings ---
Current time: 1481491493147 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54267.6229293805
Median total errors in population: 509.20000000000005
Error averages by case: (1781.8352794154982 1784.8796794154744 1781.0457391131922 1787.8738907108627 1782.666339113168 1780.835479415521 1780.6836794155183 1782.2782794154773 1780.8684794155224 1785.6778271447586 1781.4069719687157 1781.0169426782616 1785.3288355615573 1816.4468122485187 1860.203276244093 1783.6351426782799 1788.973235561515 1802.663479415475 1808.6356631139267 1781.6952794154984 1783.6982694079948 1824.0910694080196 1848.0117417496567 2193.2189802940115 1833.570012248542 1781.6995719687334 1784.8368713334366 1780.6834794155186 1838.7881426783051 1780.3744794154754)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 4.199999999999999 4.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.679
Average program size in population (points): 45.674
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 280
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.136
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 169526520
--- Timings ---
Current time: 1481491496381 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_inc vector_integer_replace integer_sub vector_integer_pushall float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54185.32305417982
Median total errors in population: 503.6
Error averages by case: (1761.8533184368061 1764.8213184367823 1761.0553184368061 1768.3411184367874 1762.6501184367817 1760.845913856891 1760.6935138568888 1762.1819184367844 1760.901118436831 1766.0723184368062 1761.2471184367869 1761.1291184367878 1765.4791184368241 1796.2763184368062 1845.395318436806 1763.665318436806 1769.0223184367806 1782.4937184367834 1788.0025184367898 1761.724318436806 1763.7463184368062 1804.2765184368318 2271.6321184368094 2242.338918436815 1813.413518436831 1761.4121184368207 1764.312318436806 1760.6945138568888 1819.2625184368324 1760.3830332522314)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 1.0 2.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 0.7999999999999972 30.80000000000001 54.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.742
Average program size in population (points): 45.739
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 517
Genome diversity (% unique Plush genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 517
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.135
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 170868780
--- Timings ---
Current time: 1481491499640 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec vector_integer_subvec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 62.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 503.6
Mean: 16.786667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60893.5422
Median total errors in population: 503.6
Error averages by case: (1991.874 1994.7043999999746 1991.114 1997.7345999999768 1992.601999999975 1990.984000000024 1990.8390000000293 1992.317199999971 1991.0156000000256 1995.439 1991.4891999999772 1990.9933999999814 1995.4974000000236 2026.233 2262.825 1993.659 1999.221599999973 2012.1229999999673 2021.1975999999843 1991.737 1993.514 2032.8648000000271 2055.2954000000227 2538.427199999999 2043.0608000000257 1991.6170000000195 1994.404 1990.8390000000293 2049.3796000000275 1990.540399999976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 1.0 0.8000000000000007 4.399999999999999 2.799999999999997 0.0 0.0 5.799999999999997 28.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.493
Average program size in population (points): 45.489
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 493
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 493
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.147
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 172203570
--- Timings ---
Current time: 1481491502838 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 7.6 41.0 62.0 4.0 8.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 61.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 503.20000000000005
Mean: 16.773333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59860.008200000004
Median total errors in population: 503.6
Error averages by case: (1951.76 1954.8731999999732 1951.065 1957.7159999999744 1952.618399999974 1950.888800000025 1950.75060000003 1952.1623999999674 1950.9438000000266 1955.708 1951.353799999975 1950.9459999999808 1955.513000000026 1985.906 2034.809 1953.644 1959.0463999999724 1972.295199999967 1977.5329999999828 1951.73 1953.558 1993.3416000000277 2464.485999999988 2408.7033999999985 2002.709000000026 1951.4480000000208 1954.359 1950.75160000003 2008.9378000000283 1950.451199999975)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 40.0 1.0 5.199999999999999 5.399999999999999 2.799999999999997 0.0 0.0 6.200000000000003 30.80000000000001 57.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.297
Average program size in population (points): 45.295
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 480
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 480
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 173532480
--- Timings ---
Current time: 1481491506078 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_inc float_dup_items float_sub integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 7.6 41.0 62.0 4.0 8.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 61.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 503.20000000000005
Mean: 16.773333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59737.66848113429
Median total errors in population: 503.6
Error averages by case: (1961.8686357332028 1964.802035733177 1961.1136357332027 1967.7864357331796 1962.6412357331772 1960.8830836622105 1960.7351163378432 1962.1544357331738 1960.9170357332282 1965.7236357332029 1961.451435733179 1961.1832357331843 1965.316635733226 1995.8786357332028 2042.6396357332028 1963.6226357332027 1969.0504357331758 1981.942835733172 1989.126435733186 1961.711635733203 1963.500635733203 2003.2986357332293 2025.7764357332255 2445.5820357332054 2013.5804357332286 1961.5814357332201 1964.4196357332028 1960.7371163378432 2018.20923573323 1960.4340357331776)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 1.0 0.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 57.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.11633781453677378 3.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.596
Average program size in population (points): 45.593
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 435
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 435
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.127
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 174870360
--- Timings ---
Current time: 1481491509371 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall integer_sub float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 7.6 41.0 62.0 4.0 8.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 61.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 503.20000000000005
Mean: 16.773333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55887.42230475829
Median total errors in population: 503.6
Error averages by case: (1831.94140151655 1834.8816015165262 1831.20340151655 1837.9634015165261 1832.6842015165253 1831.052316332024 1830.9109163320252 1832.4262015165239 1831.0848015165752 1835.87740151655 1831.3486015165295 1831.1540015165303 1835.5376015165737 1866.38340151655 1918.44840151655 1833.81040151655 1838.9380015165239 1852.6524015165232 1886.4798015165331 1831.80140151655 1833.85340151655 1873.3834015165762 1907.2004015165744 2315.75060151655 1882.9772015165754 1831.5060015165711 1834.44340151655 1830.9109163320252 1890.2322015165769 1830.5851163319744)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 3.3999999999999986 2.799999999999997 0.0 0.0 5.799999999999997 29.80000000000001 57.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.845
Average program size in population (points): 45.842
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 423
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 423
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.139
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 176215710
--- Timings ---
Current time: 1481491512649 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.8000000000000007 0.1999999999999993 7.6 41.0 62.0 4.0 8.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 61.8 1.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 503.20000000000005
Mean: 16.773333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59136.36678332873
Median total errors in population: 503.6
Error averages by case: (1941.9258810603967 1944.7958810603732 1941.1658810603967 1948.0072810603745 1942.6804810603724 1941.030518939627 1940.8861189396275 1942.4780810603713 1941.0668810604216 1946.0128810603967 1941.5520810603796 1941.2226810603781 1945.673481060418 1976.9848810603967 2024.811881060397 1943.7388810603968 1949.2326810603713 1962.0430810603696 1970.067681060381 1941.7808810603967 1943.6978810603969 1983.2368810604223 2019.3540810604188 2403.2932810603957 1993.9428810604209 1941.6608810604164 1944.6338810603968 1940.8861189396275 1997.9166810604233 1940.5861189395794)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 57.0 1.0 0.8000000000000007 5.399999999999999 2.799999999999997 0.0 0.0 2.200000000000003 30.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.971
Average program size in population (points): 44.963
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 384
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 384
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.141
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 177534840
--- Timings ---
Current time: 1481491515910 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_inc float_dup_items integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 2.8000000000000007 6.6 42.0 62.0 4.0 9.2 27.4 26.200000000000003 2.0 5.0 54.8 31.80000000000001 54.799999999999955 62.8 0.5999999999999996 4.0 0.6 72.8 0.19999999999999996]
Total: 502.20000000000005
Mean: 16.74
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57616.890887638336
Median total errors in population: 503.6
Error averages by case: (1891.8221585290153 1894.6989585289934 1891.0571585290152 1897.678758528998 1892.6447585289936 1890.8676414710064 1890.7146414710028 1892.2131585289962 1890.9039585290375 1895.4361585290153 1891.4775585290079 1890.9503585289988 1895.7535585290286 1926.2601585290154 1968.7461585290152 1893.6641585290154 1898.8855585289919 1912.206158528995 1920.4193585290009 1891.7011585290152 1893.5971585290154 1933.343158529039 1951.9477585290354 2361.2689585290186 1942.937558529038 1891.6909585290273 1894.5911585290153 1890.7176414710027 1948.2809585290397 1890.4140414709632)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 1.0 2.8000000000000007 4.399999999999999 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.337
Average program size in population (points): 45.331
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 261
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.157
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 178864950
--- Timings ---
Current time: 1481491519130 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall vector_integer_replace integer_sub float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 2.8000000000000007 6.6 42.0 62.0 4.0 9.2 27.4 26.200000000000003 2.0 5.0 54.8 31.80000000000001 54.799999999999955 62.8 0.5999999999999996 4.0 0.6 72.8 0.19999999999999996]
Total: 502.20000000000005
Mean: 16.74
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57233.5522574588
Median total errors in population: 503.6
Error averages by case: (1881.8597163378145 1884.8259163377902 1881.0807163378145 1887.708916337795 1882.6521163377888 1880.894883662211 1880.7427163378393 1882.2063163377895 1880.9041163378402 1885.6107163378144 1881.5615163378236 1880.9991163377956 1885.9175163378354 1915.0177163378144 1960.0927163378144 1883.6707163378144 1888.3299163377883 1902.3873163377896 1907.1959163377978 1881.7247163378145 1883.5437163378144 1923.4545163378414 1938.4255163378373 2274.0529163378133 1932.79771633784 1881.9571163378337 1884.9077163378145 1880.7427163378393 1937.8603163378416 1880.4267163377888)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 0.0 2.8000000000000007 7.399999999999999 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.594
Average program size in population (points): 45.589
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 334
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 334
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.126
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 180202770
--- Timings ---
Current time: 1481491522374 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub float_dup_items float_sub integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 2.8000000000000007 6.6 42.0 62.0 4.0 9.2 27.4 26.200000000000003 2.0 5.0 54.8 31.80000000000001 54.799999999999955 62.8 0.5999999999999996 4.0 0.6 72.8 0.19999999999999996]
Total: 502.20000000000005
Mean: 16.74
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58214.79369985528
Median total errors in population: 503.20000000000005
Error averages by case: (1911.8317966618426 1914.71539666182 1911.0837966618426 1917.7633966618187 1912.723596661819 1910.9303966618668 1910.7747966618688 1912.2549966618164 1910.940796661866 1915.6077966618427 1911.7565966618572 1911.0999966618256 1916.0155966618663 1945.0377966618425 2000.1297966618426 1913.6317966618426 1918.3753966618178 1932.0607966618156 1938.1381966618274 1911.7727966618427 1913.6677966618427 1953.4065966618678 1965.6291966618642 2376.290596661849 1962.5185966618676 1912.100596661863 1914.8427966618426 1910.7787966618687 1968.452996661868 1910.4601966618188)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 0.0 1.8000000000000007 1.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 30.80000000000001 54.799999999999955 14.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.275
Average program size in population (points): 45.275
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 393
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 393
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.142
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 181531020
--- Timings ---
Current time: 1481491525690 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_rot integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 0.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 61.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 500.6
Mean: 16.686666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58462.96971178424
Median total errors in population: 503.20000000000005
Error averages by case: (1921.799339439281 1924.8695394392587 1921.081339439281 1927.6073394392592 1922.706139439258 1920.9556215907542 1920.8028215907557 1922.2909394392561 1920.9613394393039 1925.400339439281 1921.4733394392936 1921.0609394392661 1926.0107394393028 1954.871339439281 1997.444339439281 1923.645339439281 1928.035539439257 1942.267739439253 1946.8689394392648 1921.774339439281 1923.713339439281 1963.2141394393052 1973.5177394393022 2350.386539439286 1974.093339439305 1921.9193394393005 1924.799339439281 1920.8038215907557 1978.1035394393066 1920.4912215907086)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 57.0 0.0 2.1999999999999993 14.399999999999999 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 54.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.703
Average program size in population (points): 45.699
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 360
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 360
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.126
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 182872110
--- Timings ---
Current time: 1481491528942 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_remove} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup vector_integer_remove integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dup integer_dup vector_integer_remove integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 0.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 61.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 500.6
Mean: 16.686666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56094.63643481662
Median total errors in population: 503.20000000000005
Error averages by case: (1841.8554512178102 1844.7996512177874 1841.06445121781 1847.7678512177927 1842.6988512177861 1840.8708173119362 1840.7100173119338 1842.195251217789 1840.9120512178342 1845.68845121781 1841.5156512178128 1841.534051217805 1845.8060512178286 1875.3954512178102 1928.22845121781 1843.70745121781 1848.6082512177857 1862.4038512177867 1869.7590512177944 1841.73645121781 1844.0094512178102 1884.3806512178353 1902.6752512178314 2277.8734512178153 1892.4322512178342 1841.8160512178267 1844.43945121781 1840.7162173119339 1898.6322512178356 1840.4038512177867)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.18304705149754297 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 1.0 2.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 6.200000000000003 30.80000000000001 53.799999999999955 11.200000000000003 0.40000000000000036 0.0 0.18304705149754297 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.497
Average program size in population (points): 45.494
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 238
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.155
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 184207020
--- Timings ---
Current time: 1481491532124 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_sub} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items float_sub integer_dec integer_dup float_pop vector_integer_subvec integer_dup float_rot integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall float_inc float_mod integer_sub float_dup_items integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 0.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 6.6 42.0 61.0 4.0 9.2 27.4 27.200000000000003 2.0 4.0 54.8 31.80000000000001 58.799999999999955 62.8 0.5999999999999996 5.0 0.6 71.8 0.19999999999999996]
Total: 500.6
Mean: 16.686666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62647.258033217564
Median total errors in population: 503.20000000000005
Error averages by case: (2061.778878319663 2064.75167831964 2061.057878319663 2067.538278319638 2062.642278319639 2060.8688395289087 2060.727839528916 2062.2026783196325 2060.898278319686 2065.458878319663 2061.516478319648 2062.4404783196746 2065.731678319687 2095.433878319663 2142.515878319663 2063.615878319663 2068.820678319639 2081.653478319629 2088.563278319647 2061.714878319663 2064.076878319663 2102.5958783196884 2124.514678319682 2459.61947831966 2111.6858783196863 2061.683078319683 2064.050878319663 2060.7268395289157 2117.9400783196866 2060.432278319641)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 1.0 4.800000000000001 1.3999999999999986 2.799999999999997 0.0 0.0 6.200000000000003 30.80000000000001 53.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.108
Average program size in population (points): 45.105
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 405
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 405
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.136
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 185530260
--- Timings ---
Current time: 1481491535333 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59408.100686401056
Median total errors in population: 502.20000000000005
Error averages by case: (1951.7940909532224 1954.7425821319437 1951.0171296942278 1957.683394189225 1952.6501021494873 1950.9155987047243 1950.7694640401207 1952.174264358806 1950.9436643588626 1955.6891614432277 1951.4519810957918 1952.4469941892646 1955.6238643588622 1985.920153150745 2032.0739090556087 1953.5788754858813 1959.0596451312151 1972.0992709105326 1977.8036016325573 1951.7338643588366 1954.0918643588366 1993.099899951725 2013.4149582440673 2408.1895166146555 2002.8849941892759 1951.5469598548805 1953.7691810958147 1950.7706640401211 2009.6888768037386 1950.4721598548351)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.19984062681853287 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 0.1999999999999993 13.600000000000001 2.799999999999997 0.0 0.0 6.200000000000003 30.80000000000001 46.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.19984062681853287 19.799999999999997 0.09549602350936848)
Average genome size in population (length): 44.31
Average program size in population (points): 45.307
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 448
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 448
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.146
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 186859560
--- Timings ---
Current time: 1481491538579 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52418.46902930058
Median total errors in population: 502.20000000000005
Error averages by case: (1701.648 1704.8989999999794 1700.8888588799919 1708.1863585289996 1702.735358528994 1700.987200000021 1700.8336000000188 1702.333599999981 1701.007200000021 1706.1131585290152 1701.3287585289968 1702.2827585290174 1705.683800000015 1737.344 1791.992858879992 1703.778 1709.1457999999782 1722.7583999999804 1728.4907585290018 1701.779 1704.209 1744.441200000023 2219.921387881521 2193.3722000000066 1754.7099568025174 1701.5027568025073 1704.2418588799917 1700.8346000000188 1760.5024000000233 1700.517199999979)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 2.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 0.7999999999999972 29.80000000000001 50.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.105
Average program size in population (points): 46.102
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 286
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.141
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 188212710
--- Timings ---
Current time: 1481491541838 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52933.42280000001
Median total errors in population: 500.6
Error averages by case: (1711.346 1715.0035999999743 1710.563 1718.0809999999744 1712.7449999999733 1710.9714000000267 1710.8130000000265 1712.3843999999733 1710.9850000000272 1715.562 1711.2737999999767 1711.0987999999813 1715.6906000000247 1747.214 1980.672 1713.718 1719.2065999999722 1732.7203999999706 1744.0817999999804 1711.807 1713.877 1754.625400000029 1778.572600000025 2689.6071999999963 1764.1450000000273 1711.401400000022 1714.39 1710.8150000000264 1769.5532000000294 1710.4985999999733)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 3.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.0 2.200000000000003 30.80000000000001 50.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.292
Average program size in population (points): 46.286
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 146
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.133
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 189571470
--- Timings ---
Current time: 1481491545110 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61217.4734
Median total errors in population: 500.6
Error averages by case: (2011.274 2014.7963999999768 2020.51 2017.5789999999724 2012.6279999999756 2020.836400000023 2020.68880000003 2022.1429999999693 2020.8668000000246 2015.404 2011.144399999979 2010.9187999999808 2025.5140000000279 2046.026 2088.095 2013.505 2018.613799999975 2031.9275999999684 2038.6423999999824 2021.668 2023.701 2053.033200000026 2072.547800000023 2378.961799999998 2062.283600000024 2021.2910000000243 2014.249 2020.68880000003 2067.5492000000263 2020.3865999999769)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 0.0 1.1999999999999993 5.600000000000001 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 50.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.532
Average program size in population (points): 45.529
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 127
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.12
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 190907430
--- Timings ---
Current time: 1481491548346 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall vector_integer_replace float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54906.8484
Median total errors in population: 500.6
Error averages by case: (1801.837 1805.0113999999755 1801.053 1808.3535999999801 1802.8219999999744 1801.1310000000249 1800.9810000000239 1802.7875999999753 1801.1684000000257 1806.254 1801.6643999999771 1801.1123999999802 1805.712000000021 1837.377 1881.817 1803.8 1810.0157999999735 1822.699599999974 1828.9397999999826 1801.948 1804.452 1844.235600000027 1871.7642000000237 2232.3460000000077 1857.839000000025 1801.714000000018 1804.235 1800.982200000024 1862.1144000000272 1800.680999999975)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 58.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 8.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.85
Average program size in population (points): 45.848
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 134
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.172
Error (vector) diversity:			 0.179
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 192252930
--- Timings ---
Current time: 1481491551660 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_sub float_inc float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55363.41108810243
Median total errors in population: 499.6
Error averages by case: (1822.325397392396 1824.9377814814984 1821.584397392396 1827.4940263496148 1822.6815291706687 1811.0460763473525 1810.897476347353 1812.3302384680965 1811.0602384681465 1825.2670263496364 1821.2748933549376 1821.0449263714213 1815.6141263714592 1855.922693354961 1906.2753973923961 1823.1862973481132 1828.9385783986895 1842.7602973480866 1846.6374018124664 1811.8574384681215 1814.9329824892325 1864.2205814815493 1893.8831291707174 2208.4258846885346 1873.258450089144 1821.4074870414588 1823.4825708198714 1810.897476347353 1879.1800116394688 1810.5862763473033)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 3.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.0 5.799999999999997 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.295
Average program size in population (points): 45.294
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 317
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 317
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.157
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 193581780
--- Timings ---
Current time: 1481491554920 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_pushall float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60310.130632744665
Median total errors in population: 495.6
Error averages by case: (1982.6554596976941 1984.9900596976693 1981.898459697694 1987.1494596976718 1982.6242596976683 1980.9649403023304 1980.818340302331 1982.2622596976682 1981.01905969772 1985.073459697694 1981.39305969767 1981.235859697677 1985.6752596977165 2016.429459697694 2062.238459697694 1982.912459697694 1988.8872596976676 2002.7770596976663 2036.928259697677 1981.735459697694 1985.0984596976941 2023.180059697721 2043.9106596977178 2409.840859697697 2032.6556596977198 1981.5306596977111 1983.096459697694 1980.8201403023309 2039.8118596977213 1980.5174596976694)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.8000000000000007 0.6000000000000014 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.677
Average program size in population (points): 45.675
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 464
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 464
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.149
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 194922090
--- Timings ---
Current time: 1481491558384 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59373.70853900184
Median total errors in population: 495.6
Error averages by case: (1952.7614426819011 1954.9860426818775 1951.9524426819012 1957.0138426818792 1952.6428426818766 1951.0105573181218 1950.8675573181217 1952.1908426818766 1951.055842681926 1954.9104426819013 1951.3974426818777 1951.3184426818857 1955.598442681922 1985.3254426819012 2031.091442681901 1952.8544426819012 1958.8976426818758 1972.893442681875 1978.775042681885 1951.764442681901 1955.2684426819012 1993.2152426819273 2013.841442681923 2374.662642681908 2002.1912426819258 1951.525042681917 1952.9924426819011 1950.8675573181217 2009.2758426819275 1950.5605573180758)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 5.199999999999999 13.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19991037400520362)
Average genome size in population (length): 44.841
Average program size in population (points): 45.838
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 498
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 498
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.129
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 196267320
--- Timings ---
Current time: 1481491561829 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall vector_integer_replace float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55108.29493703006
Median total errors in population: 495.6
Error averages by case: (1792.7684425922753 1794.993442592254 1791.9424425922753 1797.0990425922575 1792.696642592252 1791.0423574077467 1790.875557407747 1792.3022425922525 1791.060042592298 1794.9844425922754 1791.5020425922537 1791.4312425922606 1795.8048425922943 1827.1704425922753 1879.7804425922752 1792.9304425922753 1799.1780425922518 1813.2442425922525 1818.3960425922605 1791.8154425922753 1795.1564425922754 1834.4654425922993 1861.2280425922963 2726.3810425922825 1843.4972425922986 1791.6408425922916 1793.0984425922754 1790.8793574077467 1850.3500425922994 1790.5801574077025)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 62.0 0.0 1.1999999999999993 3.3999999999999986 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 49.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.762
Average program size in population (points): 45.757
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 488
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.13
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 197610180
--- Timings ---
Current time: 1481491565141 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62780.024323969694
Median total errors in population: 495.6
Error averages by case: (2052.6009580038844 2054.827958003861 2051.8529580038844 2057.185558003859 2052.617758003859 2050.9793418570716 2050.8373580039115 2052.220158003857 2050.993758003909 2055.0189580038846 2051.312358003861 2051.3077580038666 2055.7691580039095 2086.5409580038845 2132.672958003884 2052.7509580038845 2058.877558003859 2072.643358003855 2075.520358003867 2051.7909580038845 2055.0129580038843 2092.8497580039107 2563.303758003867 2434.590958003886 2102.0541580039076 2051.442558003906 2052.898958003884 2050.8373580039115 2108.1709580039096 2050.54175800386)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.09192658172642887 0.10807341827357114 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 2.1999999999999993 14.399999999999999 2.799999999999997 1.0 0.0 3.799999999999997 29.80000000000001 34.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.10807341827357114 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.466
Average program size in population (points): 45.461
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 455
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 455
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 198944160
--- Timings ---
Current time: 1481491568404 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64113.32549360385
Median total errors in population: 495.6
Error averages by case: (2112.5762226937236 2114.8184865993344 2111.834823107282 2116.7389359083677 2112.5668715211705 2110.9693379227574 2110.8179805150316 2112.209380514981 2111.0163805150337 2114.621143354062 2111.284961029986 2111.1329359083707 2115.694580515027 2146.117375715419 2187.7970604746165 2112.7792289255353 2118.857109067002 2132.3938960635246 2137.626906714891 2111.7413805150063 2115.1633805150063 2152.461261944632 2182.0874737624235 2475.1614300966535 2161.80953590841 2111.3701655548866 2112.9067610300126 2110.820980515032 2167.422741140804 2110.526765554843)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 0.0 5.199999999999999 1.6000000000000014 2.799999999999997 0.0 0.0 2.200000000000003 30.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.53
Average program size in population (points): 45.525
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 442
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 442
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.119
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 200280060
--- Timings ---
Current time: 1481491571681 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_pushall float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60077.00475382144
Median total errors in population: 495.6
Error averages by case: (1972.5161149834437 1974.8491149834215 1971.7531149834435 1976.9739149834206 1972.6317149834194 1970.8890171707585 1970.7415438593034 1972.1731438592512 1970.9113438593022 1974.7321149834436 1971.4865149834209 1971.2117149834269 1975.7477438593007 2006.1441149834436 2054.6981149834437 1972.8601149834437 1979.0859149834187 1992.7881149834159 1994.3381149834286 1971.7351438592773 1974.9181438592773 2013.126714983469 2032.1877149834656 2500.568514983441 2022.3503149834678 1971.6109149834629 1972.9681149834437 1970.7395438593035 2029.819714983469 1970.4483149834202)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.03665572881693843 0.16334427118306158 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 4.199999999999999 4.600000000000001 2.799999999999997 1.0 0.0 6.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.16334427118306158 19.799999999999997 0.15163917254091341)
Average genome size in population (length): 44.543
Average program size in population (points): 45.54
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 397
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 201616350
--- Timings ---
Current time: 1481491574946 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60852.12879835394
Median total errors in population: 495.6
Error averages by case: (2002.6599866117979 2004.8597866117755 2001.902986611798 2007.1111866117747 2002.655786611774 2001.0243866118208 2000.8775866118237 2002.2621866117713 2001.0341866118213 2004.9879866117979 2001.4911866117757 2001.3073866117804 2005.7391866118205 2036.060986611798 2078.808986611798 2002.934986611798 2009.247186611774 2022.71898661177 2026.411186611781 2001.782986611798 2005.193986611798 2043.278186611823 2069.9731866118195 2400.572986611802 2052.6809866118215 2001.5301866118177 2002.956986611798 2000.8755866118236 2058.6229866118238 2000.564586611775)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.18661179785132428 0.38661179785132427 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.8000000000000007 6.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.38661179785132427 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.477
Average program size in population (points): 45.475
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 392
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.132
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 202950660
--- Timings ---
Current time: 1481491578186 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55196.45452327593
Median total errors in population: 495.6
Error averages by case: (1812.6915536177555 1815.0177536177318 1811.9295536177553 1817.304353617734 1812.7383536177306 1810.9657536177795 1810.807953617778 1812.2471536177327 1811.00935361778 1814.8865536177555 1811.460953617733 1811.3197536177386 1815.818953617776 1846.4535536177555 1893.2572965664071 1812.8585536177554 1819.40075361773 1833.2465536177322 1850.7907536177383 1811.8325536177554 1815.3505536177554 1854.0189536177809 1859.5810965664302 2250.123696566408 1864.7374965664317 1811.5545536177735 1813.0265536177553 1810.8109536177778 1870.707296566433 1810.5053536177315)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 3.1999999999999993 13.600000000000001 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 12.671474325889534 0.19999999999999996)
Average genome size in population (length): 44.754
Average program size in population (points): 45.751
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 373
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 373
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.143
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 204293280
--- Timings ---
Current time: 1481491581402 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_last} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall vector_integer_last vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52020.53159488294
Median total errors in population: 495.6
Error averages by case: (1702.717402103835 1705.0114021038173 1701.911402103835 1707.2120021038197 1702.7162021038152 1700.9922850458229 1700.8394850458214 1702.2818021038183 1701.0258021038544 1705.006402103835 1701.3732021038177 1701.2252021038219 1705.8492021038496 1736.578402103835 1845.308402103835 1702.922402103835 1709.1604021038154 1723.445402103817 1755.4182021038225 1701.820402103835 1705.418402103835 1744.6380021038563 1768.0252021038536 2169.6366021038443 1753.7316021038555 1701.4942021038494 1703.020402103835 1700.8414850458214 1760.3794021038568 1700.5308850457861)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.934
Average program size in population (points): 45.931
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 390
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 390
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.142
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 205641300
--- Timings ---
Current time: 1481491584624 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56973.123
Median total errors in population: 495.6
Error averages by case: (1852.559 1854.8953999999765 1851.797 1857.0887999999766 1852.6569999999742 1850.8540000000246 1850.7016000000274 1852.145399999971 1850.8750000000264 1854.911 1851.561999999977 1851.4785999999833 1855.828800000025 1899.887 1935.975 1852.901 1859.2163999999746 1873.1893999999695 1897.1607999999826 1851.724 1855.231 1893.9456000000262 2367.632999999999 2354.197000000003 1927.6832000000247 1851.9206000000202 1854.089 1850.7016000000274 1909.925800000027 1850.3889999999753)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 0.0 0.8000000000000007 13.600000000000001 2.799999999999997 0.0 0.0 3.799999999999997 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.854
Average program size in population (points): 45.852
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 360
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 360
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.124
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 206986920
--- Timings ---
Current time: 1481491587898 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop float_yankdup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56684.47235741262
Median total errors in population: 495.6
Error averages by case: (1862.5681642050565 1864.847675204175 1861.8326758413914 1866.8909219528557 1862.6928010927534 1860.8577574077492 1860.70575740775 1862.1171365078944 1860.8858425923013 1864.7862605523437 1861.1988303353307 1861.2625590556036 1865.5940425922986 1895.9007264780253 1941.929277653009 1862.8647471841423 1868.6709522014671 1882.9649608407767 1885.677235835043 1861.7488231072816 1865.0564425922753 1904.0926739298845 1908.5830804894686 2312.7641380230907 1912.9934103509293 1861.3402529455038 1862.9605609605298 1860.70575740775 1919.5867784557622 1860.3921142101951)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.6
Average program size in population (points): 45.594
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 373
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 373
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.11
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 208324920
--- Timings ---
Current time: 1481491591135 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55722.981398353935
Median total errors in population: 495.6
Error averages by case: (1832.742986611798 1835.011786611774 1831.915986611798 1836.917186611773 1832.691186611773 1830.9405866118218 1830.7871866118242 1832.2071866117722 1830.9895866118222 1834.789986611798 1831.371386611775 1831.2431866117822 1835.5733866118212 1865.969986611798 1910.857986611798 1832.8639866117978 1838.9649866117727 1853.1627866117708 1857.7191866117814 1831.781986611798 1835.145986611798 1873.8645866118234 1896.8571866118205 2199.815586611808 1883.2435866118226 1831.4887866118174 1833.0169866117978 1830.7911866118243 1889.7715866118242 1830.4833866117738)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.18661179785132428 0.38661179785132427 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 61.0 0.0 1.8000000000000007 13.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.38661179785132427 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.51
Average program size in population (points): 45.508
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 362
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.123
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 209660220
--- Timings ---
Current time: 1481491594391 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall vector_integer_subvec float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60881.701774525325
Median total errors in population: 495.6
Error averages by case: (2002.510397223219 2004.766197223194 2001.7853972232188 2006.8107972231985 2002.6215972231928 2000.8502500804423 2000.7000997090192 2002.1063972231939 2000.8773972232443 2004.7753972232188 2001.5179972231952 2001.4111972232029 2005.5073972232394 2035.807397223219 2084.4303972232187 2002.8643972232187 2008.9771972231924 2022.6291972231923 2026.4137972232027 2001.7053972232188 2004.8723972232187 2043.1457972232454 2060.645397223241 2436.484797223218 2052.512597223245 2001.6511972232356 2003.1583972232188 2000.7010997090192 2059.0601972232453 2000.401597223194)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.10847647425122842 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 58.0 0.0 2.8000000000000007 9.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.10847647425122842 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.582
Average program size in population (points): 45.58
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 334
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 334
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.127
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 210997680
--- Timings ---
Current time: 1481491597645 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50385.48240000001
Median total errors in population: 495.6
Error averages by case: (1652.687 1655.0819999999774 1651.939 1657.371799999987 1652.748799999976 1650.9982000000225 1650.8462000000156 1652.3525999999842 1651.0560000000237 1655.177 1651.4187999999785 1651.435799999985 1655.9916000000137 1686.959 1739.102 1653.139 1659.3547999999757 1673.5731999999834 1677.8609999999842 1651.822 1655.488 1695.318200000024 1727.249400000021 2055.352200000016 1704.2676000000233 1651.5542000000103 1653.075 1650.8492000000156 1710.8730000000244 1650.5397999999775)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.974
Average program size in population (points): 45.971
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 381
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 381
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.142
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 212346900
--- Timings ---
Current time: 1481491600908 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56394.291427252334
Median total errors in population: 495.6
Error averages by case: (1852.6538117835828 1854.9432117835586 1851.8838117835828 1857.2848117835613 1852.6760117835581 1850.9295030318888 1850.7765030318897 1852.2652117835578 1850.9776117836075 1855.086811783583 1851.4256117835594 1851.3844117835663 1855.8584117836042 1887.541811783583 1932.106811783583 1852.913811783583 1859.144211783558 1873.4610117835557 1878.0820117835656 1851.7658117835829 1855.2088117835829 1893.798011783608 1919.4944117836062 2282.22141178359 1903.4342117836072 1851.5476117835983 1853.1718117835828 1850.7785030318896 1910.9932117836092 1850.4822117835604)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.3456241416655579 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 0.8000000000000007 13.600000000000001 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.3456241416655579 19.799999999999997 0.05437585833444214)
Average genome size in population (length): 44.295
Average program size in population (points): 45.29
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 354
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 354
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.138
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 213675750
--- Timings ---
Current time: 1481491604113 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall integer_fromfloat float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_sub vector_integer_pushall float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55732.32948528341
Median total errors in population: 495.6
Error averages by case: (1832.6358097787283 1834.8337488491127 1831.8557580612496 1837.394445357354 1832.6711605344433 1830.8076797416097 1830.652236544109 1832.1777605344398 1830.8233991369987 1835.2246309117177 1831.4010973486065 1831.272987168584 1835.6039991369985 1866.4035140134047 1916.0138874155814 1832.864247710294 1839.0459474190925 1853.2126365784952 1857.2807963102478 1831.7193431580858 1835.1297991369752 1874.139198345033 1886.5905974754162 2214.422424481594 1883.2059761247872 1831.497286191745 1833.0382273196444 1830.6515890390403 1889.4143930256532 1830.344908434379)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 1.2000000000000002 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 2.1999999999999993 15.399999999999999 2.799999999999997 1.0 0.0 6.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.425
Average program size in population (points): 45.422
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 353
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 353
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.119
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 215008500
--- Timings ---
Current time: 1481491607356 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58780.88801439622
Median total errors in population: 495.6
Error averages by case: (1932.5936672665093 1934.8582672664872 1931.8616672665094 1936.7964672664882 1932.6602672664862 1931.0005327335125 1930.839732733515 1932.2116672664836 1931.0208672665317 1934.7376672665093 1931.4494672664885 1931.1922672664941 1935.7114672665293 1965.5626672665092 2019.5696672665092 1932.8536672665093 1939.1258672664858 1952.999267266482 1983.281667266494 1931.7886672665093 1935.2366672665094 1973.7418672665322 1996.1018672665293 2325.990867266514 1982.8006672665317 1931.5668672665274 1933.0186672665093 1930.8437327335148 1988.931267266533 1930.5400672664873)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.2663667453928805 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 6.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.2663667453928805 19.799999999999997 0.1336332546071195)
Average genome size in population (length): 44.807
Average program size in population (points): 45.802
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 356
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 356
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.133
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 216352710
--- Timings ---
Current time: 1481491610635 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_sub vector_integer_pushall float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54520.03429020347
Median total errors in population: 495.6
Error averages by case: (1782.7601760355085 1785.0289760354844 1781.9411760355085 1787.3621760354874 1782.7047760354828 1781.0204239645157 1780.872256640144 1782.3101760354843 1781.0685760355343 1785.0161760355086 1781.7403760354844 1781.3445760354923 1785.8233760355292 1816.9881760355086 2047.5441760355086 1782.9771760355086 1789.7505760354823 1803.688776035483 1808.8563760354928 1781.8221760355086 1785.0681760355085 1824.1369760355353 1859.7733760355313 2238.3473760355155 1834.3731760355336 1781.7927760355258 1783.2391760355085 1780.8742566401443 1841.2411760355355 1780.5671760354844)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 4.199999999999999 14.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 30.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.608
Average program size in population (points): 45.604
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 337
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 337
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.142
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 217690950
--- Timings ---
Current time: 1481491613910 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall float_inc float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55114.94500000001
Median total errors in population: 495.6
Error averages by case: (1792.766 1794.953199999977 1791.954 1797.3157999999817 1792.7125999999753 1791.0344000000232 1790.8878000000207 1792.314799999979 1791.0724000000241 1795.192 1791.6329999999778 1791.2361999999848 1795.8152000000168 1826.833 1874.253 1792.865 1799.547599999975 1813.3817999999762 1817.2745999999834 1791.859 1795.128 1834.2240000000256 1861.1150000000225 2738.51899999999 1843.9270000000245 1791.731800000014 1793.096 1790.8888000000209 1850.8396000000262 1790.5743999999765)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.8000000000000007 0.3999999999999986 2.799999999999997 0.0 0.0 10.200000000000003 29.80000000000001 38.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.469
Average program size in population (points): 45.468
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 301
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.148
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 219025020
--- Timings ---
Current time: 1481491617260 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec vector_integer_first integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53451.1506
Median total errors in population: 495.6
Error averages by case: (1752.681 1754.9837999999756 1751.905 1757.1137999999737 1752.7427999999745 1750.9802000000243 1750.83040000003 1752.2335999999693 1751.0242000000255 1755.019 1751.6355999999766 1751.364999999983 1756.0620000000256 1787.166 1835.054 1752.907 1759.549999999974 1773.311199999968 1776.6011999999826 1751.824 1755.307 1794.0702000000263 1814.435000000023 2241.2830000000104 1804.2876000000242 1751.7080000000228 1753.221 1750.8344000000302 1810.4994000000265 1750.5151999999755)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 58.0 0.0 2.8000000000000007 14.399999999999999 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 12.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.547
Average program size in population (points): 45.545
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 272
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.143
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 220361430
--- Timings ---
Current time: 1481491620478 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth vector_integer_first integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall vector_integer_replace integer_sub float_dup_items integer_dec integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.1999999999999993 0.1999999999999993 6.6 42.0 63.0 3.0 9.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 62.8 0.5999999999999996 3.0 0.6 72.8 0.19999999999999996]
Total: 495.6
Mean: 16.52
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60771.848
Median total errors in population: 495.6
Error averages by case: (1992.596 2004.8843999999801 2001.799 2006.9739999999786 2002.6373999999792 2000.8800000000203 2000.720000000024 2002.149799999976 2000.8828000000208 2004.79 2001.4603999999806 2001.1525999999863 2005.6518000000215 2035.877 2077.99 2002.8 2009.220599999979 2022.5201999999756 2025.8801999999855 2001.749 2005.022 2043.1296000000225 2065.56340000002 2338.1570000000056 2053.232000000022 2001.5424000000198 2003.094 2000.7210000000239 2058.357000000023 2000.4143999999799)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 25.0 62.0 0.0 0.1999999999999993 8.600000000000001 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 46.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.384
Average program size in population (points): 45.378
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 270
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.116
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 221692950
--- Timings ---
Current time: 1481491623727 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54414.40328161579
Median total errors in population: 495.6
Error averages by case: (1782.6121814051464 1784.947581405121 1781.8591814051463 1786.9731814051254 1782.6943814051199 1790.985600000024 1790.8372000000234 1782.3143814051218 1791.0246000000259 1784.6691814051464 1781.5107814051216 1781.3055814051302 1795.8120000000215 1816.6011814051465 1866.0471814051464 1782.8921814051464 1789.4627814051196 1803.4064907025477 1808.1541814051286 1781.8041814051464 1795.293 1823.9397814051745 1851.9053814051701 2256.9235814051517 1834.1465814051726 1781.583381405163 1783.0721814051465 1790.8382000000236 1840.2447814051745 1790.542399999976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 1.6000000000000014 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.754
Average program size in population (points): 45.749
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 271
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.139
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 223035570
--- Timings ---
Current time: 1481491627039 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace integer_sub vector_integer_pushall float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59037.0886
Median total errors in population: 495.6
Error averages by case: (1942.55 1944.7369999999785 1941.787 1947.0253999999773 1942.667199999977 1940.8810000000226 1940.7232000000263 1942.1637999999746 1940.8920000000232 1944.854 1941.3007999999795 1941.2301999999852 1945.5494000000215 1975.537 2024.661 1942.856 1948.8795999999766 1962.7821999999733 1965.7605999999857 1941.734 1944.909 1983.216000000024 2001.1128000000213 2332.5308000000045 1992.394400000023 1941.3972000000183 1942.911 1940.7242000000263 1998.8988000000243 1940.4229999999775)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 5.199999999999999 14.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 46.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.377
Average program size in population (points): 45.373
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 249
Genome diversity (% unique Plush genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 249
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.132
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 224366880
--- Timings ---
Current time: 1481491630318 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction float_tan} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc float_tan float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (float_dup in1 float_mod vector_integer_pushall integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59473.85621030454
Median total errors in population: 495.6
Error averages by case: (1952.6320731407664 1954.872859540796 1951.8426134430722 1957.432205360992 1952.649673140744 1950.9143761875262 1950.7568088631538 1952.2384134430517 1950.9324134430944 1955.2096134038986 1951.328276705835 1951.307369589099 1955.5426767058711 1985.771905581881 2037.638095595907 1952.925373130985 1958.7724767058312 1972.6676731407413 2031.61036022295 1951.7436134430723 1955.2330295899087 1993.3226595408412 2021.8368757772278 2407.221276705855 2002.8509055819036 1951.4780767058676 1953.029373130985 1950.7596088631535 2008.8782053610341 1950.4573282585002)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 3.1999999999999993 13.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 28.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.197
Average program size in population (points): 45.195
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 235
Genome diversity (% unique Plush genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.142
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 225692790
--- Timings ---
Current time: 1481491633601 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48900.70540473464
Median total errors in population: 495.6
Error averages by case: (1602.7338358144304 1605.1432358144089 1601.9168358144304 1607.2886358144156 1602.7760358144076 1601.0082683898845 1600.8568683898786 1602.326635814415 1601.0522358144526 1605.1278358144305 1601.495035814414 1601.4732358144151 1606.045235814445 1638.1648358144305 1691.3938358144303 1603.0678358144303 1609.3002358144074 1623.8696358144139 1627.7178358144147 1601.8498358144304 1605.2498358144303 1645.5520358144538 1671.6920358144503 2020.4778358144458 1654.8968358144523 1601.6296358144434 1603.3038358144304 1600.8568683898786 1661.8908358144538 1600.5476683898423)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 22.0 0.0 4.199999999999999 7.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.058879991940132714)
Average genome size in population (length): 44.936
Average program size in population (points): 45.936
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 213
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.142
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 227040870
--- Timings ---
Current time: 1481491636884 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace float_mod integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51372.8502
Median total errors in population: 495.6
Error averages by case: (1682.67 1685.0065999999758 1681.887 1687.4357999999827 1682.7587999999737 1680.9332000000254 1680.775400000021 1682.2659999999796 1680.957200000025 1685.335 1681.6649999999947 1681.5385999999849 1686.3180000000177 1722.381 1767.763 1683.043 1689.157799999974 1703.535399999978 1708.6867999999847 1681.814 1685.228 1724.7590000000264 1757.330200000023 2163.202600000006 1738.6888000000258 1681.8652000000125 1683.916 1680.7774000000209 1740.6906000000272 1680.4647999999747)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.765
Average program size in population (points): 45.761
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 194
Genome diversity (% unique Plush genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.155
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 228383820
--- Timings ---
Current time: 1481491640134 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_sub vector_integer_pushall float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_sub float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 7.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 6.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 495.20000000000005
Mean: 16.506666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61516.151
Median total errors in population: 495.20000000000005
Error averages by case: (2022.636 2024.8641999999768 2021.874 2027.1269999999804 2022.6395999999763 2020.923800000023 2020.775600000023 2022.223199999977 2020.9658000000238 2024.946 2021.590400000011 2021.1723999999833 2026.1386000000207 2055.046 2097.797 2022.822 2028.3197999999759 2042.5859999999768 2046.1281999999833 2021.758 2025.227 2062.5716000000243 2078.1164000000217 2500.2963999999974 2071.968400000024 2021.9404000000181 2023.481 2020.7786000000228 2078.962400000025 2020.475199999977)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 0.8000000000000007 13.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 12.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.93
Average program size in population (points): 44.928
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 385
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 385
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.136
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 229701720
--- Timings ---
Current time: 1481491643359 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_sub integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 0.8000000000000007 0.1999999999999993 9.6 41.0 63.0 3.0 8.2 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 61.8 1.5999999999999996 4.0 0.6 71.8 0.19999999999999996]
Total: 494.20000000000005
Mean: 16.473333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55130.61193897238
Median total errors in population: 495.20000000000005
Error averages by case: (1812.716615378899 1814.9511556811804 1811.9241556812046 1817.191495364477 1812.6978153788732 1810.963955681229 1810.8157556812278 1812.2419556811813 1811.0219556812308 1815.0757475991431 1811.7468482344393 1811.180618943969 1816.315248234443 1844.4647315021975 1890.0597612330691 1812.8932482344235 1818.2936482343966 1833.176415378874 1836.6868357046837 1811.7981556812047 1815.1988720190195 1854.1987456737277 1871.9728180153631 2194.8577493759562 1861.937531502223 1812.1000482344405 1813.5724953644967 1810.8177556812277 1869.2204482344503 1810.5193556811805)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 29.80000000000001 49.799999999999955 9.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.358
Average program size in population (points): 45.351
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 429
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 429
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.125
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 231032460
--- Timings ---
Current time: 1481491646586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 9.6 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 493.20000000000005
Mean: 16.44
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52741.39749003438
Median total errors in population: 495.20000000000005
Error averages by case: (1732.7161373175018 1734.9013419124717 1731.9325390440217 1737.1457899076281 1732.7046599304763 1730.9344219860184 1730.7797805150324 1732.2779805149805 1730.9685805150345 1735.0014675697557 1731.9945394393003 1731.399189907632 1736.3723805150287 1765.6284865183427 1815.1106853256274 1732.9302306377967 1739.065123528379 1753.558095299793 1756.4025393040372 1731.7963805150064 1735.0273805150064 1774.3697096092471 1792.6487284892437 2114.092311217148 1784.2885899076782 1732.3250712175989 1733.789339439281 1730.7807805150323 1789.9821391079415 1730.4730898124058)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 62.0 0.0 4.199999999999999 13.399999999999999 2.799999999999997 0.0 0.0 10.200000000000003 29.80000000000001 48.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.915
Average program size in population (points): 45.911
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 423
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 423
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.138
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 232379910
--- Timings ---
Current time: 1481491649863 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 9.6 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 493.20000000000005
Mean: 16.44
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53940.6748442616
Median total errors in population: 495.20000000000005
Error averages by case: (1772.6848600883911 1774.9852816080856 1771.9126661424646 1777.142469707533 1772.7462462744606 1770.9736127361202 1770.8168893867614 1772.2756064447485 1770.9838064447938 1774.9757983627087 1771.6717227826005 1771.388669707536 1776.2298064447893 1805.2006545183865 1850.1961588577508 1772.9742177401522 1778.3358525424924 1793.5344130543683 1796.9934357545867 1771.8262064447706 1775.1412064447707 1814.2199690506607 1826.5489144399214 2157.133150179969 1823.3230697075758 1772.0816225916226 1773.653922782585 1770.8178893867614 1829.3996191007363 1780.5071055335536)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.0915235257487716 0.10847647425122842 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 0.0 6.200000000000003 29.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.10847647425122842 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.856
Average program size in population (points): 45.853
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 384
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 384
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.129
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 233725590
--- Timings ---
Current time: 1481491653154 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall float_inc float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 9.6 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 493.20000000000005
Mean: 16.44
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59113.6108796106
Median total errors in population: 495.20000000000005
Error averages by case: (1942.6605226536863 1944.796322653663 1941.8955226536864 1946.840722653664 1942.685722653661 1940.945322653711 1940.790522653713 1942.2063226536602 1940.9685226537115 1944.7835226536863 1941.7555226537024 1941.4727226536704 1946.3641226537102 1974.5135226536863 2026.1515226536862 1942.9245226536864 1948.129322653661 1962.7389226536575 1995.1399226536712 1941.7915226536863 1944.7045226536864 1983.1575226537116 1998.5067226537085 2379.482922653689 1992.3259226537118 1942.1731226537083 1943.7565226536863 1940.7945226537129 1998.6607226537126 1940.493722653662)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 2.8000000000000007 13.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 29.80000000000001 46.799999999999955 8.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.405
Average program size in population (points): 45.402
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 301
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.15
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 235057740
--- Timings ---
Current time: 1481491656469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 9.6 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 493.20000000000005
Mean: 16.44
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51658.15269132252
Median total errors in population: 495.20000000000005
Error averages by case: (1692.762003718805 1695.0438690903163 1691.9330037188051 1697.1290106849171 1692.7654165001666 1690.9155403023276 1700.7601403023325 1702.2424596976662 1700.9812596977176 1695.137210684941 1691.9454535863626 1691.4337082709976 1707.356308271037 1725.9394535863478 1773.420003718805 1693.0717391131923 1698.3837821223347 1713.4949391131636 1717.9441762192284 1701.8294596976941 1703.8425467524432 1734.5528690903625 1750.5526165002095 2122.8507579093575 1744.3105114251457 1692.3475396716767 1693.8697220725478 1700.7699403023325 1750.1041898036692 1690.4630596976722)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 1.2000000000000002 0.2 0.14030230586813974 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 62.0 0.0 0.1999999999999993 13.600000000000001 2.799999999999997 0.0 1.0 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.08
Average program size in population (points): 45.078
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 276
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.165
Error (vector) diversity:			 0.171
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 236380140
--- Timings ---
Current time: 1481491659754 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_stackdepth integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 9.6 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 493.20000000000005
Mean: 16.44
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51218.18492670643
Median total errors in population: 494.20000000000005
Error averages by case: (1682.672 1685.0116174089871 1681.899 1687.0007999999852 1682.77839999998 1670.9916829419888 1670.834041470999 1682.289758528999 1671.0401585290351 1684.835 1681.9246000000146 1681.3533999999859 1677.6151585290277 1714.976 1754.854 1682.933 1687.8575999999794 1703.5649999999814 1706.5911999999864 1681.8871585290153 1672.9781585290152 1724.5804000000205 1736.4550000000174 2130.147000000011 1733.4902000000202 1682.3766000000126 1684.007 1670.8496414709987 1739.8646000000213 1670.5267507683923)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 62.0 0.0 2.8000000000000007 12.399999999999999 2.799999999999997 1.0 1.0 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.13
Average program size in population (points): 45.124
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 280
Genome diversity (% unique Plush genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.139
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 237704040
--- Timings ---
Current time: 1481491663049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 2.8000000000000007 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 26.200000000000003 2.0 2.0 54.8 31.80000000000001 54.799999999999955 60.8 2.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 490.6
Mean: 16.353333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50931.47833703006
Median total errors in population: 493.20000000000005
Error averages by case: (1672.6844425922752 1675.0534425922513 1671.9334425922752 1677.043242592257 1672.7530425922503 1660.9307574077493 1660.7581574077449 1672.2620425922546 1660.9718425923006 1674.8264425922753 1672.0754425922942 1671.174042592258 1667.8008425922947 1704.8294425922754 1746.7044425922754 1672.9184425922754 1677.3330425922495 1693.451242592253 1698.5718425922596 1671.8334425922753 1662.9634425922754 1714.469242592301 1725.6958425922976 2131.347242592287 1723.7272425923006 1672.5730425922934 1674.2284425922753 1660.7741574077452 1729.3318425923012 1660.4587574077)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 2.8000000000000007 3.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 49.799999999999955 9.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.349
Average program size in population (points): 45.346
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 490
Genome diversity (% unique Plush genomes):	 0.4
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 490
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.125
Error (vector) diversity:			 0.129
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 239034510
--- Timings ---
Current time: 1481491666351 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 2.8000000000000007 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 26.200000000000003 2.0 2.0 54.8 31.80000000000001 54.799999999999955 60.8 2.5999999999999996 6.0 0.6 70.8 0.19999999999999996]
Total: 490.6
Mean: 16.353333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50353.63904952052
Median total errors in population: 493.20000000000005
Error averages by case: (1652.8910840691146 1655.1786840690934 1652.1130840691146 1657.7024840691004 1652.9992840690925 1651.1717159309073 1651.0809159309017 1652.5380840690984 1651.2712840691363 1655.6600840691146 1652.5316840691323 1651.678284069099 1657.9468840691295 1685.4960840691147 1726.6120840691146 1653.3780840691147 1657.7812840690924 1673.799684069097 1678.4082840690996 1652.1490840691147 1653.1470840691147 1694.9598840691388 1708.0194840691343 2052.106884069129 1704.4648840691375 1652.9712840691288 1654.7300840691146 1651.0937159309017 1709.0544840691387 1650.7031159308638)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 58.0 0.0 0.1999999999999993 1.6000000000000014 2.799999999999997 1.0 0.0 1.2000000000000028 29.80000000000001 46.799999999999955 22.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.11593088543436669)
Average genome size in population (length): 44.135
Average program size in population (points): 45.132
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 492
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 492
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.133
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 240358560
--- Timings ---
Current time: 1481491669676 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 484.00000000000006
Mean: 16.133333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51204.04761518372
Median total errors in population: 493.20000000000005
Error averages by case: (1682.670284770993 1685.1283486766058 1681.8788851845507 1687.1593979856436 1682.7415335984429 1680.953714815473 1680.758557407744 1682.3054425922567 1681.0064425922997 1685.0732054313312 1682.0204231072998 1681.4213979856418 1687.657842592292 1714.7474377926876 1752.860122551886 1682.9062910028047 1687.0455711442673 1703.7191581408013 1706.8133687921572 1681.8244425922753 1682.9584425922753 1724.570324021906 1738.675935839698 2046.338092173943 1733.2301979856845 1682.5522276321542 1684.3798231072817 1680.783757407744 1739.374203218078 1680.492742447564)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 0.1999999999999993 13.399999999999999 2.799999999999997 1.0 0.4425922753450977 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.436
Average program size in population (points): 45.43
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 509
Genome diversity (% unique Plush genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 509
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.131
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 241691640
--- Timings ---
Current time: 1481491673068 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [3.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 63.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 484.00000000000006
Mean: 16.133333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58264.80988228671
Median total errors in population: 493.20000000000005
Error averages by case: (1922.5506260560398 1914.8580089505979 1921.788166358346 1916.914348633895 1912.6914686482912 1920.9388336416778 1920.7842811738178 1922.2101663583237 1920.98316635837 1914.7682008685592 1922.3428296211462 1911.341872213389 1926.8735260462736 1943.6236177478092 1985.1192145024854 1913.0247015038399 1917.317414660966 1932.7088686482919 1937.6904889741013 1921.8151663583458 1922.7235825051823 1953.3395989431435 1968.2100712847773 2302.0320026453705 1962.3452177478339 1922.7374296211458 1924.3551776537277 1920.7982811738173 1967.433672213429 1920.4898811737717)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0762339294153983 0.1237660705846017 0.6000000000000001 0.24259227534509775 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 1.1999999999999993 4.399999999999999 2.799999999999997 1.0 0.4425922753450977 2.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.1237660705846017 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.004
Average program size in population (points): 45.003
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 407
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 407
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.138
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 243011760
--- Timings ---
Current time: 1481491676352 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items float_min integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 26.200000000000003 2.0 2.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 483.00000000000006
Mean: 16.1
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 63934.31272494127
Median total errors in population: 493.20000000000005
Error averages by case: (2102.327064164708 2104.8540641646837 2101.5900641647086 2106.8116641646825 2102.6124641646825 2100.8978641647323 2100.7088641647374 2102.2204641646786 2100.9762641647353 2104.8690641647086 2102.0724641647284 2101.658464164703 2105.2660641647153 2133.0120641647086 2175.9960641647085 2103.1190641647086 2106.810664164682 2122.2206641646776 2153.6758641646916 2101.7360641647083 2102.5610641647086 2142.5336641647345 2159.6278641647314 2580.591864164703 2151.2976641647338 2102.5240641647333 2104.3280641647084 2100.7344641647373 2156.204064164735 2100.474664164685)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.042178717650422304 0.24217871765042231 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 3.1999999999999993 1.6000000000000014 2.799999999999997 1.0 1.0 9.799999999999997 27.80000000000001 46.799999999999955 24.200000000000003 0.40000000000000036 0.0 0.24217871765042231 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.271
Average program size in population (points): 44.267
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 234
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.165
Error (vector) diversity:			 0.17
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 244309890
--- Timings ---
Current time: 1481491679589 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_inc float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 25.200000000000003 2.0 2.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 482.00000000000006
Mean: 16.066668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50127.83688995998
Median total errors in population: 490.6
Error averages by case: (1641.9835163319992 1645.0591163319746 1641.2625163319992 1647.4597163319777 1642.758716331974 1640.8549163320245 1640.7029163320253 1642.206716331973 1640.9123163320253 1645.3395163319992 1642.5015163320193 1642.154516332004 1642.7065163319853 1675.0715163319994 1717.0715163319994 1643.5445163319994 1647.7461163319726 1663.2553163319715 1670.3053163319832 1641.8255163319993 1642.2835163319994 1684.8365163320257 1701.1343163320214 2121.388116332012 1694.7071163320247 1642.8299163320212 1645.0605163319992 1640.7035163320254 1699.7805163320256 1640.3905163319741)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 60.0 0.0 0.1999999999999993 13.399999999999999 2.799999999999997 0.0 1.0 10.200000000000003 28.80000000000001 46.799999999999955 12.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.438
Average program size in population (points): 45.434
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 253
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.16
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 245643030
--- Timings ---
Current time: 1481491682863 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 25.200000000000003 2.0 2.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 482.00000000000006
Mean: 16.066668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58332.169776182905
Median total errors in population: 490.6
Error averages by case: (1902.08101253943 1904.8166125394062 1901.31001253943 1907.6004125394034 1902.6116125394058 1900.853012539454 1900.6612125394597 1902.1476125393995 1900.9012125394552 1905.68601253943 1902.1806125394476 1901.6968125394226 1901.8928125394063 1933.84801253943 1978.65201253943 1903.3080125394301 1907.1472125394046 1922.620812539399 1928.1306125394153 1901.72501253943 1902.45601253943 1943.465412539456 2409.846012539431 2348.112412539432 1952.7996125394548 1902.6200125394553 1904.52401253943 1900.6856125394593 1957.3830125394568 1900.4070125394062)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.684
Average program size in population (points): 44.679
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 189
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.174
Error (vector) diversity:			 0.184
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 246953550
--- Timings ---
Current time: 1481491686180 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction float_min} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items float_min integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_replace integer_div float_dup_items integer_dec integer_dup integer_dup integer_dec integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 9.4 3.2 0.8 0.6 2.4 0.8 6.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 4.0 7.199999999999999 27.4 25.200000000000003 2.0 2.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 482.00000000000006
Mean: 16.066668
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59078.6942574588
Median total errors in population: 484.00000000000006
Error averages by case: (1942.3177163378145 1944.8865163377916 1941.5297163378145 1947.2127163377943 1942.6427163377914 1940.839883662208 1940.6751163378385 1942.161316337791 1940.8835163378383 1945.0597163378145 1942.0897163378322 1941.1213163377968 1941.6191163377964 1973.2567163378144 2012.6987163378144 1943.1027163378144 1947.1077163377906 1962.58851633779 1965.6795163377988 1941.7467163378144 1942.4647163378145 1983.34291633784 1991.3079163378366 2405.4001163378152 1991.857516337839 1942.5607163378343 1944.1597163378144 1940.686716337838 1997.3045163378404 1940.389716337792)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.8000000000000007 13.399999999999999 2.799999999999997 1.0 1.0 6.200000000000003 29.80000000000001 46.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.088
Average program size in population (points): 45.087
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 273
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.144
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 248276190
--- Timings ---
Current time: 1481491689464 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 481.00000000000006
Mean: 16.033333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56776.07877410925
Median total errors in population: 484.00000000000006
Error averages by case: (1861.986799136975 1864.9315991369522 1861.2337991369748 1867.3357991369567 1862.6671991369517 1860.8291991369974 1860.680799136998 1862.1359991369518 1860.8899991369988 1865.5217991369748 1862.3397991369918 1861.6211991369587 1862.1475991369566 1893.9607991369749 1940.7397991369749 1863.6377991369748 1867.4821991369508 1882.2849991369512 1916.3755991369603 1861.773799136975 1862.208799136975 1903.8831991369993 1929.4419991369948 2360.681799136977 1912.8743991369986 1862.805799136994 1864.3387991369748 1860.6799991369983 1918.1949991369997 1860.392399136953)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 1.0 3.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 6.200000000000003 30.80000000000001 49.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.037
Average program size in population (points): 45.033
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 230
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.143
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 249597300
--- Timings ---
Current time: 1481491692720 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 481.00000000000006
Mean: 16.033333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58735.38929198611
Median total errors in population: 483.00000000000006
Error averages by case: (1931.9029539261953 1934.9029539261714 1931.1509539261954 1937.7295539261704 1932.6695539261714 1930.8674460738284 1930.720646073833 1932.1661539261675 1930.8989539262197 1935.6629539261953 1932.2129539262132 1931.2227539261771 1931.8197539261723 1963.4839539261955 2005.3119539261954 1933.6299539261954 1937.15775392617 1952.1079539261661 1958.3777539261796 1931.7719539261955 1932.0889539261955 1973.3207539262205 1987.059353926216 2339.5549539262015 1982.0485539262197 1932.662153926219 1934.2039539261955 1930.7284460738329 1987.543953926221 1930.40935168359)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.24719509531351747 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 2.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 46.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.24719509531351747 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.409
Average program size in population (points): 45.408
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 197
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.144
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 250929570
--- Timings ---
Current time: 1481491696009 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div vector_integer_replace vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 481.00000000000006
Mean: 16.033333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61401.97559545661
Median total errors in population: 482.00000000000006
Error averages by case: (2021.8150907025731 2024.7616907025485 2021.098090702573 2027.4094907025562 2022.624290702548 2020.8455092974507 2020.6955092974472 2022.1330907025524 2020.8930907025986 2025.417090702573 2022.3788907025921 2021.2162907025554 2021.5312907025582 2053.099090702573 2089.830090702573 2023.570090702573 2027.2418907025483 2042.0538907025518 2045.8746907025566 2021.753090702573 2022.1130907025731 2063.1012907025993 2073.270690702595 2410.734890702575 2071.810690702597 2022.7142907025907 2024.166090702573 2020.7041092974468 2076.717490702599 2020.4007092974027)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 1.1999999999999993 13.399999999999999 2.799999999999997 1.0 1.0 6.200000000000003 30.80000000000001 46.799999999999955 15.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.385
Average program size in population (points): 45.379
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 425
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 425
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.131
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 252261120
--- Timings ---
Current time: 1481491699312 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 481.00000000000006
Mean: 16.033333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55487.0808823307
Median total errors in population: 482.00000000000006
Error averages by case: (1821.993994331248 1824.8921989262196 1821.2328557554617 1827.534658216753 1822.67937664192 1820.8815822507477 1820.7111659561647 1822.1844375287221 1820.9290375287785 1825.629872312762 1822.3568597158287 1821.56451018416 1822.0345538665442 1854.459352329277 1897.9885391679686 1823.5749509143247 1827.43984380491 1842.7927523135352 1846.498046640087 1821.7922375287526 1822.1896972264467 1863.954756615488 1883.2616478371237 2268.7417663231636 1872.9988557186111 1822.7803914941323 1824.3807441822876 1820.7239659561642 1878.4469558095989 1820.4312752535361)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08741180189182746 0.11258819810817255 0.6000000000000001 0.277257294040435 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 2.8000000000000007 13.399999999999999 2.799999999999997 1.0 0.47725729404043493 6.200000000000003 30.80000000000001 46.799999999999955 25.200000000000003 0.40000000000000036 0.0 0.11258819810817255 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.638
Average program size in population (points): 45.634
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 424
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 424
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.135
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 253600260
--- Timings ---
Current time: 1481491702751 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 40.0 62.0 3.0 7.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 60.8 2.5999999999999996 5.0 0.6 70.8 0.19999999999999996]
Total: 481.00000000000006
Mean: 16.033333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50619.02395773907
Median total errors in population: 482.00000000000006
Error averages by case: (1661.9810789770609 1665.0772789770376 1661.252078977061 1667.8638789770412 1662.7866789770367 1650.9347413843732 1650.7699412388936 1672.284858615626 1650.9998586156744 1665.842078977061 1662.5586789770796 1661.4020789770423 1642.1352789770451 1694.679078977061 1740.342078977061 1663.512078977061 1667.4610789770365 1683.2590789770366 1688.0164789770454 1671.8702586156498 1642.512078977061 1704.7236789770861 1722.2852789770827 2102.540678977076 1713.977278977085 1662.9710789770793 1664.453078977061 1650.7783412388935 1719.2772789770868 1650.4765415575962)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.1000727385415745 0.09992726145842551 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 6.200000000000003 23.80000000000001 46.799999999999955 18.200000000000003 0.40000000000000036 0.0 0.09992726145842551 14.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.58
Average program size in population (points): 45.577
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 265
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 265
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.148
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 254937660
--- Timings ---
Current time: 1481491706181 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 480.00000000000006
Mean: 16.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53940.746122869
Median total errors in population: 481.00000000000006
Error averages by case: (1771.971 1774.9583999999754 1771.1814425922753 1777.0559373136878 1772.6802425922504 1770.9098000000242 1770.7362000000257 1772.216999999974 1770.945600000025 1774.8827628390559 1772.1207553934044 1771.1717553933638 1771.8735805149847 1803.900133526407 1842.6999201682295 1772.9415369788671 1777.1891553933583 1793.200357407697 1799.2496781837872 1771.781 1772.6481850398632 1814.162342546569 1824.328187173399 2186.457257088011 1823.1047335264318 1772.5997553934067 1774.1878484105293 1770.7502000000254 1828.3881553934102 1770.4531999999758)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 0.0 1.8000000000000007 13.399999999999999 2.799999999999997 1.0 0.1850398632615189 1.7999999999999972 28.80000000000001 46.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.502
Average program size in population (points): 45.501
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 462
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 462
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.135
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 256272720
--- Timings ---
Current time: 1481491709506 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_mod vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 480.00000000000006
Mean: 16.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56096.68425703128
Median total errors in population: 481.00000000000006
Error averages by case: (1842.014313708609 1844.892443468515 1841.270313708609 1847.1467085010383 1842.6698135176061 1840.945317444679 1840.7703174446783 1842.243397370771 1840.994797370819 1845.3655085010562 1842.400464308874 1841.5129550302586 1841.811955030258 1874.016264308856 1924.376313708609 1843.0355873632911 1847.6760871937236 1863.0883873632656 1868.7915451000388 1841.7895973707946 1842.9054364423234 1883.855643468567 1907.895613517652 2285.0245302038193 1893.5759815551705 1842.8281631474522 1844.3596061679825 1840.7865174446777 1898.1369598246727 1840.503717444631)
Error minima by case: (1.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 3.1999999999999993 12.600000000000001 2.799999999999997 1.0 1.0 24.799999999999997 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.16003693029466137)
Average genome size in population (length): 43.744
Average program size in population (points): 44.74
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 463
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 463
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.137
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 257585040
--- Timings ---
Current time: 1481491712804 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 480.00000000000006
Mean: 16.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53070.11277125863
Median total errors in population: 481.00000000000006
Error averages by case: (1742.0711760355084 1745.046576035485 1741.203618627784 1747.5995133491997 1742.7032186277606 1740.8729433599026 1740.6657760355338 1742.2537760354826 1740.9191760355327 1745.5199388745643 1742.2157314289097 1741.1549314288766 1741.691356550496 1774.3423095619155 1815.230096203738 1742.9507130143757 1747.1551314288683 1763.479533443206 1793.5812542192987 1741.7691760355085 1742.8163610753718 1784.7791185820759 1800.6381632089067 2149.658433123523 1792.9891095619394 1742.681931428912 1744.311024446038 1740.692376035533 1798.7067314289177 1740.4135760354857)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.8000000000000007 5.399999999999999 2.799999999999997 1.0 0.1850398632615189 10.200000000000003 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.053
Average program size in population (points): 45.053
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 471
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 471
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.146
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 258906630
--- Timings ---
Current time: 1481491716095 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 480.00000000000006
Mean: 16.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55145.0694
Median total errors in population: 481.00000000000006
Error averages by case: (1812.034 1814.8817999999765 1811.263 1817.2473999999845 1812.7285999999763 1810.9214000000236 1810.7618000000184 1812.2279999999812 1810.957200000024 1815.205 1812.4634000000183 1811.3195999999828 1811.8237999999872 1843.875 1887.743 1812.963 1817.4197999999756 1833.1095999999804 1837.648199999984 1811.841 1812.79 1853.8832000000245 1876.2130000000216 2215.0360000000064 1862.3666000000248 1812.8770000000154 1814.371 1810.770800000018 1867.8662000000256 1810.4609999999761)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 1.0 1.0 1.7999999999999972 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.116
Average program size in population (points): 45.114
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 401
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 401
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.141
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 260230110
--- Timings ---
Current time: 1481491719426 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 201
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 201
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_subvec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_subvec integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 50.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 480.00000000000006
Mean: 16.0
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60371.75945745881
Median total errors in population: 481.00000000000006
Error averages by case: (1981.9587163378144 1984.9583163377902 1981.1707163378144 1986.7363163377904 1982.65311633779 1990.8316836622087 1990.6519163378425 1992.149716337785 1990.8907163378399 1984.8007163378145 1982.6345163378326 1981.441316337798 1981.677716337793 2013.1197163378145 2056.2607163378143 1982.9467163378145 1987.2151163377891 2002.5857163377857 2034.7763163377995 1991.7077163378144 1982.7207163378146 2023.410116337841 2044.2421163378356 2422.866516337818 2031.7197163378387 1983.044916337838 1984.5387163378145 1990.667516337841 2036.983316337841 1990.3983163377914)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 3.1999999999999993 2.6000000000000014 2.799999999999997 1.0 0.0 10.200000000000003 22.80000000000001 49.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.542
Average program size in population (points): 44.54
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 260
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.146
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 202000
Number of point (instruction) evaluations so far: 261536370
--- Timings ---
Current time: 1481491722676 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 201
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 202
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 202
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_shove integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.8000000000000007 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 59.8 3.5999999999999996 8.0 0.6 68.8 0.19999999999999996]
Total: 477.6
Mean: 15.92
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55422.980145412184
Median total errors in population: 481.00000000000006
Error averages by case: (1821.8993072872418 1824.9219288069353 1821.138113341315 1827.1297169063835 1822.6956934733105 1820.8635939459502 1820.6938536436433 1822.1978536435988 1820.8914536436446 1825.090245561559 1822.7795699814537 1821.6597169063864 1821.5612536436024 1853.4061017172369 1894.8066060566014 1822.9386649390026 1826.5750997413415 1843.315660253217 1848.6206829534387 1821.762653643621 1822.752653643621 1863.9464162495128 1880.4177616387713 2212.4673973788167 1871.7299169064265 1823.247069790475 1824.8093699814353 1820.7044536436424 1877.5520662995887 1820.4052697904337)
Error minima by case: (1.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 1.8000000000000007 6.399999999999999 2.799999999999997 1.0 1.0 1.7999999999999972 29.80000000000001 46.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.822
Average program size in population (points): 45.82
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 430
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 430
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.149
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 203000
Number of point (instruction) evaluations so far: 262881030
--- Timings ---
Current time: 1481491725979 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 202
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 203
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 203
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_shove integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.8000000000000007 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 59.8 3.5999999999999996 8.0 0.6 68.8 0.19999999999999996]
Total: 477.6
Mean: 15.92
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57864.759399999995
Median total errors in population: 480.00000000000006
Error averages by case: (1901.961 1905.0261999999752 1901.184 1906.8123999999802 1902.6305999999745 1900.8910000000237 1900.6902000000234 1902.206799999975 1900.9494000000254 1904.87 1903.060600000019 1901.3601999999837 1901.8297999999807 1932.851 1977.336 1902.964 1906.837199999974 1922.9661999999746 1928.405199999983 1901.751 1902.69 1943.537200000026 1965.9588000000215 2326.894400000007 1952.3144000000248 1903.4726000000198 1904.882 1900.722800000023 1957.2524000000265 1900.4519999999764)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 2.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 46.799999999999955 31.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.392
Average program size in population (points): 45.388
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 485
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 485
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.145
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 204000
Number of point (instruction) evaluations so far: 264212790
--- Timings ---
Current time: 1481491729251 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 203
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 204
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 204
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction float_pop} {:close 1, :instruction vector_integer_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup float_pop vector_integer_shove integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup float_pop integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.8000000000000007 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 59.8 3.5999999999999996 8.0 0.6 68.8 0.19999999999999996]
Total: 477.6
Mean: 15.92
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54171.27728763834
Median total errors in population: 480.00000000000006
Error averages by case: (1782.0041585290153 1784.9813585289933 1781.2141585290153 1787.0453585290031 1782.6901585289938 1770.8892414710056 1770.7228414709996 1782.2559585290003 1770.9591585290373 1785.0391585290154 1782.7959585290323 1781.0415585290007 1771.6009585290026 1812.9551585290153 1857.6441585290152 1783.0231585290153 1786.537958528993 1803.3945585290012 1808.210958529001 1781.8111585290153 1772.8311585290153 1824.8439585290382 1848.7657585290353 2179.6085585290243 1831.0599585290377 1783.2981585290274 1784.8611585290153 1770.7328414709996 1838.0241585290382 1770.434441470964)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 1.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 14.200000000000003 29.80000000000001 46.799999999999955 5.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.187
Average program size in population (points): 46.185
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 492
Genome diversity (% unique Plush genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 492
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.134
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 205000
Number of point (instruction) evaluations so far: 265568400
--- Timings ---
Current time: 1481491732661 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 204
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 205
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 205
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_mod integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 0.8000000000000007 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 59.8 3.5999999999999996 8.0 0.6 68.8 0.19999999999999996]
Total: 477.6
Mean: 15.92
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59400.80454403852
Median total errors in population: 480.00000000000006
Error averages by case: (1951.829918116669 1954.8333181166427 1951.1129181166689 1956.7877181166466 1952.583518116642 1950.7664638957392 1950.589696571369 1952.0715181166415 1950.8117181166956 1955.0659181166689 1953.0005181166894 1951.4647181166572 1951.710318116646 1982.9419181166688 2027.453918116669 1953.0279181166688 1956.7219181166424 1973.0391181166406 1977.8373181166517 1951.6609181166689 1952.727918116669 1993.289518116696 2016.9447181166925 2415.1187181166674 2001.423918116695 1953.3977181166897 1955.0479181166688 1950.6004965713687 2006.6129181166966 1950.329415966706)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.2510749689274745 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 60.0 0.0 1.1999999999999993 12.600000000000001 2.799999999999997 1.0 0.45107496892747445 1.7999999999999972 29.80000000000001 46.799999999999955 10.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.066
Average program size in population (points): 45.06
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 412
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 412
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.139
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 206000
Number of point (instruction) evaluations so far: 266890380
--- Timings ---
Current time: 1481491735919 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 205
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 206
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 206
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 3.8000000000000007 0.8000000000000007 0.40000000000000036 38.0 62.0 3.0 5.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 58.8 4.6 9.0 0.6 67.8 0.19999999999999996]
Total: 476.6
Mean: 15.886666
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57212.167199701806
Median total errors in population: 480.00000000000006
Error averages by case: (1881.9482818046276 1884.9740818046046 1881.1602818046276 1886.9458818046044 1882.6292818046047 1880.8337181953948 1880.6601181953997 1882.2088818046 1880.8926818046511 1884.7612818046277 1882.8976818046474 1881.2812818046273 1881.402481804605 1912.2872818046278 1950.9912818046278 1882.8012818046277 1886.4784818046037 1902.943281804599 1920.1750818046107 1881.7602818046278 1882.7282818046278 1924.0202818046519 1933.7244818046495 2264.3398818046376 1931.036681804651 1883.3534818046498 1885.3882818046277 1880.6729181953986 1936.487881804652 1880.3821181953497)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 57.0 1.0 1.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 30.799999999999997 29.80000000000001 45.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.427
Average program size in population (points): 45.422
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 290
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 290
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.14
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 207000
Number of point (instruction) evaluations so far: 268223190
--- Timings ---
Current time: 1481491739187 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 206
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 207
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 207
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 3.8000000000000007 0.8000000000000007 0.40000000000000036 38.0 62.0 3.0 5.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 58.8 4.6 9.0 0.6 67.8 0.19999999999999996]
Total: 476.6
Mean: 15.886666
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57885.62204412955
Median total errors in population: 477.6
Error averages by case: (1871.9438414709848 1874.9542414709608 1871.1508414709847 1877.3754414709658 1872.678441470961 1870.8514414710075 1870.680841471005 1872.1546414709642 1870.8958414710094 1875.2578414709847 1872.9008414710045 1871.5824414710016 1871.5960414709673 1906.1748414709848 1942.9798414709846 1872.9208414709847 1876.4256414709598 1893.1026414709613 1904.2306414709685 1871.7978414709848 1872.7328414709848 1913.7390414710098 2832.5326414709475 2310.0622414709915 1927.2722414710088 1873.4882414710028 1876.3558414709848 1870.6930414710046 1926.6876414710098 1870.4032414709618)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.24147098480789653 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 29.80000000000001 45.799999999999955 31.799999999999997 0.40000000000000036 0.0 0.24147098480789653 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.269
Average program size in population (points): 45.26
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 295
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 295
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 208000
Number of point (instruction) evaluations so far: 269551260
--- Timings ---
Current time: 1481491742481 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 207
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 208
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 208
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (integer_dup in1 integer_div vector_integer_pushall float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 3.8000000000000007 0.8000000000000007 0.40000000000000036 38.0 62.0 3.0 5.199999999999999 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 46.799999999999955 58.8 4.6 9.0 0.6 67.8 0.19999999999999996]
Total: 476.6
Mean: 15.886666
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50711.57348466213
Median total errors in population: 477.6
Error averages by case: (1662.024668453602 1665.10041649059 1661.225668453602 1667.0529402542375 1662.7546729784358 1660.8773120614267 1660.7109120614261 1662.227487938574 1660.9210879386194 1665.037740254255 1663.1138051535452 1661.5607873063748 1661.442387306334 1693.7194051535266 1737.881668453602 1663.0794304851386 1666.7730021132013 1683.637630485115 1687.0798154371073 1661.8332879385957 1662.8776395777684 1704.7768164906374 1730.6166729784795 2123.449899785526 1712.2380986152068 1663.579226932572 1666.495421465003 1660.7157120614256 1718.3483579768786 1660.4215120613817)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 5.799999999999997 29.80000000000001 42.799999999999955 8.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.331
Average program size in population (points): 45.33
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 299
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 299
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.13
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 209000
Number of point (instruction) evaluations so far: 270881190
--- Timings ---
Current time: 1481491745798 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 208
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 209
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 209
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 5.800000000000001 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 471.6
Mean: 15.72
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50666.74490611099
Median total errors in population: 477.6
Error averages by case: (1661.9715129921822 1665.0709175170148 1661.1705129921822 1667.5605683370884 1662.738175069427 1660.8039324771994 1660.6157324771948 1662.201932477156 1660.8693324772014 1665.47688787056 1663.1597683371247 1661.5017683371264 1661.6113770837756 1693.6457683371048 1734.7155129921823 1662.9516694560432 1666.5451683370798 1683.7588898848805 1716.1133683370876 1661.779132477176 1662.7155129921823 1705.0526385615563 1723.1633196505754 2059.909168337118 1712.531968337129 1663.6375683371211 1666.4927683371047 1660.6277324771936 1717.9959683371305 1660.356332477153)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 0.8000000000000007 11.600000000000001 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 38.799999999999955 8.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.297
Average program size in population (points): 45.293
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 262
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.138
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 210000
Number of point (instruction) evaluations so far: 272210100
--- Timings ---
Current time: 1481491749164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 209
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 210
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 210
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 5.800000000000001 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 471.6
Mean: 15.72
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55473.3658856692
Median total errors in population: 477.6
Error averages by case: (1821.9608440839456 1824.9463755732627 1821.2059552186001 1827.0032348489922 1822.7329140517115 1820.8369150672254 1820.6640060629147 1822.1690970909945 1820.8656970910388 1825.01465358689 1823.358314051751 1821.5807671371344 1821.550697090997 1852.9240872557195 1894.8252213037517 1822.998367137116 1826.3586878666652 1843.1643686361094 1848.286460998222 1821.7504698904995 1822.6788970910163 1863.9857138806258 1885.0908781708322 2257.3678714747216 1871.7643176849397 1823.8151140517498 1826.491367137116 1820.6710712933782 1876.917005774142 1820.3865150671843)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.26031670824408015 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 1.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 38.799999999999955 29.799999999999997 0.40000000000000036 0.0 0.26031670824408015 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.168
Average program size in population (points): 45.165
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 214
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 214
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.153
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 211000
Number of point (instruction) evaluations so far: 273535140
--- Timings ---
Current time: 1481491752449 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 210
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 211
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 211
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 5.800000000000001 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 471.6
Mean: 15.72
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57200.709200000005
Median total errors in population: 476.6
Error averages by case: (1882.005 1885.0595999999744 1881.185 1886.9103999999757 1882.6791999999741 1880.9126000000242 1880.7170000000265 1882.2297999999714 1880.959000000026 1884.765 1883.5706000000218 1881.6218000000222 1881.6121999999746 1912.102 1949.795 1882.861 1885.8095999999734 1902.9627999999718 1906.8057999999817 1881.778 1882.685 1923.655200000027 1943.5678000000228 2255.8016000000034 1930.8652000000257 1884.0668000000244 1886.712 1880.739200000026 1935.811600000027 1880.4633999999758)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 38.799999999999955 6.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.019
Average program size in population (points): 45.017
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 392
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 392
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.141
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 212000
Number of point (instruction) evaluations so far: 274855710
--- Timings ---
Current time: 1481491755727 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 211
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 212
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 212
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_mod vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 2.8000000000000007 5.800000000000001 0.40000000000000036 39.0 62.0 3.0 6.199999999999999 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 59.8 3.5999999999999996 6.0 0.6 69.8 0.19999999999999996]
Total: 471.6
Mean: 15.72
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53861.81921466777
Median total errors in population: 476.6
Error averages by case: (1751.9946276321386 1755.0026847709682 1751.2195851388185 1757.0680054313127 1752.7436423037059 1750.9391574077497 1750.763757407747 1752.234136507898 1750.9684425923006 1755.0074337406193 1753.4090423037517 1752.217898585697 1751.7394425922553 1783.1632206323573 1826.010235119759 1752.9682985856762 1755.8286231072555 1773.6298851845258 1779.4003567668874 1751.8158231072814 1752.7504425922752 1794.384091002831 1809.5616643267754 2675.800713348401 1801.9198538659894 1753.94664230375 1756.4782985856762 1750.7799574077465 1807.5942949079622 1750.4789574076997)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.09391564547484021 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 1.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.4425922753450977 2.200000000000003 28.80000000000001 37.799999999999955 29.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.465
Average program size in population (points): 45.459
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 307
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 307
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.16
Error (vector) diversity:			 0.172
--- Run Statistics ---
Number of program evaluations used so far: 213000
Number of point (instruction) evaluations so far: 276189660
--- Timings ---
Current time: 1481491759031 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 212
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 213
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 213
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth 5 5 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 3.8000000000000007 5.800000000000001 0.40000000000000036 38.0 62.0 3.0 5.199999999999999 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 58.8 4.6 7.0 0.6 68.8 0.19999999999999996]
Total: 470.6
Mean: 15.6866665
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56304.64352725064
Median total errors in population: 476.6
Error averages by case: (1852.013764964716 1854.9985649646896 1851.240764964716 1856.814364964696 1852.6965649646888 1850.91863503531 1850.7274677109365 1852.227964964692 1850.9451649647433 1854.835764964716 1853.2525649647375 1853.3149649647369 1851.725164964697 1882.592764964716 1924.4247649647161 1852.966764964716 1856.136364964688 1873.300964964691 1876.6821649646972 1851.769764964716 1852.6947649647161 1893.9993649647438 1912.2173649647395 2223.3977649647263 1901.142164964743 1853.7331649647356 1855.870764964716 1850.7482677109363 1906.786764964744 1850.467867710887)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 56.0 0.0 0.1999999999999993 1.3999999999999986 2.799999999999997 0.0 0.0 6.200000000000003 29.80000000000001 37.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.16017028665036603)
Average genome size in population (length): 44.817
Average program size in population (points): 45.814
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 286
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.168
Error (vector) diversity:			 0.181
--- Run Statistics ---
Number of program evaluations used so far: 214000
Number of point (instruction) evaluations so far: 277534170
--- Timings ---
Current time: 1481491762376 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 213
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 214
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 214
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction float_max} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec float_max integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec float_max integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 4.800000000000001 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 42.799999999999955 38.8 13.6 6.0 0.6 59.8 0.19999999999999996]
Total: 458.40000000000003
Mean: 15.28
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59977.71485561201
Median total errors in population: 471.6
Error averages by case: (1971.9487163378144 1975.0018460977215 1971.1817163378144 1977.1371111302392 1972.7154161468125 1970.8724000000227 1970.704200000028 1972.1839999999715 1970.9024000000245 1975.1549111302618 1972.9124669380801 1974.299157659501 1971.3793576594555 2002.5626669380615 2042.4857163378144 1972.9129899924965 1976.3352898229305 1992.8531899924672 2025.8467477292445 1971.791 1972.859839071529 2013.6768460977707 2031.3670161468572 2391.8041328330232 2021.0359841843758 1973.3927657766624 1975.025008797188 1970.7100000000275 2026.2299624538766 1970.4319999999773)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 1.0 2.1999999999999993 5.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 29.80000000000001 37.799999999999955 28.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.065
Average program size in population (points): 45.065
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 477
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 477
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.132
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 215000
Number of point (instruction) evaluations so far: 278856120
--- Timings ---
Current time: 1481491765722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 214
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 215
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 215
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction float_max} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec float_max integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (integer_dup in1 vector_integer_pushall vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec float_max integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 4.800000000000001 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 42.799999999999955 38.8 13.6 6.0 0.6 59.8 0.19999999999999996]
Total: 458.40000000000003
Mean: 15.28
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59035.7708
Median total errors in population: 471.6
Error averages by case: (1942.017 1945.017199999976 1941.207 1946.8327999999826 1942.6713999999758 1940.8248000000228 1940.6568000000223 1942.1045999999787 1940.8716000000243 1944.756 1942.8072000000186 1944.52720000002 1941.627199999983 1972.576 2010.332 1942.815 1946.240799999975 1962.8437999999774 1966.9787999999846 1941.76 1942.773 1983.501600000025 1994.1668000000213 2358.7934000000073 1991.0700000000238 1943.3052000000182 1944.903 1940.665600000021 1996.7418000000253 1940.383199999977)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 61.0 0.0 0.8000000000000007 12.399999999999999 2.799999999999997 0.0 0.0 6.200000000000003 29.80000000000001 37.799999999999955 31.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.456
Average program size in population (points): 45.451
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 483
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 483
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.141
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 216000
Number of point (instruction) evaluations so far: 280189800
--- Timings ---
Current time: 1481491769110 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 215
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 216
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 216
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction float_max} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec float_max integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc vector_integer_replace integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 4.800000000000001 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 42.799999999999955 38.8 13.6 6.0 0.6 59.8 0.19999999999999996]
Total: 458.40000000000003
Mean: 15.28
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54166.94167859109
Median total errors in population: 471.6
Error averages by case: (1742.0504686037577 1745.154068603735 1731.2864686037576 1737.145668603743 1742.7514686037346 1740.8638386835057 1740.686438683505 1742.217268603736 1740.9084386835073 1735.5234686037577 1733.2330686037756 1734.9928686037772 1741.7678686037407 1768.3754686037578 1845.7044686037577 1743.0374686037576 1736.3874686037345 1753.4384686037358 1764.9170686037435 1741.8034686037577 1742.7438386834842 1774.8644686037815 2780.371268603716 2383.1504686037606 1784.9020686037807 1733.742068603773 1735.3884686037577 1740.7018386835045 1788.4230686037818 1740.4088386834624)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.38503986326151884 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.1850398632615189 2.200000000000003 29.80000000000001 37.799999999999955 26.200000000000003 0.40000000000000036 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.869
Average program size in population (points): 45.864
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 417
Genome diversity (% unique Plush genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 417
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.14
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 217000
Number of point (instruction) evaluations so far: 281535870
--- Timings ---
Current time: 1481491772477 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 216
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 217
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 217
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (integer_dup in1 float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 5.800000000000001 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 38.8 13.6 1.0 0.6 59.8 0.19999999999999996]
Total: 449.40000000000003
Mean: 14.98
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55138.99154493672
Median total errors in population: 471.6
Error averages by case: (1812.1138119626662 1815.0090334823592 1811.2956180167396 1816.744821581806 1812.7395981487339 1810.9002134368238 1810.7234731345197 1812.2091583190202 1810.9463583190704 1814.7357502369837 1813.8776746568797 1814.5378215818484 1811.9597583190239 1842.1036063926613 1885.4171107320258 1812.959169614427 1816.3580044167684 1833.4909649286399 1836.5813876288619 1811.7861583190454 1812.6341583190454 1854.1555209249368 1876.5424663141969 2210.290102054241 1860.8528215818515 1814.3177744659024 1815.40687465686 1810.7342731345186 1867.1121709750123 1810.4558892813081)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 61.0 0.0 1.1999999999999993 9.600000000000001 2.799999999999997 1.0 0.0 1.7999999999999972 28.80000000000001 34.799999999999955 30.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.433
Average program size in population (points): 45.43
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 267
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.154
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 218000
Number of point (instruction) evaluations so far: 282868860
--- Timings ---
Current time: 1481491775880 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 217
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 218
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 218
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (integer_dup in1 integer_div float_mod vector_integer_pushall float_inc vector_integer_replace float_mod integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 5.800000000000001 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 38.8 13.6 1.0 0.6 59.8 0.19999999999999996]
Total: 449.40000000000003
Mean: 14.98
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56824.01461883079
Median total errors in population: 470.6
Error averages by case: (1852.1521093015567 1855.1047093015318 1851.3251093015567 1857.0769093015335 1852.7513093015323 1850.9433949156203 1850.7647949156233 1852.281509301529 1850.992909301581 1855.2151093015568 1855.2155093015772 1854.4165093015781 1853.2213093015462 1880.0401093015569 1924.7831093015568 1852.960109301557 1855.5115093015438 1872.9951093015284 1902.7577093015389 1851.818109301557 1852.7841093015568 1894.346909301582 2364.508109301563 2265.274109301567 1897.060709301581 1855.780709301579 1855.8631093015567 1850.7861949156227 1904.7911093015825 1850.4925922435025)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.0013360351468790221 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 60.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 3.799999999999997 29.80000000000001 34.799999999999955 4.799999999999997 0.40000000000000036 0.0 0.0013360351468790221 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.46
Average program size in population (points): 45.458
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 296
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.16
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 219000
Number of point (instruction) evaluations so far: 284202660
--- Timings ---
Current time: 1481491779261 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 218
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 219
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 219
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction 5} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items 5 integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 12.8 1.8000000000000007 10.6 25.0 62.0 3.0 3.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 38.8 13.6 1.0 0.6 59.8 0.19999999999999996]
Total: 441.40000000000003
Mean: 14.713333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53456.67471667682
Median total errors in population: 470.6
Error averages by case: (1752.3135424502477 1755.125768352233 1751.4865635110293 1757.1732097363542 1752.7518604907661 1750.969436488994 1750.7769403023215 1752.3240596976752 1750.9964596977186 1755.2426298256087 1758.094705482244 1753.5284097363901 1756.4112596976981 1776.324337282803 1826.2568321190072 1752.9394597614862 1755.251289827224 1773.3934597195187 1777.1907153414136 1751.821459697694 1752.754459697694 1794.550441559172 1814.1830655235256 2274.019824051548 1792.6520097363943 1758.4739056639269 1755.836705482223 1750.8025403023212 1802.4944597778065 1750.5349056638884)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 5.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 30.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.244
Average program size in population (points): 45.241
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 184
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.194
Error (vector) diversity:			 0.205
--- Run Statistics ---
Number of program evaluations used so far: 220000
Number of point (instruction) evaluations so far: 285529980
--- Timings ---
Current time: 1481491782673 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 219
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 220
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 220
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec vector_integer_dup_times integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 11.8 1.8000000000000007 10.6 25.0 62.0 3.0 2.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 39.8 12.6 1.0 0.6 60.8 0.19999999999999996]
Total: 441.40000000000003
Mean: 14.713333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53914.00647545722
Median total errors in population: 458.40000000000003
Error averages by case: (1772.1690491819072 1775.1964491818824 1771.3530491819072 1777.1988491818936 1772.7480491818824 1771.0426491819305 1770.8472491819252 1772.3590491818888 1771.0758491819317 1775.2610491819073 1779.6940491819278 1773.6974491819278 1778.1856491819196 1793.1960491819073 1845.876049181907 1773.0420491819073 1774.9742491819227 1793.3698491818886 1797.8776491818894 1771.8700491819072 1772.837049181907 1814.5868491819335 1832.6736491819286 2157.177649181921 1808.545849181932 1780.0108491819233 1774.7690491819071 1770.8752491819253 1820.8954491819336 1770.600449181884)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 1.0 0.1999999999999993 1.3999999999999986 2.799999999999997 0.0 0.0 5.799999999999997 30.80000000000001 30.799999999999955 2.799999999999997 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.919
Average program size in population (points): 45.915
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 315
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 315
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.172
Error (vector) diversity:			 0.179
--- Run Statistics ---
Number of program evaluations used so far: 221000
Number of point (instruction) evaluations so far: 286877550
--- Timings ---
Current time: 1481491786110 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 220
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 221
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 221
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec vector_integer_dup_times integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 11.8 1.8000000000000007 10.6 25.0 62.0 3.0 2.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 39.8 12.6 1.0 0.6 60.8 0.19999999999999996]
Total: 441.40000000000003
Mean: 14.713333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 141669.57363282825
Median total errors in population: 458.40000000000003
Error averages by case: (1992.1179607896686 1995.3833607896452 1991.2759607896687 1996.9911607896427 1992.734760789644 1991.0218087186759 1990.8396413943112 1992.2987607896382 1991.0445607896927 1995.1959607896686 1999.2999607896904 1994.1739607896857 1998.4157607896936 2020.6799607896687 2071.059960789669 1993.2629607896686 1994.8203607896846 2017.647560789637 2019.0773607896501 1991.8159607896687 1992.9219607896687 2034.5459607896944 2068.245360789692 83405.81116078875 2026.1923607896933 1999.854360789697 1992.9729607896686 1990.862641394311 2138.428160789691 1990.5809607896445)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 60.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 1.7999999999999972 29.80000000000001 30.799999999999955 5.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.099
Average program size in population (points): 45.098
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 289
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.167
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 222000
Number of point (instruction) evaluations so far: 288200520
--- Timings ---
Current time: 1481491789540 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 221
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 222
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 222
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 11.8 1.8000000000000007 10.6 25.0 62.0 3.0 2.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 39.8 12.6 1.0 0.6 60.8 0.19999999999999996]
Total: 440.40000000000003
Mean: 14.68
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61543.01555404021
Median total errors in population: 449.40000000000003
Error averages by case: (2012.2509472057254 2015.1063472057033 2011.4569472057253 2016.805747205706 2012.7623472057026 2011.046131672858 2010.855131672859 2012.3831472057009 2011.079947205747 2014.8989472057253 2019.6611472057446 2013.8427472057363 2018.4285472057409 2032.5259472057253 2091.5059472057255 2012.8879472057254 2014.7491472057407 2032.750747205701 2065.6993472057093 2011.8629472057253 2013.0129472057254 2053.0039472057497 2524.10634720572 2349.6215472057293 2046.9051472057474 2020.0925472057454 2012.7069472057253 2010.8855316728589 2059.51014720575 2010.6103316728147)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 60.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 29.799999999999955 4.200000000000003 0.40000000000000036 0.0 0.4 19.799999999999997 0.16017028665036603)
Average genome size in population (length): 44.292
Average program size in population (points): 45.286
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 305
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 305
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.157
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 223000
Number of point (instruction) evaluations so far: 289529280
--- Timings ---
Current time: 1481491793034 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 222
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 223
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 223
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 2.1999999999999993 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 407.20000000000005
Mean: 13.573334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62893.18333919826
Median total errors in population: 449.40000000000003
Error averages by case: (2072.34281697947 2075.1402169794446 2071.53381697947 2076.73285594943 2072.7090169794433 2070.9927843038668 2070.8162169795005 2072.322416979439 2071.042416979496 2074.7120559494574 2079.52225594948 2072.814855949463 2078.3908169794927 2091.6100559494575 2142.8100559494574 2072.7240559494576 2074.493455949477 2092.627055949426 2095.1146559494377 2071.83881697947 2072.78681697947 2112.781855949483 2136.0448559494776 2452.1108559494555 2106.4282559494823 2080.024855949486 2072.5610559494576 2070.8426169795002 2118.745455949482 2070.5660169794446)
Error minima by case: (0.0 0.18051500624658612 0.0 0.5999999999999996 0.7999999999999998 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 60.0 0.0 0.1999999999999993 0.6000000000000014 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 29.799999999999955 4.200000000000003 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.13
Average program size in population (points): 45.124
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 142
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.174
Error (vector) diversity:			 0.183
--- Run Statistics ---
Number of program evaluations used so far: 224000
Number of point (instruction) evaluations so far: 290853180
--- Timings ---
Current time: 1481491796513 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 223
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 224
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 224
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_dup_times vector_integer_pushall float_inc integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 2.1999999999999993 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 407.20000000000005
Mean: 13.573334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54812.57000382495
Median total errors in population: 441.80000000000007
Error averages by case: (1802.3834001593732 1805.2274001593491 1801.5534001593733 1807.1360001593537 1802.803200159348 1801.089599840651 1800.8967998406479 1802.4338001593508 1801.0924001593978 1804.8814001593732 1809.790400159394 1802.312800159387 1808.72240015939 1822.4674001593733 1872.561400159373 1802.897400159373 1804.6600001593918 1823.3684001593485 1851.455200159355 1801.9234001593732 1812.848400159373 1844.1512001593999 1856.5106001593956 2166.345800159386 1837.6550001593985 1810.2762001593908 1802.6344001593732 1800.9043998406469 1850.9458001593998 1800.642000159349)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.19984062681853287 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 57.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 30.799999999999955 2.200000000000003 0.40000000000000036 0.0 0.19984062681853287 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.332
Average program size in population (points): 45.331
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 339
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.165
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 225000
Number of point (instruction) evaluations so far: 292183140
--- Timings ---
Current time: 1481491800011 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 224
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 225
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 225
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_dup_times vector_integer_pushall integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 2.1999999999999993 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 407.20000000000005
Mean: 13.573334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52742.80532223174
Median total errors in population: 441.40000000000003
Error averages by case: (1732.5425574077246 1735.4601574077 1731.6395574077246 1737.0253574077035 1732.8415574076996 1731.1101574077486 1730.8945574077497 1732.5105574076986 1731.1367574077494 1734.9685574077246 1740.0559574077465 1732.4125574077464 1738.684757407743 1752.5905574077246 1804.5085574077248 1732.8855574077247 1734.630757407743 1753.773557407698 1779.8641574077062 1731.9335574077247 1733.0105574077247 1774.6091574077511 1786.9889574077476 2133.7433574077386 1767.4923574077488 1740.577557407747 1732.2375574077246 1730.9275574077494 1781.092557407751 1730.6559574077007)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 60.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 5.799999999999997 29.80000000000001 30.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.527
Average program size in population (points): 45.524
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 415
Genome diversity (% unique Plush genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 415
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.165
Error (vector) diversity:			 0.174
--- Run Statistics ---
Number of program evaluations used so far: 226000
Number of point (instruction) evaluations so far: 293518950
--- Timings ---
Current time: 1481491803536 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 225
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 226
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 226
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 1.8000000000000007 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 402.8
Mean: 13.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60169.03633861758
Median total errors in population: 441.40000000000003
Error averages by case: (1982.4795578087992 1985.2887412123305 1981.6885578087993 1986.7657526012263 1982.8310576177996 1981.202457617842 1981.0013817733138 1982.561501168654 1981.2531011687004 1984.7397526012467 1989.608908409065 1982.369999130483 1988.485058828177 2002.7145084090464 2053.371557808799 1982.8108314634812 1984.6303312939551 2002.8606314634555 2004.7559892002294 1981.995301168679 1983.137140240208 2023.0836875687528 2048.828857617841 2331.15757430401 2015.7408256553563 1990.129407247646 1982.0408502681728 1981.0363817733135 2029.6980039248588 1980.768631463461)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.14030230586813974 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 57.0 0.0 0.1999999999999993 0.3999999999999986 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 30.799999999999955 1.2000000000000028 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.394
Average program size in population (points): 44.389
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 347
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 347
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.161
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 227000
Number of point (instruction) evaluations so far: 294820770
--- Timings ---
Current time: 1481491806962 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 226
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 227
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 227
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_mod vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 1.8000000000000007 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 402.8
Mean: 13.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53033.03341185778
Median total errors in population: 441.40000000000003
Error averages by case: (1742.2868003952594 1745.460600395236 1741.5028003952593 1747.4136003952399 1742.911400395235 1741.2130003952825 1750.9944003952799 1752.5622003952374 1751.2744003952837 1745.2178003952595 1749.8656003952797 1742.4484003952764 1758.7068003952777 1761.7068003952595 1814.6318003952595 1742.9088003952595 1744.2788003952778 1763.615200395237 1766.1158003952407 1752.0208003952594 1753.2018003952594 1784.4504003952848 1806.2236003952803 2082.1820003952753 1774.3054003952775 1750.3194003952783 1741.9758003952595 1751.0346003952798 1791.4450003952848 1740.7596003952367)
Error minima by case: (1.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.388
Average program size in population (points): 45.385
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 177
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.162
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 228000
Number of point (instruction) evaluations so far: 296152410
--- Timings ---
Current time: 1481491810457 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 227
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 228
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 228
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div float_mod vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup integer_stackdepth integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 1.8000000000000007 10.6 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 34.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 402.8
Mean: 13.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60146.196262181176
Median total errors in population: 440.40000000000003
Error averages by case: (1962.166480000267 1965.3458896194022 1961.3842425034827 1966.9998800002468 1962.8113840161004 1971.110373464127 1970.9115734641225 1972.4494263566235 1971.1874263566726 1964.9604932947077 1969.281065428197 1962.3935794373308 1968.5106425034974 1979.7662208287709 2036.3218277569888 1962.8629921332856 1963.8506661863785 1982.9280265133104 1992.6913547043318 1971.9348263566462 1973.096826356646 2003.2319022802674 2471.2898197573954 2368.7048661863682 1985.812255666483 1969.6858661863773 1962.521166039938 1970.9489734641222 2010.3563889625398 1970.6798263566213)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.7999999999999998 0.2 0.14030230586813974 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 46.0 0.0 0.1999999999999993 0.3999999999999986 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.16674857792220632)
Average genome size in population (length): 43.903
Average program size in population (points): 44.899
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.206
Error (vector) diversity:			 0.212
--- Run Statistics ---
Number of program evaluations used so far: 229000
Number of point (instruction) evaluations so far: 297469500
--- Timings ---
Current time: 1481491813917 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 228
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 229
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 229
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 2.1999999999999993 5.4 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 402.00000000000006
Mean: 13.4
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52359.28690720475
Median total errors in population: 407.20000000000005
Error averages by case: (1722.1953394392808 1725.3675394392571 1721.399799136975 1727.21087912255 1722.8189991369509 1720.9677394393032 1720.7847394393054 1722.3361394392546 1721.0399394393053 1725.0359313572192 1729.121472272322 1722.5510970987534 1728.6100970987814 1740.8700063773426 1789.708336267876 1722.9994319924997 1723.526272272319 1743.4669991369485 1746.3877897615632 1721.8793394392808 1722.8477555861175 1764.7929294318026 1778.0408017734385 2094.518690377779 1735.7259875128839 1729.5158722723247 1722.1244319924997 1720.805339439305 1772.1132722723266 1720.5239394392586)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 2.0 46.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 0.7999999999999972 29.80000000000001 33.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.757
Average program size in population (points): 45.754
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 413
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 413
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.161
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 230000
Number of point (instruction) evaluations so far: 298812210
--- Timings ---
Current time: 1481491817511 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 229
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 230
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 230
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc float_dup_items integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_dup_times vector_integer_pushall integer_div float_dup_items integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 5.0 10.8 2.1999999999999993 5.4 25.0 62.0 3.0 1.8000000000000007 28.4 23.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 1.0 0.6 61.8 0.19999999999999996]
Total: 402.00000000000006
Mean: 13.4
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49956.32583479307
Median total errors in population: 407.20000000000005
Error averages by case: (1642.2970288542303 1645.3852288542091 1641.4060288542305 1647.2590288542185 1642.8298288542078 1641.09157114579 1640.8875711457808 1642.4868288542177 1641.1716288542532 1644.9400288542304 1649.047628854249 1642.3520288542268 1648.8770288542391 1660.8870288542305 1714.1730288542303 1642.9230288542303 1643.5874288542464 1663.9470288542163 1692.7902288542132 1641.9580288542304 1643.3050288542304 1684.9938288542533 1699.7332288542502 1979.8376288542436 1652.336228854216 1649.54182885424 1642.0810288542305 1640.92217114578 1692.6372288542536 1640.6403711457492)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 60.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 29.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.17114576966636308)
Average genome size in population (length): 44.695
Average program size in population (points): 45.693
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 358
Genome diversity (% unique Plush genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 358
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.149
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 231000
Number of point (instruction) evaluations so far: 300153060
--- Timings ---
Current time: 1481491821051 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 230
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 231
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 231
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 3.8000000000000007 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 6.0 0.6 61.8 0.19999999999999996]
Total: 394.6
Mean: 13.153334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50251.461919173984
Median total errors in population: 402.8
Error averages by case: (1652.2549173057996 1655.46371730578 1651.4549173057997 1657.3845173057819 1652.8943173057796 1651.1095173058184 1650.9341173058199 1652.4871173057782 1651.19571730582 1655.1999173057998 1659.0445173058165 1652.4959173058096 1658.5949173058125 1671.9739173057997 1722.2929173057996 1653.1009173057996 1653.5995173058143 1673.765117305778 1676.0519173057835 1652.0139173057996 1652.9249173057997 1695.2189173058212 1713.595517305818 2007.4087173058138 1663.0169173057848 1659.4303173058158 1652.2859173057996 1650.9611173058195 1702.6529173058211 1650.6543173057808)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.11730579957215835 0.3173057995721584 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 22.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 9.200000000000003 29.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.3173057995721584 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.64
Average program size in population (points): 45.638
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 381
Genome diversity (% unique Plush genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 381
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.151
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 232000
Number of point (instruction) evaluations so far: 301492260
--- Timings ---
Current time: 1481491824595 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 231
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 232
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 232
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 3.8000000000000007 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 6.0 0.6 61.8 0.19999999999999996]
Total: 394.6
Mean: 13.153334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53118.49212129862
Median total errors in population: 402.8
Error averages by case: (1742.3772728883291 1745.3086728883054 1751.5072728883292 1747.393872888305 1742.8458728883043 1751.026607537095 1750.822072888358 1752.3954728882984 1751.0946728883548 1745.4892728883292 1748.8936728883493 1742.4354728883445 1757.9118728883411 1766.7042728883291 1816.9502728883292 1742.995272888329 1744.0520728883466 1763.5712728882986 1796.891272888311 1751.8932728883292 1752.900272888329 1784.6162728883555 1811.797272888351 2126.1694728883444 1754.9056728883131 1749.3028728883519 1742.285272888329 1750.8542728883579 1792.5204728883557 1740.5804728883056)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 46.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 29.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.359
Average program size in population (points): 44.357
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 369
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 369
Syntactic diversity (% unique Push programs):	 0.447
Total error diversity:				 0.166
Error (vector) diversity:			 0.17
--- Run Statistics ---
Number of program evaluations used so far: 233000
Number of point (instruction) evaluations so far: 302793030
--- Timings ---
Current time: 1481491828054 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 232
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 233
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 233
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 3.8000000000000007 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 6.0 0.6 61.8 0.19999999999999996]
Total: 394.6
Mean: 13.153334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51892.3597652552
Median total errors in population: 402.8
Error averages by case: (1622.2148004878977 1625.3406004878755 1621.3858004878978 1627.2512004878847 1622.8612004878746 1621.210317360673 1620.9615173606658 1622.5994004878835 1621.2964004879204 1625.3548004878978 1629.2646004879175 1622.5700004879006 1626.8774004878976 1648.803800487898 1765.870800487898 1623.081800487898 1623.860000487914 1643.8638004878815 1660.4188004878797 1622.0018004878978 1623.1138004878978 1665.2990004879214 3627.90500048784 2474.581400487895 1638.2274004878818 1629.6488004879109 1622.2608004878978 1621.0187173606653 1672.4582004879214 1620.7578004878767)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 46.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 1.0 1.7999999999999972 29.80000000000001 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.1818659290470721)
Average genome size in population (length): 44.61
Average program size in population (points): 45.609
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 271
Genome diversity (% unique Plush genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.153
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 234000
Number of point (instruction) evaluations so far: 304131330
--- Timings ---
Current time: 1481491831643 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 233
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 234
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 234
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_dup_times vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 3.8000000000000007 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 6.0 0.6 61.8 0.19999999999999996]
Total: 394.6
Mean: 13.153334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54474.95543274466
Median total errors in population: 402.00000000000006
Error averages by case: (1792.470459697694 1795.29905969767 1791.6084596976941 1797.5880596976729 1792.8732596976693 1791.2095403023288 1791.0067403023281 1792.56025969767 1791.2960596977193 1795.6934596976942 1798.9534596977137 1792.6336596976848 1795.4110596976773 1810.998459697694 1862.112459697694 1793.083459697694 1794.0138596977113 1813.3094596976694 1815.4682596976743 1792.035459697694 1793.062459697694 1834.01205969772 1857.8530596977157 2171.199859697706 1803.789059697677 1799.2498596977134 1792.836459697694 1791.0425403023276 1841.51405969772 1790.7710596976713)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 2.0 46.0 0.0 0.1999999999999993 0.3999999999999986 2.799999999999997 1.0 1.0 10.200000000000003 29.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.878
Average program size in population (points): 45.876
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 382
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 382
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.178
Error (vector) diversity:			 0.186
--- Run Statistics ---
Number of program evaluations used so far: 235000
Number of point (instruction) evaluations so far: 305477670
--- Timings ---
Current time: 1481491835201 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 234
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 235
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 235
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_dup_times vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 3.8000000000000007 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 24.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 11.6 6.0 0.6 61.8 0.19999999999999996]
Total: 394.6
Mean: 13.153334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56613.931200000006
Median total errors in population: 402.00000000000006
Error averages by case: (1861.945 1865.217999999975 1861.11 1867.1785999999713 1862.693799999975 1860.811000000024 1860.631800000032 1862.160199999967 1860.8674000000256 1865.433 1868.8800000000217 1862.7174000000014 1864.8953999999724 1880.705 1924.764 1862.832 1863.1580000000172 1883.310399999968 1887.97439999998 1861.751 1862.734 1904.3424000000252 1909.433000000023 2312.684799999999 1871.188399999984 1869.183600000029 1863.449 1860.6460000000316 1910.8796000000257 1860.353999999976)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 46.0 1.0 0.1999999999999993 0.6000000000000014 2.799999999999997 1.0 1.0 2.200000000000003 30.80000000000001 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.977
Average program size in population (points): 45.972
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 252
Genome diversity (% unique Plush genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.161
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 236000
Number of point (instruction) evaluations so far: 306826980
--- Timings ---
Current time: 1481491838783 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 235
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 236
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 236
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec vector_integer_rot integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec vector_integer_reverse integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 0.1999999999999993 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 13.6 1.0 0.6 61.8 0.19999999999999996]
Total: 389.0
Mean: 12.966666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53902.23687197326
Median total errors in population: 394.6
Error averages by case: (1762.5569724684556 1765.7021724684291 1761.6099724684555 1768.5689724684348 1762.9163724684286 1761.5401890257722 1761.275692809052 1762.9549724684293 1761.6572928090563 1767.7209724684556 1769.025172468476 1763.658372468473 1765.5749724684324 1792.3619724684556 1856.1379724684555 1763.3649724684556 1764.081972468473 1783.9575724684291 1801.0417724684362 1762.1989724684556 1763.4989724684556 1805.433572468483 2003.301172468478 2221.2473724684614 1781.3163724684389 1769.265772468475 1765.3009724684555 1761.3562928090519 1812.5393724684832 1761.0696928090047)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.04810835949046913 0.15189164050953088 1.4398297133496338 0.16017028665036603 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 4.0 0.0 0.1999999999999993 4.399999999999999 1.7999999999999972 1.0 0.03982971334963392 6.200000000000003 29.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.15189164050953088 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.632
Average program size in population (points): 45.628
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 497
Genome diversity (% unique Plush genomes):	 0.422
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 497
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.164
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 237000
Number of point (instruction) evaluations so far: 308165940
--- Timings ---
Current time: 1481491842299 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 236
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 237
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 237
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec vector_integer_rot integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec vector_integer_reverse integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 0.1999999999999993 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 13.6 1.0 0.6 61.8 0.19999999999999996]
Total: 389.0
Mean: 12.966666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64629.995482853126
Median total errors in population: 394.6
Error averages by case: (2132.0047160951044 2135.08991609508 2131.186716095104 2136.9937160950763 2132.712716095079 2130.937316095128 2130.7703160951346 2132.2457160950707 2130.9991160951295 2135.7167160951044 2138.579916095125 2133.3229160951237 2134.7495160950753 2150.2307160951045 2186.3937160951045 2132.9317160951045 2133.2509160951217 2152.4625160950704 2184.8683160950877 2131.8287160951045 2132.956716095104 2172.311916095125 2187.663916095122 2473.2965160951 2141.677116095087 2139.011316095131 2135.099716095104 2130.784916095134 2179.429716095125 2130.4877160950805)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 1.2000000000000002 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 1.0 22.200000000000003 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.19
Average program size in population (points): 45.185
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 518
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 518
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.138
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 238000
Number of point (instruction) evaluations so far: 309491640
--- Timings ---
Current time: 1481491845863 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 237
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 238
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 238
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_reverse} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec vector_integer_rot integer_dec integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec vector_integer_reverse integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec vector_integer_rot integer_dec integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 10.8 0.1999999999999993 5.4 25.0 46.0 3.0 1.8000000000000007 28.4 25.200000000000003 2.0 3.0 54.8 31.80000000000001 38.799999999999955 4.200000000000003 13.6 1.0 0.6 61.8 0.19999999999999996]
Total: 389.0
Mean: 12.966666
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56606.031863708544
Median total errors in population: 394.6
Error averages by case: (1862.1524219620414 1865.1826219620154 1861.1924119545379 1867.2895616453104 1862.772881659709 1860.9342219620657 1860.738221962067 1862.2910219620135 1861.0046219620679 1866.1799696913015 1868.9673547950829 1863.4562610335888 1864.8882219620166 1880.998088900103 1922.2794902506275 1863.0615145152597 1863.4867547950803 1883.1354816597077 1914.6555724219027 1861.8164219620414 1862.8448381088779 1903.7950119545644 1917.2840842961996 2264.0435729005267 1873.8980700356396 1869.2611547950833 1865.3190138799796 1860.7640219620669 1911.875354795088 1860.463621962017)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 1.2000000000000002 0.2 0.4 0.6000000000000001 0.8 1.0 0.8000000000000007 0.1999999999999993 1.5999999999999996 2.0 41.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.742
Average program size in population (points): 45.739
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 505
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 505
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 239000
Number of point (instruction) evaluations so far: 310833900
--- Timings ---
Current time: 1481491849694 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 238
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 239
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 239
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_rot float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_rot integer_dec integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 3.4000000000000004 3.2 0.8 0.6 2.4 0.8 1.0 5.199999999999999 0.1999999999999993 5.4 25.0 46.0 3.0 7.800000000000001 28.4 23.200000000000003 2.0 8.0 54.8 31.80000000000001 66.79999999999995 4.200000000000003 3.4000000000000004 6.0 0.6 31.799999999999997 0.19999999999999996]
Total: 375.2
Mean: 12.506667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49788.608142409874
Median total errors in population: 394.6
Error averages by case: (1602.237498106035 1605.428119625728 1601.2953041601081 1607.4431077251788 1602.8826842921028 1601.1320677067117 1600.9361274044036 1602.538444462394 1601.2024444624387 1606.241436380352 1609.1959608002483 1603.7037077252098 1605.2184444623965 1624.4142925360302 1664.7064250085969 1603.185855757796 1603.8340905601763 1623.9428510720122 1635.857873772227 1602.004844462414 1603.083844462414 1645.3174070683058 2112.102780590766 2536.6476163308116 1614.006335858383 1609.6694606092663 1605.6595608002285 1600.9637274044028 1653.1038852515835 1600.6519435511975)
Error minima by case: (1.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 43.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 7.799999999999997 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.106
Average program size in population (points): 46.105
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 470
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 470
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.176
Error (vector) diversity:			 0.181
--- Run Statistics ---
Number of program evaluations used so far: 240000
Number of point (instruction) evaluations so far: 312187080
--- Timings ---
Current time: 1481491853360 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 239
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 240
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 240
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_rot float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_rot float_mult integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 3.4000000000000004 3.2 0.8 0.6 2.4 0.8 1.0 5.199999999999999 0.1999999999999993 5.4 25.0 46.0 3.0 7.800000000000001 28.4 23.200000000000003 2.0 8.0 54.8 31.80000000000001 66.79999999999995 4.200000000000003 3.4000000000000004 6.0 0.6 31.799999999999997 0.19999999999999996]
Total: 375.2
Mean: 12.506667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55075.2903262617
Median total errors in population: 394.6
Error averages by case: (1812.3080429558154 1815.3098212742134 1811.3206535347454 1817.4763280533448 1812.793377178893 1811.0585165450054 1810.880148610564 1812.3886513894342 1811.1198513894892 1816.2631282136538 1818.7474161412151 1813.1139280533791 1814.991451389438 1831.398563458676 1869.9762180422244 1813.1437829316255 1813.5242546064085 1833.170393446861 1837.0086211949097 1811.9344513894637 1812.9254513894637 1853.9896842602373 1867.3747238120782 2212.2683526382716 1823.4703280533517 1819.3713674905935 1815.0070161411938 1810.9033486105636 1861.4701041704536 1810.5823498961672)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 22.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 0.0 0.4425922753450977 6.200000000000003 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 5.200000000000003 0.19120281186347354)
Average genome size in population (length): 44.693
Average program size in population (points): 45.689
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 371
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 371
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.159
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 241000
Number of point (instruction) evaluations so far: 313527870
--- Timings ---
Current time: 1481491857022 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 240
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 241
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 241
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_rot} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_dup_times vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec float_mult integer_rot float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dec integer_dec integer_dec integer_dec integer_dec integer_dup integer_dec integer_rot integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 3.4000000000000004 3.2 0.8 0.6 2.4 0.8 1.0 5.199999999999999 0.1999999999999993 5.4 25.0 46.0 3.0 7.800000000000001 28.4 23.200000000000003 2.0 8.0 54.8 31.80000000000001 66.79999999999995 4.200000000000003 3.4000000000000004 6.0 0.6 31.799999999999997 0.19999999999999996]
Total: 375.2
Mean: 12.506667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53031.68341526406
Median total errors in population: 394.6
Error averages by case: (1732.195180787252 1745.4233807872288 1731.235180787252 1737.0085807872301 1732.755380787229 1741.0122192127685 1740.8048192127706 1732.4265393162416 1741.1099807872754 1735.934180787252 1738.3999807872656 1732.0789807872438 1745.0321807872278 1750.830180787252 1849.969180787252 1733.312180787252 1733.7325807872683 1755.205580787226 1763.9443807872335 1731.9174602027504 1743.118180787252 1774.444180787276 1790.9475807872725 2336.3825807872486 1743.2991807872359 1739.25778078727 1733.3801807872521 1740.8394192127705 1785.1513807872757 1740.5348192127271)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 1.5999999999999996 0.0 44.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 0.20000000000000284 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.0192127480044475)
Average genome size in population (length): 44.804
Average program size in population (points): 45.8
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 286
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.172
Error (vector) diversity:			 0.176
--- Run Statistics ---
Number of program evaluations used so far: 242000
Number of point (instruction) evaluations so far: 314871990
--- Timings ---
Current time: 1481491860626 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 241
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 242
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 242
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 11.8 2.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 29.799999999999997 0.19999999999999996]
Total: 372.99999999999994
Mean: 12.433333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59532.2090574588
Median total errors in population: 389.0
Error averages by case: (1962.0817163378144 1965.1239163377882 1961.1437163378146 1966.4195163377929 1962.7233163377884 1960.9242836622104 1960.7283163378381 1962.25231633779 1960.9723163378417 1965.0967163378145 1967.8647163378166 1961.6169163377938 1964.8647163377916 1980.8717163378144 2022.0977163378145 1963.0157163378144 1964.6557163378336 1982.7453163377884 1988.078716337794 1961.7807163378145 1963.5067163378144 2004.0667163378416 2023.8327163378376 2327.2677163378244 1971.677716337797 1967.668916337824 1963.8827163378144 1960.7485163378371 2004.047316337842 1960.4519163377895)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 2.0 44.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 25.799999999999997 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.368
Average program size in population (points): 45.367
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 217
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.18
Error (vector) diversity:			 0.183
--- Run Statistics ---
Number of program evaluations used so far: 243000
Number of point (instruction) evaluations so far: 316203030
--- Timings ---
Current time: 1481491864157 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 242
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 243
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 243
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 11.8 2.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 29.799999999999997 0.19999999999999996]
Total: 372.99999999999994
Mean: 12.433333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53284.31814725131
Median total errors in population: 387.4
Error averages by case: (1751.966584022171 1755.2641840221509 1751.0565840221711 1755.155384022156 1752.7545840221512 1750.95446616201 1750.7504988376377 1752.3459840221515 1751.063184022192 1753.932584022171 1756.530584022161 1751.668384022155 1755.0409840221532 1771.329584022171 1815.562584022171 1753.072584022171 1756.1903840221862 1773.4115840221516 1778.1027840221554 1751.840584022171 1754.772584022171 1794.3967840221924 1816.9893840221894 2166.4921840221778 1764.3489840221587 1755.339784022168 1755.0565840221711 1750.786498837638 1787.6477840221921 1750.493498837602)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.24259227534509775 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 41.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.4425922753450977 11.799999999999997 29.80000000000001 30.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.11633781453677378 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.256
Average program size in population (points): 45.255
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 272
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.2
Error (vector) diversity:			 0.204
--- Run Statistics ---
Number of program evaluations used so far: 244000
Number of point (instruction) evaluations so far: 317530710
--- Timings ---
Current time: 1481491867709 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 243
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 244
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 244
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 11.8 2.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 29.799999999999997 0.19999999999999996]
Total: 372.99999999999994
Mean: 12.433333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60758.718
Median total errors in population: 375.2
Error averages by case: (2001.931 2005.0711999999744 2001.041 2003.9777999999767 2002.7045999999748 2000.9332000000236 2000.7100000000241 2002.2913999999723 2001.0184000000263 2002.802 2006.0325999999818 2001.2861999999784 2004.944799999978 2020.412 2062.741 2003.095 2007.1900000000192 2022.938999999972 2027.518999999981 2001.74 2005.638 2043.0042000000267 2063.1830000000214 2409.432000000004 2013.5563999999831 2004.356999999981 2005.275 2000.7536000000239 2032.6674000000264 2000.4711999999763)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.2000000000000002 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 1.5999999999999996 1.0 6.0 2.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 11.799999999999997 30.80000000000001 33.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.067
Average program size in population (points): 45.064
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 411
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 411
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.166
Error (vector) diversity:			 0.171
--- Run Statistics ---
Number of program evaluations used so far: 245000
Number of point (instruction) evaluations so far: 318852720
--- Timings ---
Current time: 1481491871262 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 244
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 245
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 245
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dec integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 11.8 2.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 29.799999999999997 0.19999999999999996]
Total: 372.99999999999994
Mean: 12.433333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62857.72380270895
Median total errors in population: 375.2
Error averages by case: (2071.8774297780283 2075.040068747991 2071.009429778028 2074.2504687479923 2072.6996687479914 2070.869045453512 2070.674245453515 2072.173229778 2070.9186297780534 2073.098668748016 2075.795868747999 2071.4190687479945 2075.139268747999 2092.810668748016 2130.6966687480153 2073.0266687480157 2077.042068748035 2092.5006687479877 2097.029268747996 2071.717429778028 2075.4644297780283 2112.8614687480394 2139.0062687480354 2476.8050687480154 2081.673268747998 2074.0978687479956 2075.7696687480156 2070.7006454535153 2101.1534687480407 2070.4031127199737)
Error minima by case: (1.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.2663667453928805 0.9805150062465864 0.8 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 45.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 11.799999999999997 1.8000000000000114 38.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2663667453928805 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.142
Average program size in population (points): 45.14
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 379
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 379
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.148
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 246000
Number of point (instruction) evaluations so far: 320176980
--- Timings ---
Current time: 1481491874810 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 245
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 246
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 246
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_inc} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_inc integer_dec float_mult integer_dup integer_dec integer_swap vector_integer_remove integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 2.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 62.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 22.799999999999997 0.19999999999999996]
Total: 361.4
Mean: 12.046667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58330.733664656924
Median total errors in population: 375.2
Error averages by case: (1922.0640499710692 1925.1282499710455 1921.172049971069 1925.7460499710444 1922.8930499710468 1921.1365500289528 1920.8835827045868 1922.46724997104 1921.193049971093 1924.3800499710692 1927.1180499710654 1922.344649971048 1926.6592499710641 1935.3690499710692 1983.0210499710693 1923.4360499710692 1926.655249971088 1942.9672499710393 1949.74104997105 1921.8720499710691 1924.6790499710692 1963.4082499710928 1992.85944997109 2287.3160499710775 1933.133049971053 1924.2272499710477 1927.5120499710692 1920.9409827045865 1949.7712499710938 1920.6386499710475)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.08366218546322624 0.11633781453677378 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 14.200000000000003 30.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.1336332546071195)
Average genome size in population (length): 43.893
Average program size in population (points): 44.89
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 211
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.172
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 247000
Number of point (instruction) evaluations so far: 321493770
--- Timings ---
Current time: 1481491878335 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 246
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 247
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 247
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 49952.6657203199
Median total errors in population: 372.99999999999994
Error averages by case: (1642.23071779555 1645.3533177955258 1641.2847177955498 1647.4359177955319 1643.0863177955257 1641.270482204474 1641.0412822044716 1642.615117795529 1641.3298822044756 1645.95871779555 1649.333317795562 1642.7471177955267 1648.3287177955615 1649.75171779555 1702.6597177955498 1643.6197177955498 1645.6937177955697 1663.829117795528 1670.0377177955309 1642.03971779555 1643.4192822044502 1684.8553177955755 1703.5751177955713 2029.1485177955656 1655.6393177955317 1644.278517795533 1649.4567177955498 1641.089882204471 1670.8031177955759 1640.752882204426)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.48220445019136826 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 41.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.2822044501913683 3.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.154
Average program size in population (points): 45.153
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 387
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.173
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 248000
Number of point (instruction) evaluations so far: 322818390
--- Timings ---
Current time: 1481491881873 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 247
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 248
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 248
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec float_shove integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56922.04978268342
Median total errors in population: 372.99999999999994
Error averages by case: (1872.1295401528616 1875.179771231856 1871.1096422303583 1877.3513401528387 1872.8009273714529 1871.140258120641 1870.8806755296507 1872.5185418793528 1871.2401418794072 1875.9067922016754 1878.5909263637786 1872.6367330625028 1878.3317418794015 1879.9404132383606 1937.7508633597686 1873.180534337613 1875.3697422746604 1893.340288928699 1898.3671772390005 1871.8430627658647 1872.8569418793813 1914.3518730265052 1944.4427465779263 2319.6027422746456 1887.159846984233 1873.7517422746203 1878.6537833405728 1870.943525947085 1900.0234712537097 1870.6539949249916)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 41.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.4425922753450977 26.200000000000003 30.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.262
Average program size in population (points): 44.262
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 345
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 345
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 249000
Number of point (instruction) evaluations so far: 324116250
--- Timings ---
Current time: 1481491885406 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 248
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 249
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 249
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 51239.513399999996
Median total errors in population: 372.99999999999994
Error averages by case: (1682.106 1685.3115999999754 1681.063 1687.354799999979 1682.9991999999759 1681.0306000000198 1680.8048000000213 1682.483199999973 1681.1842000000247 1685.904 1687.2279999999969 1682.5341999999787 1688.504800000018 1688.18 1743.246 1683.187 1685.2878000000194 1703.6517999999733 1741.7525999999805 1681.899 1683.06 1724.7004000000245 1738.234400000021 2135.6220000000167 1695.0395999999814 1684.0159999999782 1689.18 1680.8580000000209 1712.5180000000246 1680.57239999998)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 0.20000000000000284 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 11.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.214
Average program size in population (points): 45.214
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 165
Genome diversity (% unique Plush genomes):	 0.428
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.165
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 250000
Number of point (instruction) evaluations so far: 325442670
--- Timings ---
Current time: 1481491888950 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 249
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 250
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 250
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50939.04770270864
Median total errors in population: 361.4
Error averages by case: (1672.2293258174418 1675.3259258174207 1671.1213258174419 1678.0009258174325 1672.9849258174204 1671.2508352125897 1670.9304352125819 1672.6827258174294 1671.355725817464 1676.7803258174417 1674.9725258174262 1672.4481258174214 1678.75252581745 1679.6303258174419 1736.475325817442 1673.3923258174418 1675.6393258174598 1694.2783258174295 1701.0189258174244 1671.8753258174418 1673.1163258174417 1715.1523258174645 1736.5903258174615 2143.480925817453 1685.972925817425 1673.8335258174334 1679.2513258174417 1671.021435212582 1698.7535258174646 1670.7295258174224)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.2000000000000002 0.2 0.11439525852354915 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 3.5999999999999996 1.0 44.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 26.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.899
Average program size in population (points): 44.898
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.187
Error (vector) diversity:			 0.189
--- Run Statistics ---
Number of program evaluations used so far: 251000
Number of point (instruction) evaluations so far: 326759640
--- Timings ---
Current time: 1481491892506 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 250
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 251
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 251
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 48252.32121778782
Median total errors in population: 359.4
Error averages by case: (1582.217893926261 1585.3762939262401 1581.197893926261 1587.6508939262437 1583.05949392624 1581.2168939262808 1580.9146939262782 1582.627893926242 1581.2998939262834 1586.237893926261 1583.3600939262428 1582.0390939262409 1588.703493926275 1589.201893926261 1647.931893926261 1583.364893926261 1585.9156939262791 1604.054893926241 1620.5146939262436 1581.881893926261 1583.081893926261 1625.3708939262829 1662.8890939262808 2039.4086939262775 1596.588093926245 1584.388893926246 1589.585893926261 1580.9938939262781 1610.5572939262834 1580.6882939262412)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 4.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 15.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.476
Average program size in population (points): 44.473
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.176
Error (vector) diversity:			 0.18
--- Run Statistics ---
Number of program evaluations used so far: 252000
Number of point (instruction) evaluations so far: 328063920
--- Timings ---
Current time: 1481491895981 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 251
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 252
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 252
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51986.2724
Median total errors in population: 357.4
Error averages by case: (1672.038 1675.3715999999754 1671.122 1677.274399999981 1672.8697999999765 1671.0660000000235 1670.837200000022 1672.4283999999764 1671.117800000025 1675.942 1672.6649999999788 1671.303399999977 1678.5742000000175 1678.19 1733.626 1673.288 1675.5176000000204 1693.5793999999773 1736.94299999998 1671.867 1672.871 1714.7186000000254 1733.9744000000221 3169.132999999965 1685.4983999999806 1673.933799999983 1679.483 1670.8790000000213 1699.605600000026 1670.5547999999765)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.333
Average program size in population (points): 44.332
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 238
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.165
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 253000
Number of point (instruction) evaluations so far: 329363910
--- Timings ---
Current time: 1481491899597 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 252
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 253
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 253
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50551.48599255826
Median total errors in population: 357.4
Error averages by case: (1662.1474425922754 1665.281842592251 1661.0994325847719 1668.0423822755474 1662.971502289946 1661.2213574077468 1660.906357407745 1662.6124425922535 1661.2944425923006 1666.6349903215357 1662.2867987382956 1661.5357058550346 1668.775000251771 1669.7730024492528 1727.4985108808617 1663.447535145494 1665.5656513894828 1684.4937022899474 1692.7958432189714 1661.8284425922752 1662.968858739112 1704.7760325847967 1756.4977049264344 2016.7880406845711 1675.5508731328898 1664.0667880922929 1669.5884513894637 1660.9871574077447 1689.3557427254743 1660.6939574077028)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 5.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 26.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.637
Average program size in population (points): 44.636
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 244
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.141
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 254000
Number of point (instruction) evaluations so far: 330673020
--- Timings ---
Current time: 1481491903120 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 253
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 254
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 254
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42621.440015450185
Median total errors in population: 357.4
Error averages by case: (1392.232380515006 1395.489180514984 1401.1423805150062 1397.540180514992 1392.9235805149845 1401.2027805150278 1401.0623805150221 1402.7849805149897 1401.4339805150296 1396.088380515006 1392.9667805149877 1391.511180514985 1408.9687805150193 1399.760380515006 1459.145380515006 1393.2643805150062 1396.1051805150253 1415.3347805149897 1423.1513805149875 1402.058380515006 1403.2203805150061 1436.1165805150304 1470.8869805150275 1831.335580515022 1408.0737805149895 1394.2459805149938 1399.1983805150062 1401.1323805150228 1422.39938051503 1390.6637805149846)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 41.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 7.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.625
Average program size in population (points): 44.623
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 238
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.167
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 255000
Number of point (instruction) evaluations so far: 331981770
--- Timings ---
Current time: 1481491906686 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 254
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 255
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 255
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction float_add} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup float_add integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48807.690936035855
Median total errors in population: 357.4
Error averages by case: (1582.3249245345287 1585.4087245345067 1581.2609245345288 1587.9451245345192 1583.2655245345074 1581.2825245345496 1581.0347245345408 1582.6377245345157 1581.3535245345515 1586.6909245345287 1583.1765245345107 1584.1817245345085 1588.7243245345376 1592.7089245345287 1661.9829245345288 1583.7149245345288 1586.1805245345454 1604.3757245345148 1616.2573245345127 1582.0229245345288 1583.0889245345288 1624.9477245345515 2112.373924534546 2126.5625245345404 1597.4705245345137 1584.6161245345195 1589.7749245345287 1581.0861245345407 1610.4739245345518 1580.7657245345079)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.18661179785132428 0.38661179785132427 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 2.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.38661179785132427 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.957
Average program size in population (points): 44.955
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 225
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.171
Error (vector) diversity:			 0.174
--- Run Statistics ---
Number of program evaluations used so far: 256000
Number of point (instruction) evaluations so far: 333300480
--- Timings ---
Current time: 1481491910255 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 255
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 256
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 256
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39958.183879187534
Median total errors in population: 357.4
Error averages by case: (1302.1170399630698 1305.472839963049 1301.14203996307 1307.6092399630704 1303.00303996305 1301.1631600369492 1300.8959600369305 1302.6444399630689 1301.2312399630905 1306.1310399630697 1302.9622399630525 1301.681039963052 1308.7894399630698 1310.6020399630697 1369.7590399630699 1303.4620399630699 1306.0642399630851 1325.115039963068 1332.9630399630541 1301.94003996307 1302.9730399630698 1346.6570399630907 1387.9198399630873 1859.3814399630862 1318.186439963056 1304.31063996307 1309.7410399630699 1300.9543600369304 1332.6820399630915 1300.6297600369116)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 1.0 24.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.16003693029466148)
Average genome size in population (length): 43.917
Average program size in population (points): 44.915
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 230
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 230
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.154
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 257000
Number of point (instruction) evaluations so far: 334617990
--- Timings ---
Current time: 1481491913791 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 256
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 257
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 257
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 48110.4172821272
Median total errors in population: 357.4
Error averages by case: (1512.2433174591051 1515.6267174590835 1511.2433174591051 1517.837917459097 1513.1285174590848 1521.3130825409155 1511.0375152165338 1512.7861174590946 1511.448917459127 1516.970317459105 1512.872117459087 1513.3873174590847 1519.0583174591115 1528.855317459105 2586.154317459105 1513.8103174591051 1516.1523174591239 1534.9981174590946 1553.6529174590876 1511.981317459105 1513.143317459105 1611.5687174591292 2368.2589174591058 2056.9765174591225 1528.2329174590882 1514.3751174590973 1520.163317459105 1511.122315216534 1541.2449174591275 1510.7731152165034)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.08366218546322624 0.11633781453677378 1.8425922753450976 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 41.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.4425922753450977 0.20000000000000284 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 12.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.989
Average program size in population (points): 44.987
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.173
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 258000
Number of point (instruction) evaluations so far: 335937660
--- Timings ---
Current time: 1481491917330 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 257
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 258
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 258
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51545.10889205091
Median total errors in population: 357.4
Error averages by case: (1692.0440277915118 1695.2660277914895 1691.1010277915118 1697.4474277914965 1692.7906277914904 1691.106142288236 1690.8441422882336 1692.4856277914932 1691.1776277915346 1695.8860277915117 1692.5672277914919 1691.503827791491 1698.5812277915259 1699.1990277915118 1755.5890277915116 1693.1910277915117 1695.8016277915294 1713.7972277914919 1722.3356277914938 1691.8420277915118 1692.9020277915117 1734.5768277915347 1767.7514277915311 2158.797827791525 1707.8762277914948 1693.9530277914969 1699.7960277915117 1690.8981422882332 1723.412827791535 1690.5879426069398)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.19984062681853287 0.3999999999999999 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 6.0 1.0 0.1999999999999993 0.3999999999999986 2.799999999999997 0.0 0.4425922753450977 5.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.19984062681853287 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.073
Average program size in population (points): 44.07
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 200
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.152
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 259000
Number of point (instruction) evaluations so far: 337229850
--- Timings ---
Current time: 1481491920775 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 258
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 259
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 259
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 48055.12826351039
Median total errors in population: 357.4
Error averages by case: (1572.2939387687352 1575.4293274528357 1571.2173404952553 1578.0060203161095 1573.0679931600146 1571.3160184290414 1570.9997036465923 1572.725223041948 1571.394623041989 1576.8758979782294 1572.90343685306 1571.851320337905 1578.884110945295 1582.5535839321412 1641.101486776861 1573.6199320447477 1576.1525059859796 1594.2101967067535 1602.7087451753573 1571.9622230419654 1573.1227670630763 1615.6104951496015 1663.8424617187725 2118.236199964513 1588.3500440555902 1574.1869623178427 1579.81231431799 1571.0877036465922 1600.8297548062162 1570.7759323393702)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.03665572881693843 0.14030230586813974 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 2.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 3.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 4.799999999999997 0.10929742682568167)
Average genome size in population (length): 43.639
Average program size in population (points): 44.635
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 197
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.161
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 260000
Number of point (instruction) evaluations so far: 338539020
--- Timings ---
Current time: 1481491924331 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 259
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 260
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 260
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46462.21344425844
Median total errors in population: 357.4
Error averages by case: (1522.1342435748197 1525.3750111867357 1521.1082435748197 1527.608885914249 1522.9477820714023 1521.1930000000216 1520.936400000021 1522.6271999999774 1521.2584000000234 1526.1894859142694 1522.5592513669212 1521.4442899708524 1528.7666899708913 1528.2790513669418 1585.8002435748197 1523.3041435199477 1525.833855079745 1544.2473435199252 1583.11548142771 1521.932 1522.996242378852 1565.8706111867823 1596.1745820714455 1977.649208665173 1536.9545501599407 1524.2732222817895 1529.5711343256685 1520.9898000000208 1550.4040911546792 1520.6689999999783)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 4.200000000000003 29.80000000000001 57.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.456
Average program size in population (points): 44.455
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 201
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.162
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 261000
Number of point (instruction) evaluations so far: 339842700
--- Timings ---
Current time: 1481491927873 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 260
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 261
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 261
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_shove integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec float_shove integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46511.5298
Median total errors in population: 357.4
Error averages by case: (1512.367 1515.591999999975 1511.203 1517.9377999999863 1513.147199999975 1511.2054000000244 1510.940600000017 1512.6775999999834 1511.2840000000258 1516.367 1512.55279999998 1511.6793999999766 1518.8182000000127 1519.621 1574.994 1513.503 1515.4094000000205 1534.1673999999828 1540.0855999999799 1511.961 1513.136 1555.4732000000256 1580.9600000000237 2354.8939999999966 1526.509599999982 1514.2257999999874 1519.394 1511.0018000000166 1539.740600000027 1510.6813999999756)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 41.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 43.57
Average program size in population (points): 44.569
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 177
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.15
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 262000
Number of point (instruction) evaluations so far: 341149800
--- Timings ---
Current time: 1481491931417 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 261
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 262
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 262
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall float_inc integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 54788.3176844051
Median total errors in population: 357.4
Error averages by case: (1802.0554161468365 1805.1648161468154 1801.0944161468365 1808.725616146824 1802.8026161468165 1801.172016146856 1800.9052161468533 1802.53601614682 1801.2516161468586 1805.8634161468365 1802.723416146819 1802.7302161468165 1808.9394161468488 1807.8374161468364 1862.3604161468365 1803.1104161468365 1805.969416146854 1825.378816146819 1830.2640161468194 1801.8644161468364 1802.9084161468365 1843.8232161468584 1869.5356161468549 2228.608616146847 1816.3208161468197 1804.015816146825 1809.2754161468365 1800.9668161468524 1829.4516161468587 1800.662216146817)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 45.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.134
Average program size in population (points): 44.132
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 157
Genome diversity (% unique Plush genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.162
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 263000
Number of point (instruction) evaluations so far: 342443820
--- Timings ---
Current time: 1481491934911 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 262
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 263
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 263
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_inc} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall float_inc integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [2.0 6.2 1.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 10.6 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 3.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 357.4
Mean: 11.913333
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 49465.639595604494
Median total errors in population: 357.4
Error averages by case: (1622.1951585290153 1625.3315585289934 1621.1121585290152 1627.4895585290003 1622.9191585289939 1621.1672829419902 1620.8781507684282 1622.5697585289968 1621.2473585290381 1626.1101585290153 1622.5583585289965 1621.1413585289947 1628.7459585290294 1628.1821585290152 1683.3821585290152 1623.2071585290153 1625.6955585290334 1643.8885585289959 1649.5701585289976 1621.86511745329 1622.9751585290153 1664.899758529038 1685.360158529035 2131.244958529031 1636.9487585289985 1623.9863585290007 1629.2261585290153 1620.9510829419862 1650.1437585290382 1620.6465982734596)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 7.799999999999997 30.80000000000001 57.799999999999955 0.20000000000000284 0.5999999999999996 1.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.444
Average program size in population (points): 44.442
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 179
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.144
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 264000
Number of point (instruction) evaluations so far: 343747140
--- Timings ---
Current time: 1481491938556 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 263
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 264
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 264
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44360.675615450185
Median total errors in population: 357.4
Error averages by case: (1452.1593805150064 1455.4029805149873 1451.0953805150064 1457.5583805150004 1452.9393805149878 1451.1267805150248 1450.8381805150125 1452.5727805149993 1451.1867805150262 1456.0933805150064 1452.9329805149907 1451.4465805149882 1458.7563805150116 1461.2333805150063 1515.761380515006 1453.2133805150063 1455.7429805150218 1474.418980515 1514.7083805149898 1451.8523805150064 1453.0613805150065 1496.1139805150262 1527.2529805150245 1898.8661805150216 1467.3525805149914 1454.105180515002 1460.2153805150065 1450.9013805150125 1481.179980515026 1450.5863805149877)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 26.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.769
Average program size in population (points): 44.769
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 180
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.167
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 265000
Number of point (instruction) evaluations so far: 345060210
--- Timings ---
Current time: 1481491942295 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 264
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 265
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 265
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46249.812129797996
Median total errors in population: 357.4
Error averages by case: (1512.1134128480826 1515.3970128480594 1511.0932717280746 1517.7687638353152 1512.9033713770757 1511.0845763946845 1510.8111763946772 1512.5182128480687 1511.174012848106 1516.010576192444 1512.4717494209804 1511.858022240706 1518.7957007514121 1519.6683107757633 1576.061049648631 1513.2509926810458 1515.559345199851 1534.326654319054 1597.670377449762 1511.8444128480826 1512.9983221455095 1555.7664717280982 1581.5489065084548 2034.4631511082832 1526.499658100051 1514.1124234898236 1519.8685451998326 1510.8681763946768 1540.7445766833516 1510.5608957900317)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 45.0 1.0 0.1999999999999993 1.3999999999999986 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.14030230586813974 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.688
Average program size in population (points): 44.682
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 175
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.17
Error (vector) diversity:			 0.171
--- Run Statistics ---
Number of program evaluations used so far: 266000
Number of point (instruction) evaluations so far: 346370850
--- Timings ---
Current time: 1481491945814 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 265
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 266
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 266
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 vector_integer_subvec integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_subvec vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42590.82803420434
Median total errors in population: 357.4
Error averages by case: (1392.2907593502807 1395.6519593502603 1391.2147593502807 1397.7835593502764 1392.9445593502605 1391.2413554651878 1390.9835881408026 1392.6423593502761 1391.3153593503018 1396.5057593502806 1392.8113593502642 1391.633959350262 1398.7569593502856 1400.9437593502807 1460.5177593502808 1393.3967593502807 1395.7859593502972 1414.9297593502752 1451.789359350265 1391.9457593502807 1393.0437593502807 1436.2137593503016 1476.7613593502992 1854.3793593502955 1407.9891593502657 1394.1735593502758 1399.7137593502807 1391.0299881408023 1421.7359593503024 1390.7019593502614)
Error minima by case: (1.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11439525852354915 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 41.0 1.0 0.1999999999999993 2.3999999999999986 0.7999999999999972 1.0 0.0 1.7999999999999972 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.91
Average program size in population (points): 44.91
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 184
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.174
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 267000
Number of point (instruction) evaluations so far: 347688150
--- Timings ---
Current time: 1481491949469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 266
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 267
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 267
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44913.78681862621
Median total errors in population: 357.4
Error averages by case: (1472.135318577686 1475.31654760099 1471.2614596976941 1477.4160395306494 1472.8694186219482 1471.1527403023265 1470.8775817732997 1472.6415011686686 1471.2397011687012 1476.0133098204844 1472.7020165001707 1471.1382395306366 1478.6945011686837 1479.7705996282882 1537.295822959687 1473.2412106849406 1476.03713911321 1494.4473576253633 1501.710263772526 1471.9063011686787 1473.1173011686788 1515.6893033217896 1542.8979660633559 1909.7646442510559 1488.0846395306398 1474.1128182267012 1479.2982165001895 1470.9369817732993 1501.4023762072086 1470.6155011686583)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 4.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 0.20000000000000284 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 18.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.617
Average program size in population (points): 44.613
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 176
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.182
Error (vector) diversity:			 0.184
--- Run Statistics ---
Number of program evaluations used so far: 268000
Number of point (instruction) evaluations so far: 348996660
--- Timings ---
Current time: 1481491953062 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 267
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 268
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 268
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup float_div integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50385.599687638336
Median total errors in population: 357.4
Error averages by case: (1651.7401585290152 1655.1915585289917 1651.5271585290152 1657.8521585290018 1652.815158528992 1651.024841471008 1650.9100414710013 1652.3843585289985 1651.10775852904 1655.9681585290152 1653.1215585289954 1651.411958528993 1657.6489585290137 1659.0401585290153 1716.3151585290152 1653.1861585290153 1656.0249585290346 1674.0679585289975 1712.1645585289957 1651.9801585290152 1653.1121585290152 1694.6421585290398 1722.9961585290366 2136.8873585290307 1667.3381585289976 1653.708558529003 1659.4671585290153 1650.8916414710009 1680.5897585290404 1650.4836414709614)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 46.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 14.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.429
Average program size in population (points): 44.427
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 198
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.187
Error (vector) diversity:			 0.188
--- Run Statistics ---
Number of program evaluations used so far: 269000
Number of point (instruction) evaluations so far: 350299530
--- Timings ---
Current time: 1481491956683 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 268
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 269
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 269
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup float_div integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46491.558287638334
Median total errors in population: 352.2
Error averages by case: (1521.5281585290152 1525.6165585289903 1522.0671585290152 1527.9005585290051 1523.0743585289915 1521.3080414710084 1531.268841470997 1533.1959585290026 1531.3639585290412 1526.3251585290152 1522.8679585289935 1521.564758528991 1537.1437585290093 1528.8641585290152 1588.3961585290153 1523.5151585290153 1525.8851585290363 1544.2887585290018 1550.476758528995 1532.3121585290153 1533.3271585290152 1565.7479585290414 1598.4983585290381 1959.8729585290341 1537.894758528995 1523.3951585290054 1529.8261585290152 1531.2058414709968 1552.127558529042 1520.6988414709604)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 0.3999999999999986 2.799999999999997 1.0 0.0 7.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 14.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.848
Average program size in population (points): 44.844
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 398
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 398
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.165
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 270000
Number of point (instruction) evaluations so far: 351614970
--- Timings ---
Current time: 1481491960264 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 269
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 270
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 270
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction 5} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 vector_integer_subvec integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_subvec vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup 5 integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 6.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 7.4 3.0 46.0 3.0 3.8000000000000007 28.4 29.200000000000003 2.0 3.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 352.2
Mean: 11.74
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50983.1626
Median total errors in population: 352.2
Error averages by case: (1671.334 1675.3577999999725 1672.145 1677.8059999999807 1672.9401999999736 1671.1996000000256 1671.1828000000212 1672.8179999999777 1671.254800000028 1676.339 1672.7579999999768 1671.5453999999747 1676.9149999999809 1679.403 1732.513 1673.407 1675.637200000022 1694.1043999999754 1732.8119999999792 1672.229 1673.426 1714.8406000000282 1743.626600000024 2157.300400000016 1685.7867999999798 1673.368599999983 1679.041 1671.1108000000213 1700.3552000000286 1670.6053999999738)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 2.0 44.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.55
Average program size in population (points): 44.548
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 424
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 424
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.166
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 271000
Number of point (instruction) evaluations so far: 352921470
--- Timings ---
Current time: 1481491963805 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 270
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 271
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 271
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52764.96539743972
Median total errors in population: 352.2
Error averages by case: (1731.3541373175015 1735.4229419124742 1732.0775390440215 1737.5675899076318 1732.8992599304815 1731.2328219860137 1731.2181805150278 1732.9641805149838 1731.290580515031 1736.1694675697554 1732.6083394392606 1731.5587390439985 1736.539339044003 1738.7494865183426 1797.2246853256272 1733.2512306377967 1735.9167235284272 1753.5586952997958 1759.6457390440016 1732.2433805150063 1733.2253805150065 1774.4195096092428 1806.1979284892416 2225.9781112171413 1747.5289899076322 1732.9786712175617 1739.2413394392809 1731.146180515028 1760.1225391079374 1730.6336898124098)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 0.0 6.0 0.0 0.1999999999999993 1.3999999999999986 2.799999999999997 0.0 0.0 3.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.10929742682568167)
Average genome size in population (length): 43.396
Average program size in population (points): 44.392
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 416
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 416
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.169
Error (vector) diversity:			 0.172
--- Run Statistics ---
Number of program evaluations used so far: 272000
Number of point (instruction) evaluations so far: 354223350
--- Timings ---
Current time: 1481491967392 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 271
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 272
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 272
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction float_sin} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 float_sin integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43968.40336772824
Median total errors in population: 352.2
Error averages by case: (1441.2589589242746 1445.346958924248 1442.0359589242746 1447.3029589242597 1442.8327589242492 1441.0305589242994 1440.9829589242918 1442.5377589242578 1441.0919589243017 1445.8929589242746 1442.4101589242523 1441.1471589242503 1446.6009589242597 1449.1209589242746 1506.0819589242747 1443.1389589242747 1445.5873589242947 1464.5009589242568 1472.2281589242534 1442.0869589242748 1443.1339589242746 1486.0707589243016 1508.9635589242982 1845.036158924293 1457.039358924255 1442.7215589242608 1449.2169589242746 1440.928958924292 1471.6201589243024 1440.4545589242493)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.15892427466313847 0.3589242746631385 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 2.3999999999999986 2.799999999999997 0.0 0.0 15.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.5999999999999996 1.0 0.3589242746631385 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.851
Average program size in population (points): 44.848
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 411
Genome diversity (% unique Plush genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 411
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.155
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 273000
Number of point (instruction) evaluations so far: 355538880
--- Timings ---
Current time: 1481491970952 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 272
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 273
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 273
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup float_div integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44439.0826
Median total errors in population: 352.2
Error averages by case: (1451.392 1455.3409999999776 1452.137 1458.2427999999868 1453.014999999978 1451.1684000000218 1451.1236000000133 1453.123799999985 1451.2150000000238 1456.757 1452.9681999999818 1451.5861999999784 1456.754199999988 1460.574 1518.63 1453.463 1455.733200000017 1474.3945999999853 1484.7683999999829 1452.217 1453.369 1495.6146000000235 1531.4574000000205 2001.1284000000148 1467.5085999999837 1453.3307999999884 1459.478 1451.0628000000133 1480.9582000000241 1450.570399999978)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 1.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 2.0 0.0 5.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.203
Average program size in population (points): 45.203
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 366
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 366
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.164
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 274000
Number of point (instruction) evaluations so far: 356864970
--- Timings ---
Current time: 1481491974550 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 273
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 274
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 274
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51139.26110407486
Median total errors in population: 352.2
Error averages by case: (1641.2787568024953 1645.110956802473 1642.0847568024953 1647.596356802478 1643.0395568024742 1641.1997568025158 1641.198756802514 1643.0051568024762 1641.2577568025185 1646.2647568024954 1642.8531568024766 1641.6829568024755 1646.8237568024856 1651.7787568024953 1710.8617568024954 1643.4637568024953 1645.509356802506 1663.8135568024745 1700.0613568024785 1642.2347568024954 1643.1837568024953 1684.8943568025188 1730.2803568025142 3156.124756802472 1658.0445568024797 1643.0499568024816 1649.4367568024954 1641.1219568025142 1671.413356802519 1640.5915568024739)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 2.0 0.0 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.488
Average program size in population (points): 44.484
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 320
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.166
Error (vector) diversity:			 0.171
--- Run Statistics ---
Number of program evaluations used so far: 275000
Number of point (instruction) evaluations so far: 358169610
--- Timings ---
Current time: 1481491978103 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 274
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 275
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 275
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46546.74638022333
Median total errors in population: 352.2
Error averages by case: (1521.3657193407778 1524.7745193407557 1522.1867193407777 1528.1903193407668 1523.0579193407568 1521.2343193407978 1521.2439193407884 1522.9353193407653 1521.3023193408003 1526.8637193407778 1522.7417193407584 1521.6197193407577 1527.399119340778 1531.1247193407778 1589.7947193407776 1523.5247193407777 1524.5453193407773 1544.1955193407641 1581.7551193407605 1522.2857193407776 1522.7827193407777 1565.4939193407997 1608.4075193407982 2044.1585193407952 1537.990319340761 1523.4385193407693 1529.6607193407776 1521.1599193407883 1550.9099193408006 1520.6031193407573)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 1.2000000000000002 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 45.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 11.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.964
Average program size in population (points): 44.962
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 234
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.175
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 276000
Number of point (instruction) evaluations so far: 359488530
--- Timings ---
Current time: 1481491981679 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 275
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 276
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 276
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48707.28710939577
Median total errors in population: 346.79999999999995
Error averages by case: (1591.2413689951206 1594.1629689950973 1592.0096182267093 1597.8077689951044 1592.9053689950983 1591.0685817733133 1601.0483403023254 1602.7672596976734 1601.144059697719 1596.3883689951208 1592.4825689950997 1591.4629689950987 1608.1024596977086 1618.1083689951208 1745.8743689951207 1593.1523689951207 1593.3169689951044 1613.9637689950991 1621.2133689951024 1602.120459697694 1601.938459697694 1635.2513689951454 1662.1383689951442 2056.9529689951387 1606.1491689951024 1593.0067504002527 1599.4863689951208 1600.9793403023252 1620.574368995146 1590.468568995098)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 1.7999999999999998 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 13.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.14030230586813974 19.799999999999997 0.10929742682568167)
Average genome size in population (length): 43.815
Average program size in population (points): 44.812
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 440
Genome diversity (% unique Plush genomes):	 0.422
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 440
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.155
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 277000
Number of point (instruction) evaluations so far: 360802980
--- Timings ---
Current time: 1481491985245 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 276
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 277
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 277
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction float_sin} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 float_sin integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_sin vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup float_div integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47829.82859999999
Median total errors in population: 346.79999999999995
Error averages by case: (1571.327 1574.1439999999764 1572.072 1567.7629999999883 1562.8923999999774 1571.1118000000213 1571.1116000000127 1562.812399999986 1571.168800000024 1566.086 1562.3757999999796 1561.4869999999783 1578.263800000012 1569.363 1624.862 1563.259 1573.2165999999802 1594.1541999999824 1592.2187999999817 1572.171 1571.856 1605.2128000000243 1637.1916000000208 2092.5998000000163 1577.049199999982 1562.8819999999885 1569.02 1571.0286000000126 1590.6188000000245 1570.5095999999783)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.935
Average program size in population (points): 44.935
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 483
Genome diversity (% unique Plush genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 483
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.144
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 278000
Number of point (instruction) evaluations so far: 362121030
--- Timings ---
Current time: 1481491988847 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 277
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 278
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 278
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49478.03439241001
Median total errors in population: 346.79999999999995
Error averages by case: (1621.2174425922753 1624.0995850398392 1622.078 1627.869137313695 1622.8744425922516 1621.0984000000233 1621.0928000000192 1622.6203999999802 1621.1522000000248 1626.4465274985278 1622.7498407712355 1621.4679553933622 1628.1863369788837 1629.555117214931 1686.5716101803132 1623.294536978867 1623.0964484105095 1643.8911574077038 1650.9331645794803 1622.137 1621.9431850398632 1665.0281425465678 1693.8413871733987 2133.082436893534 1636.9115952003942 1622.9729389939416 1629.1607628390557 1621.0170000000192 1651.1504407712805 1620.4943999999766)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 0.1850398632615189 13.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.62
Average program size in population (points): 44.617
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 439
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 439
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.147
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 279000
Number of point (instruction) evaluations so far: 363429630
--- Timings ---
Current time: 1481491992482 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 278
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 279
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 279
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_first} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup vector_integer_first integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47379.67912221609
Median total errors in population: 346.79999999999995
Error averages by case: (1551.3270111783538 1553.9880647940154 1552.121011178354 1557.741011178336 1552.8932111783315 1551.169585507366 1551.1619855073632 1552.758528097626 1551.2629280976703 1556.0570111783538 1552.7558111783344 1551.986411178332 1558.281298784487 1559.6920111783538 1616.5080111783536 1553.333011178354 1553.4718111783343 1574.3110111783312 1585.074411178336 1552.2111501218462 1552.1363280976466 1595.2068111783776 1628.5424111783752 2053.914811178369 1566.7652111783373 1553.0842111783372 1559.3100111783538 1551.0898148205392 1580.9652111783782 1550.5590148204974)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.37129515111340816 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 6.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.5712951511134081 0.20000000000000284 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.866
Average program size in population (points): 44.865
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 410
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 410
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.156
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 280000
Number of point (instruction) evaluations so far: 364745610
--- Timings ---
Current time: 1481491996091 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 279
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 280
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 280
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43418.05855001302
Median total errors in population: 346.79999999999995
Error averages by case: (1421.2693805150063 1424.1133285519957 1422.0903805150065 1427.7272523156487 1422.8891850398418 1431.1004000000212 1421.0838000000106 1432.6183999999864 1431.1800000000226 1426.0694523156594 1422.2771172149119 1422.0030993677376 1438.4134993677699 1428.691117214931 1483.4783805150064 1423.2131425465432 1422.9395141746102 1444.8563425465295 1452.30592749851 1422.174 1431.7983516391726 1466.1119285520397 1492.8109850398828 1815.7344118469318 1436.4292106765702 1422.865138993949 1429.4631335264069 1421.0158000000106 1450.8566700382805 1430.479199999979)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 1.0 6.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 1.0 0.0 7.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.004
Average program size in population (points): 45.003
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 440
Genome diversity (% unique Plush genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 440
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 281000
Number of point (instruction) evaluations so far: 366065730
--- Timings ---
Current time: 1481491999682 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 280
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 281
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 281
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57445.4844
Median total errors in population: 346.79999999999995
Error averages by case: (1891.186 1893.914799999974 1891.939 1897.3489999999756 1892.761999999975 1890.9886000000245 1890.9572000000267 1892.7873999999729 1891.0372000000266 1895.887 1892.3663999999783 1891.4649999999763 1898.2880000000227 1898.73 1951.242 1893.139 1892.7607999999782 1913.3561999999708 1921.2035999999796 1892.005 1891.741 1933.447600000026 1964.1742000000227 2285.0164000000073 1905.6641999999815 1892.8187999999782 1899.042 1890.8962000000267 1918.902200000027 1890.417599999975)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 6.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.223
Average program size in population (points): 44.218
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 387
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.145
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 282000
Number of point (instruction) evaluations so far: 367362420
--- Timings ---
Current time: 1481492003211 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 281
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 282
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 282
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48553.07041466348
Median total errors in population: 346.79999999999995
Error averages by case: (1591.213653643621 1594.0292536435986 1601.963653643621 1597.9843622556139 1592.9632536435995 1591.0256536436418 1590.988453643637 1592.8938536436037 1601.0802536436433 1596.2023336032314 1592.6560536436011 1591.5864536436004 1608.0976536436335 1599.332653643621 1654.9686536436209 1593.312653643621 1593.2293350732073 1613.8452536436037 1620.1452510831782 1602.0936536436209 1591.7996536436208 1635.1920536436444 1660.6548819693785 2034.548235859588 1607.0988943634084 1593.0622533550613 1599.2829255442327 1600.9278536436368 1620.4436686841361 1590.4476536435993)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 8.399999999999999 2.799999999999997 2.0 1.0 13.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.059
Average program size in population (points): 45.055
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 385
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 385
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.157
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 283000
Number of point (instruction) evaluations so far: 368684190
--- Timings ---
Current time: 1481492006771 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 282
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 283
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 283
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51763.59473176788
Median total errors in population: 346.79999999999995
Error averages by case: (1701.302 1704.2083999999766 1702.1 1707.7261999999805 1702.9613999999767 1701.1236829419922 1701.0884829419929 1702.7987999999764 1701.1714000000245 1706.018 1702.5391999999795 1701.7335999999773 1707.94720000002 1709.543 1766.823 1703.295 1702.99639999998 1723.8257999999748 1731.3967999999818 1702.137 1702.109 1745.0916000000243 1762.3938000000214 2110.0046000000125 1716.5043999999837 1703.0013999999824 1709.186 1701.0274829419927 1731.0238000000247 1700.5172829419464)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 46.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.0 4.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 1.2000000000000028 0.04147098480789646)
Average genome size in population (length): 43.819
Average program size in population (points): 44.819
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 348
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.168
Error (vector) diversity:			 0.17
--- Run Statistics ---
Number of program evaluations used so far: 284000
Number of point (instruction) evaluations so far: 369998760
--- Timings ---
Current time: 1481492010357 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 283
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 284
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 284
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50306.6282143789
Median total errors in population: 346.79999999999995
Error averages by case: (1581.1944255991207 1584.1516255990966 1581.9954255991208 1587.837025599106 1582.9496255990966 1580.8885744009033 1580.8105744008967 1582.671225599103 1580.9388255991466 1586.0454255991208 1582.5324255991002 1581.3704255990979 1587.7908255991351 1590.1944255991207 1691.4424255991207 1583.2604255991207 1583.0660255991002 1603.9242255991012 1626.0242255991009 1581.9244255991207 1581.781425599121 1627.3838255991466 1641.548025599143 4070.80982559909 1595.791225599102 1582.784825599106 1589.2844255991208 1580.7705744008967 1615.125225599147 1580.336225599096)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.174400879193934 0.6000000000000001 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.174400879193934 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.21
Average program size in population (points): 45.206
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 344
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 344
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.15
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 285000
Number of point (instruction) evaluations so far: 371325060
--- Timings ---
Current time: 1481492013996 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 284
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 285
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 285
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup float_div integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59298.49073230808
Median total errors in population: 346.79999999999995
Error averages by case: (1901.2567596503059 1903.8690918238392 1901.9896011212907 1907.7769521085133 1902.8079596502816 1901.0467988787332 1901.0211988787362 1902.8558011212624 1901.1175159367654 1906.092764465652 1902.3477376941871 1901.5230105139124 1908.0221508334726 1917.0554990489713 2014.797237921839 1903.2291809542537 1902.9123644656318 1923.1238425922456 1932.8989657229688 1902.0896011212906 1901.88271593674 1943.3484600013078 2235.4206947816588 3516.96013938147 1919.2196463732585 1902.6637451423794 1909.8987334730407 1900.9583988787365 1929.832364956561 1900.4717988786856)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 9.600000000000001 2.799999999999997 0.4425922753450977 0.0 0.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.324
Average program size in population (points): 44.319
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 326
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.143
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 286000
Number of point (instruction) evaluations so far: 372624780
--- Timings ---
Current time: 1481492017574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 285
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 286
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 286
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rot vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49442.46060579221
Median total errors in population: 346.79999999999995
Error averages by case: (1621.3111335264073 1624.1319335263822 1622.0711335264073 1627.6811335263922 1622.8669335263837 1621.1249335264304 1621.1235335264248 1622.7269335263882 1621.1811335264329 1626.2551335264072 1622.4395335263853 1621.711333526384 1628.2737335264226 1630.3111335264073 1689.0431335264072 1623.262133526407 1623.3389335263855 1644.1187335263883 1653.1203335263872 1622.1771335264073 1622.0761335264071 1665.0731335264322 1706.7247335264287 2078.577533526425 1637.1315335263873 1622.8881335263923 1629.271133526407 1621.0465335264248 1650.8885335264326 1620.5131335263834)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 1.7999999999999972 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.955
Average program size in population (points): 44.955
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 346
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 346
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.138
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 287000
Number of point (instruction) evaluations so far: 373943430
--- Timings ---
Current time: 1481492021191 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 286
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 287
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 287
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51901.411149716856
Median total errors in population: 346.79999999999995
Error averages by case: (1701.3696372279246 1704.0282372279019 1702.0566372279245 1708.1332372279107 1702.9966372279025 1701.2605954477265 1701.242395447722 1703.4138372279062 1701.3660372279485 1706.9786372279245 1703.066037227906 1702.0818372279032 1708.168837227938 1711.0836372279246 1767.3776372279247 1703.5296372279245 1703.7278372279063 1723.9742372279043 1761.8354372279075 1702.2536372279246 1702.0876372279245 1744.776037227948 1794.951437227945 2176.4696372279373 1718.1404372279092 1703.3062372279105 1709.4016372279245 1701.176395447722 1730.5226372279487 1700.6343954476818)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.2810603968150476 0.6810603968150477 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 1.0 0.8810603968150477 8.799999999999997 26.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 4.799999999999997 0.16017028665036603)
Average genome size in population (length): 43.829
Average program size in population (points): 44.825
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 332
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 332
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.162
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 288000
Number of point (instruction) evaluations so far: 375258300
--- Timings ---
Current time: 1481492024787 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 287
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 288
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 288
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_sin} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_sin in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec in1 integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52203.13666908447
Median total errors in population: 346.79999999999995
Error averages by case: (1711.2563018764117 1713.9675657820244 1712.0429022899693 1717.7842150910542 1712.8677507038617 1711.0400171054418 1711.0302596977206 1712.7846596976667 1711.0996596977193 1716.2292225367498 1712.4092402126792 1711.5266150910556 1718.146859697716 1719.621454898106 1772.9421396573046 1713.2433081082233 1713.2837882496906 1733.7153752462116 1741.3315858975748 1712.082459697694 1711.821459697694 1754.3711411273239 1785.3045529451156 2253.7117092793496 1726.717615091059 1713.0082447375346 1718.8018402127002 1710.9572596977207 1739.5842203234965 1710.4532447375336)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 1.2000000000000002 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 8.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.646
Average program size in population (points): 44.646
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 318
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 318
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.146
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 289000
Number of point (instruction) evaluations so far: 376567680
--- Timings ---
Current time: 1481492028448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 288
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 289
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 289
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47369.320500442846
Median total errors in population: 346.79999999999995
Error averages by case: (1551.229043713566 1554.007285184532 1552.0199758871238 1557.7038281979385 1552.8156437135474 1550.9979148154678 1550.9472241128929 1552.537885184534 1551.0610851845702 1556.136895826304 1552.7404281979364 1551.6228348966938 1558.1508851845624 1560.7231475594044 1621.0291400713902 1553.188043713566 1553.4539646000342 1573.9999833961845 1579.8564067355396 1552.0438441088254 1551.9058851845507 1595.7521440645628 1615.3623788449204 2057.096317828863 1567.2767751801423 1552.940173087854 1559.2549722392998 1550.8971562864508 1582.14352262612 1550.4257148154309)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.4425922753450977 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.001
Average program size in population (points): 44.998
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 301
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.162
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 290000
Number of point (instruction) evaluations so far: 377887710
--- Timings ---
Current time: 1481492032067 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 289
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 290
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 290
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54435.23003274465
Median total errors in population: 346.79999999999995
Error averages by case: (1761.2314596976942 1764.0564596976706 1761.999459697694 1757.529459697674 1752.8860596976708 1761.0349403023286 1761.0183403023277 1752.6350596976717 1761.0954596977185 1756.224459697694 1752.6252596976728 1751.8224596976727 1768.0122596977126 1759.966459697694 1813.785459697694 1753.316459697694 1763.3782596976757 1783.5230596976708 1812.0428596976758 1762.065459697694 1762.095459697694 1794.2406596977185 1827.425459697715 3160.1916596976625 1766.7506596976773 1753.0388596976768 1759.026459697694 1760.9503403023277 1780.8096596977186 1760.451659697671)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 0.20000000000000284 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.861
Average program size in population (points): 44.857
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 271
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 291000
Number of point (instruction) evaluations so far: 379203540
--- Timings ---
Current time: 1481492035687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 290
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 291
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 291
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55294.52378918756
Median total errors in population: 346.79999999999995
Error averages by case: (1821.1919142643944 1823.8539156699183 1821.9749142643943 1827.5677807024351 1822.8146857190097 1821.0430440328169 1821.0394767084467 1822.3542306021843 1821.1026306022338 1825.9477807024582 1822.083736510237 1821.3564272316546 1828.1362272316971 1830.501536510258 1882.845585910011 1823.0698595646932 1822.5971593951317 1843.5008595646675 1849.6634173014377 1822.0916306022089 1821.76479153068 1864.019115669967 1892.568685719056 2164.4836024052324 1834.7196537565308 1822.3408353488157 1828.8128783693846 1820.9664767084466 1849.643032026073 1820.4679045630248)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.9805150062465864 0.24259227534509775 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 14.399999999999999 2.799999999999997 1.3805150062465863 0.4425922753450977 11.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.013927312313192886)
Average genome size in population (length): 43.436
Average program size in population (points): 44.433
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 262
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.136
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 292000
Number of point (instruction) evaluations so far: 380506620
--- Timings ---
Current time: 1481492039303 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 291
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 292
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 292
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50099.387200000005
Median total errors in population: 346.79999999999995
Error averages by case: (1641.254 1644.1473999999766 1642.048 1647.872399999982 1642.8659999999763 1641.1286000000232 1641.1390000000213 1642.8627999999778 1641.1606000000247 1646.309 1642.7017999999791 1641.6351999999777 1648.1802000000177 1651.919 1710.266 1643.287 1643.1741999999813 1663.9647999999775 1670.7713999999823 1642.152 1642.052 1685.0770000000246 1723.833000000021 2157.352400000012 1657.4235999999837 1642.9333999999815 1649.182 1641.0530000000213 1671.1296000000248 1640.5117999999763)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 2.0 1.0 3.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.5999999999999996 1.0 0.4 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.725
Average program size in population (points): 44.725
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 231
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 231
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.159
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 293000
Number of point (instruction) evaluations so far: 381818370
--- Timings ---
Current time: 1481492042979 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 292
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 293
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 293
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank integer_yank vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52608.30940929813
Median total errors in population: 346.79999999999995
Error averages by case: (1721.2869990701865 1723.9452009297904 1722.0539990701866 1727.8050009297958 1722.9188009297911 1721.2289990702088 1721.239799070205 1723.2171990701677 1721.269399070211 1726.3960009298135 1722.4796009297934 1721.6296009297912 1728.359400929828 1731.1360009298135 1788.9100009298134 1723.4630009298135 1723.6104009297956 1743.7642009297927 1781.785400929795 1722.2139990701867 1722.0979990701867 1764.6808009298377 1812.5240009298343 2307.759000929819 1737.7464009297946 1722.9284009298005 1729.1350009298133 1721.149799070205 1750.965600929838 1720.609399070164)
Error minima by case: (0.0 0.7999999999999998 0.9990701867427099 0.5999999999999996 1.2000000000000002 0.2 0.4 0.59907018674271 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.9990701867427099 0.0 1.2000000000000028 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 4.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.001
Average program size in population (points): 44.997
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 226
Genome diversity (% unique Plush genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.156
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 294000
Number of point (instruction) evaluations so far: 383138400
--- Timings ---
Current time: 1481492046662 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 293
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 294
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 294
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction float_div} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall vector_integer_pushall integer_dec integer_div float_inc integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup float_div integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 0.1999999999999993 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 27.799999999999997 0.19999999999999996]
Total: 346.79999999999995
Mean: 11.56
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53347.47059999999
Median total errors in population: 346.79999999999995
Error averages by case: (1751.283 1754.0183999999754 1752.013 1757.3647999999835 1752.9553999999753 1750.996000000025 1750.9238000000184 1752.606999999981 1751.0360000000258 1755.873 1752.4111999999784 1751.481199999977 1758.033600000016 1759.468 1811.442 1753.279 1752.8747999999791 1773.6807999999812 1808.87699999998 1751.993 1751.662 1794.3016000000257 1817.3200000000231 2223.2264000000096 1765.8299999999817 1753.0281999999872 1758.889 1750.8788000000184 1779.2854000000266 1750.4381999999748)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 4.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 0.20000000000000284 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.697
Average program size in population (points): 44.695
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 233
Genome diversity (% unique Plush genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.467
Total error diversity:				 0.134
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 295000
Number of point (instruction) evaluations so far: 384449310
--- Timings ---
Current time: 1481492050258 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 294
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 295
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 295
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48435.3580086396
Median total errors in population: 346.79999999999995
Error averages by case: (1571.3269480365016 1574.1477122712406 1572.1425054442263 1578.1820645451007 1573.0407480364786 1571.2038727686197 1571.2359054442413 1583.1565054442092 1571.2893054442522 1576.5774547299304 1572.6975630913107 1571.8840826247638 1578.2389832248157 1580.951967313001 1639.0835374117164 1573.51746421027 1573.2472547299099 1594.091884639109 1603.1630918108826 1572.2725054442262 1572.1615054442263 1615.0844697779712 2120.3069144047963 2043.0183890892445 1587.7995802094808 1573.4682788705616 1579.4470607578098 1571.1429054442413 1600.908042532203 1570.5695054442026)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 1.0 10.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.956
Average program size in population (points): 44.953
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 227
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 227
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.154
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 296000
Number of point (instruction) evaluations so far: 385767990
--- Timings ---
Current time: 1481492053857 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 295
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 296
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 296
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53096.0914
Median total errors in population: 346.79999999999995
Error averages by case: (1741.263 1744.0529999999746 1742.056 1747.990399999979 1742.9763999999755 1751.2084000000243 1751.1796000000215 1753.0361999999775 1751.2386000000256 1746.344 1742.473599999979 1741.720199999976 1748.3074000000172 1749.23 1802.317 1743.36 1742.7065999999784 1763.608799999976 1799.268599999979 1752.172 1741.873 1784.8072000000257 1811.820200000023 2180.9664000000153 1755.8167999999812 1742.9645999999818 1749.456 1751.1116000000216 1770.1794000000261 1750.5863999999751)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.0 1.0 4.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.929
Average program size in population (points): 44.926
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 237
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 237
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.143
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 297000
Number of point (instruction) evaluations so far: 387085860
--- Timings ---
Current time: 1481492057460 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 296
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 297
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 297
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48517.88476604194
Median total errors in population: 346.79999999999995
Error averages by case: (1591.2633845233954 1594.0409447366844 1592.039182401616 1598.0509299460707 1593.1109470971865 1591.1496000000234 1591.1105092974449 1593.1001613974715 1591.2010000000257 1596.573915500425 1593.057474381445 1592.1187047925412 1598.1946000000155 1601.4859798652515 1660.4485138777272 1593.559458514233 1593.1137354966254 1613.8895155192552 1620.8555272238261 1592.151544021111 1591.905 1635.4326073718505 1667.609184038159 2030.0501625266625 1608.1393784862007 1593.1616847949545 1599.3341410974651 1591.046441471003 1620.1472283658088 1590.5433092974024)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 0.0 1.0 0.20000000000000284 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.10929742682568167)
Average genome size in population (length): 43.718
Average program size in population (points): 44.714
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 223
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.159
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 298000
Number of point (instruction) evaluations so far: 388397400
--- Timings ---
Current time: 1481492061132 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 297
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 298
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 298
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46141.537
Median total errors in population: 346.79999999999995
Error averages by case: (1511.254 1514.0633999999766 1512.018 1517.8475999999848 1513.1137999999762 1511.077800000024 1511.0404000000171 1513.0065999999829 1511.131400000025 1516.382 1513.3559999999798 1511.631599999977 1518.4312000000139 1518.402 1578.497 1513.52 1513.4241999999804 1534.1477999999827 1542.5759999999811 1512.111 1511.922 1555.5474000000258 1582.0332000000226 1983.7470000000171 1526.474999999982 1513.4371999999858 1519.399 1510.977200000017 1540.4676000000254 1510.4995999999753)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 3.3999999999999986 2.799999999999997 0.0 0.0 15.799999999999997 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 17.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.272
Average program size in population (points): 45.27
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 185
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.155
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 299000
Number of point (instruction) evaluations so far: 389725560
--- Timings ---
Current time: 1481492064731 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 298
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 299
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 299
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div vector_integer_first integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56609.6521511959
Median total errors in population: 346.79999999999995
Error averages by case: (1861.2381850398633 1864.0083850398385 1861.9701850398633 1867.2009850398372 1862.8153850398392 1860.9671850398868 1860.9421850398924 1862.3645850398323 1861.0291850398892 1865.7641850398632 1864.0371850398415 1861.38058503984 1867.7173850398897 1869.8001850398632 1924.006185039863 1863.0501850398632 1862.9383850398424 1883.237585039831 1889.1235850398432 1862.0281850398633 1861.8221850398631 1903.8869850398894 1926.4821850398862 2322.740985039865 1876.1033850398455 1862.5877850398372 1868.8491850398632 1860.8821850398924 1890.2715850398897 1860.4057850398394)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 38.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 14.200000000000003 29.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 3.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.582
Average program size in population (points): 44.578
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 296
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.164
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 300000
Number of point (instruction) evaluations so far: 391033020
--- Timings ---
Current time: 1481492068325 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 299
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 300
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 300
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 58.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 343.79999999999995
Mean: 11.46
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51280.135633899205
Median total errors in population: 343.79999999999995
Error averages by case: (1681.3009264028456 1684.1205264028235 1682.0869264028456 1687.6223264028351 1683.052926402824 1681.1436070074778 1681.126207007469 1682.721526402833 1681.1851264028683 1686.2249264028455 1685.7793264028269 1681.669126402825 1688.0519264028555 1690.7229264028456 1744.1849264028456 1683.3859264028456 1683.0637264028267 1703.8265264028325 1710.8067264028284 1682.1739264028456 1681.9589264028457 1725.1845264028684 1759.925126402865 2193.3211264028578 1696.4039264028293 1682.7307264028357 1689.4089264028457 1681.052207007469 1705.3617264028685 1680.5383264028242)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.2000000000000002 0.2 0.14030230586813974 1.4 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 1.0 3.0 1.0 0.1999999999999993 1.3999999999999986 2.799999999999997 1.0 0.0 10.799999999999997 30.80000000000001 57.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.212
Average program size in population (points): 45.21
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 489
Genome diversity (% unique Plush genomes):	 0.424
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 489
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.158
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 301000
Number of point (instruction) evaluations so far: 392359380
--- Timings ---
Current time: 1481492071938 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 300
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 301
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 301
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 6.3647434996032745E7
Median total errors in population: 343.79999999999995
Error averages by case: (1441.313459697694 1444.0136596976715 1442.134459697694 1447.8634596976822 1443.0492596976712 1441.1587403023273 1441.1439403023182 1442.6144596976815 1441.2064596977175 1446.273459697694 1445.982059697675 1441.8736596976735 1448.389859697705 1449.9544596976941 2098783.149459698 1443.392459697694 1443.5620596976753 1464.4744596976805 1502.3634596976758 1442.214459697694 1441.855459697694 1485.894059697718 1527.4392596977143 6.15078840610606E7 1457.906059697677 1442.8596596976818 1550.912459697694 1441.0679403023182 1466.334259697718 1440.5380596976722)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 2.200000000000003 30.80000000000001 31.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 3.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.331
Average program size in population (points): 45.329
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 523
Genome diversity (% unique Plush genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 523
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.153
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 302000
Number of point (instruction) evaluations so far: 393689310
--- Timings ---
Current time: 1481492075590 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 301
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 302
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 302
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56554.419200000004
Median total errors in population: 343.79999999999995
Error averages by case: (1861.312 1864.1519999999748 1862.063 1867.5849999999841 1862.9665999999754 1861.1436000000235 1861.1400000000192 1862.6021999999807 1861.186600000026 1866.327 1865.8497999999795 1861.630799999977 1867.8888000000175 1868.854 1924.723 1863.205 1862.9147999999782 1883.2637999999788 1889.0719999999803 1862.159 1861.909 1903.5430000000254 1937.0952000000214 2257.4392000000084 1876.3505999999832 1862.6161999999824 1869.111 1861.0652000000193 1884.7180000000262 1860.5327999999763)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 2.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 29.80000000000001 35.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.951
Average program size in population (points): 44.947
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 483
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 483
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.149
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 303000
Number of point (instruction) evaluations so far: 395007840
--- Timings ---
Current time: 1481492079194 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 302
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 303
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 303
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53625.96910910865
Median total errors in population: 343.79999999999995
Error averages by case: (1761.2798531580231 1763.9871069972603 1762.028187058101 1767.6213834102573 1762.8869069972602 1761.0173036444924 1760.9925036444945 1762.466896355504 1761.0864963555498 1766.337183410277 1765.7217757710087 1761.5754460676692 1767.964496355547 1770.4113224648463 1826.1314011661489 1763.208254884543 1763.3483757710083 1783.651142575907 1791.3906362861067 1762.0580963555278 1761.861096355528 1804.2002254497609 1833.0715086093146 2225.629053158031 1776.9530179065157 1762.7767069972629 1768.8686403766387 1760.9295036444946 1786.068484237065 1760.4461036444516)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 1.2000000000000002 0.2 0.4 2.4 0.8 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.10364447216801154)
Average genome size in population (length): 43.975
Average program size in population (points): 44.968
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 464
Genome diversity (% unique Plush genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 464
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.147
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 304000
Number of point (instruction) evaluations so far: 396327090
--- Timings ---
Current time: 1481492082845 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 303
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 304
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 304
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 137434.5730768742
Median total errors in population: 343.79999999999995
Error averages by case: (1831.4923011686788 1834.6985011686538 1832.3433011686789 1841.9547011686568 1833.1733011686542 1831.6255817733143 1831.6875817733137 1834.7311011686527 1831.622501168705 1841.5733011686789 1835.7927011686572 1839.7759011686553 1838.3447011686994 1864.9713011686788 1954.9623011686788 1835.1903011686788 1833.9191011686576 1853.7065011686527 1892.3483011686592 1832.5843011686788 1832.3293011686787 1948.5775011687058 2155.934301168695 83508.2133011674 1867.0155011686604 1834.251301168656 1842.7483011686788 1831.5495817733138 1856.6063011687054 1830.8501011686542)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.7999999999999998 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 0.0 1.0 12.200000000000003 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.807
Average program size in population (points): 44.805
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 408
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 408
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.164
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 305000
Number of point (instruction) evaluations so far: 397641300
--- Timings ---
Current time: 1481492086533 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 304
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 305
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 305
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55348.671238834235
Median total errors in population: 343.79999999999995
Error averages by case: (1811.3253435688785 1814.0677435688533 1812.1003435688785 1817.3533435688573 1812.9365435688533 1811.1598265108717 1811.1386265108697 1812.6567435688555 1811.2229435689042 1816.2283435688785 1815.5595435688565 1813.0787435688544 1818.3507435688969 1819.7013435688784 1869.9783435688785 1813.2823435688786 1812.9163435688588 1833.4015435688539 1841.258343568858 1812.1713435688785 1812.0563435688784 1854.3753435689034 1882.332743568902 2506.6533435688752 1826.142343568859 1812.7025435688593 1819.0943435688785 1811.0656265108696 1833.7987435689045 1810.5614265108236)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 2.0 1.0 15.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.648
Average program size in population (points): 45.646
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 276
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.173
Error (vector) diversity:			 0.176
--- Run Statistics ---
Number of program evaluations used so far: 306000
Number of point (instruction) evaluations so far: 398980740
--- Timings ---
Current time: 1481492090232 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 305
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 306
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 306
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54472.85304717852
Median total errors in population: 343.79999999999995
Error averages by case: (1791.3556021444783 1794.1650021444561 1792.0296021444783 1797.4272021444594 1792.7374021444555 1791.0299978555424 1790.986397855542 1792.4984021444568 1791.074802144501 1796.0316021444783 1795.546602144459 1791.4630021444577 1798.0122021444965 1800.2106021444783 1856.0836021444784 1793.0806021444785 1793.2494021444597 1813.5328021444552 1821.5158021444613 1792.0306021444783 1791.8936021444783 1833.8138021445013 1858.689202144498 2207.661602144486 1807.7386021444622 1792.70040214446 1798.8816021444784 1790.931397855542 1815.9974021445016 1790.4841978555003)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.2596976941318603 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.45969769413186023 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.05755321584639339)
Average genome size in population (length): 44.63
Average program size in population (points): 45.627
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 309
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 309
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.18
Error (vector) diversity:			 0.183
--- Run Statistics ---
Number of program evaluations used so far: 307000
Number of point (instruction) evaluations so far: 400319640
--- Timings ---
Current time: 1481492093872 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 306
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 307
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 307
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50890.1068004729
Median total errors in population: 341.79999999999995
Error averages by case: (1671.4474186219686 1674.3262186219483 1672.1634186219687 1677.2110186219559 1672.7852186219475 1671.0964992266004 1671.0374992265936 1672.4352186219544 1671.1282186219908 1675.7214186219687 1675.4320186219516 1671.3992186219486 1678.2696186219794 1680.3164186219688 1734.1494186219686 1673.1574186219686 1673.1158186219513 1693.9276186219536 1702.3402186219528 1672.1134186219688 1671.8304186219686 1714.8784186219907 1732.816018621988 2109.420818621982 1687.0244186219534 1672.7106186219562 1679.8724186219688 1670.9804992265936 1696.4894186219906 1670.5104186219482)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 6.399999999999999 2.799999999999997 2.0 1.0 11.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.123
Average program size in population (points): 46.117
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 389
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 389
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.159
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 308000
Number of point (instruction) evaluations so far: 401673330
--- Timings ---
Current time: 1481492097512 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 307
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 308
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 308
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56928.86172930213
Median total errors in population: 341.79999999999995
Error averages by case: (1831.389811587396 1834.1076115873734 1832.136811587396 1837.8406115873731 1832.7296115873733 1831.1704070074795 1841.1492070074812 1842.589011587373 1841.1986115874201 1837.041811587396 1835.6760115873772 1831.8214115873745 1847.9548115874184 1847.541811587396 1954.7608115873961 1833.4618115873961 1833.145011587376 1854.8810115873716 1867.0068115873783 1832.168811587396 1842.0398115873961 1873.5992115874194 1911.1636115874173 3356.0662115873583 1847.0092115873788 1832.757811587377 1838.9798115873962 1841.0792070074813 1855.8200115874201 1830.5750070074344)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.4425922753450977 0.4425922753450977 18.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.886
Average program size in population (points): 45.88
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 373
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 373
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.148
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 309000
Number of point (instruction) evaluations so far: 403019910
--- Timings ---
Current time: 1481492101195 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 308
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 309
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 309
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56769.88327918753
Median total errors in population: 341.79999999999995
Error averages by case: (1851.2870399630697 1854.2526399630422 1852.0530399630695 1857.7874399630407 1852.8792399630422 1851.1551600369576 1851.073160036962 1852.8230399630381 1851.172039963098 1856.3760399630696 1855.625639963045 1852.106239963044 1857.9886399630977 1858.9760399630695 1913.2470399630697 1853.3260399630697 1852.9334399630457 1873.1932399630348 1881.0648399630475 1852.0870399630696 1851.8090399630696 1893.8860399630973 2376.67723996307 2311.689039963075 1866.1866399630487 1853.0900399630418 1859.2240399630696 1851.007160036962 1874.3214399630986 1850.5855600369023)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 46.0 1.0 0.1999999999999993 2.6000000000000014 2.799999999999997 1.0 1.0 12.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 9.200000000000003 0.16003693029466148)
Average genome size in population (length): 44.426
Average program size in population (points): 45.422
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 355
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 355
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.14
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 310000
Number of point (instruction) evaluations so far: 404352690
--- Timings ---
Current time: 1481492104830 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 309
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 310
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 310
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61480.0934
Median total errors in population: 341.79999999999995
Error averages by case: (2021.416 2024.089799999977 2022.148 2027.478599999975 2022.830599999977 2021.1348000000223 2021.1186000000291 2022.5915999999693 2021.1762000000242 2026.307 2025.37359999998 2022.0955999999792 2028.0174000000236 2029.52 2085.753 2023.292 2022.8671999999806 2042.8027999999686 2051.2801999999824 2022.149 2021.901 2062.939600000024 2101.2378000000185 2536.0249999999946 2036.5187999999832 2022.9033999999751 2028.774 2021.0496000000292 2044.7476000000242 2020.554599999977)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 14.200000000000003 27.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.372
Average program size in population (points): 45.368
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 339
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 339
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.134
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 311000
Number of point (instruction) evaluations so far: 405683850
--- Timings ---
Current time: 1481492108503 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 310
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 311
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 311
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56985.802981982364
Median total errors in population: 341.79999999999995
Error averages by case: (1871.333459697694 1874.0912536435972 1872.0914161468365 1877.5169576594596 1872.8244161468122 1871.0406536436437 1870.998416146861 1872.4465576594557 1871.0752536436457 1876.268 1875.6384596976754 1871.6555999999775 1877.7974536436413 1879.958995574302 1934.574994373849 1873.2179899924965 1872.8201999999794 1893.204611295355 1930.4287111302426 1872.062459697694 1871.8916536436209 1913.5075874279585 1934.8954909486242 2379.022802156883 1887.0224921387912 1872.9985899924773 1878.655653643621 1870.944989992521 1895.331446097771 1870.4864161468129)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 5.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.355
Average program size in population (points): 45.351
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 329
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 329
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.162
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 312000
Number of point (instruction) evaluations so far: 407014500
--- Timings ---
Current time: 1481492112120 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 311
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 312
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 312
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59525.804582464945
Median total errors in population: 341.79999999999995
Error averages by case: (1961.2682794154982 1963.9330794154746 1961.9702794154982 1967.3626794154761 1962.7208794154742 1961.0842794155208 1961.0430794155232 1962.6436794154715 1961.1274794155229 1966.1672794154983 1965.3820794154783 1961.419479415476 1968.011279415519 1969.2472794154983 2022.2062794154983 1963.0542794154983 1963.4658794154793 1983.2024794154702 1991.5306794154792 1962.0632794154983 1961.9952794154983 2003.0920794155227 2035.3732794155198 2331.5616794155053 1976.8322794154797 1962.7212794154757 1968.5752794154982 1960.9850794155232 1985.2360794155227 1960.5282794154753)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 2.0 0.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.49
Average program size in population (points): 45.49
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 328
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 328
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.129
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 313000
Number of point (instruction) evaluations so far: 408349200
--- Timings ---
Current time: 1481492115805 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 312
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 313
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 313
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_yankdup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec vector_integer_yankdup integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53380.69441437889
Median total errors in population: 341.79999999999995
Error averages by case: (1751.3694255991209 1754.0924255990988 1752.0994255991209 1757.4480255991048 1752.741225599098 1751.0411744009004 1750.9797744008983 1752.3870255991 1751.0700255991437 1756.1664255991209 1755.5608255991024 1751.7576255991007 1758.0988255991363 1759.9164255991209 1815.0704255991209 1753.1304255991208 1753.4098255991032 1773.6188255990994 1781.8298255991035 1752.060425599121 1751.8884255991209 1794.6370255991435 1824.8594255991397 2269.6540255991276 1767.1944255991048 1752.7532255991036 1758.7614255991207 1750.9287744008982 1775.689825599144 1750.4794255990992)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.174400879193934 1.4 0.19999999999999996 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.174400879193934 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.776
Average program size in population (points): 45.77
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 326
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 326
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.147
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 314000
Number of point (instruction) evaluations so far: 409692480
--- Timings ---
Current time: 1481492119468 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 313
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 314
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 314
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54188.32632090332
Median total errors in population: 341.79999999999995
Error averages by case: (1781.3044542538141 1784.014860022344 1781.9720116615388 1787.6774944465865 1782.8694542537924 1781.1289883384823 1781.0999883384836 1782.6758116615154 1781.1708116615619 1786.2473122937806 1785.670060072049 1781.4208542537933 1787.7438600223866 1789.1955177458933 1843.2747110292967 1783.2488676549397 1782.680317745874 1803.4948542537888 1811.04286007205 1782.1360116615388 1781.6993633007114 1824.1095402135795 1849.1567988349366 2219.856117745905 1795.9239391600488 1782.5910266216529 1788.8335391600663 1781.0349883384838 1804.5129177459173 1780.5389883384398)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 2.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 4.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 3.799999999999997 0.18833846130371024)
Average genome size in population (length): 44.815
Average program size in population (points): 45.813
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 348
Genome diversity (% unique Plush genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.431
Total error diversity:				 0.147
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 315000
Number of point (instruction) evaluations so far: 411036930
--- Timings ---
Current time: 1481492123161 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 314
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 315
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 315
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54598.77943274466
Median total errors in population: 341.79999999999995
Error averages by case: (1771.274459697694 1774.0008596976672 1772.036459697694 1777.4726596976702 1772.6978596976667 1770.9841403023315 1770.961940302335 1772.3176596976632 1771.0546596977224 1776.217459697694 1775.501859697671 1773.1220596976696 1778.0986596977166 1779.442459697694 1834.724459697694 1773.227459697694 1773.1166596976711 1793.6100596976617 1800.0968596976747 1772.036459697694 1772.148459697694 1814.665059697722 1836.738859697718 2917.393059697682 1787.963059697675 1772.6116596976685 1778.707459697694 1770.897940302335 1795.2342596977226 1770.4244596976678)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.582
Average program size in population (points): 45.579
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 324
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.152
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 316000
Number of point (instruction) evaluations so far: 412374390
--- Timings ---
Current time: 1481492126838 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 315
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 316
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 316
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57488.182259579735
Median total errors in population: 341.79999999999995
Error averages by case: (1891.330221985991 1894.283221985965 1892.0272219859912 1897.0826219859655 1892.7464219859658 1891.1148219860147 1891.0994219860213 1892.343021985959 1891.1788219860175 1895.928221985991 1895.5592219859686 1891.5958219859685 1898.1098219860144 1899.677221985991 1954.316221985991 1893.169221985991 1893.1358219859687 1913.2646219859557 1946.7328219859717 1892.118221985991 1891.872221985991 1933.573821986017 1961.579421986012 2296.994021985992 1908.5928219859725 1892.734221985965 1899.2002219859912 1891.0324219860213 1915.2508219860172 1890.5392219859666)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 52.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.369
Average program size in population (points): 45.365
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 298
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.148
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 317000
Number of point (instruction) evaluations so far: 413705460
--- Timings ---
Current time: 1481492130558 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 316
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 317
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 317
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_shove integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58016.96724939542
Median total errors in population: 341.79999999999995
Error averages by case: (1881.3470295179739 1883.90162951795 1882.0380295179739 1887.7186295179486 1882.7680295179493 1901.0327704820497 1890.978770482054 1892.4486295179458 1901.0866295179994 1886.4360295179738 1885.5646295179536 1884.6856295179516 1908.052629517997 1892.8260295179737 1952.5920295179737 1883.3300295179738 1882.9042295179531 1903.144429517945 1914.1752295179542 1882.0170295179737 1901.9010295179737 1924.2418295179993 2401.7938295179715 2554.49622951798 1897.2564295179568 1882.8910295179503 1889.1730295179739 1890.932770482054 1904.7734295179998 1890.4595704820022)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 22.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 28.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.17048202608780394)
Average genome size in population (length): 44.071
Average program size in population (points): 45.068
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 300
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 300
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.149
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 318000
Number of point (instruction) evaluations so far: 415027590
--- Timings ---
Current time: 1481492134221 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 317
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 318
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 318
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55955.011742477735
Median total errors in population: 341.79999999999995
Error averages by case: (1841.2765515607248 1843.937951560702 1842.0045515607248 1847.646351560707 1842.8269515607014 1841.158551560747 1841.106608083028 1842.6362080829892 1841.1686080830327 1846.192551560725 1845.5517515607048 1841.567751560704 1847.888008083024 1849.3165515607247 1902.5445515607248 1843.2475515607248 1843.2203515607052 1863.2001515607033 1869.8265515607072 1842.1046080830097 1841.8946080830096 1883.968551560749 1917.6785515607448 2236.863551560736 1857.781151560708 1842.7999515607053 1849.1595515607248 1841.047608083028 1864.8125515607492 1840.5829515607022)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.008083009640765582 0.6000000000000001 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 44.0 2.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 3.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.008083009640765582 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.891
Average program size in population (points): 45.889
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 296
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 296
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.148
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 319000
Number of point (instruction) evaluations so far: 416374320
--- Timings ---
Current time: 1481492137884 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 318
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 319
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 319
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60551.82553316566
Median total errors in population: 341.79999999999995
Error averages by case: (1991.3657333112235 1994.1859333112004 1992.0787333112235 1997.4377333112 1992.6487333112004 1991.0730666887985 1991.0458666888037 1992.4001333111953 1991.1191333112474 1996.2747333112236 1995.3847333112042 1991.6931333112027 1997.8991333112474 1999.1037333112236 2057.2617333112235 1993.0337333112236 1993.0107333112044 2013.0853333111943 2021.440533311206 1992.0787333112235 1991.8977333112236 2033.034133311247 2071.7063333112437 2477.0205333112217 2006.800933311207 1992.5585333112017 1998.8987333112236 1990.9838666888038 2014.7983333112475 1990.5050670075002)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.19984062681853287 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 2.0 1.0 1.7999999999999972 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.19984062681853287 9.799999999999997 0.02542559329498939)
Average genome size in population (length): 44.01
Average program size in population (points): 45.0
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 279
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 279
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.139
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 320000
Number of point (instruction) evaluations so far: 417694620
--- Timings ---
Current time: 1481492141539 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 319
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 320
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 320
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_pop vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_pop vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61417.79852358768
Median total errors in population: 341.79999999999995
Error averages by case: (2001.3924425922753 2004.1217850398402 2002.074 2007.9393373136893 2002.7170425922516 2001.020600000022 2001.0062000000257 2002.3555999999724 2001.089600000025 2007.1175274985276 2005.557528551998 2002.0017553933617 2007.6884559934238 2012.6200400815978 2074.801610180313 2003.121536978867 2003.1509274985083 2022.9997574076951 2060.2635645794803 2002.038 2002.168 2042.7489425465676 2525.3323871733696 2567.817713771848 2016.9968529780806 2002.7731516391498 2008.4401335264072 2000.9402000000257 2025.0388302502731 2000.4649999999772)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.783
Average program size in population (points): 44.778
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 244
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.163
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 321000
Number of point (instruction) evaluations so far: 419008110
--- Timings ---
Current time: 1481492145203 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 320
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 321
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 321
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56785.13160631251
Median total errors in population: 341.79999999999995
Error averages by case: (1831.419257552412 1834.1174575523878 1832.1372575524122 1838.001457552393 1832.9074575523869 1831.1259424476107 1831.0749424476116 1832.5458575523871 1831.175427632164 1837.134257552412 1835.7760575523912 1833.3180575523907 1837.7830575524308 1843.094257552412 1901.718257552412 1833.265257552412 1833.4322575523913 1853.3038575523867 1872.0738575523933 1832.1082575524122 1832.1206276321386 1873.7718575524375 2354.0146575524154 2880.2230575524077 1847.2460575523946 1832.999057552392 1839.3022575524121 1831.0191424476118 1856.3482575524376 1830.5741424475652)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.8149601367384811 0.1850398632615189 3.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 11.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.643
Average program size in population (points): 45.642
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 233
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 322000
Number of point (instruction) evaluations so far: 420347400
--- Timings ---
Current time: 1481492148884 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 321
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 322
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 322
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57072.3451351299
Median total errors in population: 341.79999999999995
Error averages by case: (1861.4681758119725 1864.2471758119473 1862.0981758119724 1867.5927758119462 1862.7693758119474 1861.155024188052 1861.118224188056 1862.647575811943 1861.1595758119981 1866.4351758119724 1865.6655758119507 1861.6417758119483 1867.9669758119971 1869.0511758119724 1922.8811758119725 1863.1221758119725 1863.2393758119508 1883.3191758119408 1892.344175811952 1862.1071758119724 1861.9781758119725 1903.5863758119979 2390.681975811964 2318.776775811973 1876.6301758119528 1863.0547758119467 1868.8131758119725 1861.054024188056 1885.1625758119985 1860.5770914545121)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.2663667453928805 1.6 0.6421787176504223 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.8421787176504223 0.8421787176504223 12.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2663667453928805 19.799999999999997 0.1336332546071195)
Average genome size in population (length): 44.301
Average program size in population (points): 45.3
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 232
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 232
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.153
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 323000
Number of point (instruction) evaluations so far: 421676430
--- Timings ---
Current time: 1481492152562 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 322
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 323
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 323
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60882.014808566644
Median total errors in population: 341.79999999999995
Error averages by case: (2001.369955562168 2003.9980877356975 2002.0337970331525 2007.7083480203698 2002.7541555621394 2001.016038202184 2000.97183820219 2002.4139970331184 2001.054997033182 2006.8359603775139 2005.6749400465305 2001.860606425771 2007.5765467453411 2014.7836949608334 2068.635433833701 2003.2633768661158 2003.1072406571986 2022.7272385041015 2061.069561634828 2001.9957970331525 2001.9387970331525 2042.8788559131735 2071.1670906935306 2489.589735293341 2016.8312422851186 2002.908141054235 2008.6649293849025 2000.9168382021899 2025.801170204503 2000.4663970331242)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.3205845018010741 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.3205845018010741 13.799999999999997 0.0794154981989259)
Average genome size in population (length): 44.134
Average program size in population (points): 45.129
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 209
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.159
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 324000
Number of point (instruction) evaluations so far: 423000450
--- Timings ---
Current time: 1481492156206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 323
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 324
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 324
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_add} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (in1 integer_div integer_yank vector_integer_pushall vector_integer_rest float_add integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_dup integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_stackdepth vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_stackdepth integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56623.43034367747
Median total errors in population: 341.79999999999995
Error averages by case: (1861.4333312798929 1864.1352374935093 1862.084172750878 1867.4551149754948 1862.8180504535967 1861.003344689802 1860.9674713783404 1862.435505494363 1861.0695884363774 1866.328727332626 1865.664865679759 1861.8131399579302 1868.0452802774828 1869.9128205940583 1925.1248095514268 1863.1980908505857 1863.0492248334176 1883.3011524885856 1889.9444682962892 1862.037505494383 1861.9136316503962 1903.466205670976 1930.740985584979 2330.0171600349527 1876.7468127170189 1862.767781073224 1868.6156426888606 1860.9084713783404 1885.9686791915583 1860.4630713782988)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.03665572881693843 0.16334427118306158 1.4 0.04147098480789646 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 2.3999999999999986 2.799999999999997 1.0 0.0 7.799999999999997 29.80000000000001 39.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.16334427118306158 18.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.0
Average program size in population (points): 45.998
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 203
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.159
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 325000
Number of point (instruction) evaluations so far: 424350450
--- Timings ---
Current time: 1481492159813 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 324
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 325
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 325
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec in1 integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_concat vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57106.83748480024
Median total errors in population: 341.79999999999995
Error averages by case: (1881.238346511921 1883.9727465118983 1881.941346511921 1887.3197465119013 1882.7067465118973 1880.9176197852728 1880.8440197852738 1882.148746511896 1880.9741465119448 1886.108346511921 1885.2583465119003 1881.2191465119 1887.890746511939 1888.8427802147498 1941.5997802147497 1882.9773465119208 1882.6441465119008 1903.1191465118961 1909.4405802147326 1881.9383465119208 1881.720346511921 1923.8043802147733 1935.06138021477 2260.5441802147575 1895.3629802147334 1882.2929465118998 1888.7923465119209 1880.8070197852737 1904.9585802147735 1880.3911465118981)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.7999999999999998 0.2 0.036636664790277884 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 2.0 45.0 1.0 0.1999999999999993 4.383148585534805 2.799999999999997 2.0 1.0 10.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.036636664790277884 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.521
Average program size in population (points): 45.519
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 326000
Number of point (instruction) evaluations so far: 425686080
--- Timings ---
Current time: 1481492163456 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 325
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 326
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 326
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 vector_integer_yank vector_integer_swap vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_yank vector_integer_swap vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52775.87832223174
Median total errors in population: 341.79999999999995
Error averages by case: (1731.3815574077246 1734.0677574077015 1732.1465574077247 1737.3547574077063 1732.7061574077013 1731.1593574077467 1731.1573574077454 1732.4159574077032 1731.2083574077487 1736.1315574077246 1735.764957407705 1731.5223574077033 1738.172157407741 1740.1815574077248 1795.5855574077248 1733.0905574077246 1733.4373574077053 1753.856757407702 1761.2811574077073 1732.1645574077247 1732.1975574077246 1774.1317574077484 1804.4959574077452 2241.4845574077312 1749.1767574077076 1732.742557407706 1738.9485574077246 1731.0751574077453 1756.2687574077484 1730.5703574077024)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 11.600000000000001 2.799999999999997 1.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 3.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.194
Average program size in population (points): 46.191
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 202
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.157
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 327000
Number of point (instruction) evaluations so far: 427041900
--- Timings ---
Current time: 1481492167164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 326
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 327
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 327
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_swap integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54471.11710475829
Median total errors in population: 341.79999999999995
Error averages by case: (1771.36640151655 1773.9978015165264 1772.16240151655 1777.4422015165271 1772.8478015165256 1771.1679163320218 1771.1513163320246 1772.5784015165245 1771.2270015165745 1776.49240151655 1775.282001516529 1772.950801516528 1777.9748015165715 1782.15440151655 1843.97040151655 1773.27040151655 1773.18660151653 1794.1016015165217 1806.995801516531 1772.18840151655 1771.89840151655 1814.876001516574 2296.1500015165593 2310.4160015165544 1786.645401516531 1772.5816015165285 1779.04640151655 1771.0853163320246 1795.334601516575 1770.5745163319768)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 4.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 0.0 0.0 2.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.541
Average program size in population (points): 45.54
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 195
Genome diversity (% unique Plush genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.141
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 328000
Number of point (instruction) evaluations so far: 428378130
--- Timings ---
Current time: 1481492170857 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 327
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 328
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 328
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction in1} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec in1 integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec in1 integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64178.655442442934
Median total errors in population: 341.79999999999995
Error averages by case: (2111.433185039863 2114.004442592259 2112.147842178718 2117.4623997114327 2112.718385039847 2121.2562000000153 2111.2915425465667 2122.5143999999764 2121.3728000000165 2116.1964523156594 2115.289599711439 2111.5314993677434 2128.0592000000192 2120.3000969138507 2172.970839343301 2113.203185039863 2112.959128552001 2132.8759245275432 2139.921115300763 2112.2672910061915 2122.005 2152.2236421787306 2192.294293209524 2567.2868521396904 2126.2201153007595 2112.4132523156377 2118.674699367758 2111.2117850398868 2135.8884737038156 2120.661799999985)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 6.399999999999999 2.799999999999997 1.0 0.0 17.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.148
Average program size in population (points): 45.143
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 178
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.133
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 329000
Number of point (instruction) evaluations so far: 429702570
--- Timings ---
Current time: 1481492174527 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 328
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 329
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 329
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55902.292799999996
Median total errors in population: 341.79999999999995
Error averages by case: (1841.237 1843.9583999999763 1841.959 1847.4833999999757 1842.747599999976 1840.992400000023 1840.9188000000277 1842.3069999999698 1841.0212000000247 1846.276 1845.3955999999794 1841.4429999999788 1847.7966000000224 1849.735 1902.967 1843.108 1842.9909999999797 1863.2725999999682 1871.2791999999822 1841.987 1841.685 1884.0394000000244 1912.25820000002 2192.780800000007 1855.3173999999833 1842.499199999974 1848.807 1840.8758000000278 1864.7170000000249 1840.4371999999767)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 17.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.52
Average program size in population (points): 45.516
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 179
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 330000
Number of point (instruction) evaluations so far: 431038170
--- Timings ---
Current time: 1481492178172 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 329
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 330
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 330
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54200.80499256061
Median total errors in population: 341.79999999999995
Error averages by case: (1781.3187247638493 1784.0234829643275 1782.0456829643488 1787.305082964339 1782.7974487746574 1781.049640053347 1781.0019974610655 1782.6104403720587 1781.1114403720953 1786.1376829643486 1785.7092829643307 1781.7362829643305 1787.9732403720832 1789.7266829643488 1844.9676829643488 1783.1986829643488 1783.52328296433 1803.377082964334 1811.347482964333 1782.0626829643486 1781.9732403720734 1824.1538829643707 1857.4086487746963 2217.981682964358 1797.3008829643338 1782.9271253972388 1788.8126829643486 1780.9549974610654 1805.7524829643708 1780.515355028129)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.20015937318146704 0.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 21.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.400159373181467 0.400159373181467 12.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 14.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.887
Average program size in population (points): 45.883
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 162
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 162
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 331000
Number of point (instruction) evaluations so far: 432384780
--- Timings ---
Current time: 1481492181840 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 330
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 331
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 331
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_mod vector_integer_concat in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (float_mod in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64100.38476626922
Median total errors in population: 341.79999999999995
Error averages by case: (2111.2172802849645 2114.01228028494 2111.9672802849645 2116.903680284943 2112.6704802849404 2111.1243197150575 2111.1055197150604 2112.362280284938 2111.19828028499 2115.7032802849644 2115.274080284944 2111.2960802849425 2117.6216802849863 2120.3172802849645 2172.0212802849646 2113.0392802849647 2113.123480284944 2132.6468802849367 2139.3874802849477 2112.1032802849645 2111.8092802849646 2152.5908802849867 2182.9632802849824 2559.389480284965 2126.156480284948 2112.5236802849417 2118.6252802849644 2111.0415197150605 2139.6338802849873 2110.555519715012)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 3.799999999999997 29.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.099
Average program size in population (points): 45.099
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 142
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.135
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 332000
Number of point (instruction) evaluations so far: 433707750
--- Timings ---
Current time: 1481492185478 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 331
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 332
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 332
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_concat integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54256.36031539928
Median total errors in population: 341.79999999999995
Error averages by case: (1781.4087049358307 1784.2207049358092 1782.1597049358306 1787.6577049358104 1782.8865049358094 1781.250472260221 1781.228904935853 1782.865104935806 1781.2969049358521 1786.5237049358307 1785.5891049358122 1781.8989049358117 1788.197104935851 1790.3627049358306 1847.1397049358307 1783.3667049358305 1784.194104935813 1803.4929049358052 1842.570904935813 1782.2447049358304 1782.0087049358306 1823.8001049358516 1869.189504935849 2224.327304935839 1797.493904935814 1783.189104935811 1789.0447049358306 1781.1589049358531 1804.9395049358527 1780.6533049358106)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.762
Average program size in population (points): 45.757
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.153
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 333000
Number of point (instruction) evaluations so far: 435050610
--- Timings ---
Current time: 1481492189143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 332
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 333
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 333
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 vector_integer_yank vector_integer_swap vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57593.517951579954
Median total errors in population: 341.79999999999995
Error averages by case: (1891.251152353514 1893.9231164686294 1892.047152353514 1897.3484942872706 1892.7628778752544 1891.0916566401404 1891.0492566401417 1892.533576035487 1891.1047760355293 1895.9060942872898 1895.4002108156449 1891.3491388510483 1897.9555388510846 1899.240810815663 1950.608152353514 1893.13416752877 1893.1599229172823 1913.243167528747 1921.1515172744157 1892.0611760355084 1891.8730175356316 1933.6323164686721 1964.691077875294 2429.248316488425 1906.5483325798837 1892.5774120486547 1899.9221685667317 1890.9920566401418 1917.171521392512 1890.5397760354879)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 6.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.224
Average program size in population (points): 45.221
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.157
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 334000
Number of point (instruction) evaluations so far: 436377330
--- Timings ---
Current time: 1481492192781 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 333
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 334
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 334
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56556.578032744656
Median total errors in population: 341.79999999999995
Error averages by case: (1841.370459697694 1844.0934596976704 1842.073459697694 1847.4608596976739 1842.7580596976702 1851.1379403023282 1851.1221403023267 1852.5480596976706 1851.179459697719 1846.302459697694 1845.575059697674 1841.5434596976722 1847.930459697712 1849.169459697694 1905.804459697694 1843.0604596976941 1843.635259697674 1863.4966596976687 1871.0244596976763 1852.148459697694 1841.920459697694 1883.7990596977193 2373.6522596976884 2307.4386596976965 1857.613059697677 1842.8294596976748 1849.027459697694 1851.0511403023268 1865.2544596977195 1850.557459697671)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 4.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.71
Average program size in population (points): 45.706
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.165
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 335000
Number of point (instruction) evaluations so far: 437718630
--- Timings ---
Current time: 1481492196436 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 334
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 335
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 335
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61826.072087638335
Median total errors in population: 341.79999999999995
Error averages by case: (2031.3901585290153 2034.0325585289922 2032.0551585290152 2037.5741585289866 2032.7617585289927 2031.0790414710066 2031.083241471017 2032.5703585289823 2031.152558529039 2036.4761585290153 2035.5709585289958 2031.7157585289942 2037.7621585290433 2040.7831585290153 2096.460158529015 2033.1901585290152 2033.2353585289961 2052.7787585289802 2069.636158528997 2032.0961585290152 2032.0881585290153 2072.429158529038 2115.5567585290337 2577.2241585290076 2046.9309585289989 2033.004358528989 2038.5811585290153 2031.0132414710167 2055.3289585290395 2030.5112414709624)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 3.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.654
Average program size in population (points): 44.651
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.166
Error (vector) diversity:			 0.17
--- Run Statistics ---
Number of program evaluations used so far: 336000
Number of point (instruction) evaluations so far: 439028250
--- Timings ---
Current time: 1481492200024 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 335
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 336
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 336
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_shove integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_shove integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57511.84844942284
Median total errors in population: 341.79999999999995
Error averages by case: (1891.4032549807614 1894.0792549807393 1892.1302549807613 1897.433254980744 1892.7644549807394 1891.1998549807822 1891.2270549807808 1892.668854980741 1891.2958549807843 1896.2392549807614 1895.5640549807422 1891.8470549807412 1898.0956549807784 1901.8082549807614 1956.1542549807614 1893.3502549807613 1893.5250549807422 1913.461054980741 1920.0560549807446 1892.2392549807614 1892.0462549807614 1933.329454980784 1983.1660549807818 2320.0292549807673 1908.1906549807447 1892.6884549807432 1898.7372549807612 1891.137054980781 1915.3810549807847 1890.6006549807398)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 6.0 1.0 0.1999999999999993 3.3999999999999986 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.471
Average program size in population (points): 45.468
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 118
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.159
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 337000
Number of point (instruction) evaluations so far: 440362380
--- Timings ---
Current time: 1481492203739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 336
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 337
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 337
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59288.54516054733
Median total errors in population: 341.79999999999995
Error averages by case: (1951.448255381836 1954.1248553818107 1952.159255381836 1957.534055381812 1952.7730553818108 1951.299105648201 1951.2949383238317 1952.7576553818096 1951.3820553818623 1956.0752553818359 1955.4038553818139 1951.7174553818118 1958.1024553818597 1958.8922553818359 2013.878255381836 1953.2912553818358 1953.2924553818139 1973.1812553818077 1982.737855381815 1952.282255381836 1951.984255381836 1993.0084553818624 2033.8688553818604 2371.28925538184 1966.650055381816 1952.7180553818125 1958.8932553818358 1951.2179383238317 1974.5830553818635 1950.7041383237804)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.8 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 2.0 0.1999999999999993 4.600000000000001 2.799999999999997 1.0 1.0 1.2000000000000028 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.047
Average program size in population (points): 45.046
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.158
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 338000
Number of point (instruction) evaluations so far: 441683790
--- Timings ---
Current time: 1481492207356 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 337
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 338
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 338
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52786.126283476406
Median total errors in population: 341.79999999999995
Error averages by case: (1701.394469810856 1704.280427343574 1702.1457561841557 1707.7021448470575 1702.8243269998763 1701.092542447607 1701.0589424476018 1702.335227632124 1701.1766276321598 1706.5686099274392 1705.5707269998793 1701.7838329633166 1708.1305269999084 1708.9395830031965 1764.8390077477093 1703.190032963335 1702.9509792712936 1723.8896126719858 1730.2876580542722 1702.1219792713111 1701.980979271311 1744.5981173224984 1764.944267634792 3136.855957307948 1716.6085795091167 1702.6395269998843 1708.723032963335 1701.0036998553262 1725.9733649458722 1700.5157424475685)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 29.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.803
Average program size in population (points): 45.798
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.16
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 339000
Number of point (instruction) evaluations so far: 443027880
--- Timings ---
Current time: 1481492211016 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 338
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 339
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 339
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61377.6052
Median total errors in population: 341.79999999999995
Error averages by case: (2001.678 2004.3077999999741 2002.472 2011.5763999999729 2003.0531999999744 2001.5902000000247 2001.6092000000276 2004.3607999999708 2001.575800000027 2011.394 2005.6733999999783 2004.2877999999762 2008.1792000000246 2032.585 2118.344 2004.573 2003.194599999977 2023.3035999999684 2060.599199999979 2002.516 2002.32 2048.680600000027 2300.5732000000103 2641.8771999999926 2034.7475999999813 2003.9051999999765 2012.006 2001.4922000000277 2024.2716000000278 2000.858399999975)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.0 0.0 4.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.368
Average program size in population (points): 45.361
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.161
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 340000
Number of point (instruction) evaluations so far: 444358920
--- Timings ---
Current time: 1481492214643 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 339
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 340
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 340
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55173.50117089141
Median total errors in population: 341.79999999999995
Error averages by case: (1811.3884603077893 1824.054460307768 1812.1254603077894 1817.4628603077715 1812.9386603077685 1831.1893007222434 1821.172700722242 1832.732060307769 1811.244660307811 1816.1994603077892 1815.5960603077708 1811.81066030777 1817.9634603078048 1818.6964603077893 1875.2074603077892 1813.3484603077893 1813.2604603077712 1833.4034603077673 1840.4096603077717 1812.2044603077893 1831.9044603077893 1854.168260307811 1886.4400603078075 2231.4170603078 1827.2108603077727 1812.804460307772 1820.0414603077893 1811.103300722242 1835.399860307812 1820.6027007222024)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 5.399999999999999 1.7999999999999972 2.0 1.0 3.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 4.799999999999997 0.16003693029466148)
Average genome size in population (length): 44.473
Average program size in population (points): 45.47
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.148
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 341000
Number of point (instruction) evaluations so far: 445693110
--- Timings ---
Current time: 1481492218273 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 340
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 341
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 341
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_yank integer_swap integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57418.155342835846
Median total errors in population: 341.79999999999995
Error averages by case: (1891.2035574077247 1893.8703452892141 1891.9254162877164 1897.3981574077056 1892.7727574076987 1890.9455159367647 1890.8640162877387 1892.3535159367175 1890.9739159367657 1896.1815574077248 1895.4343004211044 1891.3791071198607 1897.8305159367585 1897.5755574077248 1953.007637417127 1893.0325574077247 1892.5751574077037 1913.2375574077014 1919.1997574077036 1891.9255574077247 1891.62871593674 1933.6929574077508 1945.5529574077477 2280.9863574077335 1905.447357407706 1892.435357407705 1899.2335574077247 1890.82424811032 1914.2645574077515 1890.4028162876912)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.406
Average program size in population (points): 45.404
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 342000
Number of point (instruction) evaluations so far: 447025290
--- Timings ---
Current time: 1481492221896 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 341
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 342
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 342
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56647.1082
Median total errors in population: 341.79999999999995
Error averages by case: (1861.283 1863.9993999999758 1862.05 1867.5431999999805 1862.7113999999763 1861.0710000000229 1861.059000000021 1862.4459999999776 1861.1246000000244 1866.214 1865.4895999999796 1861.3695999999775 1867.9566000000182 1869.41 1923.154 1863.153 1863.1785999999797 1883.3137999999765 1891.8885999999804 1862.088 1861.867 1903.8304000000253 1927.4768000000217 2358.8746000000037 1876.4267999999822 1862.6253999999813 1868.804 1860.9930000000209 1885.2030000000257 1860.503799999977)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 14.399999999999999 2.799999999999997 2.0 1.0 7.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.386
Average program size in population (points): 45.382
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.15
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 343000
Number of point (instruction) evaluations so far: 448356870
--- Timings ---
Current time: 1481492225501 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 342
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 343
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 343
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57791.155232744655
Median total errors in population: 341.79999999999995
Error averages by case: (1901.297459697694 1904.3098596976695 1902.046459697694 1907.444659697677 1902.7316596976696 1901.0819403023286 1901.0671403023257 1902.4252596976728 1901.1660596977197 1906.092459697694 1905.4928596976733 1901.3948596976713 1908.1280596977101 1908.795459697694 1964.5304596976941 1903.322459697694 1902.809459697674 1923.2428596976717 1930.9586596976742 1902.104459697694 1901.993459697694 1943.3102596977194 1972.0120596977163 2341.4658596977 1915.244859697676 1902.477259697675 1908.909459697694 1901.0041403023256 1923.7862596977202 1900.509059697671)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 1.3999999999999986 2.799999999999997 2.0 1.0 5.799999999999997 30.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 12.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.515
Average program size in population (points): 45.511
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 344000
Number of point (instruction) evaluations so far: 449692320
--- Timings ---
Current time: 1481492229129 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 343
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 344
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 344
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_mult vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55601.22906418305
Median total errors in population: 341.79999999999995
Error averages by case: (1831.349858879992 1834.0744106417305 1832.099090702573 1827.489658879971 1822.839187881492 1831.1754000000205 1831.1526907025925 1822.7211999999788 1831.218200000024 1826.2331633443614 1825.5012794154782 1821.4626093926229 1837.9104000000175 1829.464993888654 1884.6531731204595 1823.3209613974918 1833.069756802476 1853.5246462203804 1856.0292441126503 1832.1729589242746 1831.837 1864.5829819578935 1905.5556122537885 2315.6237568025012 1837.0305290941938 1822.651556802478 1829.046544021111 1831.0797585290345 1845.7565497121839 1830.6018907025518)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 1.0 16.200000000000003 29.80000000000001 52.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.622
Average program size in population (points): 45.618
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.157
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 345000
Number of point (instruction) evaluations so far: 451030980
--- Timings ---
Current time: 1481492232760 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 344
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 345
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 345
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61694.56150589494
Median total errors in population: 341.79999999999995
Error averages by case: (2031.3168466742625 2033.9816466742375 2032.0678466742625 2037.239246674237 2032.7306466742377 2031.0901102914931 2031.057910291498 2032.4496466742323 2031.2010466742881 2035.9638466742626 2035.685246674241 2031.5190466742406 2037.7976466742866 2040.4768466742626 2093.4278466742626 2033.0558466742625 2033.4788466742416 2053.267846674231 2068.736446674243 2032.1238466742625 2031.7598466742625 2072.875046674287 2106.591846674284 2458.010246674263 2047.6910466742443 2033.0158466742378 2038.7128466742624 2031.0017102914978 2055.688446674288 2030.5463614896883)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.174400879193934 1.8425922753450976 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.4425922753450977 0.4425922753450977 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.174400879193934 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.916
Average program size in population (points): 44.911
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.147
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 346000
Number of point (instruction) evaluations so far: 452348460
--- Timings ---
Current time: 1481492236398 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 345
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 346
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 346
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_concat vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58733.799902869636
Median total errors in population: 341.79999999999995
Error averages by case: (1931.1963778515085 1934.1429778514864 1931.9033778515086 1937.542377851486 1932.6937778514866 1931.0027451759001 1930.9687778515345 1932.4597778514817 1931.0467778515315 1935.9843778515085 1935.3519778514903 1931.5977778514884 1938.0213778515306 1939.7113778515086 1992.1493778515085 1932.9933778515085 1933.1977778514909 1953.0227778514804 1960.4819778514923 1931.9953778515085 1931.9813778515086 1973.2377778515322 2002.5391778515286 2414.5763778515065 1946.4207778514924 1932.4547778514861 1938.6503778515087 1930.9077778515345 1955.1205778515318 1930.446377851487)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 2.0 6.0 0.0 0.1999999999999993 14.399999999999999 2.799999999999997 1.0 1.0 17.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.536
Average program size in population (points): 45.532
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.163
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 347000
Number of point (instruction) evaluations so far: 453684540
--- Timings ---
Current time: 1481492240049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 346
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 347
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 347
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56951.11736772824
Median total errors in population: 341.79999999999995
Error averages by case: (1801.4039589242745 1804.297958924254 1802.1269589242747 1808.141358924258 1802.7775589242551 1801.1361589242933 1801.1293589242935 1802.5197589242566 1801.3085589242955 1807.1269589242747 1805.7179589242573 1802.4449589242563 1808.2291589242902 1823.7669589242746 1901.2509589242748 1803.0649589242746 1803.0289589242573 1823.715558924254 1881.4897589242585 1802.2049589242747 1801.9999589242746 1844.088158924296 3692.6129589242196 2441.522358924275 1842.7887589242596 1803.2339589242579 1810.0839589242746 1801.0573589242933 1826.2837589242963 1800.563358924255)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 4.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.313
Average program size in population (points): 45.308
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.156
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 348000
Number of point (instruction) evaluations so far: 455013930
--- Timings ---
Current time: 1481492243721 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 347
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 348
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 348
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_rot vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53249.532981159595
Median total errors in population: 341.79999999999995
Error averages by case: (1751.4202840632602 1754.087684063238 1752.1042840632601 1757.5690840632415 1752.8598840632371 1751.0991988787316 1751.0531988787316 1752.4974840632374 1751.1294840632836 1756.33628406326 1755.4496840632403 1751.5196840632389 1757.962884063279 1759.00128406326 1813.6312840632602 1753.26128406326 1752.97648406324 1773.477884063236 1808.994484063242 1752.09828406326 1751.94628406326 1794.0612840632837 1820.4836840632804 2118.240084063276 1766.6146840632427 1752.7826840632395 1759.12628406326 1750.9941988787316 1776.2244840632845 1750.529198878687)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 2.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 3.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.321
Average program size in population (points): 45.318
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.141
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 349000
Number of point (instruction) evaluations so far: 456343560
--- Timings ---
Current time: 1481492247346 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 348
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 349
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 349
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_rot vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54731.6912
Median total errors in population: 341.79999999999995
Error averages by case: (1801.507 1804.1325999999754 1802.208 1807.367399999975 1802.8273999999747 1801.279400000024 1801.3198000000264 1802.6143999999724 1801.3504000000262 1806.101 1805.5127999999786 1801.4505999999762 1808.3036000000238 1809.598 1863.547 1803.203 1803.0087999999785 1823.7827999999704 1831.196999999979 1802.332 1802.125 1843.6226000000256 1879.6762000000224 2168.0960000000123 1817.0623999999812 1802.6061999999777 1808.774 1801.2318000000264 1825.1750000000266 1800.6789999999755)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 6.600000000000001 2.799999999999997 2.0 1.0 5.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.393
Average program size in population (points): 45.389
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.159
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 350000
Number of point (instruction) evaluations so far: 457675350
--- Timings ---
Current time: 1481492251002 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 349
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 350
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 350
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_conj in1 integer_div float_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61925.501599999996
Median total errors in population: 341.79999999999995
Error averages by case: (2041.344 2043.8763999999749 2042.022 2047.3497999999745 2042.735999999975 2041.0540000000244 2041.0200000000289 2042.5575999999708 2041.0996000000257 2046.185 2045.2027999999782 2041.5041999999771 2047.7114000000222 2049.372 2101.887 2043.095 2042.7717999999784 2062.777599999969 2071.628599999979 2042.036 2041.743 2082.839200000026 2119.497400000021 2409.3886000000016 2055.730999999982 2042.539399999976 2049.994 2040.960000000029 2065.0840000000267 2040.494199999975)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.079
Average program size in population (points): 45.076
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.14
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 351000
Number of point (instruction) evaluations so far: 458997720
--- Timings ---
Current time: 1481492254671 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 350
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 351
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 351
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_mod vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55168.3102
Median total errors in population: 341.79999999999995
Error averages by case: (1811.315 1814.2911999999747 1812.07 1817.724599999977 1812.7279999999748 1811.084400000024 1811.0556000000238 1812.4323999999747 1811.1496000000266 1816.505 1815.5371999999772 1811.7019999999773 1818.0268000000208 1819.635 1878.922 1813.234 1813.2395999999778 1833.6669999999726 1839.8745999999805 1812.095 1812.051 1854.7212000000259 1885.2130000000222 2313.5290000000055 1826.941399999982 1812.6295999999763 1819.112 1810.9956000000238 1836.3252000000266 1810.5031999999753)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.536
Average program size in population (points): 45.534
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.148
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 352000
Number of point (instruction) evaluations so far: 460333800
--- Timings ---
Current time: 1481492258319 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 351
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 352
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 352
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_dup_items} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_dup_items vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59797.010914563594
Median total errors in population: 341.79999999999995
Error averages by case: (1951.5049022899693 1954.1995507038598 1952.287459697694 1961.8949022899446 1953.3619882496857 1951.3829253421939 1951.3963403023347 1954.5958746578017 1951.3738447375836 1961.7283081082235 1956.1051018763897 1955.0842955575988 1958.132274657856 1982.0360588776923 2069.2441116776795 1955.2383156910948 1952.8258447375351 1973.3059871961914 2010.8761282734488 1952.319602244237 1952.0906447375573 1999.8427727752564 2243.1570959689943 2510.0472447375573 1985.0790809441198 1954.8742447375334 1963.0442594091492 1951.2868977100593 1978.0223966765882 1950.6724596976692)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 1.214960136738481 0.38503986326151884 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 43.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 0.0 20.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.615
Average program size in population (points): 45.61
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 353000
Number of point (instruction) evaluations so far: 461672250
--- Timings ---
Current time: 1481492261988 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 352
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 353
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 353
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction float_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush float_div integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61571.27896772824
Median total errors in population: 341.79999999999995
Error averages by case: (2031.2249589242747 2033.8507589242515 2031.9259589242747 2036.9615589242503 2032.6621589242516 2030.9967589242967 2030.942558924301 2032.2271589242469 2031.0389589242986 2035.4989589242746 2035.1399589242535 2031.2695589242521 2037.8969589242984 2037.3109589242747 2084.466958924275 2032.8859589242747 2032.302758924254 2052.8583589242476 2057.440758924255 2031.9769589242746 2031.7339589242747 2072.871358924299 2085.9389589242965 2391.6587589242813 2043.9237589242562 2032.1139589242516 2038.4559589242747 2030.892558924301 2052.358158924299 2030.4525589242521)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 2.0 0.0 0.20000000000000284 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.139
Average program size in population (points): 45.137
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.137
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 354000
Number of point (instruction) evaluations so far: 462996420
--- Timings ---
Current time: 1481492265642 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 353
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 354
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 354
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_add vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_shove integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 64377.17696609337
Median total errors in population: 341.79999999999995
Error averages by case: (2121.266634575597 2124.005883403049 2121.972634575597 2126.8155921083085 2122.603434989133 2121.0377923968995 2121.0317923969096 2122.168592396847 2121.1184447125615 2125.7205921083346 2125.350377842454 2121.16784839026 2127.9652483903055 2128.784177842472 2180.183634575597 2122.992977436743 2123.0227569763606 2142.50857743671 2177.328355235921 2122.0391729118855 2121.9613498046037 2162.30808340309 2180.02003498917 2541.1347835452243 2136.2196455251706 2122.3154340924193 2128.296927293577 2120.9657498046336 2144.388244536592 2120.482192396859)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 20.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.493
Average program size in population (points): 45.49
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 355000
Number of point (instruction) evaluations so far: 464331210
--- Timings ---
Current time: 1481492269301 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 354
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 355
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 355
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_dup_items} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_dup_items vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div float_dup_items vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52928.84214354075
Median total errors in population: 341.79999999999995
Error averages by case: (1721.2706181180251 1724.2196181180027 1722.0106181180251 1727.3998181180075 1722.7316181180029 1721.0694181180465 1721.0450181180427 1722.4236181180058 1721.1202181180488 1726.0266181180252 1725.4182181180058 1721.4478181180032 1728.1900181180415 1729.080618118025 1784.909618118025 1723.1326181180252 1722.8866181180058 1743.6420181180038 1783.651818118006 1722.110618118025 1721.7896181180251 1764.5766181180488 2244.0908181180453 2210.2366181180355 1736.1524181180075 1722.6796181180086 1729.1636181180252 1720.9820181180428 1744.8976181180492 1720.4860181180034)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 18.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 45.122
Average program size in population (points): 46.118
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.15
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 356000
Number of point (instruction) evaluations so far: 465684870
--- Timings ---
Current time: 1481492272989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 355
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 356
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 356
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction float_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush float_rot integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush float_rot integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62429.154582464944
Median total errors in population: 341.79999999999995
Error averages by case: (2021.3132794154983 2023.9554794154712 2022.0452794154983 2027.282479415471 2022.6084794154715 2021.0852794155237 2021.075279415528 2022.187679415467 2021.1496794155255 2025.8362794154982 2025.3142794154753 2021.0062794154733 2027.7162794155242 2028.2572794154983 2081.146279415498 2022.9132794154982 2023.2026794154751 2042.972079415466 2079.679279415477 2022.0792794154981 2021.9272794154983 2062.8066794155257 2084.2396794155216 3483.6612794154794 2036.5484794154784 2022.5556794154722 2028.4432794154982 2021.008279415528 2044.627679415526 2020.5100794154723)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 13.600000000000001 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.368
Average program size in population (points): 45.365
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.151
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 357000
Number of point (instruction) evaluations so far: 467015910
--- Timings ---
Current time: 1481492276642 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 356
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 357
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 357
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60396.60928763833
Median total errors in population: 341.79999999999995
Error averages by case: (1981.5251585290152 1984.023958528994 1982.1751585290153 1987.5481585289954 1982.800158528994 1981.153841471005 1981.1690414710088 1982.5533585289902 1981.2277585290371 1986.3851585290154 1985.6761585289964 1981.526958528995 1988.0929585290355 1989.5731585290152 2046.9471585290153 1983.1971585290153 1983.3089585289981 2003.176358528989 2010.6207585289983 1982.1511585290152 1982.1261585290154 2022.5403585290378 2057.2103585290342 2614.467358529011 1997.7429585289979 1982.7587585289955 1988.7601585290154 1981.0888414710084 2004.5339585290385 1980.5478414709637)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 0.7999999999999972 1.0 0.0 0.20000000000000284 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.317
Average program size in population (points): 45.314
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.155
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 358000
Number of point (instruction) evaluations so far: 468345420
--- Timings ---
Current time: 1481492280319 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 357
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 358
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 358
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54667.12804451487
Median total errors in population: 341.79999999999995
Error averages by case: (1761.538208424147 1764.3492666144473 1762.1793733832324 1767.730825432364 1762.7714191314242 1761.1425688033153 1761.127636090892 1762.627440670796 1761.2376406708381 1766.8524454239302 1765.683640653068 1761.4886254323578 1768.0974406708283 1770.7520623959695 1825.2172056777986 1763.211369749809 1763.2070934465098 1783.8599069925392 1807.7325922042403 1762.190440670814 1761.9154406708142 1804.7282784986876 1840.9164879781824 3240.4528030819074 1777.5426254323622 1762.6750399163116 1768.9632406530868 1761.0576360908922 1785.320134921451 1760.5591547317547)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 6.0 0.0 0.1999999999999993 13.600000000000001 2.799999999999997 1.4425922753450977 0.4425922753450977 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.504
Average program size in population (points): 45.502
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.159
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 359000
Number of point (instruction) evaluations so far: 469680540
--- Timings ---
Current time: 1481492283973 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 358
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 359
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 359
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_add vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56882.25056182963
Median total errors in population: 341.79999999999995
Error averages by case: (1871.2432587276542 1873.9126587276307 1872.015258727654 1877.4220587276338 1872.7534587276302 1871.0186587276771 1870.9740587276751 1872.3564587276326 1871.0708587276786 1876.1002587276541 1875.005658727633 1871.3108587276313 1877.9414587276738 1878.1552587276542 1930.9732587276542 1872.9362587276541 1872.640658727634 1893.1842587276305 1899.9160587276344 1872.0432587276541 1871.843258727654 1913.449858727679 1924.1176587276768 2326.3700587276603 1884.1930587276358 1872.4742587276367 1878.8752587276542 1870.920058727675 1896.5626587276793 1870.470458727631)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 22.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 2.0 1.0 12.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.422
Average program size in population (points): 45.421
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 360000
Number of point (instruction) evaluations so far: 471013200
--- Timings ---
Current time: 1481492287648 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 359
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 360
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 360
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55651.49
Median total errors in population: 341.79999999999995
Error averages by case: (1831.303 1833.9849999999758 1832.018 1837.1359999999802 1832.7949999999755 1831.0896000000228 1831.0602000000213 1832.5347999999763 1831.1408000000251 1835.748 1835.4837999999788 1831.573399999977 1838.0456000000197 1838.581 1891.668 1833.111 1832.9981999999795 1853.887199999976 1860.3003999999805 1832.107 1831.775 1873.8260000000255 1896.498800000022 2238.6562000000104 1846.6981999999819 1832.5207999999795 1838.893 1830.9982000000214 1854.5440000000256 1830.5137999999765)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 14.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.55
Average program size in population (points): 45.548
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.146
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 361000
Number of point (instruction) evaluations so far: 472349700
--- Timings ---
Current time: 1481492291267 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 360
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 361
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 361
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60699.2970574588
Median total errors in population: 341.79999999999995
Error averages by case: (1991.3227163378144 1994.2993163377887 1992.0657163378144 1999.1337163377902 1993.3573163377887 1991.1460836622089 1991.1541163378427 1993.4579163377853 1991.178516337841 1998.4427163378145 1996.1569163377933 1993.1545163377914 1997.8421163378391 2009.0177163378144 2078.2437163378145 1994.5807163378145 1993.1059163377936 2013.0883163377832 2030.7675163377953 1992.1017163378144 1991.8187163378145 2036.0947163378403 2168.009716337834 2463.706916337813 2012.5891163377967 1993.6473163377905 2000.4357163378145 1991.0611163378426 2017.8107163378415 1990.5057163377905)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 7.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 17.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.161
Average program size in population (points): 45.159
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.154
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 362000
Number of point (instruction) evaluations so far: 473674530
--- Timings ---
Current time: 1481492294874 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 361
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 362
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 362
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div float_sin vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_sin vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57080.159657458804
Median total errors in population: 341.79999999999995
Error averages by case: (1881.2827163378145 1884.05531633779 1882.0217163378145 1887.2059163377876 1882.6503163377904 1881.0770836622094 1881.0599163378445 1882.4889163377834 1881.1257163378398 1886.0987163378145 1885.306716337793 1881.1297163377913 1888.237916337839 1889.0317163378145 1943.2177163378144 1883.0227163378145 1882.7993163377932 1903.2303163377821 1909.3221163377943 1882.0857163378146 1881.9347163378145 1923.5767163378396 1958.0397163378375 2206.9919163378263 1896.1943163377964 1882.6043163377876 1889.1607163378144 1880.9949163378444 1903.7065163378404 1880.5055163377906)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 22.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 7.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.097
Average program size in population (points): 46.096
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.149
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 363000
Number of point (instruction) evaluations so far: 475027440
--- Timings ---
Current time: 1481492298651 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 362
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 363
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 363
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_concat vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_concat vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61443.41549580974
Median total errors in population: 341.79999999999995
Error averages by case: (2021.3887472635843 2024.0711805149824 2022.1002235324725 2027.4361842264902 2022.7989472635597 2021.132780515029 2021.111180515029 2022.5586068934501 2021.201180515031 2026.5553751082364 2025.3626077603444 2021.7970532747258 2028.029580515026 2030.0024293411404 2087.0597119891663 2023.2767472635842 2023.1219439132492 2043.112276572841 2066.046976170201 2022.1743805150063 2022.0383805150063 2062.6032870997747 2093.4216714544314 2488.332361297355 2036.938877510272 2022.8639385405254 2028.8306231235506 2021.0470137664513 2046.4456483241643 2020.555580514983)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 9.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 4.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2332514220777937 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 43.699
Average program size in population (points): 44.698
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.158
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 364000
Number of point (instruction) evaluations so far: 476338410
--- Timings ---
Current time: 1481492302280 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 363
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 364
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 364
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_set integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51944.87171851174
Median total errors in population: 341.79999999999995
Error averages by case: (1711.500838683484 1714.284496170103 1712.2511750323597 1707.9596386834687 1702.797224111371 1711.1847253421895 1711.1889750323787 1702.4328447375356 1711.2504447375802 1706.6651850006897 1705.5654311375913 1701.609344727756 1718.3348447375724 1709.8864083538813 1768.7995769802928 1703.2165247231549 1712.9539013776584 1733.8181608608347 1729.6578954270908 1712.2162248695765 1712.1956447375574 1744.084060921899 1772.8449167403473 2149.293701377686 1718.9731330973775 1702.7989013776619 1708.9891806141652 1711.1094011867185 1726.4251426993667 1710.5837750323387)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 10.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.817
Average program size in population (points): 45.815
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.173
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 365000
Number of point (instruction) evaluations so far: 477682920
--- Timings ---
Current time: 1481492305989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 364
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 365
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 365
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58317.61804819485
Median total errors in population: 341.79999999999995
Error averages by case: (1921.3528402127004 1923.9996402126767 1922.0538402127004 1927.6356402126787 1922.8044402126761 1921.0249208173345 1920.9985208173375 1922.4532402126742 1921.0940402127248 1926.4348402127005 1925.803240212681 1921.6264402126785 1928.0472402127216 1929.9038402127005 1982.4948402127002 1923.1898402127003 1922.7666402126795 1943.019640212672 1950.316040212682 1922.0698402127005 1921.9558402127004 1963.0138402127245 1990.9322402127216 2288.850640212706 1936.1270402126834 1922.8158402126787 1928.8298402127004 1920.9385208173376 1944.5976402127258 1920.4670402126774)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 2.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.367
Average program size in population (points): 45.364
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.157
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 366000
Number of point (instruction) evaluations so far: 479013930
--- Timings ---
Current time: 1481492309926 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 365
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 366
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 366
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_shove} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec vector_integer_shove integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56159.993337222244
Median total errors in population: 341.79999999999995
Error averages by case: (1831.2815152308933 1834.2617152308692 1831.9855152308935 1827.469315230873 1822.7317152308694 1830.980435304777 1830.9090353047777 1822.4445152308704 1831.050715230918 1826.1115152308935 1825.4347152308724 1821.7263152308713 1837.8733152309144 1833.1565152308933 1893.3785152308933 1823.1075152308933 1833.373115230873 1853.441115230869 1855.2465152308741 1832.0185152308934 1831.8975152308933 1863.6303152309192 2346.455115230893 2418.8069152308944 1842.3589152308746 1822.853715230873 1828.8925152308934 1830.8670353047778 1845.8105152309192 1830.4386353047305)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 13.600000000000001 2.799999999999997 1.0 1.0 1.7999999999999972 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.200000000000003 0.16003693029466148)
Average genome size in population (length): 44.49
Average program size in population (points): 45.483
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.158
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 367000
Number of point (instruction) evaluations so far: 480348630
--- Timings ---
Current time: 1481492313609 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 366
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 367
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 367
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest in1 vector_integer_yank vector_integer_swap vector_integer_pushall integer_dec integer_div vector_integer_rest integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56579.4956
Median total errors in population: 341.79999999999995
Error averages by case: (1861.355 1863.9749999999744 1862.121 1867.5107999999757 1862.769199999974 1861.1438000000244 1861.123400000028 1862.6347999999718 1861.1954000000267 1866.24 1865.6491999999785 1861.7059999999767 1868.0808000000236 1869.048 1924.046 1863.211 1863.369199999977 1883.3493999999687 1889.55479999998 1862.149 1862.023 1903.3776000000262 1937.3664000000224 2278.7970000000073 1877.772999999981 1862.8639999999762 1868.973 1861.0624000000278 1886.4598000000274 1860.5675999999746)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 8.399999999999999 2.799999999999997 0.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 17.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.113
Average program size in population (points): 45.108
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.142
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 368000
Number of point (instruction) evaluations so far: 481672020
--- Timings ---
Current time: 1481492317244 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 367
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 368
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 368
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_flush} {:close 1, :instruction float_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div float_add float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush float_rot integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div float_add integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_flush float_rot integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 341.79999999999995
Mean: 11.393333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58760.727257458806
Median total errors in population: 341.79999999999995
Error averages by case: (1931.4287163378144 1934.0221163377898 1932.1497163378144 1937.6443163377903 1932.7875163377907 1931.2046836622076 1931.2101163378402 1932.6749163377858 1931.2767163378398 1936.5657163378144 1935.3901163377936 1931.6389163377926 1938.1309163378364 1939.5477163378146 1995.4417163378146 1933.3027163378144 1933.216516337794 1953.026516337784 1962.4371163377962 1932.2167163378144 1931.9757163378144 1973.2611163378392 2017.1893163378354 2417.859716337816 1946.9737163377956 1932.7219163377895 1938.9617163378146 1931.1301163378403 1954.7271163378402 1930.6133163377915)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 11.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.891
Average program size in population (points): 44.886
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.149
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 369000
Number of point (instruction) evaluations so far: 482988750
--- Timings ---
Current time: 1481492320877 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 368
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 369
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 369
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55452.79481545019
Median total errors in population: 341.79999999999995
Error averages by case: (1821.4113805150064 1824.0879805149818 1822.1893805150064 1827.2927805149868 1822.749980514982 1821.2911805150286 1821.314780515028 1822.628580514983 1821.3469805150312 1825.9853805150065 1825.4583805149853 1821.373780514983 1828.1105805150241 1829.2193805150064 1883.9203805150064 1823.0763805150063 1823.0099805149855 1843.532180514982 1881.567980514987 1822.3343805150064 1822.1223805150064 1864.0081805150307 1897.3977805150282 2282.848980515013 1836.4557805149875 1822.6091805149865 1828.7883805150063 1821.2279805150279 1844.7607805150315 1820.6735805149835)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 2.0 1.0 10.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.488
Average program size in population (points): 45.483
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.16
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 370000
Number of point (instruction) evaluations so far: 484323390
--- Timings ---
Current time: 1481492324573 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 369
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 370
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 370
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54502.89619560126
Median total errors in population: 341.79999999999995
Error averages by case: (1771.6184196103284 1774.3577493702358 1772.3614196103283 1781.938414402757 1773.1913194193262 1771.4725838771496 1771.4663838771487 1774.2817032724902 1771.4533032725392 1781.5696144027756 1775.9369702105553 1774.701060931972 1778.5972609320131 1801.7423702105755 1888.5494196103282 1775.0556932650104 1772.9651930954483 1793.863893264987 1831.4704510017543 1772.4377032725138 1772.4475423440429 1820.6125493702846 2056.146319419373 2445.23263610553 1804.913287456848 1774.2502690491349 1782.736712069702 1771.3603838771487 1795.4290657263907 1770.7365032724895)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 1.0 0.0 0.20000000000000284 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 2.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.375
Average program size in population (points): 45.372
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.153
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 371000
Number of point (instruction) evaluations so far: 485654640
--- Timings ---
Current time: 1481492328260 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 370
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 371
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 371
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52356.78183743119
Median total errors in population: 341.79999999999995
Error averages by case: (1721.4068145810397 1724.2654145810166 1722.1548145810398 1727.5068145810274 1722.9012145810163 1721.229814581061 1721.2058145810545 1722.7050145810244 1721.2812145810638 1726.4388145810399 1725.6828145810193 1721.7312145810183 1728.5994145810519 1729.5378145810398 1785.11981458104 1723.29381458104 1723.43541458102 1743.946214581023 1750.781414581022 1722.2438145810397 1722.0398145810398 1764.1578145810638 1794.7540145810603 2111.4716145810544 1739.0480145810232 1722.8890145810278 1729.2588145810398 1721.1398145810545 1745.9276145810638 1720.6278145810181)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.399999999999999 2.200000000000003 2.0 1.0 2.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.636
Average program size in population (points): 45.633
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 372000
Number of point (instruction) evaluations so far: 486993720
--- Timings ---
Current time: 1481492331988 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 371
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 372
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 372
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56624.67860557133
Median total errors in population: 341.79999999999995
Error averages by case: (1811.3965820714245 1814.1155820714025 1812.1575820714245 1817.956182071404 1812.8437820714023 1811.2412179285964 1811.2500179285953 1812.7151820714034 1811.3039820714473 1816.6675820714245 1815.552782071406 1813.447982071404 1818.1589820714426 1825.9815820714246 1924.4565820714245 1813.1585820714245 1813.5899820714053 1833.7923820714009 1850.6545820714064 1812.2625820714245 1812.0155820714244 1854.2623820714468 3341.1465820713443 2244.796782071434 1829.3017820714083 1812.6269820714044 1819.3585820714245 1811.1690179285952 1836.6551820714474 1810.642017928554)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.3820714244946133 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 6.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.5820714244946132 0.0 10.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.627
Average program size in population (points): 45.626
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.156
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 373000
Number of point (instruction) evaluations so far: 488332530
--- Timings ---
Current time: 1481492335707 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 372
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 373
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 373
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59269.0279331727
Median total errors in population: 341.79999999999995
Error averages by case: (1951.3635600455652 1954.017818755814 1952.0629589242747 1957.706476182451 1952.6832918238395 1951.095200000022 1951.0974000000256 1952.4473999999736 1951.1572000000251 1955.9332787244039 1955.2613264522383 1951.4328526893228 1957.8237745943663 1960.2762700294513 2014.3792059051366 1953.098975691822 1952.6977516854645 1973.273457758674 1980.9012925255388 1952.156 1951.911729060974 1993.2815444399605 2023.6643715363246 2365.8010150426308 1966.7192520733777 1952.6007442335822 1958.6830275425557 1951.0234000000255 1973.9647574548178 1950.5125999999773)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 6.600000000000001 2.799999999999997 2.0 0.1850398632615189 10.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.778
Average program size in population (points): 45.776
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.141
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 374000
Number of point (instruction) evaluations so far: 489675870
--- Timings ---
Current time: 1481492339410 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 373
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 374
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 374
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55195.01357844095
Median total errors in population: 341.79999999999995
Error averages by case: (1811.3981174532898 1814.0976496268238 1812.1109589242747 1817.6173099115053 1812.8183174532649 1811.1235589242985 1811.1079589242931 1812.6085589242552 1811.1693589243 1816.1971222686361 1815.5301019376552 1811.6815683168957 1818.1475086364496 1819.6758568519554 1875.3925957248232 1813.322538757238 1813.4075222686167 1833.5422003952394 1840.550723525953 1812.1389589242747 1812.0139589242747 1853.964617804292 1889.6254525846496 2339.2839546388436 1827.0836041762427 1812.8155029453699 1819.3600912760246 1811.036958924293 1835.6609915686 1810.5299589242506)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 0.0 1.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 18.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.799
Average program size in population (points): 45.799
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 262
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 262
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.172
Error (vector) diversity:			 0.176
--- Run Statistics ---
Number of program evaluations used so far: 375000
Number of point (instruction) evaluations so far: 491019840
--- Timings ---
Current time: 1481492343108 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 374
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 375
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 375
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58933.9528
Median total errors in population: 339.79999999999995
Error averages by case: (1941.418 1944.0303999999744 1942.175 1947.2267999999747 1942.6847999999752 1941.173600000024 1941.2012000000286 1942.4245999999698 1941.2288000000265 1946.062 1945.5285999999785 1941.695399999976 1947.997400000024 1949.9 2003.874 1943.058 1943.4357999999795 1963.3221999999685 1969.7723999999785 1942.204 1942.101 1983.2188000000262 2020.460800000023 2312.9466000000066 1956.5923999999816 1942.6287999999747 1948.877 1941.1132000000287 1965.038000000027 1940.5631999999755)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.331
Average program size in population (points): 45.326
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 484
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 484
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.159
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 376000
Number of point (instruction) evaluations so far: 492349770
--- Timings ---
Current time: 1481492346768 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 375
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 376
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 376
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55204.1232
Median total errors in population: 339.79999999999995
Error averages by case: (1811.532 1814.2363999999736 1812.314 1817.9081999999746 1812.8113999999737 1811.3518000000247 1811.3822000000305 1812.678199999969 1811.379600000027 1816.956 1815.6261999999763 1811.6797999999767 1818.0878000000255 1820.632 1878.834 1813.409 1813.8621999999787 1833.905199999967 1842.4189999999808 1812.345 1812.077 1853.8274000000265 1905.1888000000229 2321.780200000006 1827.4695999999828 1813.047599999975 1819.067 1811.2862000000305 1836.3020000000274 1810.727399999975)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 9.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.451
Average program size in population (points): 45.449
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 527
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 527
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.152
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 377000
Number of point (instruction) evaluations so far: 493683300
--- Timings ---
Current time: 1481492350556 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 376
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 377
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 377
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57687.96079688206
Median total errors in population: 339.79999999999995
Error averages by case: (1881.404706330311 1883.9487915977563 1892.1297163378144 1887.6097011227362 1882.9111272770751 1891.2966000000224 1891.2950000000246 1892.7715999999743 1891.3288000000236 1886.5044588595222 1886.0991067677555 1892.8803576594582 1897.9325576595018 1908.6867773253055 1989.273153958738 1883.3812651558346 1883.7529434665576 1903.2111228254903 1910.0426437001886 1892.25 1891.961839071529 1924.0532351975896 1957.5616251922004 2599.587986476628 1906.7443841843344 1893.063565776618 1899.233008797188 1891.2120000000248 1905.148922141788 1890.6837999999766)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 6.600000000000001 2.799999999999997 2.0 1.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.793
Average program size in population (points): 45.789
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 522
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 522
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.16
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 378000
Number of point (instruction) evaluations so far: 495027090
--- Timings ---
Current time: 1481492354294 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 377
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 378
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 378
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_fromfloat integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55178.504215450186
Median total errors in population: 339.79999999999995
Error averages by case: (1811.4123805150061 1813.9525805149804 1812.1513805150062 1817.724380514986 1812.83818051498 1811.2365805150323 1811.2215805150274 1812.6227805149854 1811.2765805150332 1816.6223805150062 1815.768180514984 1811.4663805149817 1818.0661805150244 1821.3223805150062 1875.165380515006 1813.378380515006 1814.2549805149877 1833.470180514983 1842.0087805149851 1812.2193805150062 1812.108380515006 1854.0003805150334 1902.1615805150295 2302.945780515017 1828.2477805149877 1813.0819805149874 1819.405380515006 1811.1495805150275 1836.5875805150338 1810.63678051498)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 10.600000000000001 2.799999999999997 1.0 0.0 3.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.804
Average program size in population (points): 45.802
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 518
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 518
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.162
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 379000
Number of point (instruction) evaluations so far: 496371210
--- Timings ---
Current time: 1481492358047 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 378
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 379
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 379
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54556.710695759386
Median total errors in population: 339.79999999999995
Error averages by case: (1791.3056156824873 1794.004202868451 1792.1191585290153 1797.5840508636068 1792.853538295465 1791.1528414710078 1791.1466414710073 1792.64144147096 1791.249041471011 1796.138928525734 1795.5348003952363 1791.614850863606 1797.9886414710058 1799.594947474321 1854.813146281606 1793.2267090027824 1793.469184484365 1813.73980548736 1821.8158002600128 1792.1858414709848 1791.9098414709847 1834.2903705652222 1872.4377894452202 2278.484772173121 1806.20245086361 1792.677932173534 1798.9488003952595 1791.0746000000224 1815.9348000639172 1790.5701507683877)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 7.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.10929742682568167)
Average genome size in population (length): 44.637
Average program size in population (points): 45.631
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 501
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 501
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 380000
Number of point (instruction) evaluations so far: 497710320
--- Timings ---
Current time: 1481492361809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 379
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 380
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 380
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62008.2357549764
Median total errors in population: 339.79999999999995
Error averages by case: (2041.3370171054187 2043.9688171053942 2042.0670171054187 2046.9708171053962 2042.6812171053948 2041.1044977100528 2041.1046977100564 2042.2956171053895 2041.1620171054442 2045.9120171054187 2045.5156171053975 2041.5696171053958 2047.6188171054414 2048.991017105419 2102.0460171054187 2042.9990171054187 2043.5628171053988 2062.7692171053873 2070.3910171054004 2042.0990171054186 2041.8790171054188 2082.6028171054445 2112.5564171054375 2500.5066171054177 2057.0570171054 2042.7004171053934 2048.5880171054187 2041.0326977100563 2064.6080171054446 2040.5388171053962)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 6.600000000000001 2.799999999999997 0.0 1.0 0.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.342
Average program size in population (points): 45.34
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 473
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 473
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 381000
Number of point (instruction) evaluations so far: 499040580
--- Timings ---
Current time: 1481492365501 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 380
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 381
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 381
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61123.07643274466
Median total errors in population: 339.79999999999995
Error averages by case: (2011.244459697694 2013.7734596976695 2011.971459697694 2017.4192596976688 2012.8158596976693 2010.9521403023289 2010.9047403023342 2012.435859697664 2011.0002596977197 2016.369459697694 2015.667859697673 2011.5786596976716 2017.8148596977178 2019.739459697694 2073.019459697694 2013.1844596976941 2013.4154596976748 2032.7976596976607 2038.234659697675 2011.961459697694 2011.749459697694 2052.730259697719 2073.0724596977147 2494.1106596976924 2025.739459697676 2012.908059697668 2019.964459697694 2010.853740302334 2035.23645969772 2010.4104596976706)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 2.2 0.2 0.14030230586813974 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 10.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.615
Average program size in population (points): 45.611
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 475
Genome diversity (% unique Plush genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 475
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 382000
Number of point (instruction) evaluations so far: 500379030
--- Timings ---
Current time: 1481492369177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 381
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 382
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 382
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59681.459871953055
Median total errors in population: 339.79999999999995
Error averages by case: (1961.339017409007 1964.0019691707446 1962.1152492315885 1967.343217408982 1962.7575464105053 1961.0968414710082 1961.0599507684387 1962.3431585289877 1961.1621585290407 1966.2313218733766 1965.721237944492 1961.5213679216356 1967.8661585290386 1987.4131524176692 2073.2423316494746 1962.9551199265072 1963.640115331492 1983.13820474939 1990.372602641664 1962.09711745329 1962.0361585290152 2003.114140486911 2017.7389707828058 2436.4641153315088 1975.9658876232086 1962.801915331486 1968.9357025501263 1961.0048829419966 1985.4571082412015 1960.5231507683875)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 11.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.438
Average program size in population (points): 45.436
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 451
Genome diversity (% unique Plush genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 451
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.165
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 383000
Number of point (instruction) evaluations so far: 501712170
--- Timings ---
Current time: 1481492372852 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 382
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 383
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 383
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59554.0830583982
Median total errors in population: 339.79999999999995
Error averages by case: (1961.250991424519 1963.9569914244935 1962.021991424519 1967.6795914244922 1962.8247914244928 1961.0930299787535 1961.0508299787589 1962.5471914244877 1961.132391424546 1966.296991424519 1965.6535914244964 1961.4615914244955 1967.9887914245455 1969.9589914245191 2020.500991424519 1963.211991424519 1963.649391424499 1983.1735914244862 1991.3057914244985 1962.079991424519 1961.806991424519 2003.1259914245454 2040.8481914245424 2355.308391424525 1976.0501914245 1962.677391424493 1969.6499914245192 1960.9938299787589 1984.2485914245458 1960.533991424494)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.18661179785132428 0.21927710477505347 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.21927710477505347 2.200000000000003 0.18072289522494656)
Average genome size in population (length): 44.16
Average program size in population (points): 45.156
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 476
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 476
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.14
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 384000
Number of point (instruction) evaluations so far: 503036970
--- Timings ---
Current time: 1481492376503 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 383
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 384
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 384
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61637.497086396215
Median total errors in population: 339.79999999999995
Error averages by case: (2031.4836448576734 2034.0776448576503 2032.2366448576734 2037.311844857651 2032.8074448576504 2031.3328448576954 2031.3268448576994 2032.6054448576467 2031.371244857697 2035.9286448576734 2035.4380448576537 2031.7530448576513 2038.0432448576967 2041.0156448576734 2090.3512729908757 2033.1586448576734 2033.5538448576551 2052.913444857646 2059.6434448576542 2032.2856448576733 2032.0926448576733 2072.736644857696 2106.5594729908967 2412.382672990879 2047.4826729908586 2032.6176448576514 2038.8926448576735 2031.2518448576996 2054.1190729909 2030.7232448576515)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 4.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.307
Average program size in population (points): 45.304
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 440
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 440
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 385000
Number of point (instruction) evaluations so far: 504366180
--- Timings ---
Current time: 1481492380214 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 384
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 385
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 385
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60590.179055373934
Median total errors in population: 339.79999999999995
Error averages by case: (1991.378376268319 1993.8891762682936 1992.146376268319 1997.4119762682997 1992.6851762682938 1991.1851435927133 1991.2185762683405 1992.5209762682964 1991.2415762683452 1996.3633762683191 1995.6085762682974 1991.7143762682963 1997.8815762683373 2000.9293762683192 2053.906376268319 1993.0843762683191 1993.6823762682989 2013.088976268293 2054.0307762682996 1992.1903762683191 1991.990376268319 2033.2159762683445 2085.6081762683416 2468.2995762683186 2006.2873762683016 1992.7825762682985 1998.859376268319 1991.1295762683405 2015.2707762683451 1990.5773762682952)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 2.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 3.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.947
Average program size in population (points): 44.943
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 409
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 409
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.15
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 386000
Number of point (instruction) evaluations so far: 505684590
--- Timings ---
Current time: 1481492383883 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 385
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 386
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 386
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60184.908732968324
Median total errors in population: 339.79999999999995
Error averages by case: (1981.2200523585843 1983.7342523585592 1982.0030523585842 1987.2542523585632 1982.665252358559 1980.9821064288706 1980.9397064288712 1982.136052358558 1981.0548523586103 1986.0890523585842 1985.5808523585629 1981.5734523585622 1987.7410523586047 1988.2050523585842 2039.8500523585842 1982.9580523585842 1983.4430523585645 2002.9314523585567 2010.963852358565 1981.9880523585844 1981.8130523585842 2023.2676523586106 2039.6968523586058 2434.3808523585835 1995.6622523585663 1982.4022523585634 1988.8660523585843 1980.8895064288713 2004.1758523586107 1980.4408523585605)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.041470984807896516 0.24147098480789653 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 3.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 1.0 5.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.24147098480789653 1.2000000000000028 0.07296486883118758)
Average genome size in population (length): 44.409
Average program size in population (points): 45.406
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 395
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 395
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.154
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 387000
Number of point (instruction) evaluations so far: 507016860
--- Timings ---
Current time: 1481492387670 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 386
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 387
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 387
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_dup_items vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec vector_integer_pop integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec vector_integer_pop integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56613.35753273314
Median total errors in population: 339.79999999999995
Error averages by case: (1861.3741760355085 1864.0895324846267 1862.1267163378145 1867.243456021084 1862.8375760354838 1861.1854836622088 1861.1609163378414 1862.3807163377858 1861.2181163378398 1866.0012640670748 1865.830983275855 1861.4707796005741 1867.9922760257487 1869.083276194792 1923.8687846264006 1863.203808891033 1863.7455036770723 1883.3769760354792 1890.2777169645117 1862.1757163378145 1861.9367163378145 1903.831906330336 1929.1443786719717 2322.2914172163205 1876.4447468784294 1862.735155409321 1870.0477251350026 1861.0929163378414 1884.5950787916913 1860.593716337791)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.8 0.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 0.0 17.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.524
Average program size in population (points): 45.522
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 407
Genome diversity (% unique Plush genomes):	 0.444
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 407
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.146
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 388000
Number of point (instruction) evaluations so far: 508352580
--- Timings ---
Current time: 1481492391375 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 387
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 388
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 388
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_dup_items vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec vector_integer_pop integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55775.340907244594
Median total errors in population: 339.79999999999995
Error averages by case: (1831.2722435748199 1833.9406435747967 1832.0172435748198 1837.314243574801 1832.8476435747966 1831.080843574842 1841.0396435748412 1842.5570435747973 1841.1278435748434 1835.9602435748197 1835.6866435748 1831.6896435747988 1847.847643574838 1840.6532435748197 1894.8992435748198 1833.1242435748197 1833.961043574802 1853.2836435747965 1860.4494435748013 1842.0772435748197 1841.8252435748198 1873.7042435748444 1901.54964357484 2278.5496435748287 1847.8300435748024 1833.1060435748007 1839.0602435748197 1840.980643574841 1855.3906435748445 1830.5148435747972)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.0 10.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.648
Average program size in population (points): 45.647
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 390
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 390
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.157
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 389000
Number of point (instruction) evaluations so far: 509692020
--- Timings ---
Current time: 1481492395087 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 388
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 389
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 389
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 66132.14361943184
Median total errors in population: 339.79999999999995
Error averages by case: (2181.1680069190907 2183.754374531013 2181.8890069190907 2186.783649258516 2182.549145415679 2181.056722589143 2181.0218492776985 2182.3314492776412 2181.119649277687 2185.5792492585406 2185.3554147111986 2181.151053315131 2187.623053315169 2191.0688147112132 2240.1280069190907 2182.9509068642187 2183.8128184239845 2202.313906864189 2209.405444771986 2182.03844927767 2181.7250057231236 2222.218974531047 2247.582745415708 2573.67737200943 2196.375913504216 2182.388585626055 2188.4778976699395 2180.9688492776986 2205.1088544989443 2180.5184492776534)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.03665572881693843 0.16334427118306158 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.16334427118306158 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.969
Average program size in population (points): 44.964
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 352
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 352
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.15
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 390000
Number of point (instruction) evaluations so far: 511011090
--- Timings ---
Current time: 1481492398722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 389
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 390
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 390
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59884.42792230311
Median total errors in population: 339.79999999999995
Error averages by case: (1971.258463804976 1973.76365072366 1972.0134638049758 1977.3376507236642 1972.821472237099 1971.0055361950485 1970.921536195047 1972.4284638049528 1971.019863805002 1976.0038507236852 1975.7292507236639 1971.595850723661 1977.872050723704 1978.3708507236852 2028.605463804976 1973.0509193199728 1973.3310507236654 1993.0045193199483 2005.3662507236643 1971.961463804976 1971.9118507236851 2012.9204507237107 2028.5182722371471 2420.655450723684 1985.1370507236657 1972.6796507236659 1979.0128507236852 1970.8815361950471 1994.7848507237118 1970.4643361949995)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.1958927182798187)
Average genome size in population (length): 44.411
Average program size in population (points): 45.41
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 353
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 353
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.152
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 391000
Number of point (instruction) evaluations so far: 512343420
--- Timings ---
Current time: 1481492402425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 390
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 391
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 391
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59324.28475155374
Median total errors in population: 339.79999999999995
Error averages by case: (1951.3450341586272 1954.2072556783207 1952.1288402127004 1957.2772437777676 1952.8558203446953 1961.148120817334 1961.1167805150287 1962.5889805149827 1951.1943805150306 1956.1819724329443 1955.6092968527994 1951.530643777766 1957.9995805150252 1958.8578285886224 2011.3513329279867 1953.208391810388 1953.5610266127337 1973.0401871246013 1980.5144098248197 1952.1373805150063 1962.0763805150063 1993.1149431208971 2020.0716885101583 2376.064924250198 1966.0840437777697 1952.7643966618218 1959.142096852821 1951.056180515028 1975.4655931709722 1960.5899966618206)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 15.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.983
Average program size in population (points): 44.979
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 344
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 344
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.141
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 392000
Number of point (instruction) evaluations so far: 513662910
--- Timings ---
Current time: 1481492406061 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 391
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 392
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 392
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62971.94793018574
Median total errors in population: 339.79999999999995
Error averages by case: (2071.2142910061916 2073.8600910061677 2071.9342910061914 2077.253091006173 2072.7090910061684 2071.064091006214 2071.0416910062136 2072.525891006169 2071.1312910062156 2075.9792910061915 2075.447491006171 2071.5014910061695 2077.7868910062084 2078.9702910061915 2131.5292910061917 2073.0512910061916 2073.8234910061733 2092.7312910061664 2102.1226910061723 2072.0742910061913 2071.9012910061915 2112.450491006215 2151.044691006207 2585.4966910061903 2085.0128910061735 2072.531691006171 2078.8092910061914 2070.9806910062134 2095.453691006216 2070.514891006168)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 9.399999999999999 2.799999999999997 1.0 1.0 16.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.299
Average program size in population (points): 45.299
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 315
Genome diversity (% unique Plush genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 315
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.158
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 393000
Number of point (instruction) evaluations so far: 514991880
--- Timings ---
Current time: 1481492409756 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 392
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 393
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 393
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_mod vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (float_mod in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55462.4529617252
Median total errors in population: 339.79999999999995
Error averages by case: (1821.3668853908398 1824.1100853908147 1822.1588853908397 1827.5606853908134 1822.842485390815 1821.2002853908637 1821.1980853908688 1822.6186853908089 1821.2628853908661 1826.5018853908398 1825.6280853908181 1821.7118853908157 1828.2816853908646 1829.7318853908398 1884.6068853908398 1823.3588853908398 1823.6966853908189 1843.4648853908077 1850.0900853908197 1822.2048853908398 1822.0158853908397 1863.802285390866 1908.3294853908624 2307.797085390847 1836.919485390821 1822.8114853908153 1829.5988853908398 1821.123085390869 1845.8484853908662 1820.6100853908156)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.0588799919401328 0.2588799919401328 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 3.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 1.2000000000000028 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2588799919401328 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.284
Average program size in population (points): 45.283
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 340
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 340
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.155
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 394000
Number of point (instruction) evaluations so far: 516320400
--- Timings ---
Current time: 1481492413435 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 393
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 394
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 394
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52185.618847723825
Median total errors in population: 339.79999999999995
Error averages by case: (1711.4831585290153 1714.191358528992 1712.1791585290152 1717.7107585290025 1712.794358528992 1711.1864414710064 1711.18675680251 1712.3677568024782 1711.2899568025196 1716.6581585290153 1715.8991585289953 1711.907890702551 1718.4272588800036 1718.1381585290153 1791.8891585290153 1713.0711585290153 1714.018358528997 1733.9387585289958 1745.291358528996 1712.2450907025734 1711.9937568024952 1754.7063585290398 1778.7277585290362 2215.5301585290235 1727.5079585289975 1712.8711585290018 1719.2051585290153 1711.1116588800066 1737.5021585290401 1710.5885092974047)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 0.7999999999999972 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2588799919401328 0.7999999999999972 0.10929742682568167)
Average genome size in population (length): 45.126
Average program size in population (points): 46.126
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 353
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 353
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.156
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 395000
Number of point (instruction) evaluations so far: 517674180
--- Timings ---
Current time: 1481492417222 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 394
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 395
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 395
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59113.64620725355
Median total errors in population: 339.79999999999995
Error averages by case: (1921.622289182856 1924.2212891828333 1922.452289182856 1931.7408891828368 1923.1404891828333 1921.6131721248466 1921.6763721248483 1924.417689182832 1921.623489182879 1931.633289182856 1925.8166891828357 1925.135689182836 1928.534289182873 1953.979289182856 2043.832289182856 1925.076289182856 1924.1674891828384 1943.5490891828317 1981.7738891828385 1922.576289182856 1922.484289182856 1969.4808891828786 2224.6766891828665 2675.9712891828462 1956.4428891828404 1924.518289182836 1932.663289182856 1921.5433721248482 1946.421089182879 1920.861572124804)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 5.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 17.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.451
Average program size in population (points): 45.45
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 343
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 343
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.157
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 396000
Number of point (instruction) evaluations so far: 519007710
--- Timings ---
Current time: 1481492420895 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 395
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 396
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 396
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56050.1328
Median total errors in population: 339.79999999999995
Error averages by case: (1841.242 1844.1639999999743 1842.017 1847.6017999999779 1842.7781999999743 1841.0270000000241 1840.981800000025 1842.3873999999744 1841.0878000000264 1846.509 1845.394199999977 1841.2597999999764 1848.2754000000214 1848.472 1904.082 1843.126 1843.28459999998 1863.4363999999728 1900.6179999999792 1842.049 1841.828 1884.3046000000268 1908.2416000000233 2313.130800000009 1854.8805999999806 1842.3783999999775 1849.023 1840.926800000025 1865.1532000000268 1840.4723999999753)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 14.399999999999999 2.799999999999997 1.0 0.0 16.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.992
Average program size in population (points): 45.991
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 363
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 363
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.14
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 397000
Number of point (instruction) evaluations so far: 520357470
--- Timings ---
Current time: 1481492424672 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 396
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 397
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 397
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50947.214751239735
Median total errors in population: 339.79999999999995
Error averages by case: (1671.5121585290153 1674.195690702552 1672.106 1677.7869509872319 1672.862758528994 1671.15180000002 1671.1284000000167 1672.6157999999825 1671.211400000022 1676.5271633443613 1675.7481430133828 1671.559609392625 1678.187349712174 1680.0048979276808 1738.5816368005485 1673.3085798329632 1673.312763344344 1693.8794414709662 1730.1977646016794 1672.177 1671.901 1715.1312588800138 1746.174493660372 2119.9709957145806 1686.5046452519696 1672.7021440210958 1679.28713235175 1671.0624000000166 1695.8661731713426 1670.5591999999795)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 4.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 17.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.959
Average program size in population (points): 45.956
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 364
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 364
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.15
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 398000
Number of point (instruction) evaluations so far: 521706240
--- Timings ---
Current time: 1481492428397 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 397
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 398
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 398
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58122.281
Median total errors in population: 339.79999999999995
Error averages by case: (1911.385 1914.031599999972 1912.095 1917.9247999999736 1912.6989999999728 1911.1174000000258 1911.1060000000284 1912.4703999999706 1911.153800000028 1916.835 1915.376399999977 1911.4103999999743 1917.893800000023 1919.504 1979.556 1913.049 1913.4775999999783 1933.214199999968 1942.6537999999782 1912.109 1911.994 1953.4198000000283 1987.2910000000247 2365.3278000000046 1926.3809999999798 1912.5705999999766 1919.079 1911.0310000000284 1935.5918000000283 1910.5327999999738)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 7.799999999999997 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.03
Average program size in population (points): 45.027
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 344
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 344
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.155
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 399000
Number of point (instruction) evaluations so far: 523027140
--- Timings ---
Current time: 1481492432077 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 398
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 399
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 399
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53087.01213904888
Median total errors in population: 339.79999999999995
Error averages by case: (1741.3724979682959 1744.088097968274 1742.1084979682958 1747.3090979682781 1742.7326979682737 1741.111097968318 1741.068697968315 1742.4040979682766 1741.1490979683188 1745.9514979682958 1745.5404979682767 1741.320697968275 1748.0838979683133 1750.0074979682959 1804.9064979682958 1743.0204979682958 1744.0292979682795 1763.7604979682756 1772.7088979682783 1742.1234979682959 1742.072497968296 1784.5808979683193 1807.5264979683168 2271.4460979683013 1756.6478979682802 1742.6754979682798 1748.7924979682957 1741.009697968315 1766.930697968319 1740.532697968274)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 20.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.327
Average program size in population (points): 45.326
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 320
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.173
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 400000
Number of point (instruction) evaluations so far: 524356950
--- Timings ---
Current time: 1481492435742 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 399
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 400
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 400
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_length} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_length integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57216.917763375684
Median total errors in population: 339.79999999999995
Error averages by case: (1881.2164425922754 1884.0095850398372 1881.986 1887.1689373136942 1882.752042592249 1881.0150000000253 1880.9598000000203 1882.319199999979 1881.0624000000266 1886.0455274985277 1885.4263285519937 1881.6889553933606 1888.1778559934178 1888.706040081598 1944.7816101803132 1883.2115369788671 1883.8881274985079 1903.2173574077021 1910.7011645794785 1882.031 1881.814 1923.7301425465691 1948.6527871733988 2345.9013137718553 1896.954652978078 1882.7243516391527 1889.4931335264068 1880.9098000000204 1905.9076700382846 1880.4649999999745)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 2.6000000000000014 2.799999999999997 1.0 0.0 1.7999999999999972 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.714
Average program size in population (points): 45.714
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 321
Genome diversity (% unique Plush genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 321
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.146
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 401000
Number of point (instruction) evaluations so far: 525698370
--- Timings ---
Current time: 1481492439410 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 400
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 401
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 401
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rest integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rest integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57822.861613772315
Median total errors in population: 339.79999999999995
Error averages by case: (1901.4772543758581 1904.286654375834 1902.2212543758583 1907.6546543758404 1902.8314543758336 1901.1896543758817 1901.1827456241617 1902.5702543758373 1901.2360543758841 1906.4072543758582 1905.6266543758366 1901.8214543758352 1908.2156543758767 1909.6072543758582 1965.1842543758582 1903.2932543758582 1903.6284543758388 1923.509254375836 1960.881054375839 1902.1912543758583 1902.1202543758582 1943.6224543758835 1981.623854375881 2323.451254375862 1916.2928543758403 1902.9246543758409 1908.7952543758581 1901.1097456241619 1927.3022543758839 1900.6032543758345)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.3456241416655579 1.6 0.8 1.0 1.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 0.20000000000000284 28.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.3456241416655579 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.11
Average program size in population (points): 45.101
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 329
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 329
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.148
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 402000
Number of point (instruction) evaluations so far: 527021670
--- Timings ---
Current time: 1481492443082 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 401
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 402
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 402
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rest integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50010.67697974889
Median total errors in population: 339.79999999999995
Error averages by case: (1641.484014451792 1644.0838144517688 1642.234014451792 1637.6654144517834 1632.8514144517696 1641.2044928138444 1641.213092813833 1632.6538144517801 1641.272297393786 1636.435014451792 1635.5970144517719 1631.3312144517715 1648.2952144518015 1640.2196891985598 1696.8406891985599 1633.180014451792 1643.7498891985413 1664.0144891985465 1661.5904891985417 1642.265014451792 1641.954697393762 1675.065489198584 1717.3428891985805 2231.683089198571 1647.1876891985423 1632.4790144517826 1638.821014451792 1641.1330928138332 1656.2384891985841 1640.590412209189)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.5585290151921032 0.24259227534509775 0.662626616137139 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.73737338386286 2.799999999999997 0.15852901519210327 0.4425922753450977 4.799999999999997 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.718
Average program size in population (points): 45.713
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 315
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 315
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.154
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 403000
Number of point (instruction) evaluations so far: 528363210
--- Timings ---
Current time: 1481492446809 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 402
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 403
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 403
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53335.424063516024
Median total errors in population: 339.79999999999995
Error averages by case: (1751.350361783105 1753.9495182322253 1752.0319020854108 1757.5610417686898 1752.722961783082 1751.098667994337 1751.0623006699595 1752.3737020853957 1751.1261850274036 1756.1964498146713 1755.302148183136 1751.9998617733036 1758.2822617733348 1760.2134619423882 1814.742970373997 1753.1189946386291 1753.9886678620326 1773.7933617830895 1798.0599027121102 1752.092902085411 1751.978902085411 1794.4572920779306 1822.9307644195665 2207.5631285298673 1767.3233326260286 1752.765741156927 1759.042494003349 1750.9981006699595 1776.7771829052986 1750.5195006699234)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.5585290151921034 0.04147098480789646 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.1585290151921035 0.1585290151921035 20.200000000000003 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.538
Average program size in population (points): 45.535
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 293
Genome diversity (% unique Plush genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 293
Syntactic diversity (% unique Push programs):	 0.488
Total error diversity:				 0.155
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 404000
Number of point (instruction) evaluations so far: 529699350
--- Timings ---
Current time: 1481492450512 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 403
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 404
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 404
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rest integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54856.730200000005
Median total errors in population: 339.79999999999995
Error averages by case: (1801.42 1804.0849999999764 1802.132 1807.592599999984 1802.9033999999767 1801.2536000000223 1801.2452000000187 1802.63499999998 1801.3066000000242 1806.48 1805.9567999999801 1801.6379999999776 1808.163600000015 1809.962 1864.852 1803.218 1804.3443999999827 1823.6661999999792 1831.206199999982 1802.261 1802.3 1843.6510000000242 1876.5336000000207 2289.446400000009 1817.382999999984 1803.2421999999838 1809.574 1801.170200000019 1826.4530000000248 1800.6551999999774)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.281
Average program size in population (points): 45.279
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 283
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.168
Error (vector) diversity:			 0.171
--- Run Statistics ---
Number of program evaluations used so far: 405000
Number of point (instruction) evaluations so far: 531027780
--- Timings ---
Current time: 1481492454238 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 404
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 405
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 405
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55445.19488763833
Median total errors in population: 339.79999999999995
Error averages by case: (1821.3441585290152 1824.0953585289922 1822.1401585290153 1827.5619585289942 1822.7471585289918 1821.1930414710073 1821.2062414710083 1822.4585585289915 1821.2499585290393 1826.3311585290153 1825.673558528995 1821.7101585289936 1828.1563585290332 1830.6441585290152 1885.1841585290153 1823.1021585290152 1823.9623585289971 1843.4843585289898 1851.4109585289968 1822.2271585290152 1822.0971585290154 1863.886558529039 1901.7143585290369 2295.809358529018 1836.8435585289983 1822.7751585289943 1829.0121585290153 1821.1320414710083 1845.46275852904 1820.5786414709619)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 2.6000000000000014 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.055
Average program size in population (points): 46.055
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 301
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.159
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 406000
Number of point (instruction) evaluations so far: 532379430
--- Timings ---
Current time: 1481492457958 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 405
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 406
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 406
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (float_tan vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (float_tan vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54253.90312565063
Median total errors in population: 339.79999999999995
Error averages by case: (1781.308513240414 1784.007531875888 1782.0824715912372 1787.3639306008054 1782.732523902043 1781.106210259972 1781.0851424335306 1782.4627394176564 1781.1751394177027 1785.9805442330253 1785.7680603041435 1781.7579306008029 1788.0937394176972 1789.656274901152 1846.211347006434 1783.1344679434133 1783.8603915304002 1803.8885545119774 1811.7249806438201 1782.119539417679 1781.8665394176792 1824.1206445225712 1858.8881860618926 2265.8253536935745 1797.8483306008081 1782.825439768639 1788.7486603041623 1781.0211424335307 1806.721035755423 1780.5177598424953)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 5.799999999999997 29.80000000000001 37.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.16003693029466148)
Average genome size in population (length): 44.509
Average program size in population (points): 45.504
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 304
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 304
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.165
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 407000
Number of point (instruction) evaluations so far: 533714700
--- Timings ---
Current time: 1481492461664 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 406
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 407
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 407
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_max} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_max integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56886.27289146329
Median total errors in population: 339.79999999999995
Error averages by case: (1851.3605586883884 1853.9477586883659 1852.1815586883883 1857.4939586883638 1852.7381586883662 1851.2086413116322 1851.2028413116384 1852.50195868836 1851.2537586884116 1856.4525586883885 1855.721558688369 1851.5419586883684 1857.8835586884118 1860.3305586883885 1914.9355586883885 1853.1475586883885 1853.9469586883715 1873.4601586883578 1881.3955586883717 1852.2225586883885 1851.9785586883884 1893.906158688411 2385.5367586883717 2413.0647586883842 1867.308558688373 1852.998358688364 1858.8325586883884 1851.1268413116384 1875.9887586884117 1850.603841630337)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.19984062681853287 0.6000000000000001 0.8 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 4.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 1.0 2.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.19984062681853287 1.2000000000000028 0.04147098480789646)
Average genome size in population (length): 44.304
Average program size in population (points): 45.302
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 280
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.166
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 408000
Number of point (instruction) evaluations so far: 535043820
--- Timings ---
Current time: 1481492465327 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 407
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 408
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 408
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56339.4909082737
Median total errors in population: 339.79999999999995
Error averages by case: (1851.362459697694 1854.1776161468124 1852.139 1857.691739683267 1852.9860596976703 1851.2188000000222 1851.2068000000277 1852.6019999999696 1851.2934000000246 1856.3215477292604 1855.6864460977247 1851.9756632627602 1858.1509596879353 1859.8245598569777 1914.861068288586 1853.3830925532186 1853.4367477292406 1873.3080596976624 1941.1162006266973 1852.204 1852.096 1893.9261899925207 1928.232462334157 2264.7309943282053 1865.7408305406157 1853.0218390715038 1859.214008797188 1851.1318000000279 1875.8349624538755 1850.6155999999776)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 20.200000000000003 30.80000000000001 39.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.782
Average program size in population (points): 45.78
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 289
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 289
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 409000
Number of point (instruction) evaluations so far: 536387280
--- Timings ---
Current time: 1481492469037 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 408
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 409
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 409
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58329.25979138085
Median total errors in population: 339.79999999999995
Error averages by case: (1921.324425493156 1923.98362549313 1922.094425493156 1926.9224254931337 1922.6448254931297 1921.116307633001 1921.1187403086324 1922.2558254931262 1921.1792254931831 1925.714425493156 1925.3994254931322 1921.6888254931323 1927.7974254931778 1930.1734254931562 1983.009425493156 1922.956425493156 1924.043625493136 1943.2080254931257 1950.2956254931362 1922.134425493156 1921.909425493156 1963.456025493184 1995.031825493179 2294.1748254931636 1936.8830254931368 1922.746625493131 1928.629425493156 1921.0477403086325 1945.772025493184 1920.5479403085799)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 17.4 0.7999999999999972 1.4425922753450977 0.4425922753450977 22.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.302
Average program size in population (points): 45.298
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 276
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.143
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 410000
Number of point (instruction) evaluations so far: 537716340
--- Timings ---
Current time: 1481492472707 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 409
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 410
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 410
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54018.773442676684
Median total errors in population: 339.79999999999995
Error averages by case: (1771.4108414225561 1774.0218414225326 1772.171841422556 1777.4194414225362 1772.8278414225326 1771.170041422579 1771.1742414225778 1772.4456414225344 1771.221641422581 1776.3458414225563 1775.4846414225347 1771.2886414225336 1778.2436414225754 1778.0578414225563 1838.1958414225562 1773.152841422556 1773.3514414225363 1793.507841422533 1820.5326414225365 1772.2068414225562 1771.9038414225563 1814.2844414225808 1839.612841422578 2313.342241422561 1786.0454414225378 1772.7846414225367 1779.3508414225562 1771.0962414225778 1795.560041422581 1770.5614414225333)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 7.399999999999999 2.799999999999997 2.0 1.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.664
Average program size in population (points): 45.662
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 282
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.151
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 411000
Number of point (instruction) evaluations so far: 539056260
--- Timings ---
Current time: 1481492476397 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 410
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 411
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 411
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56585.33910908079
Median total errors in population: 339.79999999999995
Error averages by case: (1861.4153995864424 1864.156999586419 1862.1593995864423 1867.427799586427 1862.9069995864188 1861.2193152290288 1861.2131152290253 1862.4789995864228 1861.2525995864662 1866.3743995864425 1865.8159574077044 1861.8721995864212 1867.8897995864581 1870.2413995864424 1926.5543995864423 1863.3593995864424 1863.5413424475698 1883.6399995864215 1890.1587995864245 1862.215 1862.0433995864423 1903.7793995864654 1935.5205995864626 2279.8465995864485 1877.8545995864256 1862.963799586427 1869.1975574077246 1861.1491152290253 1886.4739995864666 1860.6167152289847)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.6421787176504223 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.4425922753450977 0.8421787176504223 10.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.296
Average program size in population (points): 45.293
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 259
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.157
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 412000
Number of point (instruction) evaluations so far: 540385140
--- Timings ---
Current time: 1481492480102 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 411
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 412
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 412
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_mult integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56394.33236445123
Median total errors in population: 339.79999999999995
Error averages by case: (1851.2997890723436 1853.9120701327151 1852.0367890723437 1857.3417890723204 1852.866789072317 1851.0635334562523 1850.997333456251 1852.349133456203 1851.1007334562537 1855.8797890723436 1855.6457890723216 1851.5365890723197 1857.8424470080395 1858.8167890723437 1917.2867890723437 1853.1277890723436 1853.9697890723246 1873.2729890723183 1881.1617890723226 1852.0605045664324 1851.9987334562272 1893.84978907237 1914.7237890723666 2394.814389072342 1865.953389072324 1852.8827890723214 1858.9627890723436 1850.9472470080416 1876.1285890723705 1850.5018470079922)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 13.200000000000003 29.80000000000001 39.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.25793567393152744 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.18
Average program size in population (points): 45.178
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 255
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.163
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 413000
Number of point (instruction) evaluations so far: 541710540
--- Timings ---
Current time: 1481492483770 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 412
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 413
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 413
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_rot} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest float_rot in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (float_rot in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50442.189536103564
Median total errors in population: 339.79999999999995
Error averages by case: (1651.339653643621 1654.2684751633112 1652.0604596976941 1657.3946632627587 1652.7810398296865 1651.0335403023314 1651.0050000000258 1652.3761999999722 1651.076400000028 1656.008591917938 1655.5587163377909 1651.4472632627574 1658.0780000000234 1660.689448073616 1716.6309524129804 1653.2060112953818 1653.6132460977242 1674.002806609593 1682.3680293098128 1652.076 1651.825 1694.9939626058938 1721.5567079951536 2230.3871437351954 1666.9062632627624 1652.5382161468128 1658.8147163378144 1650.941000000026 1676.7636126559692 1650.4484161468101)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 44.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.0 2.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 9.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.257
Average program size in population (points): 45.256
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 248
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.157
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 414000
Number of point (instruction) evaluations so far: 543038250
--- Timings ---
Current time: 1481492487534 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 413
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 414
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 414
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction float_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 float_swap integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56997.91990724459
Median total errors in population: 339.79999999999995
Error averages by case: (1871.2232435748197 1874.0016435747968 1871.9702435748197 1877.2808435748007 1872.8148435747962 1871.051443574841 1871.0016435748416 1872.480443574797 1871.1560435748434 1876.1412435748198 1875.6500435748 1871.6926435747987 1877.9050435748388 1878.6362435748197 1931.6632435748197 1873.0722435748198 1873.520443574803 1893.2142435747962 1930.560243574802 1872.0552435748198 1871.8672435748197 1913.6218435748435 1935.8760435748395 2393.6900435748203 1886.513643574803 1872.8816435748022 1878.9542435748197 1870.9454435748414 1895.9844435748437 1870.4940435747976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.153
Average program size in population (points): 45.149
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 246
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.154
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 415000
Number of point (instruction) evaluations so far: 544362840
--- Timings ---
Current time: 1481492491289 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 414
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 415
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 415
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 65895.31371126686
Median total errors in population: 339.79999999999995
Error averages by case: (2171.2515989812127 2173.9420674818316 2171.9776011212907 2176.8807647860017 2172.644370421674 2171.0405574077386 2171.0218000000286 2172.23579999997 2171.0846000000147 2175.7218498938046 2175.572939439269 2171.0907647860145 2177.6642000000243 2196.511101203749 2272.305984770232 2172.9776985333197 2173.321671565408 2192.4320303333275 2228.958484988939 2172.003 2171.788 2212.0940105238287 2232.5004412216226 2541.394380283773 2185.614364786017 2172.583475742412 2178.7383394392814 2170.9568000000286 2198.5297192186963 2170.4752943372755)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 3.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 0.20000000000000284 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.10929742682568167)
Average genome size in population (length): 43.698
Average program size in population (points): 44.691
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 222
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.138
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 416000
Number of point (instruction) evaluations so far: 545673780
--- Timings ---
Current time: 1481492494989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 415
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 416
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 416
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_div} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rest integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54670.2828007106
Median total errors in population: 339.79999999999995
Error averages by case: (1781.4128421787177 1784.1216910061662 1782.1768421787178 1787.1095997114312 1782.7728425922508 1781.2349574077475 1781.2473574077505 1782.507757407697 1781.3039574077502 1785.743799711455 1786.0563854455716 1781.6936559933786 1788.163455993423 1790.101385445593 1846.4878421787178 1783.2311850398632 1784.3313645794794 1803.6911850398337 1809.4841628390361 1782.2715574077247 1782.1694523156596 1824.0842910062163 1854.4478425922964 2684.5911911483427 1799.5030531282894 1783.0864416955433 1789.1581348966977 1781.1663574077506 1806.2948521397166 1780.6373574077013)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.743
Average program size in population (points): 45.742
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 213
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.479
Total error diversity:				 0.163
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 417000
Number of point (instruction) evaluations so far: 547016070
--- Timings ---
Current time: 1481492498697 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 416
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 417
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 417
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_rest vector_integer_pop in1 integer_div float_max vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 float_max vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52508.60381528662
Median total errors in population: 339.79999999999995
Error averages by case: (1721.2634186219686 1724.0206027110714 1721.9804186219687 1727.974647579187 1722.942950400243 1721.1637403023294 1721.188740302329 1722.6106596976701 1721.1910596977186 1726.6230475792088 1726.495114584512 1722.1165476009883 1728.050147601031 1739.4477145845335 1787.1144186219688 1723.320318577686 1723.9281996282696 1743.586118577661 1757.5630230420363 1722.169459697694 1721.990003718805 1765.1024027111205 1805.0019504002896 2183.897105918107 1784.5262713186733 1723.0749082709917 1730.647592049444 1721.085740302329 1747.9914328690395 1720.5360596976702)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 2.0 0.1999999999999993 0.6000000000000014 2.799999999999997 0.0 1.0 7.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.538
Average program size in population (points): 45.535
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.157
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 418000
Number of point (instruction) evaluations so far: 548352210
--- Timings ---
Current time: 1481492502426 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 417
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 418
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 418
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52459.195166542326
Median total errors in population: 339.79999999999995
Error averages by case: (1721.436359973932 1724.2421599739073 1722.246359973932 1727.7547599739103 1722.9099599739075 1721.2123272983263 1721.1921599739535 1722.6493599739094 1721.2591599739571 1726.573359973932 1725.9387599739111 1721.8173599739087 1728.04015997395 1731.332359973932 1787.1453599739318 1723.276359973932 1724.0633599739122 1743.8363599739066 1749.9447599739137 1722.224359973932 1722.132359973932 1764.0849599739577 1799.4547599739542 2205.78075997394 1737.9627599739142 1722.9145599739109 1729.052359973932 1721.1211599739534 1746.9711599739578 1720.6251599739082)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 8.399999999999999 2.799999999999997 1.0 0.0 1.7999999999999972 30.80000000000001 54.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.24
Average program size in population (points): 45.237
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 191
Genome diversity (% unique Plush genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 191
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.154
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 419000
Number of point (instruction) evaluations so far: 549679410
--- Timings ---
Current time: 1481492506105 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 418
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 419
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 419
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec vector_integer_rot integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec vector_integer_rot integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 62922.39165636746
Median total errors in population: 339.79999999999995
Error averages by case: (2051.5159618789153 2054.034761878893 2052.271961878915 2057.52476187889 2052.906161878893 2051.3461618789374 2051.3743618789435 2052.657561878886 2051.379361878939 2056.4809618789154 2055.7093618788954 2053.917361878893 2057.914161878941 2064.2859618789153 2127.289961878915 2053.3899618789155 2054.248961878898 2072.9391618788836 2094.7425618788975 2052.307961878915 2052.2399618789154 2092.367961878939 2589.1475618789086 2612.3217618789076 2067.926761878899 2053.2091618788904 2059.2089618789155 2051.2803618789435 2075.735361878939 2050.716361878893)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 1.0 10.200000000000003 30.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.828
Average program size in population (points): 44.822
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 155
Genome diversity (% unique Plush genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.177
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 420000
Number of point (instruction) evaluations so far: 550994250
--- Timings ---
Current time: 1481492509795 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 419
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 420
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 420
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51923.636
Median total errors in population: 339.79999999999995
Error averages by case: (1701.274 1704.029999999977 1702.078 1707.302799999985 1702.8829999999766 1701.069400000022 1711.0390000000168 1712.4863999999827 1711.1124000000239 1706.036 1705.77679999998 1701.5579999999784 1718.108800000014 1709.079 1762.879 1703.318 1703.4905999999812 1724.2243999999823 1731.106199999981 1712.087 1711.881 1745.0182000000236 1771.3150000000217 2198.6326000000063 1716.6633999999826 1702.8909999999842 1709.238 1710.9750000000167 1725.588200000024 1700.4947999999774)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.0 10.200000000000003 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.554
Average program size in population (points): 45.552
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 175
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.163
Error (vector) diversity:			 0.165
--- Run Statistics ---
Number of program evaluations used so far: 421000
Number of point (instruction) evaluations so far: 552330870
--- Timings ---
Current time: 1481492513498 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 420
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 421
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 421
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58053.240399999995
Median total errors in population: 339.79999999999995
Error averages by case: (1911.394 1904.1443999999785 1912.135 1917.0965999999787 1912.6573999999778 1901.0852000000211 1901.0764000000236 1902.3283999999758 1901.1312000000225 1915.944 1915.7899999999806 1911.468599999979 1907.867000000021 1919.503 1972.835 1913.001 1913.283799999983 1933.2991999999745 1940.305199999982 1902.093 1901.851 1953.4390000000228 1979.3024000000205 2413.166600000003 1927.8411999999842 1912.8719999999796 1919.832 1901.0044000000237 1934.9844000000237 1900.5089999999786)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 2.0 1.0 2.200000000000003 30.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 12.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.256
Average program size in population (points): 45.254
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 146
Genome diversity (% unique Plush genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.158
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 422000
Number of point (instruction) evaluations so far: 553658550
--- Timings ---
Current time: 1481492517201 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 421
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 422
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 422
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56403.93899895393
Median total errors in population: 339.79999999999995
Error averages by case: (1851.339425910607 1854.0442673815655 1852.0992263058663 1857.5828103949686 1852.8718259105808 1851.1104673816164 1851.0664673816188 1852.467467381563 1851.1552673816184 1856.4082780233452 1855.7268103949712 1851.5618170937275 1857.9971552849304 1860.6055297564455 1912.7825222684312 1853.174425910607 1853.5083467970708 1873.4081655932146 1880.7447889325733 1852.0972673815918 1851.9148114027028 1893.89012626161 1923.9991610419686 2396.6417000258966 1867.0135573771781 1853.140515954886 1858.9963544363409 1851.0074673816189 1875.036104823168 1850.546867381567)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 20.200000000000003 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.204
Average program size in population (points): 45.2
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 149
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.163
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 423000
Number of point (instruction) evaluations so far: 554984670
--- Timings ---
Current time: 1481492520894 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 422
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 423
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 423
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div float_max vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 float_max vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53882.07432877867
Median total errors in population: 339.79999999999995
Error averages by case: (1771.1959089838958 1774.2163089838673 1771.9209089838957 1777.2361089838694 1772.8079089838675 1770.9080237993735 1770.809623799377 1772.2537089838625 1770.9459089839252 1775.9159089838959 1775.5465089838713 1771.4863089838698 1778.0007089839219 1779.4389089838958 1832.4789089838957 1773.1329089838957 1773.4483089838736 1793.3633089838625 1798.3165089838747 1771.8999089838958 1771.7479089838957 1814.3955089839255 1833.1387089839209 2213.250908983908 1785.7149089838767 1772.5385089838687 1779.096908983896 1770.780623799377 1795.704508983926 1770.3832237993165)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 0.0 3.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 7.799999999999997 29.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.672
Average program size in population (points): 45.669
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 137
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.152
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 424000
Number of point (instruction) evaluations so far: 556324830
--- Timings ---
Current time: 1481492524623 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 423
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 424
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 424
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_set} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec vector_integer_set integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59747.914
Median total errors in population: 339.79999999999995
Error averages by case: (1961.276 1963.8527999999774 1962.041 1967.4799999999832 1962.794799999977 1961.0502000000215 1971.027800000018 1972.5583999999806 1971.116400000023 1966.067 1965.5063999999802 1961.7035999999796 1977.9580000000128 1969.744 2024.161 1963.216 1963.5343999999825 1982.8785999999784 1991.8719999999823 1972.032 1971.876 2003.1758000000236 2042.9714000000215 2472.7216000000035 1976.4741999999837 1963.197399999984 1969.022 1970.970000000018 1985.143400000024 1960.4917999999775)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.0 3.799999999999997 29.80000000000001 49.799999999999955 0.20000000000000284 0.5999999999999996 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.558
Average program size in population (points): 44.557
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.159
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 425000
Number of point (instruction) evaluations so far: 557631570
--- Timings ---
Current time: 1481492528294 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 424
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 425
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 425
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49067.457599999994
Median total errors in population: 339.79999999999995
Error averages by case: (1611.2668 1614.1509999999744 1612.0778 1617.461399999986 1612.9917999999748 1611.083800000024 1611.0424000000141 1612.5419999999838 1611.131400000026 1616.4708 1615.671399999977 1611.7687999999766 1618.4346000000137 1619.2418 1674.9708 1613.2138 1613.7109999999805 1634.1205999999818 1641.7385999999801 1612.0978 1612.3068 1655.1958000000266 1680.3266000000224 2017.599800000017 1626.828599999981 1612.8039999999855 1619.2558000000001 1610.9844000000141 1636.454000000027 1610.5133999999757)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.0 0.2 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 22.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.0 15.799999999999997 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.768
Average program size in population (points): 45.766
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 120
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.166
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 426000
Number of point (instruction) evaluations so far: 558974610
--- Timings ---
Current time: 1481492532074 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 425
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 426
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 426
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57687.6524
Median total errors in population: 339.79999999999995
Error averages by case: (1881.333 1884.1539999999754 1882.021 1887.3133999999782 1882.6901999999752 1881.0762000000234 1881.0294000000242 1882.4319999999757 1881.1264000000256 1886.214 1885.538799999979 1881.4577999999765 1887.991400000019 1889.527 1944.829 1883.14 1883.6287999999809 1903.4691999999736 1911.5087999999796 1882.049 1881.893 1924.362600000025 2406.940199999996 2358.415400000005 1894.8577999999814 1882.6823999999785 1888.8 1880.978400000024 1905.6986000000259 1880.494599999976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 7.799999999999997 29.80000000000001 49.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.166
Average program size in population (points): 45.161
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.495
Total error diversity:				 0.168
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 427000
Number of point (instruction) evaluations so far: 560299590
--- Timings ---
Current time: 1481492535794 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 426
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 427
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 427
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45488.21543274466
Median total errors in population: 339.79999999999995
Error averages by case: (1491.3094596976941 1494.0862596976717 1492.0974596976941 1497.4392596976813 1492.9852596976714 1491.005740302328 1490.9169403023204 1492.4564596976784 1491.036459697718 1496.2314596976942 1495.895259697674 1491.6194596976734 1498.3592596977066 1498.988459697694 1553.956459697694 1493.148459697694 1493.590459697677 1514.3008596976779 1522.3578596976754 1492.028459697694 1491.946459697694 1535.6598596977196 1552.6844596977162 1927.9970596977112 1505.8584596976775 1492.8472596976821 1499.345459697694 1490.8789403023204 1516.7482596977197 1490.4394596976717)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 5.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 2.0 1.0 0.20000000000000284 29.80000000000001 50.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 45.469
Average program size in population (points): 46.466
Average percent parens in population: 0.023
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.163
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 428000
Number of point (instruction) evaluations so far: 561663660
--- Timings ---
Current time: 1481492539544 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 427
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 428
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 428
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_div} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_dup in1 integer_div integer_yank vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_dup in1 integer_div vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50641.64869020347
Median total errors in population: 339.79999999999995
Error averages by case: (1661.3681760355084 1664.1949760354842 1662.1421760355086 1667.4051760354916 1662.7739760354839 1661.0374239645148 1660.9712566401404 1662.3905760354887 1661.1503760355345 1666.1261760355085 1665.7151760354873 1661.7983760354862 1668.0713760355263 1669.9081760355084 1729.2241760355084 1663.1031760355086 1663.7085760354894 1684.2951760354874 1694.5701760354887 1662.0941760355086 1661.7771760355085 1705.521976035534 1736.3841760355313 2127.3379760355233 1677.9015760354912 1662.9089760354923 1668.9721760355085 1660.9242566401404 1687.3995760355351 1660.4719760354844)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 0.0 1.0 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.658
Average program size in population (points): 45.654
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.159
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 429000
Number of point (instruction) evaluations so far: 563003400
--- Timings ---
Current time: 1481492543286 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 428
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 429
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 429
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 54.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 339.79999999999995
Mean: 11.326667
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57641.87530157138
Median total errors in population: 339.79999999999995
Error averages by case: (1901.2066055229889 1904.1132055229655 1901.9306055229888 1897.123805522965 1892.7062055229653 1900.9337944770336 1900.8715211655795 1892.3514055229625 1900.9796055230129 1895.7476055229888 1895.156805522967 1891.2670055229667 1907.903205523011 1899.974605522989 1949.1446055229887 1892.9946055229889 1903.2892055229706 1923.1050055229614 1936.6786055229697 1901.9466055229889 1901.7456055229889 1933.7636055230125 1954.0356055230104 2350.9356055229937 1904.5420055229702 1892.4922055229656 1898.6636055229887 1900.8263211655799 1915.055805523013 1900.3903211655308)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.03665572881693843 0.16334427118306158 0.3999999999999999 0.6421787176504223 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 1.0 0.1999999999999993 5.399999999999999 2.799999999999997 0.0 0.8421787176504223 1.7999999999999972 30.80000000000001 53.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.16334427118306158 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.45
Average program size in population (points): 45.447
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.156
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 430000
Number of point (instruction) evaluations so far: 564336900
--- Timings ---
Current time: 1481492546960 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 429
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 430
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 430
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55690.11373191298
Median total errors in population: 339.79999999999995
Error averages by case: (1811.3578446961103 1814.151444696087 1812.0838446961104 1817.211444696091 1812.692844696087 1811.1558424535517 1811.1408424535525 1812.5332446960863 1811.2128446961344 1816.1858446961103 1815.4234446960893 1813.2250446960884 1818.2500446961308 1822.8578446961103 1886.3478446961103 1813.0198446961103 1814.1684446960928 1833.7180446960842 1845.7410446960926 1812.1448446961103 1812.0708446961103 1854.213444696134 2334.745044696118 2367.008244696117 1827.3728446960931 1812.7536446960912 1819.0918446961105 1811.0698424535524 1836.6020446961343 1810.5634424535067)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.24259227534509775 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 13.600000000000001 2.799999999999997 0.0 0.4425922753450977 9.200000000000003 29.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 44.678
Average program size in population (points): 45.676
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.507
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.507
Total error diversity:				 0.163
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 431000
Number of point (instruction) evaluations so far: 565677240
--- Timings ---
Current time: 1481492550668 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 430
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 431
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 431
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50901.59213640644
Median total errors in population: 339.79999999999995
Error averages by case: (1671.4354161468366 1674.403246097721 1672.192459697694 1677.635416146816 1672.9479455000098 1671.2257403023289 1671.1937403023285 1672.5536596976704 1671.2812596977187 1676.4245919179382 1675.932316337794 1671.8140925531957 1678.340659697714 1679.0318959709468 1732.105000350147 1673.3449576594803 1673.3977899924764 1693.8279999608003 1700.1672578030739 1672.223653643621 1682.022459697694 1714.8109284601494 1746.2261425576842 2101.316389992512 1686.3446921387902 1672.9185899924753 1679.551911130262 1671.1292000000228 1695.166863262807 1670.6258596976706)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 0.3999999999999986 2.799999999999997 1.0 0.0 3.799999999999997 30.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.421
Average program size in population (points): 45.414
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.16
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 432000
Number of point (instruction) evaluations so far: 567009870
--- Timings ---
Current time: 1481492554394 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 431
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 432
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 432
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54750.95332793179
Median total errors in population: 339.79999999999995
Error averages by case: (1801.2908421787176 1814.1692421786925 1802.0528421787178 1807.667242178697 1802.8494421786922 1801.0721578213063 1801.026757821305 1812.491042178692 1801.111842178743 1806.4738421787176 1805.6152421786965 1801.711642178695 1808.1896421787367 1809.7258421787178 1861.3478421787177 1803.1688421787178 1803.4704421786969 1823.746642178691 1829.882042178698 1802.0598421787176 1801.8848421787177 1844.2000421787436 1863.85704217874 2187.1586421787274 1816.0470421786995 1802.7298421786957 1808.8898421787178 1800.9719578213048 1825.580042178744 1800.5107578212583)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 0.0 15.799999999999997 29.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 2.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.238
Average program size in population (points): 45.232
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 433000
Number of point (instruction) evaluations so far: 568337010
--- Timings ---
Current time: 1481492558091 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 432
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 433
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 433
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55812.3751054801
Median total errors in population: 339.79999999999995
Error averages by case: (1801.3888238150143 1803.935023814993 1802.1388238150143 1807.3178238149976 1802.8216238149932 1801.1550215724542 1801.1450215724517 1802.408623814994 1801.1816238150366 1806.0278238150145 1805.7850238149988 1801.6550238149935 1808.0322238150318 1809.1688238150145 1861.5638238150145 1803.0838238150145 1803.242223814998 1823.6580238149934 1830.8618238149963 1802.1558238150144 1801.8688238150144 1843.9532238150373 1872.3974238150352 3261.025023815008 1815.7786238149984 1802.496423814998 1809.0198238150144 1801.0710215724519 1825.486023815037 1800.5518215724126)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.042178717650422304 0.24217871765042231 1.6 0.24259227534509775 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.4425922753450977 0.4425922753450977 7.799999999999997 30.80000000000001 46.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.24217871765042231 13.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.162
Average program size in population (points): 45.158
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.166
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 434000
Number of point (instruction) evaluations so far: 569661870
--- Timings ---
Current time: 1481492561779 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 433
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 434
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 434
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51866.34773788395
Median total errors in population: 339.79999999999995
Error averages by case: (1701.6671297665073 1704.3293343614816 1702.396531493027 1707.353382356644 1702.7874523794874 1701.4368330298714 1701.492391558881 1702.451972963996 1701.4909729640344 1705.9844600187612 1706.5485318882777 1702.2959823566362 1708.4837729640237 1710.1484789673484 1764.416677774633 1703.1112230868023 1703.7611159773946 1724.377087748807 1732.818931753043 1702.472372964012 1702.398372964012 1744.5835020582465 1774.0327209382442 2197.632903666151 1717.6487823566397 1702.6694636665707 1708.7023318882866 1701.387391558881 1726.6957315569412 1700.7719008562713)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 45.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 1.0 0.0 9.799999999999997 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.10929742682568167)
Average genome size in population (length): 44.491
Average program size in population (points): 45.487
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 176
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.174
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 435000
Number of point (instruction) evaluations so far: 570996600
--- Timings ---
Current time: 1481492565506 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 434
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 435
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 435
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52745.97932621699
Median total errors in population: 339.79999999999995
Error averages by case: (1731.5453341218727 1734.1826765694382 1732.2588915295973 1737.8032288432896 1732.9013341218504 1731.147991412393 1731.0802240880216 1732.5348915295745 1731.1906915296206 1736.3164190281252 1737.191020081622 1731.529646922961 1738.0181475230163 1759.4809316111957 1838.143501709911 1733.2204285084647 1733.3196190281064 1753.924848937298 1761.3440561090783 1732.1518915295974 1731.9988915295974 1774.5580340761633 1807.0500787029946 2146.30700530146 1746.9945445076773 1732.8344431687494 1739.5400250560044 1731.0322240880216 1755.7907615678787 1730.587543483368)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 0.041470984807896516 0.11633781453677378 2.1154940888937013 0.5154940888937012 1.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 1.7154940888937011 0.7154940888937011 2.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 12.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.7
Average program size in population (points): 45.699
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 411
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 411
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.172
Error (vector) diversity:			 0.174
--- Run Statistics ---
Number of program evaluations used so far: 436000
Number of point (instruction) evaluations so far: 572337600
--- Timings ---
Current time: 1481492569242 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 435
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 436
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 436
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53616.6187059441
Median total errors in population: 334.4
Error averages by case: (1761.5439156332366 1764.2211156332155 1762.2879156332365 1767.2891156332198 1762.7751156332151 1761.2410829576284 1761.2097156332547 1762.4897156332183 1761.2931156332586 1765.9939156332366 1767.279715633251 1761.6803156332162 1768.4381156332527 1770.3163493360653 1825.6033493360653 1763.0779156332364 1763.5937156332195 1783.8417156332175 1791.0659493360477 1762.2539156332366 1762.1809156332365 1803.9445493360886 1842.807749336086 2201.372749336077 1777.4159493360496 1762.8095156332217 1768.9459156332366 1761.1467156332546 1787.8319493360889 1760.6669156332155)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 4.383148585534805 2.799999999999997 1.0 0.0 13.799999999999997 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.68
Average program size in population (points): 45.677
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 515
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 515
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.171
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 437000
Number of point (instruction) evaluations so far: 573678000
--- Timings ---
Current time: 1481492572967 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 436
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 437
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 437
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_add integer_dup integer_dup integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58084.434127762266
Median total errors in population: 334.4
Error averages by case: (1911.387415592359 1914.424415592335 1912.155415592359 1917.2334155923377 1912.718815592335 1911.1377022562128 1911.1119022562132 1912.2750155923345 1911.1810155923836 1915.6884155923592 1916.9368155923753 1911.681015592337 1918.3092155923787 1936.741415592359 2015.9014155923592 1913.011415592359 1912.6958155923403 1933.4074155923336 1955.1962155923395 1912.137415592359 1912.050415592359 1953.5874155923836 1976.8318155923814 2275.0202155923675 1924.1700155923415 1912.399015592337 1918.9274155923592 1911.0559022562131 1934.491415592384 1910.568815592336)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.1433319155414624 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 2.0 1.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.1433319155414624 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.915
Average program size in population (points): 45.911
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 536
Genome diversity (% unique Plush genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 536
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.143
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 438000
Number of point (instruction) evaluations so far: 575025450
--- Timings ---
Current time: 1481492576687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 437
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 438
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 438
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_fromfloat integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56652.65593689693
Median total errors in population: 334.4
Error averages by case: (1861.4782837054026 1864.1492158789351 1862.1611251763875 1867.5314761636093 1862.7890837053767 1861.196674823636 1861.1726748236376 1862.43772517636 1861.2545251764138 1866.3222885207488 1867.0032122311532 1861.322934569008 1868.3076748885696 1869.6900231040681 1922.763761976936 1863.0567050093505 1863.5724885207294 1883.7343666473437 1891.8364897780643 1862.2211251763874 1862.1141251763875 1903.6477840564055 1928.4288188367634 2357.3620086262927 1875.7143704283544 1862.6722691974724 1868.8952575281373 1861.1086748236376 1888.0822983477342 1860.6284748235882)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 40.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.11465332585237131)
Average genome size in population (length): 44.987
Average program size in population (points): 45.985
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 514
Genome diversity (% unique Plush genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 514
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.16
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 439000
Number of point (instruction) evaluations so far: 576375060
--- Timings ---
Current time: 1481492580493 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 438
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 439
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 439
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55330.90556772824
Median total errors in population: 334.4
Error averages by case: (1821.7509589242748 1814.5561589242484 1822.4769589242746 1817.6847589242493 1812.8271589242474 1821.3981589242992 1821.3933589243024 1822.5587589242446 1821.444558924302 1816.3599589242747 1827.3457589242935 1811.44955892425 1828.5953589242984 1820.5539589242746 1876.5959589242746 1813.0599589242747 1813.2625589242532 1833.8077589242437 1842.4941589242535 1822.4019589242746 1822.5959589242746 1853.6719589243014 1885.088958924299 2332.4847589242727 1826.208758924257 1822.6387589242497 1828.6369589242747 1821.3143589243025 1835.4629589243023 1820.7843589242495)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 11.600000000000001 2.799999999999997 2.0 1.0 2.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.626
Average program size in population (points): 45.622
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 513
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 513
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.176
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 440000
Number of point (instruction) evaluations so far: 577713840
--- Timings ---
Current time: 1481492584216 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 439
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 440
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 440
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56557.64836772824
Median total errors in population: 334.4
Error averages by case: (1841.7339589242747 1844.5507589242486 1842.4219589242746 1847.1903589242454 1842.859958924248 1841.2867589242992 1841.2795589243065 1842.5999589242404 1841.3355589243017 1845.8799589242747 1847.2285589242913 1841.6159589242504 1848.2813589243024 1850.5409589242747 1905.2369589242746 1843.1979589242746 1843.6541589242543 1863.5565589242392 1872.6033589242547 1842.3179589242748 1842.2129589242747 1884.5707589243016 1914.7673589242972 2829.031358924245 1857.2543589242555 1842.7957589242453 1848.8459589242746 1841.2045589243064 1866.8999589243024 1840.6927589242493)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.600000000000001 2.799999999999997 2.0 1.0 0.20000000000000284 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.414
Average program size in population (points): 45.414
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 510
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 510
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.154
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 441000
Number of point (instruction) evaluations so far: 579046260
--- Timings ---
Current time: 1481492587936 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 440
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 441
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 441
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55968.41882392122
Median total errors in population: 334.4
Error averages by case: (1841.5946597216564 1844.637897218418 1842.2466597216564 1847.3542354927358 1842.7843890748302 1841.1888435748415 1831.1408435748442 1832.6047187381334 1831.219443574843 1846.010243535646 1847.083389074869 1841.1308032627107 1838.3512435748419 1848.1776102556166 1901.3547563871448 1842.8990032627325 1843.0603599126164 1863.5071032724882 1871.0207333977569 1832.1789599126341 1832.1102435748198 1884.0330548702245 1906.2076769640266 2332.3187274240954 1856.025190354695 1842.4497890748316 1848.6420032627327 1831.0828435748442 1865.388154705105 1840.615243574798)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 11.600000000000001 2.799999999999997 2.0 1.0 12.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.846
Average program size in population (points): 45.843
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 517
Genome diversity (% unique Plush genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 517
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.163
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 442000
Number of point (instruction) evaluations so far: 580391640
--- Timings ---
Current time: 1481492591669 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 441
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 442
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 442
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55870.44152155659
Median total errors in population: 334.4
Error averages by case: (1841.4027041046488 1844.3343041046228 1842.184704104649 1837.0383041046287 1842.7787041046222 1841.1394369103814 1841.0818369103802 1832.4693041046262 1841.1569041046755 1835.7367041046489 1847.1089041046657 1831.1903041046248 1848.0219041046703 1839.5077041046488 1890.234704104649 1833.0947041046488 1843.0387041046276 1863.4061041046236 1858.8781041046286 1842.129704104649 1841.918704104649 1874.2557041046753 1892.3357041046718 2301.0013041046577 1844.6329041046295 1832.4675041046287 1838.803704104649 1841.02883691038 1867.4813041046757 1840.5821041046236)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 1.2000000000000002 0.2 0.26640285407860087 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 6.200000000000003 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.26640285407860087 6.799999999999997 0.13359714592139915)
Average genome size in population (length): 44.976
Average program size in population (points): 45.971
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 533
Genome diversity (% unique Plush genomes):	 0.399
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 533
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.147
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 443000
Number of point (instruction) evaluations so far: 581740920
--- Timings ---
Current time: 1481492595437 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 442
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 443
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 443
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57433.817615450185
Median total errors in population: 334.4
Error averages by case: (1891.4223805150064 1894.0715805149816 1892.1563805150063 1897.0521805149842 1892.7261805149813 1891.0837805150295 1891.0271805150298 1892.2543805149799 1891.1159805150312 1895.6853805150063 1896.9969805150226 1891.0581805149834 1897.9939805150275 1898.2103805150064 1947.8363805150063 1892.9843805150065 1893.0611805149872 1913.3011805149788 1950.6383805149853 1892.0763805150063 1891.8273805150063 1933.744580515031 1952.564580515029 2260.1757805150173 1904.8655805149876 1892.4075805149832 1898.8623805150064 1890.9771805150299 1915.1037805150315 1890.5359805149826)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 14.200000000000003 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 9.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.293
Average program size in population (points): 45.292
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 509
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 509
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.142
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 444000
Number of point (instruction) evaluations so far: 583069710
--- Timings ---
Current time: 1481492599190 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 443
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 444
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 444
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction vector_integer_set} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec vector_integer_set integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec vector_integer_set integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57189.71648346481
Median total errors in population: 334.4
Error averages by case: (1861.6201908984629 1864.3055971664726 1862.3141908984628 1867.4617087282109 1862.798541061223 1861.339648931272 1871.3632658842198 1862.3999510687263 1871.358977014484 1866.4594262320877 1866.9921434042346 1862.8946363263708 1878.398508728249 1872.0025991423656 1932.4846257467607 1863.1098047123705 1863.4053816093644 1883.6052047123464 1928.941182043763 1862.316990140279 1872.324265884199 1904.3215901403023 2397.3916526244634 2323.8797347672016 1875.5960728083119 1862.4311072147702 1869.1278180068111 1871.2778061865258 1887.0543793514314 1860.7394820310135)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.7574077246549022 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.0 0.5574077246549023 7.799999999999997 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.813
Average program size in population (points): 45.809
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 506
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 506
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.156
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 445000
Number of point (instruction) evaluations so far: 584414100
--- Timings ---
Current time: 1481492602949 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 444
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 445
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 445
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52481.6484
Median total errors in population: 334.4
Error averages by case: (1721.674 1724.6503999999782 1722.279 1727.4109999999819 1722.898399999978 1721.3672000000201 1721.3432000000191 1722.7073999999789 1721.4036000000226 1725.921 1727.2698000000155 1721.3741999999797 1728.4668000000174 1728.701 1783.102 1723.22 1723.4071999999824 1745.6997999999792 1754.4317999999819 1722.352 1722.078 1764.3268000000232 1792.0428000000215 2239.023400000009 1735.3905999999824 1722.4573999999814 1728.96 1721.268200000019 1745.6348000000228 1720.7865999999794)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 8.0 1.0 0.1999999999999993 8.399999999999999 2.799999999999997 2.0 1.0 4.200000000000003 30.80000000000001 34.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.914
Average program size in population (points): 45.913
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 521
Genome diversity (% unique Plush genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 521
Syntactic diversity (% unique Push programs):	 0.418
Total error diversity:				 0.165
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 446000
Number of point (instruction) evaluations so far: 585761520
--- Timings ---
Current time: 1481492606739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 445
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 446
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 446
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49741.01901545019
Median total errors in population: 334.4
Error averages by case: (1631.7743805150064 1634.4525805149835 1632.4133805150063 1637.2687805149899 1632.8607805149825 1631.260180515028 1631.2199805150249 1632.3213805149858 1631.2959805150297 1636.0183805150064 1637.44598051502 1631.8679805149845 1638.5831805150226 1639.5243805150064 1694.8123805150065 1633.1443805150063 1633.6741805149888 1654.2111805149855 1663.6559805149884 1632.3213805150065 1632.1913805150064 1674.84878051503 1694.0625805150262 2110.928980515018 1647.0235805149914 1632.8399805149907 1639.1793805150064 1631.158980515025 1657.9913805150304 1630.6671805149842)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 6.0 0.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.0 1.0 7.799999999999997 27.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.759
Average program size in population (points): 45.756
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 482
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 482
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.168
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 447000
Number of point (instruction) evaluations so far: 587104290
--- Timings ---
Current time: 1481492610412 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 446
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 447
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 447
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60713.41954973885
Median total errors in population: 334.4
Error averages by case: (1981.7083156425647 1984.3329878312652 1982.3661148154492 1987.2806892132053 1982.6271820123568 1981.2969148154737 1981.2846000000284 1982.4651999999694 1981.3480000000266 1985.9845256781114 1987.3409610300293 1981.2782892132084 1988.0032000000235 1988.5329904008245 2040.0653599192212 1982.8136968210588 1983.4116571040142 2003.1658310970602 2010.5274523997787 1982.308 1982.104 2023.004362859235 2508.8547864947864 2487.024699163301 1995.9693107867486 1982.5591700797006 1988.4037610300124 1981.2136000000282 2005.4357212515795 1980.708170079702)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.7999999999999998 0.2 0.4 2.4 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 1.0 0.1999999999999993 4.399999999999999 2.799999999999997 2.0 1.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.506
Average program size in population (points): 45.505
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 473
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 473
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.172
Error (vector) diversity:			 0.174
--- Run Statistics ---
Number of program evaluations used so far: 448000
Number of point (instruction) evaluations so far: 588439470
--- Timings ---
Current time: 1481492614126 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 447
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 448
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 448
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_flush vector_integer_replace in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_replace in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60963.517
Median total errors in population: 334.4
Error averages by case: (2011.328 2014.1361999999788 2012.055 2017.1931999999786 2012.7641999999782 2011.0296000000199 2010.9610000000214 2012.2625999999764 2011.0832000000219 2015.699 2017.0220000000131 2011.2469999999805 2018.0902000000192 2017.395 2064.633 2012.936 2013.2021999999833 2032.870599999975 2039.6641999999829 2012.04 2011.903 2053.040600000022 2064.3950000000195 2354.263400000008 2024.2947999999847 2012.4385999999788 2019.205 2010.9210000000214 2034.9376000000223 2010.50579999998)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 10.399999999999999 2.799999999999997 0.0 1.0 12.200000000000003 30.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 2.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.193
Average program size in population (points): 45.189
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 442
Genome diversity (% unique Plush genomes):	 0.451
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 442
Syntactic diversity (% unique Push programs):	 0.451
Total error diversity:				 0.164
Error (vector) diversity:			 0.168
--- Run Statistics ---
Number of program evaluations used so far: 449000
Number of point (instruction) evaluations so far: 589765260
--- Timings ---
Current time: 1481492617836 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 448
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 449
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 449
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_pop integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_pop integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54794.1818004729
Median total errors in population: 334.4
Error averages by case: (1801.6524186219688 1804.2806186219445 1802.3324186219686 1807.2868186219462 1802.817018621943 1801.225699226604 1801.1978992266072 1802.4320186219402 1801.2676186219944 1805.9124186219688 1807.2490186219864 1801.2958186219462 1808.1410186219916 1809.7904186219687 1865.1304186219686 1803.1354186219687 1803.4156186219473 1823.6170186219392 1831.7326186219489 1802.2554186219686 1802.2454186219686 1844.2406186219948 1869.2222186219917 2237.0090186219754 1816.2012186219504 1802.7838186219456 1808.5824186219686 1801.1348992266073 1825.9356186219954 1800.6588186219449)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 2.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 10.200000000000003 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.682
Average program size in population (points): 45.681
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 481
Genome diversity (% unique Plush genomes):	 0.434
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 481
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.154
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 450000
Number of point (instruction) evaluations so far: 591105720
--- Timings ---
Current time: 1481492621567 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 449
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 450
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 450
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_dup_items in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57438.59
Median total errors in population: 334.4
Error averages by case: (1891.422 1894.138199999976 1892.13 1897.226599999976 1892.8045999999754 1891.1210000000228 1891.062000000026 1892.4871999999732 1891.128600000025 1895.777 1897.1138000000167 1891.0815999999772 1897.838600000024 1898.075 1949.145 1893.024 1892.93579999998 1913.2257999999708 1957.1049999999798 1892.081 1891.875 1933.3970000000245 1958.5572000000216 2252.396800000015 1904.540599999981 1892.345199999978 1898.71 1891.0090000000262 1914.266800000025 1890.5695999999768)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 0.0 1.0 5.799999999999997 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.716
Average program size in population (points): 45.714
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 484
Genome diversity (% unique Plush genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 484
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.131
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 451000
Number of point (instruction) evaluations so far: 592447200
--- Timings ---
Current time: 1481492625328 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 450
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 451
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 451
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_shove} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_pushall float_shove in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58909.21720000001
Median total errors in population: 334.4
Error averages by case: (1921.557 1924.8191999999774 1922.291 1927.7315999999769 1922.729999999977 1921.340000000022 1921.3520000000242 1922.5831999999755 1921.3828000000233 1926.214 1927.2076000000172 1921.594399999978 1928.6712000000207 1929.053 1981.525 1923.016 1923.223799999983 1943.3967999999743 1994.2649999999803 1922.338 1922.272 2031.8174000000247 2456.971999999998 2298.8888000000097 1935.2953999999822 1922.5897999999784 1928.754 1921.3000000000243 1944.308200000024 1920.7279999999778)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 1.2000000000000002 0.2 0.4 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 30.80000000000001 44.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 44.788
Average program size in population (points): 45.784
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 459
Genome diversity (% unique Plush genomes):	 0.437
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 459
Syntactic diversity (% unique Push programs):	 0.437
Total error diversity:				 0.158
Error (vector) diversity:			 0.161
--- Run Statistics ---
Number of program evaluations used so far: 452000
Number of point (instruction) evaluations so far: 593790840
--- Timings ---
Current time: 1481492629093 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 451
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 452
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 452
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55416.34777165769
Median total errors in population: 334.4
Error averages by case: (1821.7437643281285 1824.561364328107 1822.3177643281285 1827.1651643281086 1822.7367643281054 1821.189044932761 1821.1422449327622 1822.4107643281054 1821.258764328151 1826.0667643281283 1827.246164328144 1821.389164328108 1828.3537643281472 1830.5627643281284 1882.2287643281284 1822.9277643281284 1823.7809643281114 1843.7333643281036 1851.7979643281108 1822.2047643281285 1822.4667643281284 1863.674164328151 1890.687364328149 2278.246364328133 1836.9569643281134 1822.6341643281075 1828.9347643281285 1821.089244932762 1846.2209643281517 1820.6191643281072)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 6.0 0.0 0.1999999999999993 11.600000000000001 2.799999999999997 1.0 0.0 5.799999999999997 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.739
Average program size in population (points): 45.735
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 451
Genome diversity (% unique Plush genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 451
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.171
Error (vector) diversity:			 0.172
--- Run Statistics ---
Number of program evaluations used so far: 453000
Number of point (instruction) evaluations so far: 595133010
--- Timings ---
Current time: 1481492632862 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 452
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 453
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 453
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_pop integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 56087.25899841005
Median total errors in population: 334.4
Error averages by case: (1841.6429848188925 1844.4323272664558 1842.3585422266171 1847.3238795403072 1842.8089848188674 1841.2725422266406 1841.2777422266402 1842.4039422265914 1841.3477422266426 1846.140069725145 1847.2599050656886 1841.613297619979 1848.1475982200388 1850.1975823082153 1907.5061524069304 1843.1170792054843 1843.577469725126 1863.5542996343147 1874.740106806097 1842.3245422266173 1842.2115422266172 1884.0280847731856 1923.4311294000158 2346.2523899472676 1858.1571952046966 1843.0122938657687 1848.6606757530242 1841.1989422266404 1866.5770122649008 1840.682942226594)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 2.2 0.08106039681504768 0.2810603968150477 2.4 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 46.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 0.0 0.0 4.200000000000003 27.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2810603968150477 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.573
Average program size in population (points): 45.569
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 445
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 445
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.177
Error (vector) diversity:			 0.178
--- Run Statistics ---
Number of program evaluations used so far: 454000
Number of point (instruction) evaluations so far: 596470200
--- Timings ---
Current time: 1481492636577 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 453
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 454
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 454
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59804.422971554384
Median total errors in population: 334.4
Error averages by case: (1971.3953471894645 1974.1569471894413 1972.1093471894644 1977.4545471894426 1972.7471471894414 1971.1589324796373 1971.1227324796398 1972.418947189439 1971.2207471894872 1976.0053471894644 1977.0271471894798 1971.5079471894435 1978.3949471894857 1978.6883471894644 2030.8023471894644 1972.9503471894643 1973.105747189445 1993.090147189437 1999.3505471894462 1972.1673471894644 1972.0103471894645 2013.4471471894874 2040.050947189485 2327.3865471894687 1985.8859471894466 1972.6897471894433 1978.7303471894643 1971.0657324796398 1995.6775471894882 1970.603747189443)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.39264507596051723 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 44.0 0.0 0.1999999999999993 9.399999999999999 2.799999999999997 0.0 0.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.39264507596051723 13.799999999999997 0.007354924039482791)
Average genome size in population (length): 44.347
Average program size in population (points): 45.344
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 458
Genome diversity (% unique Plush genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 458
Syntactic diversity (% unique Push programs):	 0.443
Total error diversity:				 0.144
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 455000
Number of point (instruction) evaluations so far: 597800610
--- Timings ---
Current time: 1481492640300 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 454
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 455
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 455
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57751.0718
Median total errors in population: 334.4
Error averages by case: (1891.739 1894.4307999999767 1892.405 1897.576399999978 1892.897599999976 1891.228200000023 1891.2332000000265 1892.6027999999728 1891.2742000000244 1896.328 1897.4396000000152 1893.5783999999771 1898.2980000000234 1899.558 1954.869 1893.45 1893.434799999982 1913.266799999971 1922.3349999999816 1892.225 1892.354 1934.127200000024 1964.702600000021 2571.3805999999977 1908.5625999999836 1893.1143999999788 1898.992 1891.1534000000265 1915.848000000025 1890.6671999999764)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 6.0 1.0 0.1999999999999993 11.600000000000001 2.799999999999997 0.0 1.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 9.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.295
Average program size in population (points): 45.291
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 417
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 417
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.177
Error (vector) diversity:			 0.179
--- Run Statistics ---
Number of program evaluations used so far: 456000
Number of point (instruction) evaluations so far: 599129460
--- Timings ---
Current time: 1481492643985 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 455
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 456
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 456
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58868.83381545018
Median total errors in population: 334.4
Error averages by case: (1931.8123805150062 1934.4747805149818 1932.4873805150062 1937.5563805149866 1932.8469805149814 1931.6127805150284 1931.6827805150285 1932.6411805149814 1931.661780515031 1936.4853805150062 1937.3969805150223 1931.6143805149836 1938.418380515025 1940.118380515006 1995.772380515006 1933.1323805150062 1933.6875805149862 1953.5133805149799 1960.5429805149874 1932.598380515006 1932.4663805150062 1973.4261805150309 2019.0429805150281 2516.2071805150044 1947.5857805149883 1932.6641805149839 1938.904380515006 1931.5629805150288 1955.9421805150319 1930.9745805149835)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 3.0 0.0 0.1999999999999993 4.399999999999999 2.799999999999997 1.0 0.0 14.200000000000003 26.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.465
Average program size in population (points): 45.462
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 426
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 426
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.166
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 457000
Number of point (instruction) evaluations so far: 600463410
--- Timings ---
Current time: 1481492647672 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 456
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 457
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 457
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55275.12564412954
Median total errors in population: 334.4
Error averages by case: (1821.6658414709848 1824.120841470959 1822.3628414709847 1817.3720414709599 1822.8580414709588 1821.1850414710088 1821.1382414710122 1812.5912414709576 1821.2186414710104 1815.9428414709848 1827.2520414709993 1811.5692414709606 1828.5814414710073 1819.5168414709847 1869.8948414709848 1813.0628414709847 1823.082641470966 1843.4656414709548 1841.253041470964 1822.1638414709848 1822.3098414709848 1853.7738414710102 1881.1700414710078 2272.5512414709897 1825.9114414709666 1812.7922414709622 1818.9528414709848 1821.0832414710121 1845.6710414710112 1820.6118414709604)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 8.399999999999999 0.7999999999999972 1.0 1.0 0.20000000000000284 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 1.7999999999999972 0.19999999999999996)
Average genome size in population (length): 44.494
Average program size in population (points): 45.49
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 399
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 399
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.166
Error (vector) diversity:			 0.169
--- Run Statistics ---
Number of program evaluations used so far: 458000
Number of point (instruction) evaluations so far: 601798230
--- Timings ---
Current time: 1481492651368 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 457
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 458
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 458
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59393.4739235879
Median total errors in population: 334.4
Error averages by case: (1921.6133904559206 1924.2476312887113 1922.3377662147238 1927.1329904558995 1922.8158642406627 1921.46238051503 1921.4819948153133 1922.516980514981 1921.515780515032 1925.937710565562 1927.231419298219 1921.4840323329886 1928.497580515027 1930.4548350803016 1984.1987033398505 1923.1138081403933 1923.637053479855 1943.4365176970177 1964.3642775227177 1922.447806114127 1922.301380515006 1963.1530251195584 1988.6567483225524 3343.505253479833 1936.42621698609 1922.7804534798533 1928.8205248806514 1921.3970468817765 1945.6527846054646 1920.8519662147)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.21430028211648222 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 45.0 0.0 0.1999999999999993 3.3999999999999986 2.799999999999997 0.0 0.0 7.799999999999997 30.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.2663667453928805 12.799999999999997 0.1856997178835178)
Average genome size in population (length): 44.223
Average program size in population (points): 45.219
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 393
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 393
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.163
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 459000
Number of point (instruction) evaluations so far: 603124920
--- Timings ---
Current time: 1481492655071 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 458
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 459
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 459
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61067.69046730238
Median total errors in population: 334.4
Error averages by case: (1992.0827339957725 1994.6969339957473 1992.7617339957724 2000.6599339957465 1992.6827339957463 1991.7570660042513 1991.7794660042548 1993.7857339957432 1991.7375339957985 2000.4407339957725 1997.1555339957902 1993.726533995749 1998.554733995797 2023.2387339957725 2111.3157339957725 1994.3557339957724 1993.4447339957512 2013.6619339957422 2050.1265339957536 1992.6867339957723 1992.6107339957725 2038.3791339957988 2283.581333995778 2624.9089339957645 2024.1665339957551 1993.3903339957478 2001.3467339957724 1991.6574660042547 2015.988533995799 1991.0091853995914)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 1.6 0.24259227534509775 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 2.0 6.0 1.0 0.1999999999999993 11.600000000000001 2.799999999999997 1.4425922753450977 0.4425922753450977 14.200000000000003 27.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.635
Average program size in population (points): 45.635
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 389
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 389
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.165
Error (vector) diversity:			 0.166
--- Run Statistics ---
Number of program evaluations used so far: 460000
Number of point (instruction) evaluations so far: 604463970
--- Timings ---
Current time: 1481492658875 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 459
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 460
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 460
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_flush vector_integer_replace in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec float_mult integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_replace in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 7.800000000000001 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 46.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 19.799999999999997 0.19999999999999996]
Total: 334.4
Mean: 11.146667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61623.61235587046
Median total errors in population: 334.4
Error averages by case: (2031.4991585290152 2034.2671585289934 2032.0981585290153 2037.2505585289923 2032.752158528993 2031.0987585290356 2031.0403585290396 2032.4031585289897 2031.1305585290372 2035.8211585290153 2037.1657585290309 2031.256358528996 2038.2813585290369 2037.4401585290152 2087.107158529015 2032.9331585290151 2033.0063585289972 2052.8811585289886 2059.994358528998 2032.0911585290153 2031.9241585290154 2072.9297585290374 2087.556358529036 2427.381958529012 2044.6565585289984 2032.4597585289919 2038.5121585290153 2030.9903585290397 2055.1319585290375 2030.5511585289946)
Error minima by case: (0.0 0.7999999999999998 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 5.0 0.0 0.1999999999999993 5.399999999999999 1.2000000000000028 2.0 1.0 14.200000000000003 27.80000000000001 45.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.4 13.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.303
Average program size in population (points): 45.301
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 397
Genome diversity (% unique Plush genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.149
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 461000
Number of point (instruction) evaluations so far: 605793060
--- Timings ---
Current time: 1481492662567 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 460
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 461
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 461
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61173.80256067645
Median total errors in population: 334.4
Error averages by case: (2012.0233018764118 2014.494301876387 2012.2913018764118 2022.634501876389 2012.8215018763856 2011.2864981236128 2011.2660981236127 2012.4947018763858 2011.3311018764375 2024.1183018764118 2017.0831018764284 2011.7809018763874 2018.196701876432 2018.8243018764117 2071.1643018764116 2013.1033018764117 2013.1871018763925 2033.3477018763845 2041.1861018763914 2012.2593018764119 2012.1293018764118 2052.6841018764376 2076.0373018764344 2522.6315018764144 2025.6411018763931 2012.7961018763906 2018.6373018764118 2011.2000981236126 2036.4403018764383 2010.7110175189518)
Error minima by case: (0.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 11.399999999999999 2.799999999999997 1.0 0.0 14.200000000000003 27.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 1.0 0.14030230586813974 10.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.024
Average program size in population (points): 45.02
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 397
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 397
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.153
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 462000
Number of point (instruction) evaluations so far: 607113780
--- Timings ---
Current time: 1481492666269 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 461
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 462
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 462
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58681.0866120695
Median total errors in population: 334.4
Error averages by case: (1931.3003236624274 1934.3516756966233 1932.0118229782988 1936.9955587717538 1932.6713293851838 1931.0569234509153 1930.9397253421928 1932.3072447375337 1931.0388447375826 1935.656822890719 1936.8861755378935 1931.3313365227218 1938.2467707375886 1938.0016785150026 1990.5706706756398 1932.9315350930517 1933.2794374966763 1953.003494515327 1968.2062856428122 1932.0036447375574 1931.9433384354475 1973.4050406275262 1994.4576449289746 2365.8396492867696 1944.653503688117 1932.4358527932186 1938.6384627672546 1930.8997253421926 1955.5432940643236 1930.478799008139)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 1.6 0.8 0.0 2.8000000000000007 0.1999999999999993 0.40000000000000036 0.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 2.0 1.0 14.200000000000003 30.80000000000001 38.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 6.799999999999997 0.1393104688197857)
Average genome size in population (length): 44.045
Average program size in population (points): 45.043
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 399
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 399
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.156
Error (vector) diversity:			 0.158
--- Run Statistics ---
Number of program evaluations used so far: 463000
Number of point (instruction) evaluations so far: 608435130
--- Timings ---
Current time: 1481492669946 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 462
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 463
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 463
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53631.60390308852
Median total errors in population: 334.4
Error averages by case: (1761.6035390440213 1764.3469390439977 1762.3275390440215 1767.3911390440035 1762.8549390439973 1761.322821986013 1761.290421986009 1762.5715390440012 1761.368939044045 1766.0015390440215 1767.1351390440366 1761.8139390439992 1768.9583390440382 1769.6865390440214 1821.3165390440213 1763.1145390440213 1763.3991390440026 1783.9135390440001 1818.224339044002 1762.3145390440213 1762.1555390440215 1804.4343390440451 1835.4255390440428 2199.6507390440324 1776.1393390440041 1762.530139044004 1769.7155390440214 1761.2266219860091 1788.639339044046 1760.7308219859685)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 2.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.0 0.20000000000000284 27.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.904
Average program size in population (points): 45.903
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 374
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 374
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.158
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 464000
Number of point (instruction) evaluations so far: 609782250
--- Timings ---
Current time: 1481492673725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 463
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 464
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 464
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60186.842522338375
Median total errors in population: 334.4
Error averages by case: (1981.7110510153805 1984.4620510153559 1982.3400510153806 1987.5256510153545 1982.785051015355 1981.3881489846428 1981.3871489846483 1982.6676510153497 1981.423251015406 1986.2590510153805 1987.0324510153944 1981.446251015357 1988.3154510154056 1990.1100510153806 2044.0470510153805 1983.1100510153806 1983.4402510153618 2003.2696510153485 2012.7750510153603 1982.3630510153805 1982.2960510153805 2022.878451015405 2060.772051015404 2396.1576510153855 1996.0990510153642 1982.8526510153556 1990.1010510153806 1981.3101489846483 2005.7250510154065 1980.7919489845958)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 2.6000000000000014 2.799999999999997 2.0 1.0 2.200000000000003 30.80000000000001 42.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 6.799999999999997 0.14898461935558616)
Average genome size in population (length): 44.033
Average program size in population (points): 45.032
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 336
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 336
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.171
Error (vector) diversity:			 0.179
--- Run Statistics ---
Number of program evaluations used so far: 465000
Number of point (instruction) evaluations so far: 611103240
--- Timings ---
Current time: 1481492677431 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 464
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 465
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 465
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 61730.877
Median total errors in population: 334.4
Error averages by case: (2031.834 2034.616599999975 2032.465 2037.2051999999737 2032.8483999999746 2031.3970000000234 2031.4218000000287 2032.4543999999696 2031.4696000000256 2035.949 2037.2236000000098 2031.5105999999769 2038.2168000000256 2039.629 2092.564 2033.116 2033.4071999999805 2053.1825999999683 2060.188799999981 2032.422 2032.465 2072.506000000026 2104.1302000000214 2501.288199999998 2046.9727999999825 2032.9405999999744 2038.958 2031.3380000000288 2056.3648000000267 2030.791799999976)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 44.0 0.0 0.1999999999999993 9.399999999999999 2.799999999999997 1.0 0.0 2.200000000000003 27.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 2.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.541
Average program size in population (points): 45.536
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 276
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 276
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.184
Error (vector) diversity:			 0.189
--- Run Statistics ---
Number of program evaluations used so far: 466000
Number of point (instruction) evaluations so far: 612439470
--- Timings ---
Current time: 1481492681129 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 465
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 466
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 466
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 60425.8456
Median total errors in population: 334.4
Error averages by case: (1971.65 1974.4699999999773 1972.355 1977.5019999999786 1972.8383999999764 1971.4100000000221 1971.3878000000252 1972.5429999999744 1971.4474000000234 1976.448 1976.4837999999966 1971.7229999999786 1978.4398000000215 1980.242 2049.903 1973.201 1973.4433999999803 1993.3125999999725 2003.7463999999827 1972.35 1972.484 2014.8664000000238 2497.6521999999927 2458.052999999999 1987.5453999999836 1972.7973999999795 1979.111 1971.324800000025 1996.305600000024 1970.8091999999774)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 29.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 12.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.483
Average program size in population (points): 45.482
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 307
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 307
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.183
Error (vector) diversity:			 0.186
--- Run Statistics ---
Number of program evaluations used so far: 467000
Number of point (instruction) evaluations so far: 613773960
--- Timings ---
Current time: 1481492684878 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 466
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 467
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 467
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 58032.77468763833
Median total errors in population: 329.79999999999995
Error averages by case: (1911.4991585290152 1914.4043585289892 1912.1601585290152 1917.2449585289862 1912.8569585289893 1911.137441471009 1911.0810414710156 1912.3685585289827 1911.1851585290415 1915.9321585290152 1915.7671585289963 1911.2117585289914 1918.3137585290408 1918.6091585290153 1967.4361585290153 1913.1361585290153 1912.9413585289951 1933.5125585289811 1940.8447585289948 1912.1421585290152 1911.9821585290154 1953.6425585290417 1971.3595585290375 2308.9099585290173 1924.3969585289963 1912.7131585289878 1919.2471585290152 1911.0320414710156 1935.1163585290424 1910.58984147096)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 1.0 0.1999999999999993 8.399999999999999 2.799999999999997 2.0 1.0 7.799999999999997 30.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 1.7999999999999972 0.04147098480789646)
Average genome size in population (length): 44.311
Average program size in population (points): 45.306
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 527
Genome diversity (% unique Plush genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 527
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.157
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 468000
Number of point (instruction) evaluations so far: 615103290
--- Timings ---
Current time: 1481492688628 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 467
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 468
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 468
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57935.86933703005
Median total errors in population: 329.79999999999995
Error averages by case: (1911.2444425922754 1914.1602425922497 1911.9834425922754 1917.056642592248 1912.6780425922489 1910.9455574077504 1910.8457574077552 1912.1392425922443 1910.9648425923017 1915.5154425922753 1915.3070425922535 1911.107842592251 1918.0568425923004 1917.7694425922753 1965.8184425922752 1912.8734425922753 1912.5110425922542 1933.2214425922434 1940.965842592254 1911.9254425922754 1911.9724425922752 1953.7180425923013 1960.943842592299 2230.948642592288 1922.6046425922555 1912.2860425922484 1918.3664425922752 1910.816557407755 1936.7048425923017 1910.4173574076988)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.24259227534509775 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.0 45.0 0.0 0.1999999999999993 5.399999999999999 2.799999999999997 1.0 0.4425922753450977 10.200000000000003 30.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 45.225
Average program size in population (points): 46.221
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 592
Genome diversity (% unique Plush genomes):	 0.382
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 592
Syntactic diversity (% unique Push programs):	 0.382
Total error diversity:				 0.144
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 469000
Number of point (instruction) evaluations so far: 616460040
--- Timings ---
Current time: 1481492692432 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 468
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 469
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 469
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55342.424902368424
Median total errors in population: 329.79999999999995
Error averages by case: (1821.537971168135 1824.1159711681112 1822.241971168135 1827.1151711681125 1822.8255711681106 1821.1957384925292 1821.1491711681595 1822.2935711681107 1821.2315711681601 1825.626971168135 1825.474971168115 1820.9921711681113 1828.4475711681562 1827.662971168135 1876.7269711681352 1822.835971168135 1822.8199711681157 1843.5617711681098 1880.316971168114 1822.195971168135 1821.859971168135 1863.89477116816 1877.3271711681582 2206.7365711681446 1834.1885711681152 1822.4531711681132 1828.6589711681352 1821.0921711681594 1845.2339711681605 1820.6105711681116)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 12.399999999999999 2.799999999999997 1.0 0.0 10.200000000000003 30.80000000000001 38.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 9.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.886
Average program size in population (points): 45.881
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 581
Genome diversity (% unique Plush genomes):	 0.391
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 581
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.154
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 470000
Number of point (instruction) evaluations so far: 617806620
--- Timings ---
Current time: 1481492696197 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 469
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 470
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 470
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55320.936100638646
Median total errors in population: 329.79999999999995
Error averages by case: (1801.792484208385 1804.6818842083624 1802.523484208385 1807.4762842083624 1802.8374842083624 1801.2491529399242 1801.2284796284703 1802.3956842083592 1801.305884208408 1806.189484208385 1805.7588842083653 1801.865884208365 1808.3102842084068 1809.883484208385 1865.838484208385 1803.038484208385 1803.1270842083663 1823.7268842083583 1832.3822842083666 1802.282484208385 1802.216484208385 1843.887684208407 2328.828084208387 2301.1182842083936 1817.050284208368 1802.8062842083611 1808.584484208385 1801.1624796284702 1826.7088842084083 1800.6785990238134)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.03665572881693843 0.14030230586813974 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 1.0 45.0 0.0 0.1999999999999993 4.600000000000001 2.799999999999997 1.0 0.0 10.200000000000003 26.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.14030230586813974 6.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.23
Average program size in population (points): 45.228
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 542
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 542
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 471000
Number of point (instruction) evaluations so far: 619133520
--- Timings ---
Current time: 1481492700167 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 470
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 471
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 471
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59383.08834509714
Median total errors in population: 329.79999999999995
Error averages by case: (1951.6118748668298 1954.1696748668055 1952.2998748668297 1956.8832748668071 1952.7546748668053 1951.0861251331928 1951.0407578088248 1952.256474866803 1951.1404748668547 1955.7568748668298 1955.4364748668086 1952.6116748668078 1958.2254748668515 1959.1828748668297 2014.7748748668298 1952.9568748668298 1953.1406748668112 1973.3512748668004 1980.376474866811 1952.0908748668296 1951.9768748668298 1993.8384748668545 2011.243474866852 2490.152474866817 1965.7622748668118 1952.5828748668057 1958.7028748668297 1950.9873578088248 1976.142674866855 1950.5513578087762)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 1.2000000000000002 0.08366218546322618 0.11633781453677383 0.6000000000000001 0.8 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 44.0 0.0 0.1999999999999993 10.600000000000001 2.799999999999997 1.0 1.0 2.200000000000003 26.80000000000001 37.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677383 6.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.245
Average program size in population (points): 45.236
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 550
Genome diversity (% unique Plush genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 550
Syntactic diversity (% unique Push programs):	 0.415
Total error diversity:				 0.155
Error (vector) diversity:			 0.155
--- Run Statistics ---
Number of program evaluations used so far: 472000
Number of point (instruction) evaluations so far: 620460870
--- Timings ---
Current time: 1481492704016 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 471
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 472
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 472
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction float_mult} {:close 1, :instruction integer_dec} {:close 1, :instruction float_yankdup} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_yankdup} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_take} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc})
Best program: (vector_integer_rest vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec float_mult integer_dec float_yankdup integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup vector_integer_take integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Partial simplification: (vector_integer_pop in1 vector_integer_pushall integer_dec integer_div integer_add integer_dec integer_dec integer_dup integer_dup integer_dup integer_dup_items integer_dup integer_dec integer_dec integer_dec integer_dup integer_yankdup integer_swap integer_dec integer_dec integer_dec integer_dec integer_dec integer_swap integer_dup_items integer_dup integer_add integer_dup integer_dup integer_add integer_dup integer_dup integer_add integer_stackdepth integer_add integer_stackdepth integer_dup_items integer_dup_items integer_stackdepth integer_dup integer_yankdup integer_dup_items integer_yankdup float_frominteger float_inc)
Errors: [1.0 4.2 2.0 8.4 3.2 0.8 0.6 2.4 0.8 6.0 5.199999999999999 0.1999999999999993 9.6 3.0 46.0 3.0 0.1999999999999993 28.4 29.200000000000003 2.0 1.0 54.8 31.80000000000001 42.799999999999955 8.200000000000003 1.4000000000000004 11.0 0.6 21.799999999999997 0.19999999999999996]
Total: 329.79999999999995
Mean: 10.993333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50608.68749023865
Median total errors in population: 329.79999999999995
Error averages by case: (1661.7025819960188 1664.638780003424 1662.3939930082072 1667.416348961158 1662.943234490272 1661.3021930082284 1661.2645394392998 1662.4721394392602 1661.3557394393038 1665.9922950400655 1665.792780612721 1661.7513489611554 1668.4351394392984 1670.8365386905732 1725.2780140397435 1663.203187271342 1663.10481151202 1684.0172552443992 1691.829223158222 1662.3183394392809 1662.4623394392809 1704.874624531657 1734.8862124084822 2100.4393820204996 1676.32634896116 1662.7097511008042 1669.3425806127393 1661.2055394392999 1687.669900752962 1660.722327777721)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 43.0 0.0 0.1999999999999993 6.399999999999999 2.799999999999997 0.0 0.0 1.7999999999999972 30.80000000000001 41.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.4 10.799999999999997 0.18833846130371024)
Average genome size in population (length): 45.048
Average program size in population (points): 46.044
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 564
Genome diversity (% unique Plush genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 564
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.173
Error (vector) diversity:			 0.176
--- Run Statistics ---
Number of program evaluations used so far: 473000
Number of point (instruction) evaluations so far: 621812310
--- Timings ---
Current time: 1481492707789 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 472
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 473
