Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc boolean_stackdepth vector_integer_eq boolean_pop exec_yankdup vector_integer_shove integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult vector_integer_dup boolean_or boolean_empty exec_do*vector_integer exec_do*while vector_integer_emptyvector exec_dup_items boolean_dup_items exec_empty exec_rot vector_integer_swap exec_dup vector_integer_butlast boolean_fromfloat float_sin boolean_flush float_lte vector_integer_empty exec_k vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth boolean_xor integer_gte vector_integer_take boolean_dup_times vector_integer_yankdup boolean_shove float_lt vector_integer_replace float_mod boolean_rot integer_div integer_fromfloat integer_lte vector_integer_rot integer_mod exec_do*count integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_contains vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times float_gt boolean_dup float_fromboolean exec_dup_times vector_integer_indexof exec_eq integer_yank exec_while float_empty integer_min exec_swap vector_integer_rest float_eq integer_dup_items vector_integer_nth exec_do*range vector_integer_dup_items exec_if vector_integer_remove boolean_invert_first_then_and integer_fromboolean boolean_frominteger vector_integer_last vector_integer_concat boolean_eq float_gte integer_flush float_shove float_pop integer_gt float_sub vector_integer_length float_min boolean_not float_mult vector_integer_pop exec_do*times float_dec exec_pop vector_integer_set float_add exec_s float_dup vector_integer_reverse integer_lt float_swap exec_noop vector_integer_pushall integer_swap integer_dup float_tan exec_yank integer_pop integer_empty float_dup_times float_inc integer_dec vector_integer_first float_rot exec_stackdepth float_flush boolean_and float_cos exec_flush exec_when float_div boolean_invert_second_then_and float_yank boolean_yankdup 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth vector_integer_eq boolean_pop exec_yankdup vector_integer_shove integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult vector_integer_dup boolean_or boolean_empty exec_do*vector_integer exec_do*while vector_integer_emptyvector exec_dup_items boolean_dup_items exec_empty exec_rot vector_integer_swap exec_dup vector_integer_butlast boolean_fromfloat float_sin boolean_flush float_lte vector_integer_empty exec_k vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth boolean_xor integer_gte vector_integer_take boolean_dup_times vector_integer_yankdup boolean_shove float_lt vector_integer_replace float_mod boolean_rot integer_div integer_fromfloat integer_lte vector_integer_rot integer_mod exec_do*count integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_contains vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times float_gt boolean_dup float_fromboolean exec_dup_times vector_integer_indexof exec_eq integer_yank exec_while float_empty integer_min exec_swap vector_integer_rest float_eq integer_dup_items vector_integer_nth exec_do*range vector_integer_dup_items exec_if vector_integer_remove boolean_invert_first_then_and integer_fromboolean boolean_frominteger vector_integer_last vector_integer_concat boolean_eq float_gte integer_flush float_shove float_pop integer_gt float_sub vector_integer_length float_min boolean_not float_mult vector_integer_pop exec_do*times float_dec exec_pop vector_integer_set float_add exec_s float_dup vector_integer_reverse integer_lt float_swap exec_noop vector_integer_pushall integer_swap integer_dup float_tan exec_yank integer_pop integer_empty float_dup_times float_inc integer_dec vector_integer_first float_rot exec_stackdepth float_flush boolean_and float_cos exec_flush exec_when float_div boolean_invert_second_then_and float_yank boolean_yankdup 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = -115 -7 28 -30 68 106 54 -63 -57 -23 -75 -76 -66 -52 23 -113
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "74487989-fa1e-4fbd-86e3-c68f7d8a79de"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction float_lt} {:close 1, :instruction exec_rot} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_yankdup vector_integer_set integer_dup_items integer_dup float_lt exec_rot () (vector_integer_flush exec_stackdepth integer_max integer_empty) () vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (vector_integer_yankdup integer_dup_items exec_stackdepth integer_max integer_empty () vector_integer_empty boolean_swap exec_s float_empty integer_dec (float_frominteger vector_integer_last) vector_integer_stackdepth vector_integer_last integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count integer_max)
Lexicase best errors: [18.0 13.8 18.0 10.4 15.8 20.0 19.0 4.0 12.0 5.0 7.800000000000001 6.199999999999999 6.0 45.0 240.0 10.0 1.1999999999999993 7.399999999999999 38.8 11.0 11.0 37.8 403.2 1897.2 65.8 8.6 6.0 18.2 64.8 18.0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3040.0
Lexicase best mean error: 101.333336
Lexicase best size: 46
Percent parens: 0.174
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_cos} {:close 1, :instruction float_empty} {:close 0, :instruction float_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction float_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub vector_integer_flush float_cos float_empty) (float_mult integer_stackdepth float_dup_items float_dup_times exec_dup (exec_when (exec_yankdup integer_min vector_integer_yankdup boolean_not exec_do*while (float_gte boolean_eq integer_min float_frominteger vector_integer_emptyvector boolean_shove vector_integer_rot) float_swap) integer_min integer_dup_times) exec_shove (float_frominteger)) ())
Zero cases best partial simplification: (in1 exec_rot exec_do*vector_integer float_min float_cos integer_stackdepth float_dup_items float_dup_times exec_dup (exec_yankdup integer_min vector_integer_yankdup boolean_not exec_do*while (float_gte boolean_eq integer_min float_frominteger vector_integer_rot) float_swap integer_min integer_dup_times) exec_shove float_frominteger)
Zero cases best errors: [2.0 0.7999999999999998 1.0 7.6 4.2 0.0 0.0 10000 0.0 5.0 10000 10000 10000 10000 221.0 10.0 10000 27.4 10000 10000 10000 39.8 30.80000000000001 10000 10000 10000 10000 1.7999999999999998 10000 10000]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 150351.40000000002
Zero cases best mean error: 5011.7134
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 1 4 1 2 11 3 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (0 0 0 0 0 11 3 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_div} {:close 0, :instruction exec_yankdup} {:close 1, :instruction vector_integer_pop} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_fromfloat} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_pop} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction integer_rot} {:close 1, :instruction in1} {:close 0, :instruction float_lt} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup_items} {:close 0, :instruction float_swap} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction float_shove} {:close 0, :instruction float_inc})
Best program: (vector_integer_reverse float_div exec_yankdup vector_integer_pop vector_integer_replace integer_inc boolean_fromfloat vector_integer_dup_times exec_s (exec_do*count (exec_pop (vector_integer_butlast vector_integer_reverse integer_fromfloat integer_rot in1) float_lt integer_max integer_dup_items) float_swap boolean_or exec_noop) (integer_lte exec_stackdepth boolean_or boolean_flush boolean_rot float_frominteger vector_integer_yankdup exec_swap (boolean_rot float_shove float_inc) ()) ())
Partial simplification: (exec_stackdepth boolean_or boolean_flush boolean_rot float_frominteger vector_integer_yankdup exec_swap (float_shove float_inc) () ())
Errors: [7.0 2.8 7.0 0.5999999999999996 4.8 9.0 8.0 7.0 1.0 6.0 3.1999999999999993 4.800000000000001 5.0 56.0 251.0 1.0 12.2 18.4 49.8 0.0 0.0 48.8 414.2 1908.2 76.8 2.4000000000000004 5.0 7.2 75.8 7.0]
Total: 3000.0000000000005
Mean: 100.0
Genome size: 33
Size: 41
Percent parens: 0.195
--- Population Statistics ---
Average total errors in population: 285305.0379727925
Median total errors in population: 300000
Error averages by case: (9500.154379093083 9500.301379093084 9500.153379093083 9500.459179093075 9500.227979093084 9500.094379093083 9500.121379093083 9510.752379093083 9500.378379093083 9500.710379093083 9510.573779093087 9510.64897909308 9510.658379093082 9513.145379093083 9512.921379093083 9500.480379093082 9510.999179093085 9501.33037909309 9512.84157909308 9510.423379093083 9510.423379093083 9502.832379093079 9520.727979093086 9603.903179093086 9514.16457909308 9510.536179093091 9510.658379093082 9500.147979093083 9514.11557909308 9510.152379093082)
Error minima by case: (1.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.0 0.0 4.0 0.0 5.0 3.1999999999999993 4.800000000000001 5.0 45.0 221.0 1.0 1.1999999999999993 7.399999999999999 38.8 0.0 0.0 37.8 30.80000000000001 1897.2 65.8 2.4000000000000004 5.0 0.7999999999999998 64.8 1.0)
Average genome size in population (length): 25.067
Average program size in population (points): 30.276
Average percent parens in population: 0.182
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.014
Error (vector) diversity:			 0.014
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 907509
--- Timings ---
Current time: 1481487304142 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (in1 exec_do*vector_integer boolean_swap exec_s () integer_dec (float_div float_frominteger integer_rot float_max float_frominteger) float_max)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 0.05000000000000071 16.6 29.200000000000003 5.0 0.0 39.8 570.8 1418.2 24.200000000000003 2.5999999999999996 4.0 2.2 60.8 0.0]
Lexicase best number of elite cases: 14
Lexicase best total error: 2270.2499999999995
Lexicase best mean error: 75.675
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_cos} {:close 1, :instruction float_empty} {:close 0, :instruction float_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_lte} {:close 0, :instruction float_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction float_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub vector_integer_flush float_cos float_empty) (float_mult integer_stackdepth float_lte float_dup_times exec_dup (exec_when (exec_yankdup integer_min vector_integer_yankdup boolean_not exec_do*while (float_gte boolean_eq integer_min float_frominteger vector_integer_emptyvector boolean_shove vector_integer_rot) float_swap) integer_min integer_dup_times) exec_shove (float_frominteger)) ())
Zero cases best partial simplification: (in1 exec_do*vector_integer float_mult integer_stackdepth exec_yankdup integer_min float_frominteger integer_min)
Zero cases best errors: [2.0 7.2 0.0 3.5999999999999996 4.2 0.0 0.0 0.0 0.0 8.0 6.199999999999999 0.1999999999999993 0.0 26.0 256.0 10.0 17.2 27.4 38.8 5.0 0.0 55.8 422.2 1895.2 30.799999999999997 4.4 0.0 1.7999999999999998 76.8 0.0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 2898.8000000000006
Zero cases best mean error: 96.62666
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 33 3 5 22 152 185 17 171 3 5 6 5 2 5 5 2 1 2 219 228 2 116 2 2 5 3 1 6 4)
Population mean number of elite cases: 1.21
Count of perfect (error zero) individuals by case: (1 0 3 0 0 152 185 17 171 3 0 0 5 0 0 5 0 0 0 219 228 0 0 0 0 0 3 0 0 4)
Population mean number of perfect (error zero) cases: 1.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_sub exec_s float_empty integer_dec (float_div float_frominteger integer_rot float_max float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 0.05000000000000071 16.6 29.200000000000003 5.0 0.0 39.8 570.8 1418.2 24.200000000000003 2.5999999999999996 4.0 2.2 60.8 0.0]
Total: 2270.2499999999995
Mean: 75.675
Genome size: 38
Size: 47
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 53333.853599999995
Median total errors in population: 3040.0
Error averages by case: (1127.513 1115.488200000011 1127.3995 1125.5035999999964 1146.6652000000072 1128.554 1157.8455 2275.819 1144.709 1156.264 2235.290799999997 2265.369000000003 2265.438 2360.876 1336.709 1115.898 2238.22389999999 1145.784000000008 2356.309600000004 2244.518 2254.455 1150.6492000000203 1460.316399999984 3768.166600000048 2337.7578000000053 2275.0833999999923 2265.528 1127.6251999999895 2326.821200000006 2297.2735)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.1999999999999993 0.0 4.0 61.0 0.0 0.05000000000000071 0.6000000000000014 3.799999999999997 0.0 0.0 28.799999999999997 30.80000000000001 1418.2 24.200000000000003 0.40000000000000036 0.0 0.20000000000000018 20.799999999999997 0.0)
Average genome size in population (length): 33.067
Average program size in population (points): 40.461
Average percent parens in population: 0.181
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 228
Genome diversity (% unique Plush genomes):	 0.328
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.053
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2217894
--- Timings ---
Current time: 1481487312087 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (vector_integer_take in1 exec_do*vector_integer boolean_swap exec_s () integer_dec (float_div float_frominteger integer_rot float_max float_frominteger) float_max)
Lexicase best errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 0.05000000000000071 16.6 29.200000000000003 5.0 0.0 39.8 570.8 1418.2 24.200000000000003 2.5999999999999996 4.0 2.2 60.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2270.2499999999995
Lexicase best mean error: 75.675
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gte} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and integer_gte float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Zero cases best partial simplification: (in1 exec_do*vector_integer float_min exec_s float_empty integer_dec (integer_gte float_frominteger float_max vector_integer_last float_frominteger) integer_gt float_max integer_dec)
Zero cases best errors: [0.0 8.8 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 23.0 739.0 7.0 16.2 39.6 29.200000000000003 14.0 0.0 178.2 570.8 7081.8 30.799999999999997 4.4 0.0 1.2000000000000002 227.2 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 8995.800000000001
Zero cases best mean error: 299.86
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (59 120 360 53 33 568 546 564 564 29 25 367 364 2 2 51 276 21 49 124 564 1 8 2 278 17 81 60 2 352)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (59 0 360 0 0 568 546 564 564 29 0 0 364 0 0 51 0 0 0 124 564 0 0 0 0 0 81 0 0 352)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_cos} {:close 1, :instruction float_empty} {:close 0, :instruction float_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_lte} {:close 0, :instruction float_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction float_swap} {:close 0, :instruction float_div} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub vector_integer_flush float_cos float_empty) (float_mult integer_stackdepth float_lte float_dup_times exec_dup (exec_when (exec_yankdup integer_min vector_integer_yankdup boolean_not exec_do*while (float_gte integer_yank integer_min float_frominteger vector_integer_emptyvector boolean_shove vector_integer_rot) float_swap) float_div integer_dup_times) exec_shove (float_frominteger)) ())
Partial simplification: (in1 exec_do*vector_integer vector_integer_flush integer_stackdepth exec_yankdup integer_yank integer_min float_frominteger)
Errors: [1.0 3.2 2.0 3.4000000000000004 2.8 0.0 0.0 0.0 0.0 4.0 8.2 0.8000000000000007 1.0 4.0 201.0 4.0 17.2 27.4 5.799999999999997 5.0 0.0 39.8 323.2 1418.2 72.8 10.4 10.0 1.7999999999999998 76.8 1.0]
Total: 2244.8000000000006
Mean: 74.82667
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 33135.629576745516
Median total errors in population: 3006.0000000000005
Error averages by case: (874.1347371149128 894.4969550581311 933.7301102307218 876.1430023683982 874.7303258128276 883.9584433696609 1053.695460039744 922.46178526235 942.3473166541103 945.9825527652215 878.0558637317437 952.4432520722114 962.431585405551 1601.7649946841323 1142.9876110219468 905.8465727747417 894.9405260494984 987.416925715921 1618.683883808669 914.7065668175999 962.1982668175999 923.515559558116 1302.732386860271 2932.7243085432256 1094.799340501851 986.4859310227071 935.289606543259 864.5778037815702 1008.8576209691674 2063.4902813896915)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.1999999999999993 0.0 3.0 60.0 0.0 0.05000000000000071 0.6000000000000014 3.799999999999997 0.0 0.0 17.799999999999997 29.80000000000001 1417.2 24.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 34.561
Average program size in population (points): 42.679
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 234
Genome diversity (% unique Plush genomes):	 0.36
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 234
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3903585
--- Timings ---
Current time: 1481487321968 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) integer_swap exec_s (float_empty float_lt) (boolean_dup_times) (boolean_invert_first_then_and float_lt) integer_mod boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (in1 exec_do*vector_integer vector_integer_flush integer_swap float_empty boolean_dup_times integer_mod float_frominteger float_frominteger float_max integer_max)
Lexicase best errors: [0.0 0.7999999999999998 0.0 7.6 3.8 0.0 0.0 0.0 0.0 5.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 19.200000000000003 5.0 0.0 178.2 143.8 1901.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3158.8000000000006
Lexicase best mean error: 105.293335
Lexicase best size: 50
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) integer_swap exec_s (float_empty float_lt) (boolean_dup_times) (boolean_invert_first_then_and float_lt) integer_mod boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Zero cases best partial simplification: (in1 exec_do*vector_integer float_eq integer_swap float_empty boolean_dup_times integer_mod float_frominteger float_frominteger float_max)
Zero cases best errors: [0.0 0.7999999999999998 0.0 7.6 3.8 0.0 0.0 0.0 0.0 5.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 19.200000000000003 5.0 0.0 178.2 143.8 1901.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 3158.8000000000006
Zero cases best mean error: 105.293335
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (125 135 274 81 33 473 445 463 467 27 32 288 318 27 1 45 122 32 78 137 475 1 1 62 1 17 150 72 36 289)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (125 0 274 0 0 473 445 463 467 27 0 0 318 0 0 45 0 0 0 137 475 0 0 0 0 0 150 0 0 289)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_cos} {:close 1, :instruction float_empty} {:close 0, :instruction float_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_dup_times} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction float_lt} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_emptyvector} {:close 0, :instruction boolean_shove} {:close 1, :instruction vector_integer_rot} {:close 1, :instruction float_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (integer_fromboolean float_eq) float_min float_sub vector_integer_flush float_cos float_empty) (float_mult integer_stackdepth float_dup_items float_dup_times vector_integer_subvec exec_when (exec_yankdup float_lt vector_integer_yankdup boolean_not exec_do*while (float_gte boolean_eq integer_min float_frominteger vector_integer_emptyvector boolean_shove vector_integer_rot) float_swap) integer_min integer_dup_times) (exec_shove ()))
Partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer integer_fromboolean integer_stackdepth float_dup_items exec_yankdup float_lt vector_integer_yankdup boolean_not exec_do*while (integer_min float_frominteger) float_swap integer_dup_times)
Errors: [2.0 6.2 0.0 9.4 4.2 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 221.0 10.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 1.7999999999999998 76.8 0.0]
Total: 1949.6
Mean: 64.986664
Genome size: 34
Size: 42
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 33006.938722158084
Median total errors in population: 3038.3999999999996
Error averages by case: (984.1793511036082 984.5067105912797 1013.9478480880654 985.9773747503522 944.7628784120346 974.0452929659562 953.8235980880654 982.3310733868851 962.382322812708 985.9757272774648 969.6272000659951 972.645097342016 982.5859687705915 1052.0752697667465 1238.5322797630927 1005.9522129416707 989.5272080836804 1036.8463431325945 1225.5998133762382 985.3421905421901 982.2153005904856 1036.0740017406774 1496.945814433267 2962.489633480527 1031.469573532498 977.5737980880625 975.39139054219 984.6577511035968 1015.6977529411278 1313.7579444444445)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.1999999999999993 0.0 3.0 39.0 0.0 0.05000000000000071 0.6000000000000014 3.799999999999997 0.0 0.0 4.200000000000003 24.80000000000001 1417.2 23.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 35.017
Average program size in population (points): 43.161
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5561994
--- Timings ---
Current time: 1481487331559 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_pop} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_pop float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div boolean_dup integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (in1 exec_do*vector_integer exec_s float_empty () (integer_rot float_max float_frominteger) float_max)
Lexicase best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 5.0 0.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3115.6000000000004
Lexicase best mean error: 103.85333
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_pop} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_pop float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and float_div boolean_dup integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Zero cases best partial simplification: (in1 exec_do*vector_integer boolean_swap exec_s float_empty integer_dec (integer_rot float_frominteger) float_max)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 5.0 0.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 3115.6000000000004
Zero cases best mean error: 103.85333
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 169 194 69 39 426 424 501 452 36 73 291 229 1 68 31 91 28 64 174 455 67 1 1 48 21 111 105 37 264)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (107 0 194 0 0 426 424 501 452 36 0 0 229 0 0 31 0 0 0 174 455 0 0 0 0 0 111 0 0 264)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (boolean_not exec_do*while (float_gte integer_dec) vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (boolean_not exec_do*while (integer_dec) float_eq)) () vector_integer_empty exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot vector_integer_last float_frominteger) integer_flush float_max boolean_not)
Errors: [2.0 4.2 1.0 8.4 2.8 1.0 1.0 1.0 1.0 5.0 6.199999999999999 0.8000000000000007 1.0 3.0 62.0 3.0 18.2 28.066666666666666 28.200000000000003 4.5 1.0 40.8 142.8 1081.1333333333334 31.799999999999997 5.4 1.0 0.20000000000000018 63.58571428571428 1.0]
Total: 1551.0857142857144
Mean: 51.702858
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 3.0602091860575255E7
Median total errors in population: 3038.3999999999996
Error averages by case: (963.6236720779222 983.6008693722927 993.6918787878787 1015.8563324675372 955.033550684669 953.5093977966238 953.2577705627706 2392.0785454545453 1030.9504545454545 1631.5649933884297 1058.299202164501 1701.936267965363 1778.9885965367966 1009106.0204905123 2401205.090865909 1009.6475080980764 1084.115921212121 1026.8318347702652 447735.7750042653 1016.0415218181818 1091.7413181818183 3684.5456956937483 1359.6464081004447 2.608815263530667E7 551966.954272728 1043.3885909090861 1397.628893939394 964.5759599566999 72731.08498116821 1103.7444696969696)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.1999999999999993 0.0 1.0 39.0 0.0 0.05000000000000071 0.6000000000000014 3.799999999999997 0.0 0.0 4.200000000000003 23.80000000000001 1081.1333333333334 23.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 36.952
Average program size in population (points): 45.617
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.166
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 7485816
--- Timings ---
Current time: 1481487342131 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) integer_swap exec_s (float_empty float_lt) (boolean_dup_times) (boolean_invert_first_then_and float_lt) integer_mod boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (in1 exec_do*vector_integer vector_integer_empty integer_swap boolean_dup_times integer_mod float_frominteger float_frominteger float_max)
Lexicase best errors: [0.0 0.7999999999999998 0.0 7.6 3.8 0.0 0.0 0.0 0.0 5.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 19.200000000000003 5.0 0.0 178.2 143.8 1901.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3158.8000000000006
Lexicase best mean error: 105.293335
Lexicase best size: 50
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) integer_swap exec_s (float_empty float_lt) (boolean_dup_times) (boolean_invert_first_then_and float_lt) integer_mod boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Zero cases best partial simplification: (in1 exec_do*vector_integer float_min integer_empty integer_swap boolean_dup_times integer_mod float_frominteger float_frominteger float_max)
Zero cases best errors: [0.0 0.7999999999999998 0.0 7.6 3.8 0.0 0.0 0.0 0.0 5.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 19.200000000000003 5.0 0.0 178.2 143.8 1901.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 3158.8000000000006
Zero cases best mean error: 105.293335
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 202 192 75 53 459 451 494 498 25 32 317 255 37 77 33 66 21 77 159 497 76 35 26 33 32 89 142 31 303)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (122 0 192 0 0 459 451 494 498 25 0 0 255 0 0 33 0 0 0 159 497 0 0 0 0 0 89 0 0 303)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (boolean_not exec_do*while (float_gte integer_dec) vector_integer_flush float_eq) float_min float_sub integer_empty) () (boolean_dup) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer integer_dec boolean_swap exec_s () () (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.5 4.2 1.0 8.4 2.8 1.0 1.0 1.0 1.0 5.0 6.199999999999999 0.8000000000000007 1.0 3.0 62.0 3.0 18.2 28.076470588235292 28.200000000000003 4.0 1.0 40.8 142.8 1081.8 31.799999999999997 5.4 1.0 0.20000000000000018 63.442857142857136 1.0]
Total: 1550.6193277310924
Mean: 51.68731
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.0000765269499655E9
Median total errors in population: 3025.9999999999995
Error averages by case: (992.9763347381968 983.8604454197306 972.9123563222918 985.4134762707407 983.973504031281 982.7142828869789 972.5371876488839 2402.0840892377687 958.2534364508357 33670.15106610962 1013.3408879598418 1716.5735896638362 1058.5711229971805 1.000001059349367E9 1.0000012043823862E9 1014.9405767059717 1032.2996724198745 1029.308784633827 1.0000011356022022E9 985.2511255944802 971.6112352463464 1037.0970874099257 1.0000014070422912E9 3299.527163262568 1.0000012907155671E9 1015.1982439122191 8657.172427698035 993.9760846924523 1627.2700846647124 1072.8438884048862)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.1999999999999993 0.0 1.0 39.0 0.0 0.05000000000000071 0.6000000000000014 3.799999999999997 0.0 0.0 4.200000000000003 23.80000000000001 1081.1333333333334 23.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 37.531
Average program size in population (points): 46.635
Average percent parens in population: 0.198
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.171
Error (vector) diversity:			 0.173
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 9515331
--- Timings ---
Current time: 1481487352235 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min integer_shove integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_div float_frominteger float_add float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) (vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div boolean_not exec_do*count (integer_max)))
Lexicase best partial simplification: (in1 exec_do*vector_integer float_eq integer_shove float_frominteger float_frominteger float_max)
Lexicase best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 5.0 0.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3115.6000000000004
Lexicase best mean error: 103.85333
Lexicase best size: 44
Percent parens: 0.205
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min integer_shove integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_div float_frominteger float_add float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) (vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div boolean_not exec_do*count (integer_max)))
Zero cases best partial simplification: (in1 exec_do*vector_integer float_min integer_shove float_frominteger float_frominteger float_max)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 5.0 0.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 3115.6000000000004
Zero cases best mean error: 103.85333
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 176 257 96 52 441 433 463 449 25 44 1 228 35 69 40 67 22 1 166 453 69 51 2 1 27 98 137 41 276)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (150 0 257 0 0 441 433 463 449 25 0 0 228 0 0 40 0 0 0 166 453 0 0 0 0 0 98 0 0 276)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_yank exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains integer_max))
Partial simplification: (in1 exec_do*vector_integer float_lt exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot vector_integer_last float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 25.4 29.200000000000003 5.0 0.0 39.8 570.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 1217.5166666666667
Mean: 40.58389
Genome size: 37
Size: 45
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 33819.31966559851
Median total errors in population: 3025.9999999999995
Error averages by case: (1002.9853713849235 1013.9386977343125 992.9289239397604 992.7948701553989 993.91324015472 1002.8168764363164 972.6068661323083 1002.4227110570396 971.9208380793447 1016.3999532767791 1031.97176932789 1026.670376467782 1007.3341395595829 1086.7499128392146 1283.634100521175 994.8328655732627 1052.449716452697 1039.967211132252 1123.3882013476714 995.0916992801083 981.8273811304857 1052.2884759755598 1562.4999675214428 3043.1598697983623 1317.3452508885837 1031.490457157298 1043.8708199038938 1013.9445647447945 1105.10388627818 1062.9706513473927)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 1.0 39.0 0.0 0.05000000000000071 0.6000000000000014 1.2000000000000028 0.0 0.0 4.200000000000003 23.80000000000001 332.04999999999995 19.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 37.928
Average program size in population (points): 47.29
Average percent parens in population: 0.200
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.214
Error (vector) diversity:			 0.215
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 11628050
--- Timings ---
Current time: 1481487362375 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (in1 exec_rot exec_do*vector_integer integer_empty () exec_s () integer_mod (float_div float_frominteger integer_rot float_max float_frominteger) vector_integer_stackdepth float_max integer_dec)
Lexicase best errors: [1.0 3.2 0.0 3.4000000000000004 0.7999999999999998 0.0 0.0 0.0 0.0 4.0 6.533333333333332 0.8000000000000007 0.0 24.0 201.0 8.0 0.05000000000000071 40.6 5.799999999999997 15.0 0.0 30.799999999999997 323.2 7082.8 30.799999999999997 4.4 0.0 2.2 228.2 0.0]
Lexicase best number of elite cases: 10
Lexicase best total error: 8016.583333333333
Lexicase best mean error: 267.21945
Lexicase best size: 47
Percent parens: 0.191
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) integer_swap exec_s (float_empty float_lt) (boolean_dup_times) (boolean_invert_first_then_and float_lt) integer_mod boolean_invert_first_then_and float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Zero cases best partial simplification: (in1 float_empty exec_do*vector_integer float_min integer_swap boolean_dup_times integer_mod float_frominteger float_frominteger float_max)
Zero cases best errors: [0.0 0.7999999999999998 0.0 7.6 3.8 0.0 0.0 0.0 0.0 5.0 5.199999999999999 0.1999999999999993 0.0 14.0 739.0 6.0 17.2 5.399999999999999 19.200000000000003 5.0 0.0 178.2 143.8 1901.2 30.799999999999997 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 3158.8000000000006
Zero cases best mean error: 105.293335
Zero cases best size: 50
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 163 230 68 64 563 535 528 518 34 36 30 224 1 62 39 40 20 1 181 527 62 1 41 1 17 119 107 32 267)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (190 0 230 0 0 563 535 528 518 34 0 0 224 1 0 39 0 0 0 181 527 0 0 0 0 0 119 0 0 267)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) vector_integer_flush exec_stackdepth integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_sub exec_stackdepth integer_max exec_s float_empty () (integer_yank float_div float_frominteger integer_rot float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 25.4 29.200000000000003 5.0 0.0 39.8 570.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 1217.5166666666667
Mean: 40.58389
Genome size: 49
Size: 58
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 8.254994247514601E7
Median total errors in population: 3111.4
Error averages by case: (1092.8350643579065 1124.723366666669 1022.7482846371998 1096.1118291353414 1034.6517700396864 1072.10992816107 1022.0484220992175 2571.726004181491 1100.890013888889 1712.33144943609 1266.0141364409467 1874.3401321903655 1921.9016554878224 1009236.844610517 2401252.637692462 1039.7197452769994 1295.6564470249787 1263.2280615384593 447761.6077151776 1090.5263507801176 1151.7822868912285 3730.952696198769 5.1945205991882965E7 2.6088246238107193E7 552856.0962492685 1206.2102204122637 1531.51418467562 1093.5420757067727 72984.78793600867 1082.7068279360988)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 4.200000000000003 20.19999999999999 332.04999999999995 10.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 38.34
Average program size in population (points): 48.114
Average percent parens in population: 0.205
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.25
Error (vector) diversity:			 0.255
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 13906958
--- Timings ---
Current time: 1481487372801 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () vector_integer_empty boolean_swap exec_s (float_empty) (exec_s (float_empty float_lt) integer_dec (exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_flush vector_integer_contains) integer_div boolean_not exec_do*count)) ())
Lexicase best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 13176.800000000001
Lexicase best mean error: 439.22665
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub) () vector_integer_empty boolean_swap (float_lt) (exec_s (float_empty float_lt) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth integer_gt integer_flush float_max integer_dec float_frominteger) exec_do*count)) ())
Zero cases best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 13176.800000000001
Zero cases best mean error: 439.22665
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 168 248 65 58 465 434 471 454 44 49 20 219 33 62 58 47 23 20 144 464 1 20 1 26 35 119 132 24 248)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (158 0 248 0 0 465 434 471 454 44 0 0 219 33 0 58 0 0 0 144 464 0 0 0 0 0 119 0 0 248)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty) vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (vector_integer_take in1 (exec_do*vector_integer float_eq exec_yank float_gte integer_dec) (vector_integer_flush float_eq) integer_empty boolean_swap exec_s () integer_dec (integer_yank float_div float_frominteger float_max vector_integer_last float_frominteger) boolean_eq integer_div integer_max)
Errors: [0.0 0.7999999999999998 0.0 8.6 0.20000000000000018 0.0 1.0 16.0 1.0 4.0 12.366666666666665 13.8 14.0 64.875 61.0 7.0 20.45 40.6 59.11645569620253 9.8 9.0 39.8 142.8 332.04999999999995 86.3 11.9 14.5 1.7999999999999998 64.86666666666666 2.0]
Total: 1039.6247890295358
Mean: 34.65416
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 417223.08780809114
Median total errors in population: 3117.6000000000004
Error averages by case: (873.297371264575 956.9980777287204 843.1049665438682 885.6738222757903 864.2606126848814 872.0263636388815 852.0538104974902 1047.13612935226 869.1871404365988 923.7084112933244 1458.0713888708062 1115.5412653338738 1109.585979229614 7582.865105014233 1353.9139434645112 867.41782956163 6295.360910865409 886.9063689585075 2057.608786115491 902.4569101489597 892.7301271444783 931.6259891999936 2146.5973240054377 113085.13031752908 175521.42397857134 1076.980649370808 1126.8501728631704 865.2551439336805 88096.11863693419 863.2002752597269)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 20.19999999999999 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 38.146
Average program size in population (points): 48.327
Average percent parens in population: 0.210
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.273
Error (vector) diversity:			 0.276
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 16204713
--- Timings ---
Current time: 1481487385357 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () () boolean_swap exec_s (float_empty) (exec_s (float_empty float_lt) (exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth integer_flush float_max integer_dec) boolean_eq integer_div exec_do*count integer_max)) ())
Lexicase best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 13176.800000000001
Lexicase best mean error: 439.22665
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () vector_integer_empty boolean_swap exec_s (float_empty) (exec_s (float_empty float_lt) () (exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_flush integer_dec) integer_div exec_do*count integer_max)) ())
Zero cases best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 13176.800000000001
Zero cases best mean error: 439.22665
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 156 226 74 75 508 448 480 464 86 42 24 190 27 36 52 66 23 33 140 478 33 28 31 25 33 128 139 28 198)
Population mean number of elite cases: 4.43
Count of perfect (error zero) individuals by case: (154 0 226 0 0 508 448 480 464 86 0 0 190 27 0 52 0 0 0 140 478 0 0 0 0 0 128 0 0 198)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty) vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer vector_integer_flush exec_yank float_gte integer_dec) () (integer_empty) vector_integer_empty boolean_swap exec_s () integer_dec (integer_yank float_div float_frominteger float_max float_frominteger) boolean_eq integer_div boolean_not exec_do*count integer_max)
Errors: [0.0 0.7999999999999998 0.0 8.6 0.20000000000000018 0.0 1.0 16.0 1.0 4.0 12.366666666666665 13.8 14.0 64.875 61.0 7.0 20.45 40.6 59.11645569620253 9.8 9.0 39.8 142.8 332.04999999999995 86.3 11.9 14.5 1.7999999999999998 64.86666666666666 2.0]
Total: 1039.6247890295358
Mean: 34.65416
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 82589.24380810147
Median total errors in population: 3038.3999999999996
Error averages by case: (892.9185974906475 1166.8193511279624 873.1732323303803 904.9944086060628 876.0986741997241 901.8497579685999 881.9908193266945 907.1861198442373 855.6097553061403 933.902475724611 1163.546881178855 1034.8311176541092 1004.6093813361772 2141.1234246963113 7329.371195130137 894.0238664422682 1434.9798965950156 892.7262436755673 1897.2803920390338 878.0393090275252 866.528709027525 1065.430145883118 18687.944044708885 3932.9920482056573 24356.910009224994 968.8238782000016 1024.7684640650157 895.2835005061819 2042.2258373117165 883.2622712684187)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 20.19999999999999 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 38.762
Average program size in population (points): 49.373
Average percent parens in population: 0.213
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.259
Error (vector) diversity:			 0.262
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 18584765
--- Timings ---
Current time: 1481487398219 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Lexicase best partial simplification: (in1 exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () () boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_flush float_max) boolean_eq integer_div exec_do*count integer_max)) ())
Lexicase best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 13176.800000000001
Lexicase best mean error: 439.22665
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))) ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) exec_s (float_empty float_lt) (exec_s (float_lt) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_last integer_gt integer_flush float_max vector_integer_contains) boolean_eq (integer_max))) ())
Zero cases best errors: [0.0 10000 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 13176.800000000001
Zero cases best mean error: 439.22665
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 130 255 83 100 525 476 485 465 72 44 35 213 23 42 50 69 19 22 132 486 34 1 19 20 26 115 140 30 220)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (171 0 255 0 0 525 476 485 465 72 0 0 213 23 0 50 0 0 0 132 486 0 0 0 0 0 115 0 0 220)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_yank exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_sub (exec_s float_empty integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger)) vector_integer_contains)
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 25.4 29.200000000000003 5.0 0.0 39.8 570.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 1217.5166666666667
Mean: 40.58389
Genome size: 49
Size: 58
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 2.3278914223879647E9
Median total errors in population: 3111.4
Error averages by case: (1142.4287814354323 1356.1325088384367 1122.5125098261885 1166.5132095809129 1133.791031680741 1151.5493351855025 1141.6146572620855 1258.7085685843547 1143.8045773156596 1178.4705221954976 1440.7763285714252 1337.448798250525 1337.6678930543787 1682860.9716153722 3.200054189593908E8 1140.5542389975192 1634.495455555548 1183.155126086956 5586080.405216332 1157.2869936313825 1154.2544627502834 1290.0153101074663 1.0000136387523835E9 1.0000035339562305E9 568357.7280818147 1339.2688271708673 2103.946481047335 1154.455081067602 2280.086039491072 1182.6783006662017)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 15.800000000000011 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.20000000000000018 18.799999999999997 0.0)
Average genome size in population (length): 38.656
Average program size in population (points): 49.273
Average percent parens in population: 0.214
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.273
Error (vector) diversity:			 0.274
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 20980619
--- Timings ---
Current time: 1481487411248 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) (vector_integer_empty) boolean_swap exec_s (exec_s (float_empty float_lt) integer_dec (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_flush float_max) integer_div boolean_rot integer_stackdepth)) ())
Lexicase best errors: [0.0 9.8 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3186.6000000000004
Lexicase best mean error: 106.22
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Zero cases best partial simplification: (vector_integer_take in1 exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_flush float_max) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Zero cases best errors: [0.0 9.8 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 3186.6000000000004
Zero cases best mean error: 106.22
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 163 244 81 83 542 483 520 504 74 40 29 207 26 49 67 72 14 22 155 517 21 32 36 23 28 115 1 1 235)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (185 0 244 0 0 542 483 520 504 74 0 0 207 26 0 67 0 0 0 155 517 0 0 0 0 0 115 0 0 235)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_yank exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush vector_integer_last integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 float_empty exec_do*vector_integer float_sub exec_s () integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger) vector_integer_last integer_flush boolean_not)
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 25.4 29.200000000000003 5.0 0.0 39.8 570.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 1217.5166666666667
Mean: 40.58389
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 8.257891823362145E7
Median total errors in population: 3038.3999999999996
Error averages by case: (1042.315916666667 1284.9011072829087 1061.984423076924 1115.406132163746 1034.464171428576 1061.3633666666667 1051.4496666666664 2532.6599375 1103.6373444444444 1735.5808304112556 1185.6792595238078 1825.9873422618966 1863.2573717948712 1009374.194889119 2408477.8706440707 1068.581102928443 1201.1831912698362 1302.58063372859 447946.7276486821 1077.5312357142857 1145.244988888889 3902.35279302004 5.196745316185801E7 2.6088194248680897E7 552073.6760909093 1142.8208142857122 1511.5762160894658 1212.7570833333202 72882.94112436031 1052.097756410257)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 15.800000000000011 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.1333333333333333 14.799999999999997 0.0)
Average genome size in population (length): 38.215
Average program size in population (points): 48.665
Average percent parens in population: 0.214
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.273
Error (vector) diversity:			 0.276
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 23406778
--- Timings ---
Current time: 1481487424062 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s () (exec_s (float_lt) () (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec) integer_div boolean_rot exec_do*count integer_stackdepth)) ())
Lexicase best errors: [0.0 9.8 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3186.6000000000004
Lexicase best mean error: 106.22
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () exec_s (float_lt) (exec_s (float_lt) integer_dec (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_last integer_flush float_max integer_dec float_frominteger) integer_div exec_do*count integer_stackdepth)) ())
Zero cases best errors: [0.0 9.8 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 10
Zero cases best total error: 3186.6000000000004
Zero cases best mean error: 106.22
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 179 209 63 98 452 399 463 422 83 49 27 229 22 54 61 60 23 23 156 447 23 43 29 23 37 127 30 32 277)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (169 0 209 0 0 452 399 463 422 83 0 0 229 22 0 61 0 0 0 156 447 0 0 0 0 0 127 0 0 277)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_yank exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush vector_integer_last integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer exec_s (exec_s () integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger)))
Errors: [1.0 3.2 0.0 9.4 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 25.4 29.200000000000003 5.0 0.0 39.8 570.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 1217.5166666666667
Mean: 40.58389
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 583218.3753232822
Median total errors in population: 3184.8
Error averages by case: (1012.8529481478311 1245.9091845336643 1252.2064979341549 963.0467725560778 973.8974771160873 1021.9878074077246 1021.9875874335453 1060.6024423887338 1104.3516634427556 977.9784481959301 1038.384589839298 1069.7581131478278 1029.8789844564012 1695.6894714226949 207372.94380136795 987.4213649545521 1047.9295086035033 1039.7239659227687 1336.4993052652317 987.7287423724952 994.9517185153522 2213.0321231809976 340704.7561961379 3928.9623031307556 1299.9967698646467 1040.6821853273439 1036.3209130624673 1243.0516631050884 1223.645535840818 1292.1972386087584)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.6000000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 15.800000000000011 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.1333333333333333 14.799999999999997 0.0)
Average genome size in population (length): 38.639
Average program size in population (points): 49.325
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.28
Error (vector) diversity:			 0.283
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 25909832
--- Timings ---
Current time: 1481487437451 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap boolean_empty float_empty float_lt integer_mod exec_do*count (integer_fromboolean integer_lt float_div exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min integer_empty) () (vector_integer_empty) boolean_swap boolean_empty float_lt integer_mod exec_do*count (integer_fromboolean integer_lt float_div exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_gt integer_flush float_max vector_integer_contains float_frominteger) boolean_eq)
Lexicase best errors: [0.0 0.7999999999999998 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 739.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3185.6000000000004
Lexicase best mean error: 106.18667
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_max) (exec_do*count))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 130 276 51 119 544 499 549 522 58 41 39 220 69 34 97 71 2 35 124 538 27 1 27 24 87 121 11 1 238)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (221 0 276 0 0 544 499 549 522 58 0 0 220 69 0 97 0 0 0 124 538 0 0 0 0 0 121 0 0 238)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer in1 integer_dec exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 59853.60045883377
Median total errors in population: 3134.7999999999997
Error averages by case: (1142.0070564736434 1295.4480765136816 1121.5774896492235 1129.7054859363623 1123.086957325959 1141.0536182267092 1151.1227573692397 1130.8367738974919 1173.8933239926257 1132.2929150759626 1203.8680901297794 1133.8447229457565 1114.0488224227825 1320.6495602071432 6663.572979268147 1122.7541456477534 1204.519612061012 1255.1830664031645 1423.961444065453 1107.0934428571427 1104.4613106877775 1294.3690271723276 17174.084355357347 3411.7740627216817 1392.0353027741062 1189.5500511179441 1153.0319399377229 1322.0540114440862 1330.2214675025816 1391.4985896492226)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 10.200000000000003 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 38.962
Average program size in population (points): 49.601
Average percent parens in population: 0.214
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.307
Error (vector) diversity:			 0.313
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 28451655
--- Timings ---
Current time: 1481487450221 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_empty} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_lt} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap boolean_empty float_empty float_lt integer_mod exec_do*count (integer_fromboolean integer_lt float_div exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count (integer_max))
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_rot exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty (vector_integer_empty) boolean_swap boolean_empty float_empty float_lt integer_mod exec_do*count (integer_fromboolean integer_lt float_div exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt float_max vector_integer_contains) integer_max)
Lexicase best errors: [0.0 0.7999999999999998 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 739.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3185.6000000000004
Lexicase best mean error: 106.18667
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_max integer_dec))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 155 261 60 73 580 566 598 587 45 73 40 232 77 35 105 47 19 34 168 594 32 36 18 1 94 146 23 26 237)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (221 0 261 0 0 580 566 598 587 45 0 0 232 77 0 105 0 0 0 168 594 0 0 0 0 0 146 0 0 237)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer vector_integer_take integer_dec exec_s float_lt () (integer_yank float_div float_frominteger integer_rot float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 43837.93887691706
Median total errors in population: 3025.9999999999995
Error averages by case: (1171.8877196401265 1345.2152876041023 1221.3242034008108 1206.9294722755042 1222.9656849179023 1190.686525195682 1220.725858529015 1233.1019534694915 1191.6977031718725 1270.2913107556046 1250.321751386153 1286.182207906535 1246.5430342404832 1393.0339860164931 2351.46899979712 1230.4129321947396 1252.3118164655114 1317.2682519515351 1372.4313997209956 1166.6648109099679 1161.7727636877455 1352.305285733884 4010.1415157917186 3373.6569958268274 1359.4151582506256 1257.0020946401276 1266.9685097307367 1321.7171822469554 1422.327624724641 1171.1668367341438)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 39.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.069
Average program size in population (points): 50.061
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.303
Error (vector) diversity:			 0.307
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 30983641
--- Timings ---
Current time: 1481487462898 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () (vector_integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap integer_pop float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Lexicase best partial simplification: (in1 float_empty (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty boolean_swap integer_pop float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_flush float_max float_max integer_dec) boolean_eq integer_max)
Lexicase best errors: [1.0 0.20000000000000018 0.0 0.40000000000000036 4.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 7.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 73.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3183.0000000000005
Lexicase best mean error: 106.1
Lexicase best size: 59
Percent parens: 0.169
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_max) boolean_eq float_dup_items)
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 156 238 68 64 563 530 564 545 55 74 30 213 56 1 87 43 25 47 173 552 27 42 24 25 87 128 21 30 216)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (217 0 238 0 0 563 530 564 545 55 0 0 213 56 0 87 0 0 0 173 552 0 0 0 0 0 128 0 0 216)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer vector_integer_flush float_sub integer_dec exec_s float_empty () (integer_yank float_div float_frominteger integer_rot float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 58825.917404609245
Median total errors in population: 3116.0000000000005
Error averages by case: (1542.1914944444445 1634.9664252747232 1581.3906471306464 1537.2802102685773 1623.9058362103174 1560.6505555555555 1550.7336818181818 1534.4989958333333 1521.9832750721503 1613.092346305157 1571.8787660714252 1609.554175518921 1549.7239637362634 1852.5372614507683 3854.4978231439936 1545.8827345248803 1582.4778552808862 1590.3332231884008 1777.2802515500975 1496.0269107093845 1512.2257527777779 1795.781342578289 8062.297725298419 3586.05964253647 1712.68200908088 1568.5098658730144 1539.818732323233 1671.718142735034 1704.6938334095605 1541.2439249084243)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.061
Average program size in population (points): 50.08
Average percent parens in population: 0.220
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.292
Error (vector) diversity:			 0.295
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 33503472
--- Timings ---
Current time: 1481487475422 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty float_lt) (integer_dec) (boolean_invert_first_then_and exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_rot exec_do*count (integer_stackdepth))) ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (exec_s (float_empty) integer_dec (exec_dup_times (exec_do*range (integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_flush float_max float_frominteger) integer_div)) ())
Lexicase best errors: [0.0 9.8 0.0 0.40000000000000036 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 6.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 70.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3186.6000000000004
Lexicase best mean error: 106.22
Lexicase best size: 56
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) (vector_integer_empty) (float_yankdup) vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max vector_integer_contains float_frominteger))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 181 237 63 154 572 546 579 567 45 61 27 223 61 25 96 57 43 45 156 565 33 38 25 29 103 171 15 25 254)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (220 0 237 0 0 572 546 579 567 45 0 0 223 61 0 96 0 0 0 156 565 0 0 0 0 0 171 0 0 254)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_empty integer_dec exec_s () () (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 50183.76255808149
Median total errors in population: 3025.9999999999995
Error averages by case: (1192.2741985705616 1354.4857113951477 1311.4465614673873 1207.6712397835374 1324.1012630307955 1200.5900560188356 1180.715389873918 1196.0553096557833 1182.5993285782858 1334.511651319238 1232.8320732547477 1350.6220499231542 1221.0455430672343 1543.6601943340324 3851.947493979872 1217.204573630852 1243.9762756602331 1270.156171532048 1464.8826223145068 1186.2564325915537 1182.969919893141 1467.4956738886008 8127.97534269252 3540.2772698233002 1441.9359374059545 1228.8029237540786 1200.2215590255971 1351.6651970648204 1344.23829513789 1231.1462994138362)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 38.999
Average program size in population (points): 49.776
Average percent parens in population: 0.219
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.291
Error (vector) diversity:			 0.296
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 36042676
--- Timings ---
Current time: 1481487488294 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (float_yankdup integer_div float_dup_items exec_do*count (integer_max)) ())
Lexicase best partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_empty float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max vector_integer_contains))
Lexicase best errors: [0.0 0.7999999999999998 0.0 5.4 0.20000000000000018 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.8000000000000007 1.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 0.20000000000000018 72.8 1.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2278.2000000000003
Lexicase best mean error: 75.94
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) vector_integer_empty (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_last integer_gt integer_flush float_max float_max vector_integer_contains) exec_do*count integer_max)
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 136 264 49 161 583 555 583 582 54 57 34 229 79 19 116 40 29 53 130 583 29 31 25 17 126 162 25 41 257)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (223 0 264 0 0 583 555 583 582 54 0 0 229 79 0 116 0 0 0 130 583 0 0 0 0 0 162 0 0 257)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush vector_integer_take) in1 float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty) vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_sub integer_dec vector_integer_flush exec_s float_empty integer_dec (integer_yank float_div float_frominteger integer_rot float_frominteger) float_max integer_div)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 8.256460834779766E7
Median total errors in population: 2984.2580940988832
Error averages by case: (1172.2759576994517 1315.0016024310144 1321.4423780684654 1210.0762999062129 1304.1652648979289 1200.5052240743914 1200.6323175922755 2605.1616225357925 1221.2387884427553 1947.8796863776226 1240.4431333657058 1977.564644372468 1951.9987139054358 1009393.9155321423 2403458.9575591614 1219.4874084924852 1258.4083331263325 1389.572647360544 447828.64765661047 1178.4327840432532 1272.4234193700531 4009.4304490239424 5.19512480928514E7 2.6092436203406166E7 552012.6126665975 1190.1750272687411 1533.5733588407716 1351.568491178852 72927.24844202945 1231.2121328209969)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.601
Average program size in population (points): 50.705
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.307
Error (vector) diversity:			 0.31
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 38642395
--- Timings ---
Current time: 1481487501143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_rot exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt float_max integer_dec) exec_do*count)
Lexicase best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3152.6000000000004
Lexicase best mean error: 105.08667
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) () (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt float_max vector_integer_contains) ())
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 158 254 59 150 588 555 568 562 61 55 36 212 92 15 127 42 33 38 146 564 35 30 32 20 130 145 20 29 235)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (230 0 254 0 0 588 555 568 562 61 0 0 212 92 0 127 0 0 0 146 564 0 0 0 0 0 145 0 0 235)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer in1 integer_dec vector_integer_flush boolean_swap exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot vector_integer_last float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 144958.62565643218
Median total errors in population: 3004.6246622391413
Error averages by case: (1432.8183933731964 1524.9287552739497 1501.311075879876 1427.4568938139294 1533.347181457483 1470.3958907410579 1450.5262835247115 1515.600042032067 1482.325411911619 1523.7202312637846 1480.7418187590704 1549.1832113780163 1469.809573301092 2263.2407219722177 16094.884709392207 1466.4704582140266 1501.6330447317346 1534.6590034132093 2046.1193618378736 1486.6887827372284 1482.6201405280615 1727.0907158872997 65680.92489559035 21113.893712591296 1629.1414894692991 1467.131335663732 1519.6877203653733 1501.52601662611 1639.7176088211127 1441.0311758798757)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 40.109
Average program size in population (points): 51.213
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.29
Error (vector) diversity:			 0.294
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 41221752
--- Timings ---
Current time: 1481487514002 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () (vector_integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap integer_pop float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (vector_integer_set integer_div float_dup_items exec_do*count (integer_max)) ())
Lexicase best partial simplification: (vector_integer_take in1 exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove) () float_yankdup vector_integer_flush vector_integer_concat integer_max vector_integer_empty boolean_swap integer_pop float_min float_sub vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth float_max float_max vector_integer_contains) integer_div)
Lexicase best errors: [1.0 0.20000000000000018 0.0 0.40000000000000036 4.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 7.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 73.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3183.0000000000005
Lexicase best mean error: 106.1
Lexicase best size: 59
Percent parens: 0.169
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt float_max) boolean_eq float_dup_items)
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 200 258 61 1 580 535 549 547 62 64 35 238 63 34 96 30 39 42 176 545 22 39 33 23 112 139 21 16 281)
Population mean number of elite cases: 5.07
Count of perfect (error zero) individuals by case: (224 0 258 0 0 580 535 549 547 62 0 0 238 63 0 96 0 0 0 176 545 0 0 0 0 0 139 0 0 281)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer float_sub integer_dec exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger) vector_integer_contains)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 60832.75495625488
Median total errors in population: 3028.7999999999997
Error averages by case: (1232.287794047619 1375.0950396825297 1291.3212908730163 1210.865117950911 1283.9880968253958 1390.3415869268288 1400.5301944444443 1400.574940984237 1373.3648876543211 1289.435884157363 1281.1844670151556 1337.7515349110463 1298.438278287118 1742.8427895435207 4561.584250251679 1247.3911540616239 1333.0377134450614 1258.7999043168259 1539.9711160401137 1358.468292941118 1374.062399090909 1495.9130864894387 10419.041044837968 7359.67692510828 2133.5162151264008 1239.8958733831264 1304.0736658071276 1381.7021818563567 2666.62283575098 1250.9763944444446)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.407
Average program size in population (points): 50.192
Average percent parens in population: 0.216
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.304
Error (vector) diversity:			 0.309
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 43782496
--- Timings ---
Current time: 1481487526400 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (float_min float_sub integer_empty) vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_stackdepth vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_contains float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_empty (exec_do*vector_integer (vector_integer_flush float_eq) float_min float_sub integer_empty) () (vector_integer_empty) exec_s (float_empty float_lt) integer_dec (float_min float_sub integer_empty) vector_integer_empty float_yankdup vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_stackdepth vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_contains float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 0.40000000000000036 5.8 0.0 0.0 0.0 0.0 5.0 2.1999999999999993 0.8000000000000007 0.0 55.0 250.0 0.0 11.2 17.4 48.8 2.0 0.0 47.8 413.2 1907.2 75.8 1.4000000000000004 4.0 0.20000000000000018 74.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2925.2000000000003
Lexicase best mean error: 97.50667
Lexicase best size: 57
Percent parens: 0.211
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction float_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger) (boolean_eq integer_div float_dup_items exec_do*count (integer_max)) ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_flush float_max vector_integer_contains float_frominteger) integer_div exec_do*count integer_max)
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 179 254 66 30 582 534 540 542 59 40 34 248 67 19 100 41 40 56 166 539 27 44 14 23 122 152 24 38 276)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (206 0 254 0 0 582 534 540 542 59 0 0 248 67 0 100 0 0 0 166 539 0 0 0 0 0 152 0 0 276)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_do*vector_integer vector_integer_flush (float_min integer_dec) vector_integer_empty exec_s float_empty () (integer_yank float_div float_frominteger integer_rot vector_integer_last float_frominteger) float_max)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 60090.49674470008
Median total errors in population: 2959.741666666667
Error averages by case: (1202.152920244717 1326.8469949894766 1351.298426374284 1248.2481339194815 1293.7473847408562 1350.4011097076175 1370.5707398630318 1305.8750003836867 1292.5071282771619 1292.7053410649844 1288.4739296703285 1322.0159974906774 1282.3935827251928 1572.3623709125038 2641.182957530445 1233.3495136619476 2257.450342441269 1272.3282681159417 1409.0269760687056 1294.1480573602803 1292.9002970180097 1438.9840868084782 4682.847589112419 3428.2331552832707 4141.504335641153 1254.5415637539888 1243.2775469220792 1331.6250831851378 11408.531928906568 1260.965982526606)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 5.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.742
Average program size in population (points): 50.87
Average percent parens in population: 0.220
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.304
Error (vector) diversity:			 0.312
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 46375616
--- Timings ---
Current time: 1481487539232 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush})
Lexicase best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush) () ())
Lexicase best partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_gt float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 47
Percent parens: 0.149
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count})
Zero cases best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) (vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max boolean_not exec_do*count ()) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) () (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_max exec_do*count))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 55
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 160 234 50 25 593 533 552 550 58 49 35 236 81 25 98 42 43 41 169 551 30 29 23 1 118 147 21 33 263)
Population mean number of elite cases: 4.98
Count of perfect (error zero) individuals by case: (189 0 234 0 0 593 533 552 550 58 0 0 236 81 0 98 0 0 0 169 551 0 0 0 0 0 147 0 0 263)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 exec_rot exec_do*vector_integer vector_integer_flush float_sub integer_dec exec_s float_lt () (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 5.259065552768765E7
Median total errors in population: 3025.9999999999995
Error averages by case: (1092.0734346470406 1225.5827344626673 1261.3494812705353 1108.8898530542901 1254.7166790696594 1230.378983724697 1310.575848071813 1180.1643786773368 1183.223120207474 1203.7044937989922 1129.0248671525007 1332.9885096016912 1293.0587788362861 10080.8173272183 64786.20543451273 1142.8122961674337 1207.7032035558989 2953.1071418957945 13268.604358513918 1140.7171797353965 1173.8272685977774 1527.7746766655732 5.240054424122448E7 26319.41049378978 44233.23987748826 1136.857678013207 1270.385569339814 1211.6270833846138 1681.4655381677871 1171.0001745298691)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 25.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 14.800000000000011 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 39.956
Average program size in population (points): 51.098
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.315
Error (vector) diversity:			 0.324
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 48961550
--- Timings ---
Current time: 1481487552134 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count})
Lexicase best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_swap exec_do*range (integer_rot vector_integer_subvec integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count ()) () ())
Lexicase best partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty boolean_swap float_eq float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_swap integer_dec exec_do*count))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 57
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count})
Zero cases best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_swap exec_do*range (integer_rot vector_integer_subvec integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count ()) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_swap boolean_not exec_do*count))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 57
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 166 240 59 22 650 587 572 591 78 42 45 253 91 1 119 46 32 37 157 590 24 1 21 26 156 136 11 36 277)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (234 0 240 0 0 650 587 572 591 78 0 0 253 91 0 119 0 0 0 157 590 0 0 0 0 0 136 0 0 277)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer float_sub integer_dec integer_empty exec_s () () (integer_yank float_div float_frominteger integer_rot float_max float_frominteger) vector_integer_contains)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 1.1793036255103278E9
Median total errors in population: 2962.275757575758
Error averages by case: (1224.2159416666664 1305.0388732142767 1361.2641333333333 1665.95164531282 1524.0133214169007 1350.3397930310275 1380.4903333333334 1316.507525735294 1312.4006527777779 1528.1258506371357 1255.68939225023 1463.985155604932 1384.6935735777352 39869.74056399832 94502.95042710725 1266.5630690801754 1264.7470512917432 1315.9035065217076 48400.25526433928 1327.7257285714286 1342.7516888888888 1403.8668747057618 1.78998816243619E8 1.0000800079711618E9 7878.88354999991 1959.2639875086782 1300.1562990448278 1321.6908805555488 2343.106358457144 1230.9740833333335)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 21.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.1333333333333333 8.799999999999997 0.0)
Average genome size in population (length): 38.755
Average program size in population (points): 49.515
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.328
Error (vector) diversity:			 0.336
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 51529383
--- Timings ---
Current time: 1481487565052 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count})
Lexicase best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_swap exec_do*range (integer_rot vector_integer_subvec integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div boolean_not exec_do*count ()) () ())
Lexicase best partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_swap boolean_not))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 57
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 51
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 163 255 62 25 634 595 561 588 80 64 38 256 78 26 101 34 35 44 144 591 27 29 22 41 155 161 27 1 258)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (222 0 255 0 0 634 595 561 588 80 0 0 256 78 0 101 0 0 0 144 591 0 0 0 0 0 161 0 0 258)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not exec_do*count (integer_max))
Partial simplification: (in1 float_empty exec_do*vector_integer float_sub integer_dec vector_integer_empty exec_s () () (integer_yank float_div float_frominteger integer_rot float_max vector_integer_dup float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 44565.602686414895
Median total errors in population: 3000.0000000000005
Error averages by case: (1114.4012839242748 1184.4756838397223 1241.3796005909414 1135.9422708806817 1202.8643762845832 1280.3397418623488 1250.5145073692397 1196.2043627575458 1192.5034394247248 1221.1194236769934 1150.0909330674488 1279.6671838770599 1220.2756324088107 1349.4213247684186 2793.850420429378 1130.496455607103 1210.7295256448667 1215.929543860229 1313.8582560536506 1197.07790996291 1192.8685138190906 1351.6861046843217 5935.05528034462 2977.59184346364 1275.234905055346 1147.2433499053182 1171.6915540284049 1181.7243117020473 1310.234523651959 1141.130423469162)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 21.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.1333333333333333 1.7999999999999972 0.0)
Average genome size in population (length): 38.819
Average program size in population (points): 49.277
Average percent parens in population: 0.212
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.307
Error (vector) diversity:			 0.313
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 54034274
--- Timings ---
Current time: 1481487577775 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (in1 float_pop exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 156 252 63 26 612 569 549 567 97 56 44 277 68 23 89 41 43 43 143 568 31 25 19 33 155 145 19 13 282)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (220 0 252 0 0 612 569 549 567 97 0 0 277 68 0 89 0 0 0 143 568 0 0 0 0 0 145 0 0 282)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth)
Partial simplification: (in1 exec_do*vector_integer float_gte integer_dec boolean_swap exec_s float_lt () (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 55308.54686086473
Median total errors in population: 2973.9
Error averages by case: (1315.6116107142857 1484.1031148109143 1401.4496214285707 1347.4106494826806 1372.9287548776447 1510.3538333333333 1520.5394375 1518.2523525205333 1493.1537747979817 1403.9542486059142 1334.0983983315257 1462.7306019230737 1462.9673022453273 1504.1350291507267 3358.9683237804516 1339.877953860755 1384.8618779672925 1361.5754888010538 1500.1407353371164 1426.761411988937 1483.6758978632633 1491.8481871547526 9026.852154614255 4217.850516302938 1646.313616786021 1341.6431030108795 1363.9642075271518 1431.8238611111053 1449.4983783695527 1351.2024166666663)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 21.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.1333333333333333 1.7999999999999972 0.0)
Average genome size in population (length): 37.943
Average program size in population (points): 48.46
Average percent parens in population: 0.219
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.298
Error (vector) diversity:			 0.31
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 56520464
--- Timings ---
Current time: 1481487590789 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup integer_max integer_empty vector_integer_empty boolean_swap float_eq float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_flush float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 146 227 60 24 597 551 526 550 73 61 39 260 74 34 97 46 46 40 143 553 23 18 27 29 147 142 1 17 248)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (194 0 227 0 0 597 551 526 550 73 0 0 260 74 0 97 0 0 0 143 553 0 0 0 0 0 142 0 0 248)
Population mean number of perfect (error zero) cases: 4.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_reverse vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not vector_integer_contains float_frominteger)
Partial simplification: (in1 exec_do*vector_integer vector_integer_take integer_dec vector_integer_empty exec_s () integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 4.4963032611702986E7
Median total errors in population: 3025.9999999999995
Error averages by case: (1125.557695754149 1296.0299100490129 1241.493886243069 1151.7228449654278 1223.248765058956 1260.3503118062797 1300.5760084353483 1238.3070339545702 1223.3232459575631 1252.7449870532926 1202.502978752206 1314.3628703511924 1315.1302724212012 1902.0947442445736 7303.25190999612 1183.626402970187 1253.6851679973388 10293.458768752049 1565.7726616191246 1137.6233105898207 1193.781810157695 1650.6948865867305 14662.2805171533 4.4894671482328564E7 1328.822573903391 1177.9816282547417 1162.9305223147608 1202.2046444444425 4016.3221051675073 1181.2469075961462)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 21.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 38.606
Average program size in population (points): 49.531
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.34
Error (vector) diversity:			 0.347
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 59054771
--- Timings ---
Current time: 1481487603763 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max float_frominteger)
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 155 232 52 23 594 558 536 559 71 62 38 264 61 23 93 34 40 38 162 559 30 35 26 31 130 138 27 19 234)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (173 0 232 0 0 594 558 536 559 71 0 0 264 61 0 93 0 0 0 162 559 0 0 0 0 0 138 0 0 234)
Population mean number of perfect (error zero) cases: 4.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_reverse vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not vector_integer_contains float_frominteger)
Partial simplification: (in1 exec_do*vector_integer float_sub float_gte integer_dec exec_s float_empty integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger))
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 1.650892322908368E8
Median total errors in population: 2965.3757575757572
Error averages by case: (1294.4268953102876 1414.1044075157172 1401.5556291902797 1424.0727926272166 1355.214685391877 1410.3723233258297 1430.5740233258298 4185.707633772208 1450.6525046799952 2725.9262206324433 1467.266349523117 2813.966829524678 2948.2240106356708 2017529.8936181474 4802997.038418284 1372.5334040906896 1549.5680469725587 1796.4608693327732 894476.3390847367 1348.4999532462634 1532.9117950385873 6804.088630037748 1.0389434556060961E8 5.218631863702826E7 1102921.7042912026 1383.4317145032776 2120.6817091018884 1362.6766226598947 144688.68616607384 1361.5145703102878)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 21.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 38.683
Average program size in population (points): 49.6
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.315
Error (vector) diversity:			 0.32
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 61588228
--- Timings ---
Current time: 1481487616868 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt float_max integer_dec))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 150 265 70 28 602 572 551 571 70 68 35 300 64 1 96 39 39 33 150 574 15 33 26 27 146 134 28 19 278)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (207 0 265 0 0 602 572 551 571 70 0 0 300 64 0 96 0 0 0 150 574 0 0 0 0 0 134 0 0 278)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_reverse vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not vector_integer_contains float_frominteger)
Partial simplification: (vector_integer_take in1 exec_rot exec_do*vector_integer vector_integer_take float_gte integer_dec exec_s float_empty integer_dec (integer_yank float_div float_frominteger integer_rot float_max float_frominteger) vector_integer_contains)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 54716.84127013684
Median total errors in population: 3000.0000000000005
Error averages by case: (1124.110546029015 1314.3522865209902 1141.3111026498182 1201.290518662622 1193.2822477580771 1240.4199515600426 1280.537658009185 1177.2167639817274 1143.0222281910228 1246.156913065281 1211.5981779708475 1260.985639189945 1208.559843683214 1462.1076032794865 3796.436648895592 1172.2341704615806 1255.637698883238 1234.2317647213717 1429.6618247464655 1147.0515175506084 1143.4893949472612 1420.5940935144135 9057.878409194169 7550.330103345904 2093.000289119 1210.179252268384 1297.0829409294847 1262.1869897088368 1350.7441177385294 1091.1505735607034)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 39.063
Average program size in population (points): 50.057
Average percent parens in population: 0.219
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.323
Error (vector) diversity:			 0.331
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 64142970
--- Timings ---
Current time: 1481487629774 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Lexicase best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_swap exec_do*range (integer_rot vector_integer_subvec integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div) () ())
Lexicase best partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty boolean_swap float_eq float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) float_swap))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 54
Percent parens: 0.148
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div})
Zero cases best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_swap exec_do*range (integer_rot vector_integer_subvec integer_dec vector_integer_contains float_frominteger) boolean_eq integer_div) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) float_swap boolean_eq))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 156 271 56 20 626 595 602 600 89 78 35 303 74 25 113 36 57 53 166 602 34 31 20 32 164 130 21 15 308)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (207 0 271 0 0 626 595 602 600 89 0 0 303 74 0 113 0 0 0 166 602 0 0 0 0 0 130 0 0 308)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 0, :instruction float_gte} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_empty exec_rot (float_min float_sub float_gte integer_dec) (vector_integer_flush float_eq) (float_min float_sub integer_empty)) (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (integer_yank float_div float_frominteger integer_rot float_max vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_reverse vector_integer_last integer_gt integer_flush float_max integer_dec vector_integer_contains float_frominteger boolean_eq integer_div boolean_not vector_integer_contains float_frominteger)
Partial simplification: (exec_rot exec_do*vector_integer vector_integer_flush in1 float_sub integer_dec vector_integer_empty exec_s float_lt integer_dec (integer_yank float_div float_frominteger integer_rot float_frominteger) vector_integer_reverse float_max boolean_eq integer_div boolean_not vector_integer_contains)
Errors: [1.0 3.2 0.0 9.4 3.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 4.0 61.0 4.0 17.2 27.4 29.200000000000003 5.0 0.0 39.8 143.8 332.04999999999995 30.799999999999997 4.4 0.0 1.2000000000000002 64.86666666666666 0.0]
Total: 793.5166666666667
Mean: 26.450556
Genome size: 47
Size: 58
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 189230.08073997468
Median total errors in population: 2828.0000000000005
Error averages by case: (1044.626423225181 1155.47273053578 1041.3031356517292 1066.729891684168 1075.403475107165 1190.3429761904763 1180.5928092589418 1107.473279759915 1076.6354126984124 1082.0584389153105 1111.9294899801541 1120.2000863504638 1089.8326888600875 1223.3656875288914 10814.860416292502 1084.7817828820152 1119.6330369047525 1120.6000472838687 1290.4439092660266 1049.5343552442807 1078.0235750000002 1220.6767518206657 22832.07328853089 125089.14858497342 1233.8031853668033 1111.0872150793662 1228.5494978577062 1131.9386535913382 1237.9257049225648 1021.0342092132099)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 39.05
Average program size in population (points): 49.933
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.343
Error (vector) diversity:			 0.352
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 66757745
--- Timings ---
Current time: 1481487642936 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max vector_integer_contains))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 160 253 64 31 596 553 570 581 79 59 46 298 66 29 85 42 41 36 167 565 15 31 20 32 159 127 27 25 297)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (176 0 253 0 0 596 553 570 581 79 0 0 298 66 0 85 0 0 0 167 565 0 0 0 0 0 127 0 0 297)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take vector_integer_flush float_eq vector_integer_take in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (vector_integer_take vector_integer_flush float_eq vector_integer_take float_empty exec_rot (in1) ((exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub boolean_swap (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.1999999999999993 1.1999999999999993 1.0 3.0 62.0 3.0 12.2 22.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 2.2 64.86666666666666 1.0]
Total: 1194.7166666666665
Mean: 39.82389
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 613328.7587737684
Median total errors in population: 2983.510714285714
Error averages by case: (1093.8466396464648 1154.9744562383214 1121.2020785714285 1120.9242689249909 1173.9529481262123 1290.3233690476188 1270.5659183731966 1237.0861160747468 1214.2607549742518 1173.7627382000026 1191.7249331642424 1251.6687764495043 1252.1729560777524 1746.7567735838072 202787.99304036496 1129.5329471762527 1158.3971803315515 1131.872548375056 1338.0154780743956 1157.6317362287589 1215.192727455359 2320.1422502224855 332759.5253789053 43848.42912664676 1253.2946144314212 1168.1822065808408 1283.6947862877755 1152.067766666661 1220.5367752370134 1111.027483333333)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 38.685
Average program size in population (points): 49.381
Average percent parens in population: 0.216
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.328
Error (vector) diversity:			 0.335
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 69345692
--- Timings ---
Current time: 1481487656607 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 179 224 59 36 618 574 579 590 95 67 58 292 68 19 87 39 47 34 193 586 21 28 30 39 165 111 34 27 310)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (193 0 224 0 0 618 574 579 590 95 0 0 292 68 0 87 0 0 0 193 586 0 0 0 0 0 111 0 0 310)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take vector_integer_flush boolean_flush vector_integer_take in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (vector_integer_take boolean_flush in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) ()) (float_yankdup) vector_integer_flush integer_max integer_empty vector_integer_empty float_eq float_min float_sub vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.1999999999999993 1.1999999999999993 1.0 3.0 62.0 3.0 12.2 22.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 2.2 64.86666666666666 1.0]
Total: 1194.7166666666665
Mean: 39.82389
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 708956.7113161576
Median total errors in population: 2894.7999999999997
Error averages by case: (895.7628906674122 984.9814809059459 911.3272328135032 930.480041225661 903.8470671960363 1020.373102554837 1050.540032813503 987.5236825691437 994.9574059274399 913.8314716923301 930.8918865813213 977.226176894184 967.2819842463583 1632.6282997680858 15806.34465089803 909.1133587531934 958.2047335799684 965.0050107780229 1568.5325329981952 977.1006558044184 996.1414242735494 1220.6831041945798 68598.75649928035 596961.5229352785 1044.646905619654 927.2250118506932 1002.0965871206682 961.9929763742819 1046.674709600098 911.0174639011769)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 38.716
Average program size in population (points): 49.384
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.333
Error (vector) diversity:			 0.339
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 71946593
--- Timings ---
Current time: 1481487670291 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_flush float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_min float_sub integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 187 252 61 23 603 591 580 611 64 82 39 272 61 25 98 39 46 30 159 587 43 26 34 40 162 125 28 24 296)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (193 0 252 0 0 603 591 580 611 64 0 0 272 61 0 98 0 0 0 159 587 0 0 0 0 0 125 0 0 296)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take vector_integer_flush float_eq vector_integer_take in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (vector_integer_take vector_integer_flush vector_integer_take in1 exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) float_sub integer_empty () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty exec_s (exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.1999999999999993 1.1999999999999993 1.0 3.0 62.0 3.0 12.2 22.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 2.2 64.86666666666666 1.0]
Total: 1194.7166666666665
Mean: 39.82389
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 58390.544889285375
Median total errors in population: 3000.0000000000005
Error averages by case: (1002.6940485887769 1113.6311004491542 1021.2329840392638 1019.171364942005 994.2062926434204 1120.4370079365078 1150.5138494004652 1096.5769908092566 1072.6576434370704 1033.3181896242165 1030.9007089041327 1110.3800587001472 1099.9987674842685 1246.3559357586835 3047.1109662497456 991.3278060443365 1059.2033371555563 1026.4005743961372 1258.115279673935 1046.3057170903444 1073.3517440211112 1154.7219832403728 9464.307861771402 16437.220296811054 1150.9969785484495 1047.745382478251 1290.7163319842107 1121.5951046741768 1088.347937278311 1021.002645150375)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.13333333333333286 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 1.7999999999999972 0.0)
Average genome size in population (length): 38.355
Average program size in population (points): 49.142
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.328
Error (vector) diversity:			 0.335
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 74496013
--- Timings ---
Current time: 1481487684049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_gt integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_sub integer_empty vector_integer_empty boolean_swap exec_s (exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 167 244 69 36 608 592 599 605 74 62 1 341 64 28 106 36 46 49 137 592 28 28 23 20 152 123 37 1 353)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (158 0 244 0 0 608 592 599 605 74 0 0 341 64 0 106 0 0 0 137 592 0 0 0 0 0 123 0 0 353)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take in1 vector_integer_take in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (vector_integer_take vector_integer_take in1 float_empty (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) () vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.1999999999999993 1.1999999999999993 1.0 3.0 62.0 3.0 12.2 22.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 2.2 64.86666666666666 1.0]
Total: 1194.7166666666665
Mean: 39.82389
Genome size: 43
Size: 55
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 2.9119662958193436E7
Median total errors in population: 2949.2500000000005
Error averages by case: (1013.5814869996357 1195.0029427395552 1011.2440799222562 1091.266077045881 1044.518293412312 1160.3908084936847 1130.542811711035 2303.698478267902 1165.2690434258789 1616.1268376747742 1158.370234135382 1661.762059331193 1699.8721135131013 959728.4580755446 1880745.992947945 1044.8857065467491 1177.1064597456486 1085.9974272299141 414339.55113266583 1089.4657997601723 1187.63012487711 3256.7050853884516 322237.9642960707 2.4946757291969534E7 501267.7272262575 1132.0747202071009 1509.7071167465474 1161.646484078206 63688.09342816128 1001.0149262943684)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 38.538
Average program size in population (points): 49.507
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.351
Error (vector) diversity:			 0.357
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 77066843
--- Timings ---
Current time: 1481487697609 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (in1 float_pop exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 147 241 51 27 609 590 595 613 56 56 32 290 80 37 108 71 43 45 131 590 21 35 25 33 177 106 23 31 318)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (181 0 241 0 0 609 590 595 613 56 0 0 290 80 0 108 0 0 0 131 590 0 0 0 0 0 106 0 0 318)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take in1 exec_do*vector_integer (vector_integer_flush vector_integer_take) in1 float_sub integer_empty vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (in1 exec_do*vector_integer (vector_integer_flush vector_integer_take) integer_empty vector_integer_empty float_yankdup integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap (exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.8000000000000007 1.1999999999999993 1.0 3.0 62.0 3.0 11.2 21.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 24.799999999999997 1.5999999999999996 6.0 2.2 64.86666666666666 1.0]
Total: 1194.3166666666664
Mean: 39.810555
Genome size: 36
Size: 42
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 1.32104843102521E7
Median total errors in population: 3016.0694444444443
Error averages by case: (1142.2883296990215 1303.8209339460532 1111.227439439281 1149.664256061472 1144.3128115614984 1240.3766819011641 1200.5065045509127 1219.4889264713215 1203.6291767298544 1158.2601436995517 1253.0858433293288 1289.9285998458897 1320.2719477645048 2119.730464295092 98473.88503835595 1143.0265350600196 1250.7527484298184 1195.7933896785526 2533.6589275073884 1219.2344642841233 1204.6533134250055 1372.5800284297738 1.2995480329243202E7 81102.71432189363 1298.7181421358484 1247.3226159660298 1393.1432625586165 1251.9731370583183 1339.0033541101382 1120.9296706508346)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.40000000000000036 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 37.144
Average program size in population (points): 47.495
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.338
Error (vector) diversity:			 0.342
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 79551083
--- Timings ---
Current time: 1481487711057 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () (vector_integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap integer_pop float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_empty (exec_do*vector_integer (vector_integer_flush float_eq) float_sub integer_empty) (vector_integer_empty) float_yankdup vector_integer_flush integer_max vector_integer_empty boolean_swap integer_pop float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) float_max integer_flush float_max))
Lexicase best errors: [1.0 0.20000000000000018 0.0 0.40000000000000036 4.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 6.0 731.0 7.0 17.2 13.399999999999999 27.200000000000003 5.0 0.0 170.2 151.8 1906.2 50.8 4.4 0.0 1.2000000000000002 73.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 3183.0000000000005
Lexicase best mean error: 106.1
Lexicase best size: 52
Percent parens: 0.173
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 191 270 75 30 643 618 640 636 56 65 16 289 79 26 119 95 38 41 166 612 33 37 33 33 1 102 26 41 347)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (163 0 270 0 0 643 618 640 636 56 0 0 289 79 0 119 0 0 0 166 612 0 0 0 0 0 102 0 0 347)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take vector_integer_flush float_eq vector_integer_take in1 float_empty exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) (float_sub integer_empty) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (vector_integer_flush float_eq vector_integer_take in1 exec_rot (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) in1) () vector_integer_empty) (float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.1999999999999993 1.1999999999999993 1.0 3.0 62.0 3.0 12.2 22.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 2.2 64.86666666666666 1.0]
Total: 1194.7166666666665
Mean: 39.82389
Genome size: 44
Size: 56
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 156307.96745957853
Median total errors in population: 2984.5
Error averages by case: (892.6409910228494 1034.201357620648 901.163894120803 867.0044975880734 874.2174484788358 1020.387 980.4812835290153 965.1558536023126 942.4084790671894 870.1824844030424 932.0730898179213 1076.0742513467835 1116.2182051487166 2139.7685741461673 14687.067747576953 880.1607578448793 949.4523595868673 914.9685623157917 1938.2324798326883 918.2656136037567 953.0652185481815 1151.8399720554696 64586.049673990245 48677.06760741949 1042.259152637647 977.2609408464259 1012.2986900657415 991.9714338336266 1095.1348168904472 920.8950226378644)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 37.803
Average program size in population (points): 48.381
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.357
Error (vector) diversity:			 0.362
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 82092243
--- Timings ---
Current time: 1481487724302 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction in1} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction integer_div})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (float_min float_sub integer_empty) vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (vector_integer_empty) in1 float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_yank vector_integer_last vector_integer_dup float_frominteger) integer_div) () ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (float_min float_sub integer_empty) vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (vector_integer_empty) in1 float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_yank vector_integer_last vector_integer_dup float_frominteger) integer_div) ())
Lexicase best errors: [1.0 3.2 0.0 2.5999999999999996 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 9.0 733.0 4.0 17.2 0.3999999999999986 24.200000000000003 0.0 0.0 172.2 148.8 1425.2 53.8 3.4000000000000004 0.0 1.2000000000000002 65.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2679.2000000000003
Lexicase best mean error: 89.30666
Lexicase best size: 60
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop vector_integer_subvec exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (in1 float_pop vector_integer_subvec exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 144 251 64 32 629 608 629 628 52 59 29 312 62 31 108 73 48 44 128 604 24 1 32 29 32 129 20 27 351)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (191 0 251 0 0 629 608 629 628 52 0 0 312 62 0 108 0 0 0 128 604 0 0 0 0 0 129 0 0 351)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_flush} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (float_flush in1 float_empty exec_do*vector_integer (vector_integer_flush vector_integer_take) in1 float_sub integer_empty vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq) () ())
Partial simplification: (float_flush in1 float_empty exec_do*vector_integer (vector_integer_take) in1 float_sub integer_empty float_yankdup vector_integer_flush integer_max integer_empty vector_integer_empty float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.8000000000000007 1.1999999999999993 1.0 3.0 62.0 3.0 11.2 21.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 24.799999999999997 1.5999999999999996 6.0 2.2 64.86666666666666 1.0]
Total: 1194.3166666666664
Mean: 39.810555
Genome size: 37
Size: 43
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 105478.16206751442
Median total errors in population: 3016.0694444444443
Error averages by case: (1092.633767656 1124.6838865518255 1111.3235418623485 1127.8590027812245 1076.44402109149 1220.3345 1170.4649918623486 1179.8964495863233 1133.2500179677124 1130.879623346236 1230.8004116290654 1218.8458239255967 1229.8697652826665 2168.12012201411 3579.4349189905156 1112.474450190719 1271.6609765346986 1168.083646039249 1636.3346360430103 1119.3753927321236 1154.3157117006056 1400.6230147203087 9135.978341007345 55754.43638927982 1330.1307202037076 1237.161726461621 1202.845991458711 1161.892347417897 4917.057455141763 1080.9504240359063)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 38.134
Average program size in population (points): 48.569
Average percent parens in population: 0.213
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.359
Error (vector) diversity:			 0.363
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 84653716
--- Timings ---
Current time: 1481487738059 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction in1} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction integer_div})
Lexicase best program: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (float_min float_sub integer_empty) vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (vector_integer_empty) in1 float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_yank vector_integer_last vector_integer_dup float_frominteger) integer_div) () ())
Lexicase best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty float_lt) (integer_dec) (float_min float_sub integer_empty) vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (vector_integer_empty) in1 float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_yank vector_integer_last vector_integer_dup float_frominteger)) ())
Lexicase best errors: [1.0 3.2 0.0 2.5999999999999996 2.8 0.0 0.0 0.0 0.0 6.0 5.199999999999999 0.1999999999999993 0.0 9.0 733.0 4.0 17.2 0.3999999999999986 24.200000000000003 0.0 0.0 172.2 148.8 1425.2 53.8 3.4000000000000004 0.0 1.2000000000000002 65.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2679.2000000000003
Lexicase best mean error: 89.30666
Lexicase best size: 60
Percent parens: 0.250
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_gt integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 169 264 62 32 615 603 630 618 64 66 18 312 59 26 90 69 52 31 142 598 28 23 27 37 23 119 24 34 354)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (202 0 264 0 0 615 603 630 618 64 0 0 312 59 0 90 0 0 0 142 598 0 0 0 0 0 119 0 0 354)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush vector_integer_take) in1 float_sub integer_empty vector_integer_empty float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)) () ())
Partial simplification: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer vector_integer_flush vector_integer_take in1 float_sub integer_empty vector_integer_empty vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [2.0 0.20000000000000018 2.0 8.4 1.7999999999999998 0.0 0.0 0.0 0.0 5.0 0.8000000000000007 1.1999999999999993 1.0 3.0 62.0 3.0 11.2 21.4 28.200000000000003 0.0 0.0 40.8 569.8 332.04999999999995 24.799999999999997 1.5999999999999996 6.0 2.2 64.86666666666666 1.0]
Total: 1194.3166666666664
Mean: 39.810555
Genome size: 38
Size: 44
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 7.62256703323911E9
Median total errors in population: 3016.0694444444443
Error averages by case: (1003.175055555556 559889.441917451 1001.29955 1018.7948857598576 1024.4820253968262 1090.435 1100.507 1069.8806985294118 1032.6665277777777 1050.4932256493512 1070.6185961366439 1381.3588904761864 1398.5522011904761 1.0000017166299131E9 1.000202757697523E9 1044.9224819874448 1094.5342443124807 17772.79159420285 1.0000012971872257E9 2595630.1782524837 1143.208677777778 1.0000022556900126E9 1.0003297002097459E9 1.0000219647604815E9 1.0000018324992638E9 1059.558375265329 4.540652473184206E7 1051.9174817460278 5.734060441077657E8 1010.9086666666666)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 37.748
Average program size in population (points): 47.906
Average percent parens in population: 0.212
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.383
Error (vector) diversity:			 0.387
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 87174573
--- Timings ---
Current time: 1481487751448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last float_max)
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 192 253 49 1 618 575 608 599 50 75 21 327 68 36 94 68 59 41 134 556 22 1 34 31 31 124 31 26 379)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (203 0 253 0 0 618 575 608 599 50 0 0 327 68 0 94 0 0 0 134 556 0 0 0 0 0 124 0 0 379)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer vector_integer_flush float_lt integer_dec float_min integer_empty vector_integer_empty exec_s (vector_integer_concat integer_max integer_empty) () (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [1.0 9.8 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.8000000000000007 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 0.20000000000000018 64.86666666666666 1.0]
Total: 1188.3166666666664
Mean: 39.610554
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 54335.735126231426
Median total errors in population: 3015.933531746032
Error averages by case: (1022.3566924005004 1093.4793013640788 1021.1839519243088 1036.7308455751054 1094.4692429296006 1170.3930852576423 1140.4993352576423 1056.4255041590263 1072.7520003810992 1041.6537842152645 1129.8986227613532 1236.049062919856 1246.976940392388 1260.9728941444862 2762.6073379561803 1080.3855504334501 1090.14040855206 1128.843762903103 1270.00291005213 1036.9619047814524 1113.4562063687533 1188.8310827021323 8342.544313154807 13026.165924789359 1164.2930546068062 1097.088853274298 1119.318884156339 1091.7106174004923 1188.6576328264925 1010.8854185909756)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08888888888888946 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 38.738
Average program size in population (points): 48.909
Average percent parens in population: 0.206
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.37
Error (vector) diversity:			 0.371
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 89711402
--- Timings ---
Current time: 1481487765301 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (vector_integer_take) in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_dup (boolean_swap exec_s (float_div exec_do*range (float_frominteger) integer_rot integer_max) () ()))
Lexicase best partial simplification: (vector_integer_take in1 vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (vector_integer_take) in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_dup (boolean_swap exec_s (float_div exec_do*range (float_frominteger) integer_rot integer_max) () ()))
Lexicase best errors: [0.0 0.20000000000000018 0.0 5.6 2.8 0.0 0.0 0.0 0.0 6.0 12.2 0.1999999999999993 0.0 14.0 228.0 8.0 23.2 10.600000000000001 11.200000000000003 9.1 0.0 178.2 23.80000000000001 1436.2 12.799999999999997 10000 0.0 1.7999999999999998 59.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 12043.699999999999
Lexicase best mean error: 401.45667
Lexicase best size: 53
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_flush vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_flush float_max float_frominteger))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 148 304 1 37 615 610 646 644 52 85 26 332 65 35 100 76 41 45 141 604 26 19 35 40 22 147 22 30 352)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (182 0 304 0 0 615 610 646 644 52 0 0 332 65 0 100 0 0 0 141 604 0 0 0 0 0 147 0 0 352)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Partial simplification: (in1 float_empty exec_do*vector_integer (integer_empty) in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec integer_empty exec_s integer_max () (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [1.0 9.8 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.8000000000000007 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 0.20000000000000018 64.86666666666666 1.0]
Total: 1188.3166666666664
Mean: 39.610554
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 52268.34970352966
Median total errors in population: 3016.0694444444443
Error averages by case: (1042.4074809455076 1473.5687063025114 1041.1645592132097 1046.8839593246937 1095.7579873110137 1160.4357159367398 1170.4866828812908 1075.9464940706137 1062.386924917597 1082.371439149848 1160.3211353130473 1179.1923041565142 1150.6660006678917 1342.262070591619 2094.063506527485 1101.2459722550518 1092.5797166753423 1168.6726198179326 1341.7479834727867 1037.5686563957076 1153.1292205643206 1169.5468498433645 10617.976813410127 8641.367982682636 1183.4826546129536 1086.987923086868 1139.9459944050618 1091.9500983005025 1233.1895180151275 1031.0427326823717)
Error minima by case: (0.0 0.20000000000000018 0.0 0.1999999999999993 0.08888888888888946 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 38.317
Average program size in population (points): 48.355
Average percent parens in population: 0.206
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.372
Error (vector) diversity:			 0.375
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 92279776
--- Timings ---
Current time: 1481487779240 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_max})
Lexicase best program: (vector_integer_take in1 vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (vector_integer_take) in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_dup (boolean_swap exec_s (float_div exec_do*range (float_frominteger) integer_rot integer_max) () ()))
Lexicase best partial simplification: (vector_integer_take in1 vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (vector_integer_take) in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_dup (boolean_swap exec_s (float_div exec_do*range (float_frominteger) integer_rot integer_max) () ()))
Lexicase best errors: [0.0 0.20000000000000018 0.0 5.6 2.8 0.0 0.0 0.0 0.0 6.0 12.2 0.1999999999999993 0.0 14.0 228.0 8.0 23.2 10.600000000000001 11.200000000000003 9.1 0.0 178.2 23.80000000000001 1436.2 12.799999999999997 10000 0.0 1.7999999999999998 59.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 12043.699999999999
Lexicase best mean error: 401.45667
Lexicase best size: 53
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 76.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3152.6000000000004
Zero cases best mean error: 105.08667
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 154 268 34 1 653 619 635 618 51 95 24 368 59 59 82 75 41 39 134 600 19 1 27 30 29 125 34 26 408)
Population mean number of elite cases: 5.48
Count of perfect (error zero) individuals by case: (176 0 268 0 0 653 619 635 618 51 0 0 368 59 0 82 0 0 0 134 600 0 0 0 0 0 125 0 0 408)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_emptyvector} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_emptyvector float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max integer_empty) () (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_emptyvector float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup exec_s (vector_integer_concat integer_max) () (float_div exec_do*range (integer_rot vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger)))
Errors: [1.0 9.8 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.8000000000000007 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 0.20000000000000018 64.86666666666666 1.0]
Total: 1188.3166666666664
Mean: 39.610554
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 48611.953194786765
Median total errors in population: 2938.5000000000005
Error averages by case: (1052.726373290599 1113.8086279119914 1001.3234000000001 1017.2034476551255 1034.0483234127034 1060.4251585290153 1010.5402573692398 1036.0189025739624 984.9351712148481 1072.905510901117 1239.670764115045 1086.00459437602 1096.9942646444329 1270.1485973304475 1917.7867149750014 1061.343189052566 1130.5321443285084 1094.226097101451 1237.9170451020154 1009.3600708333333 1083.4169440211108 1145.156484668966 8086.456802358202 9080.452680894423 1181.4870357142865 1177.3382508896586 1052.8624584290385 1051.9921916666592 1234.03045129114 990.8412401358285)
Error minima by case: (0.0 0.20000000000000018 0.0 0.1999999999999993 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 37.959
Average program size in population (points): 48.041
Average percent parens in population: 0.208
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.367
Error (vector) diversity:			 0.369
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 94807756
--- Timings ---
Current time: 1481487793245 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_pushall vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush integer_max integer_empty boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max float_frominteger))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_pushall vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_concat integer_max integer_empty vector_integer_empty float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 148 267 28 35 703 663 664 656 44 97 24 320 74 45 95 83 47 51 128 622 28 25 32 33 29 156 26 30 361)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (201 0 267 0 0 703 663 664 656 44 0 0 320 74 0 95 0 0 0 128 622 0 0 0 0 0 156 0 0 361)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_yankdup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_sub} {:close 0, :instruction exec_do*vector_integer} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction vector_integer_contains} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_dup})
Best program: (vector_integer_take vector_integer_take in1 float_empty vector_integer_take in1 float_empty float_yankdup exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_yank float_sub exec_do*vector_integer (vector_integer_take) in1 float_empty float_empty exec_rot (exec_do*vector_integer (boolean_invert_first_then_and float_div float_frominteger integer_rot float_frominteger integer_rot float_div exec_do*range (vector_integer_contains vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last integer_dup))) () ())
Partial simplification: (vector_integer_take vector_integer_take in1 float_empty vector_integer_take in1 float_empty float_yankdup exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_yank float_sub exec_do*vector_integer (vector_integer_take) in1 float_empty float_empty exec_rot (exec_do*vector_integer (boolean_invert_first_then_and float_div float_frominteger integer_rot float_frominteger integer_rot float_div exec_do*range (vector_integer_contains vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last integer_dup))) () ())
Errors: [0.3333333333333335 1.2000000000000002 3.0 2.4000000000000004 4.075 0.0 1.75 16.996539792387544 8.987654320987655 2.0 11.866666666666665 1.1999999999999993 13.928571428571429 10.0 215.0 4.0 66.8 23.6 58.21071428571428 1.0 9.99 49.8 30.80000000000001 332.04999999999995 25.200000000000003 3.5999999999999996 5.0 9.2 53.8 1.0]
Total: 966.788479827661
Mean: 32.226284
Genome size: 38
Size: 46
Percent parens: 0.174
--- Population Statistics ---
Average total errors in population: 48074.60832648161
Median total errors in population: 2614.172497332437
Error averages by case: (862.1784833333334 883.7090891748322 841.2732712424967 876.9553154609312 824.2345178571431 870.3806182267093 860.5235901827431 861.0196723118756 832.724783869169 880.2772813378917 980.9885977288168 916.3663563540712 908.1666321269041 1438.86438773379 2097.4788562862386 869.8549848421479 924.9552712841448 890.3692942046753 1287.8848919306918 848.4883545653278 903.5329229099997 981.2186018329008 7659.611730257866 13018.247281651798 1030.9411711070854 917.141976515333 890.8834825925743 911.9144408730123 1163.4686318965576 840.9538367903298)
Error minima by case: (0.0 0.20000000000000018 0.0 0.1999999999999993 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.13333333333333286 0.86666666666666 0.0)
Average genome size in population (length): 38.237
Average program size in population (points): 48.88
Average percent parens in population: 0.215
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.363
Error (vector) diversity:			 0.365
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 97413927
--- Timings ---
Current time: 1481487807372 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Lexicase best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Lexicase best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_max))
Lexicase best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2278.6000000000004
Lexicase best mean error: 75.95333
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_gt float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 137 294 29 24 682 656 645 655 65 90 21 326 68 41 93 70 44 51 136 629 24 19 34 45 27 167 1 28 366)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (223 0 294 0 0 682 656 645 655 65 0 0 326 68 0 93 0 0 0 136 629 0 0 0 0 0 167 0 0 366)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_sub integer_empty vector_integer_empty float_yankdup vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 1.0000413555659937E9
Median total errors in population: 2659.9
Error averages by case: (973.0532003273388 963.708467667845 961.2644636456645 997.1862338225516 970.6516834201738 990.4283932075748 990.540302317981 956.8111578230928 942.6274748890377 980.7935155622791 1020.6640310055119 1047.5463391996825 1069.39735547961 1172.467361028079 2576.5814439817686 1353.4562674911076 993.346814600888 1020.185573898116 1158.4824514281643 949.1725957792224 934.2779775259916 1126.68198711596 1.0000073835122031E9 3741.995362294444 1044.5985546912448 1006.8624151695753 969.7865765615561 981.9393443122963 1096.5471460944289 980.9993099242192)
Error minima by case: (0.0 0.20000000000000018 0.0 0.1999999999999993 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.07272727272727275 0.86666666666666 0.0)
Average genome size in population (length): 37.649
Average program size in population (points): 47.93
Average percent parens in population: 0.214
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.545
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.342
Error (vector) diversity:			 0.346
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 99967513
--- Timings ---
Current time: 1481487821157 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 26.8 1.1999999999999993 0.0 26.0 65.0 0.0 66.8 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1895.2 137.2 19.6 10.0 0.20000000000000018 20.799999999999997 0.0]
Lexicase best number of elite cases: 11
Lexicase best total error: 2917.7999999999997
Lexicase best mean error: 97.26
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_pushall vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_pushall vector_integer_last float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 141 286 21 26 665 651 646 648 63 80 30 314 61 38 93 100 57 67 149 659 32 14 24 36 33 160 26 1 359)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (227 0 286 0 0 665 651 646 648 63 0 0 314 61 0 93 0 0 0 149 659 0 0 0 0 0 160 0 0 359)
Population mean number of perfect (error zero) cases: 4.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub vector_integer_empty float_yankdup float_gte integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 4.058631640060617E7
Median total errors in population: 2938.5000000000005
Error averages by case: (872.5216333333337 933.8885971358319 891.2556058939714 921.3656357141837 913.9856702554459 900.4012778471971 880.5710679753005 925.5616014375993 893.1084142704037 988.578014918609 1038.8928172621982 1061.7297434114662 1073.1589133688233 1690.4766345439382 4796.070503326736 924.3262758637837 1109.6267893648164 984.8621870799238 1384.3154643837104 904.2349320269606 884.7251940211108 1036.449619657786 43174.39486596574 4.050957112919444E7 1760.0136081722812 1028.715203642635 971.2763509158711 902.1066389790717 2017.653730761778 881.0044196812834)
Error minima by case: (0.0 0.20000000000000018 0.0 0.1999999999999993 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 81.79999999999995 2.799999999999997 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.003
Average program size in population (points): 47.449
Average percent parens in population: 0.218
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.354
Error (vector) diversity:			 0.358
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 102569649
--- Timings ---
Current time: 1481487834758 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () vector_integer_empty boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_frominteger exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (in1 float_pop boolean_frominteger exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max vector_integer_empty boolean_swap float_eq float_min integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 123 279 1 37 640 615 610 611 82 77 19 304 51 53 101 49 52 47 175 631 28 25 20 1 22 149 34 26 359)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (176 0 279 0 0 640 615 610 611 82 0 0 304 51 0 101 0 0 0 175 631 0 0 0 0 0 149 0 0 359)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer (integer_empty) vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_yankdup integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 41942.382467665586
Median total errors in population: 2917.7999999999997
Error averages by case: (1032.914697713739 988.23516667513 1011.2873874864661 946.706602662155 936.7673183461559 990.4728411480831 960.7145009382925 2416.200347411621 1090.379590402031 1876.6531543088258 1049.1271017392226 1121.310775500016 1739.2857572469804 1117.4544297528746 1924.2026066551184 939.0567281767928 1142.719283355868 993.0284564484194 1096.3453487334775 980.2650184745296 1082.828496027031 1142.5564672396254 4669.768201641299 4380.557442115994 1085.7375743898426 1016.4923124853773 1038.3768456949797 1061.9369632260023 1089.9061126583501 1021.0949390113311)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 81.79999999999995 1.7999999999999972 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.149
Average program size in population (points): 47.822
Average percent parens in population: 0.220
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.39
Error (vector) diversity:			 0.394
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 105102935
--- Timings ---
Current time: 1481487848389 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take)) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot ((vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 147 262 33 25 588 579 590 596 62 79 36 273 79 37 99 47 51 57 196 643 25 30 1 20 30 149 34 28 307)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (164 0 262 0 0 588 579 590 596 62 0 0 273 79 0 99 0 0 0 196 643 0 0 0 0 0 149 0 0 307)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 1155986.2985325493
Median total errors in population: 2540.272727272728
Error averages by case: (982.5220513209074 973.5466240885642 971.5716975825284 983.885247967075 964.4046626597875 990.8525278680553 940.8280958247091 975.6757095743932 962.039025 1059.323387955476 1059.874523789671 1006.5937232056722 1007.2341752603095 1555.810038431381 9398.595427694008 991.4612422295746 1082.1578913386873 1043.5769761817076 1857.7426738907836 976.4437798506384 962.4676222222222 1122.9326872369895 988201.6426646935 129311.61017516966 1339.972368964939 1017.7553653745623 1112.2444360652441 1001.7687709818904 1160.5975970575366 971.1673630581989)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 1.7999999999999972 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.128
Average program size in population (points): 47.893
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.357
Error (vector) diversity:			 0.358
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 107664136
--- Timings ---
Current time: 1481487862087 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 125 260 24 32 593 586 573 589 64 80 25 275 69 50 102 48 45 52 166 632 27 25 34 1 29 149 21 26 327)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (165 0 260 0 0 593 586 573 589 64 0 0 275 69 0 102 0 0 0 166 632 0 0 0 0 0 149 0 0 327)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 49024.28674699903
Median total errors in population: 2679.2000000000003
Error averages by case: (1072.718613228438 1084.2656261471936 1071.6874007575755 1047.1905170510327 1125.3689674344187 1070.743387878788 1040.974071212121 1062.7736327159355 1053.0828684235519 1093.5641854451105 1150.851082154645 1107.2610866052557 1107.9425372301016 1491.0891429176809 2580.6546506248096 1061.1039165705945 1202.8453942141123 1113.8244258144005 1342.0969516938171 1066.8740420226702 1052.9575455555555 1387.953613757001 6433.324052184425 9122.228164761249 1273.7320460778196 1168.5302575859569 1189.194309723858 1161.9170790043243 1256.1857347001185 1031.3514435064938)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.05714285714285694 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.985
Average program size in population (points): 48.961
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.355
Error (vector) diversity:			 0.358
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 110239176
--- Timings ---
Current time: 1481487876361 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_last} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) float_swap vector_integer_last boolean_dup_items integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (vector_integer_take in1 integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) float_swap vector_integer_last boolean_dup_items integer_flush float_max integer_gt integer_flush float_max vector_integer_contains))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 132 250 28 1 602 590 589 599 55 74 27 292 90 44 117 42 48 61 194 681 32 34 19 26 27 130 21 40 357)
Population mean number of elite cases: 5.39
Count of perfect (error zero) individuals by case: (183 0 250 0 0 602 590 589 599 55 0 0 292 90 0 117 0 0 0 194 681 0 0 0 0 0 130 0 0 357)
Population mean number of perfect (error zero) cases: 4.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush) integer_dec float_min float_sub vector_integer_empty float_gte integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 7256544.016447529
Median total errors in population: 2548.509090909091
Error averages by case: (743.2748245670994 764.4397992050809 741.715374242424 759.6557737873268 774.923948698524 740.7210000000005 751.1447272727273 6976523.688276286 43789.113698551446 822.2261287684536 883.2389918102688 847.2180630364254 800.1062337103372 1345.6517915520915 1920.245343308609 789.630965643742 943.5074097311498 890.6696024245315 1113.341403189978 776.4498791114928 100752.63011111111 1090.3665863187205 4334.747034041869 108039.69311184344 1184.470182221884 869.3321143725897 851.1020066634844 791.8769855144832 1177.6101108471605 731.2249696969695)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.04999999999999982 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 1.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.805
Average program size in population (points): 48.795
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.346
Error (vector) diversity:			 0.348
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 112851541
--- Timings ---
Current time: 1481487890480 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) in1 (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer vector_integer_flush vector_integer_take vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 128 233 24 25 587 576 556 554 76 80 15 301 86 1 102 58 53 65 218 645 41 22 21 27 28 113 26 23 340)
Population mean number of elite cases: 5.18
Count of perfect (error zero) individuals by case: (160 0 233 0 0 587 576 556 554 76 0 0 301 86 1 102 0 0 0 218 645 0 0 0 0 0 113 0 0 340)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer vector_integer_flush float_lt integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.238642518286909E9
Median total errors in population: 2655.0000000000005
Error averages by case: (952.7470508658 1044.723992303282 961.989928138528 1057.3799734487764 966.0446166836443 980.7085844155837 980.9632922077923 6976846.677121967 44026.48471615191 2.5601115015889578E7 1413.5275284910394 1476836.1240388562 1476867.080960788 1.000033688898841E9 1.0001459635677028E9 1144.9128689444212 6888.594218688595 28797.01066979568 1.0000141170294074E9 1.5258893508285075E8 101003.59481428572 19048.275986085668 1.0026409480320975E9 1.0459454192494692E9 1486905.9863254533 1038.88773391535 1515.803605801294 972.1258756493467 1.0000410902026101E9 991.5641493506502)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.04999999999999982 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.876
Average program size in population (points): 49.434
Average percent parens in population: 0.231
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.356
Error (vector) diversity:			 0.358
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 115507038
--- Timings ---
Current time: 1481487904532 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 126 246 30 16 575 569 554 554 66 118 29 299 73 27 99 48 48 64 213 644 31 24 22 28 32 114 25 30 321)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (178 0 246 0 0 575 569 554 554 66 0 0 299 73 27 99 0 0 0 213 644 0 0 0 0 0 114 0 0 321)
Population mean number of perfect (error zero) cases: 4.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer integer_empty vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 1.0000382865327303E9
Median total errors in population: 2679.2000000000003
Error averages by case: (872.8745821789316 914.3847171048686 911.715246572871 906.8207594120818 904.4245692881198 900.7722283549783 900.9313376623375 945.4019345952092 912.3764987373736 1208.6089940472546 1.0000009488892521E9 1235.5130270319376 1235.7896970766822 1304.2846779572146 1796.0277356266276 908.689305533141 1236.5451723838635 943.1358070487507 1080.9159129769278 926.8317000974023 933.4368517146777 1176.1917990106438 3967.904068939519 5382.686489441204 1074.981552080328 928.6480466719959 996.6217465769755 891.932184199129 1047.9304328616938 891.2663883026698)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.04999999999999982 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.593
Average program size in population (points): 48.686
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.363
Error (vector) diversity:			 0.366
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 118150667
--- Timings ---
Current time: 1481487918487 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) in1 (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) () float_yankdup vector_integer_flush integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max vector_integer_contains))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 118 275 22 1 589 567 560 563 58 94 22 312 86 18 108 48 44 67 202 645 27 28 24 27 35 125 20 25 328)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (170 0 275 0 1 589 567 560 563 58 0 0 312 86 18 108 0 0 0 202 645 0 0 0 0 0 125 0 0 328)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush) integer_dec float_sub vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 5.249471834698487E8
Median total errors in population: 2674.0000000000005
Error averages by case: (993.0732305194804 1034.9113059269114 992.3890811688312 1102.63065695046 1027.046776934525 1010.8459439393937 1091.0518142857145 2497.881883205688 1080.001945616883 1891.5499212063798 1160.247930982698 1925.9656470846135 1977.1711376725152 785570.1836261553 8002278.178985846 1050.667839117286 1256.7494392285855 1091.8381256255693 737232.6797247976 1091.9227268398267 1143.2497107804234 3148.8647271491127 5.117295304774633E8 1453176.5829737326 2204146.955430315 1171.8089364939897 2215.186995169924 1002.2048223665166 3309.34632470147 981.8047173160174)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.436
Average program size in population (points): 48.511
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.368
Error (vector) diversity:			 0.373
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 120797704
--- Timings ---
Current time: 1481487932574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_take in1 exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth integer_flush float_max)
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 118 240 24 23 567 545 514 519 68 99 25 258 73 22 91 51 44 48 203 614 39 19 25 27 33 129 23 28 291)
Population mean number of elite cases: 4.94
Count of perfect (error zero) individuals by case: (180 0 240 0 23 567 545 514 519 68 0 0 258 73 22 91 0 0 0 203 614 0 0 0 0 0 129 0 0 291)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (integer_empty) vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 4.37665907823969E7
Median total errors in population: 2861.0666666666666
Error averages by case: (1043.350463131313 1095.6003308766124 1061.9531583333335 1077.88642947875 1034.739578374235 1080.8264848484844 1121.039918560606 1257.3132229268758 1110.1140310330993 1343.0771630140523 1102.6908394824459 1347.6931944501125 1354.3780928718982 34085.26348198022 147983.4955643325 1097.3959213699216 1321.5759947364272 6200.476844186091 14332.966202681762 1132.6739723193498 1114.2794939 1955.3171182679332 2644877.4852396157 4.08388139106318E7 11219.920576108345 1196.4514827254595 4082.8065029844097 1052.1449513437929 40042.30631219338 1051.6491984848487)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.411
Average program size in population (points): 48.544
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.371
Error (vector) diversity:			 0.376
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 123444603
--- Timings ---
Current time: 1481487946481 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take)) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 131 231 26 29 621 588 538 537 60 93 28 269 78 16 105 54 47 51 202 630 22 24 24 21 35 130 23 33 289)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (164 0 231 0 29 621 588 538 537 60 0 0 269 78 16 105 0 0 0 202 630 0 0 0 0 0 130 0 0 289)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer integer_empty vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min vector_integer_empty float_gte vector_integer_concat integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 48711.36645283512
Median total errors in population: 2573.8909090909096
Error averages by case: (893.6298208993076 944.3423501402857 911.8403768554103 887.5678148309767 894.729303987582 900.8614827264984 910.9861861686412 949.1817996456156 913.2713099017046 1021.914918365089 949.8327759727824 1106.2435831153405 1049.7380554406375 1237.5086772624152 3396.0883994874653 901.3302560315883 1335.8417517792261 948.0174735467818 1170.2078446630153 906.5701835661647 903.4724658526346 1095.3079112979653 9118.168994500227 9243.512436229494 1303.9252117794374 921.0758215982422 979.8430888675214 882.078250735289 1122.8212681060747 911.4566394816735)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.939
Average program size in population (points): 49.404
Average percent parens in population: 0.229
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.364
Error (vector) diversity:			 0.368
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 126098632
--- Timings ---
Current time: 1481487960708 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty float_eq float_sub integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 1.2000000000000002 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2278.6000000000004
Zero cases best mean error: 75.95333
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 143 244 29 20 610 600 562 557 59 117 20 255 72 24 97 60 43 56 242 655 44 28 20 36 24 134 26 32 299)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (184 0 244 0 20 610 600 562 557 59 0 0 255 72 24 97 0 0 0 242 655 0 0 0 0 0 134 0 0 299)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 boolean_flush exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 39544.67238771794
Median total errors in population: 2620.054545454546
Error averages by case: (872.7721970120502 894.1183178668783 931.5788558168626 896.3632603422449 904.2172549184415 920.7655210516797 910.8378743575046 927.1690512990766 892.3198212249201 1040.4114004863434 969.4969010789351 1067.2791491629346 1067.711342041721 1135.494889015669 2738.527127876001 890.533130703384 1136.1199601760557 950.4604784682176 1073.6451629975904 916.3526411259796 932.6799632665005 1098.3868489376111 6698.079070283465 3878.8474657727497 1079.060515039654 928.7262436698315 918.2582376690165 891.9497795775147 1081.288648158517 901.2212783205547)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 58.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.887
Average program size in population (points): 49.293
Average percent parens in population: 0.229
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.341
Error (vector) diversity:			 0.345
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 128741836
--- Timings ---
Current time: 1481487974648 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_mult} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_mult) (float_min float_sub integer_empty) () float_dup_times boolean_swap boolean_invert_second_then_and float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_mult) (float_min float_sub integer_empty) () float_dup_times boolean_swap boolean_invert_second_then_and float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_mult} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_mult) (float_min float_sub integer_empty) () float_dup_times boolean_swap boolean_invert_second_then_and float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_mult) (float_min float_sub integer_empty) () float_dup_times boolean_swap boolean_invert_second_then_and float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 153 261 31 25 610 585 551 555 72 103 19 284 86 26 114 53 35 71 225 660 33 19 1 32 26 110 31 29 323)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (162 0 261 0 25 610 585 551 555 72 0 0 284 86 26 114 0 0 0 225 660 0 0 0 0 0 110 0 0 323)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup vector_integer_concat integer_max integer_empty exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 73342.64885953105
Median total errors in population: 2664.0000000000005
Error averages by case: (852.9054237960457 904.4241701615247 861.8100606060603 867.1432317714957 854.1559969218226 871.0095909090905 861.076303030303 970.8687457862143 882.9960217532464 1043.261872698321 962.2527466198458 1081.2136518511236 1111.9471253401355 1493.704213319043 5227.153180676194 883.7730958307269 1151.389696334717 1002.3787630591044 1333.5141581813539 877.1054754502231 903.4249836075962 1070.2200150012584 32252.48866070284 8312.365166094807 1884.5193044605833 934.535374391862 992.8678318291354 842.1070603535321 1194.5464086901181 861.4905303030309)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.56
Average program size in population (points): 48.713
Average percent parens in population: 0.225
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.352
Error (vector) diversity:			 0.355
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 131366999
--- Timings ---
Current time: 1481487988550 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) in1 (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_contains})
Zero cases best program: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) exec_pop () float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max integer_dec vector_integer_contains) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_empty integer_dup_items exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty integer_min float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max integer_gt integer_flush float_max))
Zero cases best errors: [0.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.0 0.0 0.0 0.0 1.0 5.199999999999999 0.1999999999999993 0.0 8.0 733.0 0.0 17.2 11.399999999999999 13.200000000000003 5.0 0.0 172.2 137.8 1908.2 52.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3151.6000000000004
Zero cases best mean error: 105.05334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 145 260 30 25 618 616 556 561 50 110 26 255 79 16 107 50 39 63 245 651 50 25 25 22 33 136 26 27 308)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (154 0 260 0 25 618 616 556 561 50 0 0 255 79 16 107 0 0 0 245 651 0 0 0 0 0 136 0 0 308)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 boolean_flush exec_do*vector_integer integer_empty vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 61899.799659693424
Median total errors in population: 2719.0
Error averages by case: (962.3329004079251 975.6027170939946 981.5179184343432 917.4534164622444 894.1233420055095 940.800217171717 910.8584002525253 956.3183714358765 914.2264522718363 1060.0386534119266 965.2760637860364 1085.4179247091367 1087.8169541732445 1324.0850145658724 7403.707412366248 925.6451367461531 1102.5480438001093 1389.9574497345582 1266.2776327146216 906.3998655312434 905.0423259674772 1161.1686434849955 18852.475359778844 5644.5951391617145 1940.1516284378697 958.6204141474461 1081.8712544337238 941.8229585137034 2502.400044273587 941.2480044191923)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.66
Average program size in population (points): 48.959
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.365
Error (vector) diversity:			 0.367
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 133992322
--- Timings ---
Current time: 1481488002499 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) in1 (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () vector_integer_empty boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 166 257 27 19 621 626 571 576 71 96 17 264 84 20 110 55 51 72 236 657 31 24 25 21 23 125 27 39 312)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (160 0 257 0 19 621 626 571 576 71 0 0 264 84 20 110 0 0 0 236 657 0 0 0 0 0 125 0 0 312)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 61716.11370168871
Median total errors in population: 2805.1333333333328
Error averages by case: (1062.9860991924738 1145.6575565997398 1041.8973377039622 1068.7405070598477 1044.9558193974638 1070.7256363636363 1050.831289090909 1142.4723769962072 1104.2977590187586 1197.3734287674306 1099.9337866203189 1286.8066204964628 1244.2980145129252 1348.281290452828 7275.662438073583 1066.0265437402336 1264.064197553567 1089.8015246937712 1397.8934978215696 1097.014361248529 1116.1458222305478 1305.4030742479488 19085.51228725407 4344.3722855760725 1226.8219685300414 1117.6682534222525 1102.74624136773 1051.8965948523655 1214.5204512511984 1051.306637552448)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.817
Average program size in population (points): 49.14
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.343
Error (vector) diversity:			 0.344
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 136625961
--- Timings ---
Current time: 1481488016430 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_butlast exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer vector_integer_flush float_eq exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 149 253 24 25 617 611 544 556 53 83 23 282 78 21 110 48 48 67 241 642 35 29 26 31 34 136 19 42 320)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (162 0 253 0 25 617 611 544 556 53 0 0 282 78 21 110 0 0 0 241 642 0 0 0 0 0 136 0 0 320)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer integer_empty vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_sub integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 67561.15040028752
Median total errors in population: 2805.1333333333328
Error averages by case: (1022.5516150152799 1055.857229652556 1041.493290330328 1108.256367911492 1064.3650989775356 1070.7244574639037 1070.8264639690426 1134.6640826511587 1073.678636582593 1190.4657501541549 1178.9465562985351 1268.8827605226934 1269.7480209246703 1655.2371020186786 7693.598371599923 1088.6081122753137 1284.750293256305 1190.9740615895987 1493.5043090304457 1095.878539972345 1084.2878852271933 1336.1658692913225 19183.341092240265 8682.637344685329 1479.6315827300912 1207.7051922397798 1130.1220753838747 1041.9294650156014 1301.1373488565432 1061.1814244212376)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.187
Average program size in population (points): 48.314
Average percent parens in population: 0.226
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.35
Error (vector) diversity:			 0.353
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 139219710
--- Timings ---
Current time: 1481488030463 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 integer_mod exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 integer_mod exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () vector_integer_empty boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 integer_mod exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 integer_mod exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer vector_integer_flush float_eq exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 146 252 32 24 603 605 533 538 57 96 27 263 80 25 107 57 37 64 242 637 49 19 23 23 34 116 23 24 307)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (179 0 252 0 24 603 605 533 538 57 0 0 263 80 25 107 0 0 0 242 637 0 0 0 0 0 116 0 0 307)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer integer_empty vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 60695.39493608689
Median total errors in population: 2805.1333333333328
Error averages by case: (992.8281691378065 1026.1723534001173 981.6340353535352 1018.6838486388503 1014.983059260667 990.8557676767673 990.9583005050508 1056.1576517628398 1033.7936531460325 1160.5080264020828 1060.424602411327 1194.6762884700713 1185.5729121971979 1660.9076806818177 6974.097929825605 1030.4661948603102 1214.2321488761647 1080.4721191188949 2018.3178530827463 1016.4979314479119 1024.216753035522 1237.0307791579214 18792.856968523913 4406.1100415293295 1191.7361062437506 1058.1074437188981 1100.465759333431 982.1526404040338 1199.104849197688 1001.3730686868688)
Error minima by case: (0.0 0.20000000000000018 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.413
Average program size in population (points): 48.894
Average percent parens in population: 0.231
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.361
Error (vector) diversity:			 0.364
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 141810086
--- Timings ---
Current time: 1481488044627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot ((vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) vector_integer_flush vector_integer_concat integer_max vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_flush float_max))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2277.6000000000004
Zero cases best mean error: 75.92
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 1 243 28 31 619 611 561 563 64 95 24 279 78 24 115 45 48 55 199 649 52 29 20 25 40 120 21 32 317)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (201 0 243 0 31 619 611 561 563 64 0 0 279 78 24 115 0 0 0 199 649 0 0 0 0 0 120 0 0 317)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty exec_do*range (integer_rot vector_integer_yank float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.003444230706289E9
Median total errors in population: 2805.1333333333328
Error averages by case: (1033.5862223054717 1065.0239872929317 1031.536650252525 51270.140954278904 1124.797307173709 1010.8111136363634 1010.9261774891777 215619.23714059376 2237.4846129537123 598431.4589082713 2750.5282064293597 81889.658848732 81934.13428228539 1.0000012647622024E9 1.000006027518983E9 19411.969127927507 1294.3973967276636 1079.1977663119508 1.0000013406817577E9 1043.2905411508082 4047.2182880341916 2316114.3112328933 1.000014635304507E9 1.0000040772219079E9 1.0000011965792705E9 13242.174376258066 1077.7387627695152 1011.9066627455837 15925.826619647461 1031.2824655844156)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.07272727272727275 0.48749999999999716 0.0)
Average genome size in population (length): 37.596
Average program size in population (points): 48.992
Average percent parens in population: 0.229
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.344
Error (vector) diversity:			 0.348
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 144434663
--- Timings ---
Current time: 1481488058658 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) float_yankdup vector_integer_flush vector_integer_concat integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger) () ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) float_yankdup vector_integer_concat integer_max integer_empty boolean_swap float_eq float_min integer_empty boolean_swap exec_s (float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_last integer_gt integer_flush float_max float_frominteger))
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2277.6000000000004
Zero cases best mean error: 75.92
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 27 230 33 22 569 580 523 522 66 100 17 256 73 32 105 35 53 48 217 653 41 30 19 37 35 100 1 30 299)
Population mean number of elite cases: 4.91
Count of perfect (error zero) individuals by case: (160 0 230 0 22 569 580 523 522 66 0 0 256 73 32 105 0 0 0 217 653 0 0 0 0 0 100 0 0 299)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains float_frominteger) boolean_eq vector_integer_last float_frominteger) ()))
Partial simplification: (in1 exec_do*vector_integer float_eq exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_empty integer_mod (float_frominteger integer_rot float_frominteger float_add float_yank float_inc float_frominteger float_div))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 45
Size: 54
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 54205.04556470592
Median total errors in population: 2805.1333333333328
Error averages by case: (983.3120002608498 1035.358955180968 981.8967496753245 1016.9446497613517 974.0629709926237 981.2632175324671 971.2740714285715 990.3257300904983 943.3569883838381 1126.2996459917365 1100.2908556401878 1109.8512248531206 1120.8214755232405 1226.7286586345735 6021.082797483805 993.9617856676756 1224.7925722693888 1111.1153939761332 1306.3310052795302 955.9177935220825 943.976438827839 1185.9775925196072 15430.590655570013 4011.1560336197745 1208.8648415366101 1088.3154972150753 1039.8299186081128 982.1542036158248 1167.624294725018 971.5675463203465)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.057142857142857384 0.48749999999999716 0.0)
Average genome size in population (length): 37.803
Average program size in population (points): 49.114
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.359
Error (vector) diversity:			 0.361
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 147067569
--- Timings ---
Current time: 1481488071977 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer vector_integer_flush float_eq exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 27 249 36 23 586 593 537 541 59 83 36 285 85 25 121 50 2 64 209 638 33 23 19 22 29 109 21 26 335)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (171 0 249 0 23 586 593 537 541 59 0 0 285 85 25 121 0 0 0 209 638 0 0 0 0 0 109 0 0 335)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains float_frominteger) boolean_eq vector_integer_last float_frominteger) ()))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer vector_integer_flush exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s () integer_mod (float_frominteger integer_rot float_frominteger float_add float_yank integer_rot float_inc float_frominteger float_div))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 45
Size: 54
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 53710.56151926353
Median total errors in population: 2805.1333333333328
Error averages by case: (982.90076951382 1045.1584232514185 1021.7529714257965 1018.1256757856038 1044.1423463456492 1021.2477803030295 1021.241474358975 1080.2436748750767 1023.1202515931594 1085.3483686022946 1099.1622772324843 1127.4655629001898 1071.9965041190335 1245.0709361161332 5777.431698914455 1032.6203489950929 1156.0284981684913 1088.8594833232016 1316.8848039728734 1016.491803942539 1034.8429094028197 1214.2011030957515 13998.447519474435 4684.726960696113 1202.6116359081125 1046.839672186483 1088.3098727600357 992.119585930729 1181.7540608484892 991.4145452214456)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.057142857142857384 0.48749999999999716 0.0)
Average genome size in population (length): 38.048
Average program size in population (points): 49.505
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.555
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.333
Error (vector) diversity:			 0.335
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 149724907
--- Timings ---
Current time: 1481488085073 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 20 195 23 24 525 531 496 494 56 86 24 248 74 36 98 61 25 55 176 585 47 19 18 28 36 104 20 25 265)
Population mean number of elite cases: 4.56
Count of perfect (error zero) individuals by case: (164 0 195 0 24 525 531 496 494 56 0 0 248 74 36 98 0 0 0 176 585 0 0 0 0 0 104 0 0 265)
Population mean number of perfect (error zero) cases: 4.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains float_frominteger) boolean_eq vector_integer_last float_frominteger) ()))
Partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer float_eq exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_lt integer_mod (float_div float_frominteger integer_rot float_frominteger float_add float_yank float_inc float_frominteger float_div integer_dup_items))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 45
Size: 54
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.262270684713334E9
Median total errors in population: 2937.9999999999995
Error averages by case: (1051.1052312021309 1103.2822069704348 1093.8748928904429 1077.0536896042756 1086.846828651904 1083.2353684772775 1095.3078329294922 1123.5715416683026 1051.8716126109216 1294.3215475690972 3047.842131976396 1236.4475561692395 1257.0275227067868 1.0000025100186992E9 1.0000158146564808E9 1109.6658565008438 2281.3841020629457 1.7280703521192783E8 1.0000020462011007E9 1367.6770966749139 1036.6090047826394 3129.524478076295 1.0000232049973034E9 1.0000242904982145E9 1.0000014243340976E9 8408.693637447454 10232.078008852099 1078.2462992757187 8.934801753393452E7 1095.5951191391937)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.057142857142857384 0.48749999999999716 0.0)
Average genome size in population (length): 38.104
Average program size in population (points): 49.657
Average percent parens in population: 0.228
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.369
Error (vector) diversity:			 0.371
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 152396426
--- Timings ---
Current time: 1481488098272 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 30 227 34 21 551 553 527 525 68 90 29 290 86 36 104 49 17 54 197 629 37 18 22 26 23 113 1 31 312)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (165 0 227 0 21 551 553 527 525 68 0 0 290 86 36 104 0 0 0 197 629 0 0 0 0 0 113 0 0 312)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains)) ()))
Partial simplification: (in1 exec_do*vector_integer vector_integer_flush exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_empty integer_mod (float_frominteger integer_rot float_frominteger float_add float_yank float_inc float_frominteger float_div))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 1.5028694802213017E10
Median total errors in population: 2798.0575757575757
Error averages by case: (972.8662072871574 994.6500756534963 971.8844823953826 4846.179209638022 1665.3383768037545 961.2596454545447 951.3022149711404 962.2866602789371 934.198306549006 1.0000029818256663E9 1002.0540409597924 1053.5942356872242 1104.581759428072 2.0000013208298588E9 1.000007618153053E9 120763.6742055932 1116.7973438197498 1.0000010957025291E9 2.000001339527035E9 986.83075744302 946.0984852092357 1.0217957814687982E9 1.0000193389581527E9 1.0054874584066762E9 2.0000014072082243E9 1.0000009870619562E9 1.0000069682173266E9 971.9643678987425 1.001226377733599E9 921.5597859668114)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.022222222222222143 0.48749999999999716 0.0)
Average genome size in population (length): 37.756
Average program size in population (points): 49.022
Average percent parens in population: 0.226
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.354
Error (vector) diversity:			 0.356
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 155034702
--- Timings ---
Current time: 1481488111474 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 32 211 27 24 527 531 508 503 50 85 18 270 76 28 91 65 26 61 200 597 35 20 25 25 33 115 18 28 272)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (162 0 211 0 24 527 531 508 503 50 0 0 270 76 28 91 0 0 0 200 597 0 0 0 0 0 115 0 0 272)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction vector_integer_last} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains float_frominteger) boolean_eq vector_integer_last float_frominteger) ()))
Partial simplification: (vector_integer_take in1 exec_do*vector_integer vector_integer_flush exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_lt integer_mod (float_frominteger integer_rot float_frominteger float_add float_yank float_inc float_frominteger float_div integer_rot float_max))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 45
Size: 54
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 66521.36739128316
Median total errors in population: 2928.755357142857
Error averages by case: (1112.4201071929888 1055.7489064109361 1141.7667373517193 1056.9856373031605 1095.1126289900917 1101.2542269621083 1121.1740696028005 1093.474667712453 1075.1544997763856 1294.713520963916 1109.8972433942818 1180.838937246848 1181.9953570271828 1330.085798654705 8074.212709100765 1126.9759188858056 1214.5495586931036 1131.8041454561476 1345.2863299013786 1096.7445987347228 1076.3892742055525 1316.4196038866671 20988.988026291594 6057.002642906473 1561.0081714648873 1096.1184468394893 1040.7007247025565 1141.9356729216988 1201.1824600742036 1101.4267686287753)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.022222222222222143 0.48749999999999716 0.0)
Average genome size in population (length): 38.044
Average program size in population (points): 49.62
Average percent parens in population: 0.229
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.378
Error (vector) diversity:			 0.379
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 157675646
--- Timings ---
Current time: 1481488124776 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 27 232 38 23 570 543 519 526 49 77 21 273 71 26 106 60 26 61 203 625 32 22 13 30 41 98 18 38 289)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (183 0 232 0 23 570 543 519 526 49 0 0 273 71 26 106 0 0 0 203 625 0 0 0 0 0 98 0 0 289)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains)) ()))
Partial simplification: (in1 exec_do*vector_integer vector_integer_flush exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_empty integer_mod (float_frominteger integer_rot float_empty float_frominteger float_add float_div float_yank float_inc float_frominteger float_div exec_do*range vector_integer_contains))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 1.2258859344638437E10
Median total errors in population: 2885.2000000000007
Error averages by case: (773.162737189658 807.5613635673136 801.8835922373756 852.3047243267094 804.7610146500992 881.0275194435147 851.2710194065105 2309.0612842279506 923.111528680006 1570.32277984788 22826.318518229815 1643.7995596370856 1721.7826043767404 1.7962029633400621E9 1.566186315159444E9 857.2482348211835 10746.280161591165 6.263236233568349E8 2.0004475403347309E9 1537.7683070739147 965.0477378612509 3687.336808502176 2.0519563262339995E9 2.0260897462475457E9 2.0005518990693188E9 1407443.8211499525 270245.8186522768 802.7216503126427 1.8936706680454603E8 811.680998297982)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.022222222222222143 0.48749999999999716 0.0)
Average genome size in population (length): 37.715
Average program size in population (points): 49.094
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.376
Error (vector) diversity:			 0.378
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 160340970
--- Timings ---
Current time: 1481488138044 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (174 28 209 39 18 500 508 483 489 50 89 30 264 62 32 96 59 14 45 191 590 43 33 24 30 31 115 17 22 283)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (174 0 209 0 18 500 508 483 489 50 0 0 264 62 32 96 0 0 0 191 590 0 0 0 0 0 115 0 0 283)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_gte} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction float_sub} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction float_div} {:close 0, :instruction float_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_contains})
Best program: (vector_integer_take vector_integer_take in1 float_empty float_gte exec_do*vector_integer (vector_integer_flush float_eq) exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s (float_empty float_lt) (integer_mod) (boolean_invert_first_then_and float_div float_frominteger integer_rot exec_s (float_empty float_div float_frominteger float_add float_div float_yank integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) (vector_integer_stackdepth float_div exec_do*range (integer_rot float_max integer_dup_items vector_integer_contains)) ()))
Partial simplification: (in1 exec_do*vector_integer float_eq exec_yank integer_shove float_sub vector_integer_empty boolean_swap exec_s float_empty integer_mod (float_div float_frominteger integer_rot float_frominteger float_add float_yank vector_integer_yank vector_integer_last float_inc float_frominteger float_div))
Errors: [4.0 4.95 2.0 3.2666666666666666 13.8 3.0 4.0 14.941176470588236 6.888888888888889 14.619047619047619 11.033333333333333 12.657142857142858 12.785714285714285 64.2375 0.0 23.0 18.7 65.6 58.394936708860754 3.8 7.9 58.664978902953585 246.8 348.04999999999995 82.2642857142857 7.65 12.4 1.2000000000000002 63.06666666666666 1.0]
Total: 1170.6703381141488
Mean: 39.022346
Genome size: 41
Size: 50
Percent parens: 0.180
--- Population Statistics ---
Average total errors in population: 7.010552268826647E9
Median total errors in population: 2938.25
Error averages by case: (1017.1696542568543 1048.189782735196 1032.7447551587304 87736.87084076414 1027.182942574865 1041.1235542929287 1031.77997548285 1151.8637869684605 1048.4553208854372 1797429.8507618275 202717.1113035128 1229.861251846124 1250.9118317202363 1.0000025513530171E9 1.0000076705365479E9 7690.03778092894 560252.14605004 364648.8857455958 1.0000021664216273E9 1046.4985464023166 1035.764679727514 6228784.242985747 1.000030838270885E9 1.0001706279689616E9 1.0000022347867043E9 32553.598583117513 1032308.2364927107 1015.5287014069228 1.000007078419635E9 1003.013942257742)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 0.022222222222222143 0.48749999999999716 0.0)
Average genome size in population (length): 37.769
Average program size in population (points): 48.945
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.378
Error (vector) diversity:			 0.382
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 162976874
--- Timings ---
Current time: 1481488151120 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 22 220 34 25 554 549 499 509 65 84 28 267 72 35 111 54 21 58 214 602 34 32 31 31 30 111 1 23 295)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (165 0 220 0 25 554 549 499 509 65 0 0 267 72 35 111 0 0 0 214 602 0 0 0 0 0 111 0 0 295)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup vector_integer_concat integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 63856.65810362694
Median total errors in population: 2938.25
Error averages by case: (782.835690864396 816.1267654101745 841.7013855158513 807.072614981801 834.8437559642998 831.0312738437959 821.260177033082 918.5720405020344 779.1695356130131 923.9109320575967 901.7309234857297 1041.628994497649 1016.479643064882 1138.3969488193682 8894.808179969055 818.7938840923264 1018.0867961765266 913.3977666777315 1168.0758176997167 776.515722556323 762.9473612092514 1051.480398817275 23313.40461679852 7171.79700091025 1102.2922712436573 905.2119902740282 851.1217682536284 831.749537406081 990.7994463678328 831.4148635213409)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 38.294
Average program size in population (points): 49.784
Average percent parens in population: 0.227
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.361
Error (vector) diversity:			 0.367
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 165629042
--- Timings ---
Current time: 1481488165132 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction float_lte} {:close 0, :instruction boolean_xor} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction float_mod} {:close 0, :instruction exec_s} {:close 0, :instruction float_div})
Zero cases best program: (vector_integer_take vector_integer_take in1 float_empty float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) exec_pop () float_yankdup) (vector_integer_flush vector_integer_concat integer_max integer_empty) () integer_min boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (float_lte boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max vector_integer_empty) (float_mod exec_s (float_div) () ()) ())
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 float_empty exec_rot (exec_do*vector_integer (exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove float_sub integer_empty)) float_yankdup) vector_integer_flush vector_integer_concat integer_max integer_empty () integer_min float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap exec_s (float_div exec_do*range (float_lte boolean_xor vector_integer_last vector_integer_last vector_integer_dup float_frominteger) integer_gt integer_flush float_max vector_integer_empty))
Zero cases best errors: [0.0 3.2 0.0 2.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 0.0 5.199999999999999 0.1999999999999993 0.0 9.0 734.0 1.0 17.2 10.399999999999999 14.200000000000003 5.0 0.0 173.2 138.8 1909.2 53.8 4.4 0.0 1.2000000000000002 75.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 3159.6000000000004
Zero cases best mean error: 105.32
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 31 265 25 14 575 576 545 572 63 85 16 305 75 26 109 47 18 67 215 650 46 21 19 30 31 146 20 30 335)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (192 0 265 0 14 575 576 545 572 63 0 0 305 75 26 109 0 0 0 215 650 0 0 0 0 0 146 0 0 335)
Population mean number of perfect (error zero) cases: 4.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction 5} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction float_lte} {:close 1, :instruction float_lt} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger} {:close 0, :instruction boolean_eq})
Best program: (vector_integer_take in1 float_empty exec_rot (vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush 5) float_min float_sub integer_empty) () (vector_integer_empty) boolean_swap exec_s (float_empty vector_integer_concat integer_max integer_empty) () (vector_integer_empty) boolean_swap boolean_swap exec_s (float_lte float_lt) (integer_gte) (boolean_invert_first_then_and float_div float_frominteger float_add vector_integer_last float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger) boolean_eq)))
Partial simplification: (vector_integer_take in1 exec_rot in1 (float_empty exec_do*vector_integer (vector_integer_flush 5) float_min integer_empty vector_integer_empty boolean_swap exec_s (integer_max integer_empty) boolean_swap boolean_swap exec_s (float_lte float_lt) integer_gte (boolean_invert_first_then_and float_div float_frominteger float_add vector_integer_last float_div exec_do*range (integer_rot vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger) boolean_eq)))
Errors: [2.0 1.5333333333333332 2.6 7.8 0.20000000000000018 4.0 3.0 3.0 3.0 11.0 12.2 2.8000000000000007 2.0 19.0 224.0 6.0 19.233333333333334 14.600000000000001 6.799999999999997 15.0 3.0 46.949999999999996 27.80000000000001 118.0 22.200000000000003 0.5999999999999996 2.0 2.2 23.0 2.6]
Total: 608.1166666666668
Mean: 20.270555
Genome size: 46
Size: 61
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 49550.82988938398
Median total errors in population: 2783.3071428571425
Error averages by case: (802.733514515099 855.4151528715387 811.6754748492093 836.7412865477464 824.2842041063818 870.98484606133 821.0891162633507 913.5971234420383 853.2440993441588 916.212260347921 911.5377902284 987.3141975330706 1019.1470828180459 1119.803981540176 5810.595959322569 856.0432032335449 979.5980501341984 931.0313188544802 1150.9488615283788 856.5511579288782 844.6518179949525 1046.9930350279067 15168.447965965153 3679.602281482615 1228.6311678293596 909.3754885884713 881.0772865054707 821.7304970270287 1000.4382007243364 841.3334667684012)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 37.778
Average program size in population (points): 48.667
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.377
Error (vector) diversity:			 0.384
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 168309087
--- Timings ---
Current time: 1481488179370 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 22 251 31 24 578 592 546 577 61 83 25 296 88 25 119 51 31 59 222 638 37 13 22 28 34 113 23 32 316)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (189 0 251 0 24 578 592 546 577 61 0 0 296 88 25 119 0 0 0 222 638 0 0 0 0 0 113 0 0 316)
Population mean number of perfect (error zero) cases: 4.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 boolean_flush exec_do*vector_integer vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.677042425368435E9
Median total errors in population: 2833.6
Error averages by case: (885.2098144394471 1018.502625131783 891.4748718115214 1476695.2889284382 930.7186091322557 920.8645659090903 911.1789909840163 6976728.42292315 43970.31493202632 2.5600957717099562E7 1358.9241010063454 1476867.6819694606 1476848.7174063595 1.0000011252917724E9 1.0000065585973308E9 47940.613410330996 6786.407745699878 1.0791905836459737E8 1.000001164410087E9 1.5258882663405803E8 100944.45988026414 3.7780309606692916E8 1.0000166891139573E9 1.0000090662828133E9 1477127.9443947405 929.0856688677591 1329.6458326568795 871.7982247668945 1.0000010242081401E9 901.4267556193805)
Error minima by case: (0.0 0.10909090909091024 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 37.551
Average program size in population (points): 48.524
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.344
Error (vector) diversity:			 0.347
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 170989233
--- Timings ---
Current time: 1481488193332 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_first} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (vector_integer_first exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last boolean_not vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (vector_integer_first exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last boolean_not vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_first} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction boolean_not} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (vector_integer_first exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last boolean_not vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (vector_integer_first exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last boolean_not vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 1 242 29 17 569 572 530 569 57 95 21 282 90 29 105 58 26 59 219 632 36 17 25 31 35 102 24 29 300)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (173 0 242 0 17 569 572 530 569 57 0 0 282 90 29 105 0 0 0 219 632 0 0 0 0 0 102 0 0 300)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_inc vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer vector_integer_flush float_lt integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_inc vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 55023.752633829085
Median total errors in population: 2679.2000000000003
Error averages by case: (853.2352544417384 855.3963183648407 881.7128926767673 836.3861114568255 834.4893009905799 871.1187671717169 871.2289578282831 962.2306602526272 873.1914212307322 919.2611911736403 988.8808630221774 1039.6993348779672 1021.0893176583261 1154.3563217039825 7424.936604442945 876.1328700460234 1043.353918746646 951.2838290283016 1162.996572525417 865.699496969697 884.9138321748617 1073.8977275272841 18955.814844321238 3018.857637751237 1243.1394676115115 908.1758890841552 891.0393487958836 861.9564296085822 997.8447578827974 901.432694462482)
Error minima by case: (0.0 0.07272727272727231 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 37.194
Average program size in population (points): 48.065
Average percent parens in population: 0.223
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.362
Error (vector) diversity:			 0.366
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 173647214
--- Timings ---
Current time: 1481488208062 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_rot} {:close 2, :instruction integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_inc} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_flush} {:close 0, :instruction float_max} {:close 1, :instruction float_frominteger})
Zero cases best program: (vector_integer_take vector_integer_take vector_integer_take in1 float_pop boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) float_yankdup vector_integer_flush boolean_invert_second_then_and integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty boolean_swap vector_integer_first float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt integer_flush float_max float_frominteger)
Zero cases best partial simplification: (vector_integer_take vector_integer_take in1 boolean_flush exec_do*vector_integer (exec_do*vector_integer (vector_integer_flush float_eq) vector_integer_shove integer_rot integer_empty) float_yankdup vector_integer_flush boolean_invert_second_then_and integer_max integer_empty vector_integer_empty boolean_swap float_eq float_min float_sub integer_empty vector_integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last vector_integer_last float_inc float_frominteger) integer_gt float_max)
Zero cases best errors: [0.0 2.2 0.0 5.4 0.7999999999999998 0.0 0.0 0.0 0.0 2.0 1.1999999999999993 0.1999999999999993 0.0 0.0 65.0 0.0 13.2 23.4 25.200000000000003 2.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 4.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 2277.6000000000004
Zero cases best mean error: 75.92
Zero cases best size: 45
Percent parens: 0.089
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 24 233 21 22 587 566 522 569 55 105 25 291 70 28 94 52 18 60 180 573 42 29 24 16 36 104 34 34 312)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (156 0 233 0 22 587 566 522 569 55 0 0 291 70 28 94 0 0 0 180 573 0 0 0 0 0 104 0 0 312)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction vector_integer_length} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_inc vector_integer_concat integer_max integer_empty vector_integer_length exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_inc vector_integer_concat integer_max vector_integer_length exec_do*range (integer_rot vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 64065.12553669979
Median total errors in population: 2959.0999999999995
Error averages by case: (972.8579561071928 965.6285450787102 1231.4917333460367 986.6131735388208 944.356858975792 970.853776710833 1220.9290236805307 1449.2413866970055 984.4227165111787 1061.8848767684367 1079.5007754328917 1361.7943152587968 1402.5558065500118 1262.3168672947559 8210.64537178991 1246.7801879582062 1187.2068216964904 1042.8031364112492 1312.130519498234 996.2960142000244 995.5621774464256 1200.2399917155315 21712.96351520693 3253.2019996892263 1624.0599178174564 1048.806770160779 1011.6259069648277 971.6716018398208 1145.481027408935 1211.2027649449972)
Error minima by case: (0.0 0.07272727272727231 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 37.978
Average program size in population (points): 49.081
Average percent parens in population: 0.222
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.347
Error (vector) diversity:			 0.35
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 176289583
--- Timings ---
Current time: 1481488222406 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 17 234 32 24 585 556 514 541 55 101 31 288 69 41 85 41 25 55 212 604 55 27 9 25 28 111 19 26 306)
Population mean number of elite cases: 4.88
Count of perfect (error zero) individuals by case: (163 0 234 0 24 585 556 514 541 55 0 0 288 69 41 85 0 0 0 212 604 0 0 0 0 0 111 0 0 306)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction float_flush} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte float_flush integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (in1 float_empty exec_do*vector_integer (integer_empty) in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min integer_empty vector_integer_empty integer_max float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.677031234039452E9
Median total errors in population: 2887.6000000000004
Error averages by case: (1043.6359702451523 1117.9240334758488 1231.5351369289388 1476824.5874891572 1100.0641507361838 1030.8909449949317 1221.2726578154452 6977075.399533984 44098.812000588434 2.5601190982632186E7 1609.1510716699893 1477215.1470675196 1477216.8278827367 1.0000012380965314E9 1.0000036320427039E9 48287.11297713369 7103.405072665555 1.0791929690841673E8 1.0000012467159706E9 1.525889568442038E8 101042.61759004797 3.778031562029533E8 1.000008360137124E9 1.0000035551541783E9 1477205.0615762384 1148.1715048474077 1528.4619377928716 1041.820348841081 1.0000012375194329E9 1221.536357116144)
Error minima by case: (0.0 0.07272727272727231 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 37.764
Average program size in population (points): 48.713
Average percent parens in population: 0.221
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.368
Error (vector) diversity:			 0.37
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 178899935
--- Timings ---
Current time: 1481488236655 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2263.0000000000005
Lexicase best mean error: 75.433334
Lexicase best size: 61
Percent parens: 0.230
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction vector_integer_concat} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction float_empty} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush) exec_yank vector_integer_concat float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (float_empty float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min vector_integer_last vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2263.0000000000005
Zero cases best mean error: 75.433334
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 16 231 24 26 606 579 527 557 48 101 25 283 83 32 102 59 25 68 229 609 41 22 19 36 31 123 20 30 306)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (175 0 231 0 26 606 579 527 557 48 0 0 283 83 32 102 0 0 0 229 609 0 0 0 0 0 123 0 0 306)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_gte} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_gte vector_integer_concat integer_max integer_empty float_div exec_do*range (integer_rot vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 53416.3050980788
Median total errors in population: 2917.7999999999997
Error averages by case: (894.0650202453093 835.2724809212162 1052.8603487237062 886.6735864343442 843.9475802375724 870.9300316485852 1051.2800141732637 1202.38281625095 873.5924644625745 906.4298564267251 995.5413439800205 1274.9919383411334 1297.8796016825775 1073.6557381306932 5722.555112304249 1037.870244322733 1123.3582249043727 900.5675237965966 1104.795746521457 869.05418149721 883.5287270028509 1017.5429541095783 14260.124941831951 3155.732220017546 1287.2427521478385 915.9332336558282 4115.254117665695 871.8875703933875 1009.0288590913444 1082.3258671576539)
Error minima by case: (0.0 0.07272727272727231 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 38.925
Average program size in population (points): 50.365
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.581
Total error diversity:				 0.388
Error (vector) diversity:			 0.389
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 181607826
--- Timings ---
Current time: 1481488250595 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Lexicase best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Lexicase best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Lexicase best number of elite cases: 12
Lexicase best total error: 2264.2000000000003
Lexicase best mean error: 75.473335
Lexicase best size: 62
Percent parens: 0.226
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction vector_integer_take} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction float_sub} {:close 2, :instruction float_rot} {:close 1, :instruction vector_integer_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_dup} {:close 0, :instruction float_empty} {:close 1, :instruction float_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 1, :instruction float_eq} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction float_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction float_flush} {:close 0, :instruction float_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction float_min} {:close 0, :instruction exec_empty} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_frominteger} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_last} {:close 0, :instruction integer_gt} {:close 0, :instruction vector_integer_replace})
Zero cases best program: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best partial simplification: (vector_integer_take vector_integer_remove in1 float_empty exec_do*vector_integer (vector_integer_flush float_eq) float_empty exec_rot (exec_do*vector_integer (vector_integer_flush vector_integer_take) vector_integer_take) (in1) (float_empty exec_rot (exec_do*vector_integer (vector_integer_flush float_eq) exec_yank float_sub float_rot) () (vector_integer_empty) boolean_swap float_dup float_empty float_lt) exec_s (exec_eq float_eq) (float_min float_sub integer_empty) () float_dup_times boolean_swap float_flush float_div exec_do*range (integer_rot float_min exec_empty vector_integer_last vector_integer_dup float_frominteger) vector_integer_stackdepth vector_integer_last integer_gt vector_integer_replace)
Zero cases best errors: [1.0 5.2 0.0 1.5999999999999996 1.2000000000000002 0.0 0.0 0.0 0.0 7.0 5.199999999999999 1.1999999999999993 0.0 0.0 65.0 0.0 17.2 23.4 0.20000000000000284 0.0 0.0 43.8 566.8 1422.2 26.799999999999997 0.40000000000000036 3.0 0.20000000000000018 72.8 0.0]
Zero cases best number of elite cases: 12
Zero cases best number of zero cases: 11
Zero cases best total error: 2264.2000000000003
Zero cases best mean error: 75.473335
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (171 22 238 39 21 589 554 512 539 62 91 22 272 78 23 94 53 21 62 222 590 32 22 22 23 27 120 24 27 298)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (171 0 238 0 21 589 554 512 539 62 0 0 272 78 23 94 0 0 0 222 590 0 0 0 0 0 120 0 0 298)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction float_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*vector_integer} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*vector_integer} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction float_lt} {:close 1, :instruction integer_dec} {:close 0, :instruction float_min} {:close 0, :instruction float_sub} {:close 2, :instruction integer_empty} {:close 1, :instruction vector_integer_empty} {:close 1, :instruction float_yankdup} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_max} {:close 2, :instruction integer_empty} {:close 0, :instruction vector_integer_length} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_rot} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_shove} {:close 1, :instruction float_frominteger})
Best program: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_empty vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_yankdup float_inc vector_integer_concat integer_max integer_empty vector_integer_length exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max vector_integer_last float_shove float_frominteger))
Partial simplification: (vector_integer_take in1 float_empty boolean_flush exec_do*vector_integer (integer_empty) vector_integer_take in1 integer_dup exec_do*vector_integer (vector_integer_flush float_lt) integer_dec float_min float_sub integer_empty vector_integer_empty float_inc integer_max integer_empty vector_integer_length exec_do*range (integer_rot vector_integer_yank vector_integer_last float_div float_frominteger integer_rot float_max float_shove float_frominteger))
Errors: [1.0 1.2000000000000002 1.0 5.4 1.2000000000000002 0.0 0.0 0.0 0.0 2.0 0.1999999999999993 0.1999999999999993 1.0 0.0 65.0 0.0 12.2 22.4 25.200000000000003 1.0 0.0 43.8 566.8 332.04999999999995 25.799999999999997 0.5999999999999996 5.0 1.2000000000000002 64.86666666666666 1.0]
Total: 1180.1166666666663
Mean: 39.337223
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 6.677067930748404E9
Median total errors in population: 2924.637662337662
Error averages by case: (1053.9595140151519 1109.3703660445533 1332.5940831313123 1476950.0703899392 1090.8954365371776 1110.8411863636359 1381.2116234848481 6977209.841652402 44120.11555815853 2.5601128353965644E7 1605.178920407948 1477228.7292733511 1478212.8195521834 1.000001362149538E9 1.0000070630097314E9 48400.675682948895 24573.326516416884 1.0791932410129887E8 1.0000014168559757E9 1.5258898707747823E8 101114.2012289044 3.7780332324720526E8 1.0000175036245409E9 1.000007756127521E9 1477266.258219484 1138.019526087941 1500.9535862556309 1031.7291586580031 1.0000012533807994E9 1382.0288756313125)
Error minima by case: (0.0 0.07272727272727231 0.0 0.03636363636363704 0.0 0.0 0.0 0.0 0.0 0.0 0.1999999999999993 0.057142857142855163 0.0 0.0 0.0 0.0 0.05000000000000071 0.3500000000000014 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 18.799999999999955 0.20000000000000284 0.01935483870967758 0.0 4.440892098500626E-16 0.48749999999999716 0.0)
Average genome size in population (length): 38.57
Average program size in population (points): 49.942
Average percent parens in population: 0.224
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.396
Error (vector) diversity:			 0.4
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 184289627
--- Timings ---
Current time: 1481488265804 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
