Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
parent-selection = :epsilon-lexicase
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :epsilon-lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = -101 8 -9 -94 65 64 8 -18 -39 26 11 -126 -66 120 124 103
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "dbd770b8-069b-4c89-91cc-2de8a7f08756"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_dup})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_dup)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 277140.06651934737
Median total errors in population: 300000
Error averages by case: (9230.269604772075 9230.51315955355 9230.268604772074 9230.764614603822 9230.374997125586 9230.185501274835 9230.185501274833 9230.296986197933 9230.216386197928 9231.154014603831 9230.998604105507 9231.059599119439 9230.477799119442 9234.789404105506 9249.722232905278 9230.795645545853 9231.738409316406 9232.106645545862 9234.393648211295 9230.26778619793 9230.237888875536 9234.358559553548 9262.639625258791 9376.990450407839 9236.571392431755 9230.926151944006 9231.091091591094 9230.185501274833 9236.299492790762 9230.187220670223)
Error minima by case: (1.0 1.2000000000000002 0.0 2.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.6000000000000001 0.19999999999999996 2.0 5.199999999999999 0.1999999999999993 0.40000000000000036 4.0 61.0 3.0 16.2 20.4 14.885933398765374 1.0 0.0 15.885933398765374 349.5140666012346 1418.2 12.114066601234626 4.4 0.0 0.14030230586813974 11.114066601234626 0.034344819917976)
Average genome size in population (length): 25.199
Average program size in population (points): 26.18
Average percent parens in population: 0.061
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.023
Error (vector) diversity:			 0.023
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 755970
--- Timings ---
Current time: 1481492752315 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_dup})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_dup)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 24595.479376523403
Median total errors in population: 3059.4
Error averages by case: (739.568174865452 740.4906876337743 739.2072565583962 743.4314299056354 739.9086395427372 739.7700158719528 739.764556174262 744.0096493301079 739.808809597427 743.4038195320326 745.6275458649811 740.9232160783253 742.6262920777781 755.0894651186289 888.1852304770468 741.801943538897 756.8200133170972 756.2847938406563 764.7143855911825 739.7124754816258 740.7714766967865 770.6948022816039 1166.282054677267 2334.984107526666 786.4637684294548 744.3083279368049 742.0152348030716 739.7617561742619 789.3033929368121 739.7460546627323)
Error minima by case: (0.0 0.038216451069011725 0.0 1.5999999999999996 0.20000000000000018 0.18661099787585883 0.14030230586813974 0.3999999999999999 0.19999999999999996 2.0 5.199999999999999 0.1999999999999993 0.40000000000000036 3.0 61.0 3.0 15.038216451069012 5.399999999999999 3.799999999999997 0.0 0.0 15.885933398765374 30.80000000000001 1418.2 12.114066601234626 3.5999999999999996 0.0 0.14030230586813974 11.114066601234626 0.033333333333333326)
Average genome size in population (length): 27.096
Average program size in population (points): 28.096
Average percent parens in population: 0.046
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 332
Genome diversity (% unique Plush genomes):	 0.307
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 332
Syntactic diversity (% unique Push programs):	 0.307
Total error diversity:				 0.036
Error (vector) diversity:			 0.036
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1568850
--- Timings ---
Current time: 1481492758844 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction float_dup_items})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap vector_integer_pop integer_yankdup vector_integer_length vector_integer_take vector_integer_length vector_integer_replace float_inc vector_integer_indexof float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 0.8 0.6 14.6 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 2337.4
Mean: 77.91333
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 125397.03221843074
Median total errors in population: 3075.8
Error averages by case: (807.2501532383952 810.0957417154748 807.1109355620865 812.7576271059677 808.6668933475793 827.3442048321065 827.4889660413372 831.038405516955 818.3478802865814 821.8966738712904 813.0727795379623 812.1673408721999 811.1072042515823 1356.8624928393533 13048.470333051304 816.2952169072036 822.0217528142582 839.1540995364322 1230.8895298733855 827.754975920729 818.2106348451177 978.99220962535 58482.1493022523 30469.834750294318 887.4103731360473 812.1544760537105 811.7860942853243 827.4229660413346 931.7928900675857 827.4853147073381)
Error minima by case: (0.0 0.038216451069011725 0.0 1.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 2.0 4.199999999999999 0.1999999999999993 0.40000000000000036 3.0 60.0 3.0 12.8 5.399999999999999 1.7999999999999972 0.0 0.0 15.885933398765374 30.80000000000001 1417.2 12.114066601234626 1.5999999999999996 0.0 0.14030230586813974 11.114066601234626 0.033333333333333326)
Average genome size in population (length): 26.478
Average program size in population (points): 27.476
Average percent parens in population: 0.044
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 172
Genome diversity (% unique Plush genomes):	 0.335
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.335
Total error diversity:				 0.051
Error (vector) diversity:			 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2363190
--- Timings ---
Current time: 1481492766127 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction float_dup_items})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap vector_integer_pop integer_yankdup vector_integer_length vector_integer_take vector_integer_length vector_integer_replace float_inc vector_integer_indexof float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger float_inc)
Errors: [0.0 2.2 1.0 10.4 3.8 0.8 0.6 14.6 0.8 7.0 4.199999999999999 1.1999999999999993 5.4 5.0 60.0 5.0 16.2 26.4 30.200000000000003 3.0 1.0 38.8 571.8 1417.2 29.799999999999997 3.4000000000000004 1.0 0.6 75.8 0.19999999999999996]
Total: 2337.4
Mean: 77.91333
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 37650.52695811957
Median total errors in population: 3055.0
Error averages by case: (656.8472636222268 659.201780955117 657.2180416207474 662.2837804950018 658.0875015137987 657.2812654527477 657.2816657955968 661.754889736828 658.4888870396715 663.4356443596155 662.257157468183 660.53077943154 671.2755319314261 726.8319507835251 882.833336916658 661.256477010357 671.7115665775175 704.0639003436931 713.8760848120126 658.0118557434164 667.8080333171334 698.5415761802743 1608.1302609603204 16904.418705685464 723.6802509275514 661.5212637940568 661.1191216843642 657.3225060979009 806.2660848858109 657.1897929768836)
Error minima by case: (0.0 0.038216451069011725 0.0 1.5999999999999996 0.20000000000000018 0.2 0.14030230586813974 0.09391564547484021 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 58.0 3.0 1.8000000000000007 3.3999999999999986 1.7999999999999972 0.0 0.0 15.885933398765374 30.80000000000001 1414.2 2.799999999999997 0.40000000000000036 0.0 0.09999999999999998 10.114066601234626 0.033333333333333326)
Average genome size in population (length): 29.648
Average program size in population (points): 30.648
Average percent parens in population: 0.038
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 138
Genome diversity (% unique Plush genomes):	 0.377
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.067
Error (vector) diversity:			 0.068
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3252630
--- Timings ---
Current time: 1481492773575 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_take vector_integer_stackdepth in1 in1 vector_integer_pushall integer_rot float_frominteger vector_integer_remove integer_swap float_frominteger vector_integer_shove float_sub 5 vector_integer_dup_times float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 75120.68047049698
Median total errors in population: 3059.3999999999996
Error averages by case: (673.5197564672998 686.1682020606439 684.3647666217842 683.5484142291617 675.2844730246043 723.3859740890055 723.3742756005352 716.20390277225 714.8061869189171 689.0685495826651 682.0794955760732 692.623411143468 708.3980210235283 1013.1041484083682 1319.462358013014 679.0917281565664 705.6455447670545 916.8061421299366 919.3674207126517 684.9978453341123 714.3025575314454 731.064217802091 6718.634989098293 46657.15651132605 902.1225335804697 681.8448552888054 680.5750538151077 713.3785032326721 1306.8778193106787 723.4228128797812)
Error minima by case: (0.0 0.038216451069011725 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.09391564547484021 0.16017028665036603 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 24.0 0.0 1.8000000000000007 2.3999999999999986 1.7999999999999972 0.0 0.0 9.799999999999997 29.80000000000001 61.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.14030230586813974 4.799999999999997 0.16121680450727882)
Average genome size in population (length): 33.916
Average program size in population (points): 34.915
Average percent parens in population: 0.033
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.114
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4270110
--- Timings ---
Current time: 1481492781593 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_replace in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub integer_yankdup float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 182151.2312756333
Median total errors in population: 3055.8
Error averages by case: (733.3291441405362 796.3427240404426 733.8685684470304 746.2709510789377 734.9413995750026 832.6181288680909 833.0301489886435 819.9957943398861 773.437514680461 759.6811409722035 753.0630539868964 752.1924238062028 768.1575943398888 1192.6149837434778 6666.384158385117 743.2131250395112 823.2046357002529 942.6943871998225 1175.0395980404826 744.2310610065514 833.9303943398847 936.7435402750184 29967.08224177714 122274.9489228416 1360.1463994892285 748.8980539030518 749.0723539869011 782.7939489886438 1340.2576361766412 833.047247477113)
Error minima by case: (0.0 0.038216451069011725 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.16017028665036603 0.0 0.1999999999999993 0.1999999999999993 0.15740772465490238 2.0 23.0 0.0 1.8000000000000007 1.3999999999999986 1.7999999999999972 0.0 0.0 9.799999999999997 2.8000000000000114 61.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 36.7
Average program size in population (points): 37.697
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.193
Error (vector) diversity:			 0.196
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5371110
--- Timings ---
Current time: 1481492790016 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_stackdepth integer_inc in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub 5 integer_yankdup integer_yank float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 174601.0933522518
Median total errors in population: 3116.7790930823962
Error averages by case: (664.3058823175387 678.6588567546607 664.5967708928806 676.6171508639887 666.7513230567304 693.2902450489609 713.6749942005608 730.2923603909243 704.1563812907273 697.1497601144895 689.4829722633151 685.0254010299006 689.5462664752811 1178.1989257530738 10570.089136959072 679.7769507026453 769.8381930212128 787.2888657916021 1199.3822854252055 704.6651044556975 684.2363812907263 914.1738907334993 40464.23637873728 102297.3624054744 1461.5187395576777 682.3339456537392 684.0661706211592 703.3509007313945 1173.2682637541827 693.7584488898011)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 21.0 0.0 1.8000000000000007 1.3999999999999986 1.2000000000000028 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 37.848
Average program size in population (points): 38.847
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.232
Error (vector) diversity:			 0.236
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6506550
--- Timings ---
Current time: 1481492798806 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (integer_fromfloat vector_integer_stackdepth integer_inc in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub 5 integer_yankdup integer_yank float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 161384.51242919444
Median total errors in population: 3075.8
Error averages by case: (693.1954983400393 707.1799682858746 703.5839324831845 714.6534306834983 685.9259443456233 712.2141629318494 722.5388967315508 718.7733615005028 713.5547060173733 732.2665158199632 729.7025939354686 721.5392625110971 717.5585060173755 1119.9836010876854 9106.573914773287 697.0704906446493 807.8537184668942 786.3566893855887 1163.5940216314186 713.8413777720418 712.9933060173713 929.3621227808153 35611.06093248024 95061.18234567171 1470.966452137647 722.6552200898142 723.4187153090976 712.3325933534278 1059.8212652171812 712.7588827727238)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 21.0 0.0 1.8000000000000007 0.6000000000000014 1.2000000000000028 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.16003693029466148)
Average genome size in population (length): 37.018
Average program size in population (points): 38.018
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.266
Error (vector) diversity:			 0.27
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7617090
--- Timings ---
Current time: 1481492807873 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_stackdepth integer_inc in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub 5 integer_yankdup integer_yank float_frominteger float_add vector_integer_subvec)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 249010.45837950349
Median total errors in population: 3059.4
Error averages by case: (573.2051117201182 606.8360227984725 583.4872382736695 616.08395841578 596.4251601829756 612.1400665054358 652.4144230552203 669.7738825940653 653.3219988687492 636.6453750398634 635.8205444667955 623.8616299074542 647.6233814989179 1060.9613783219488 12980.345452015896 609.3378290290307 720.0603862398373 669.5362206085578 1104.6016682871634 623.6795419226199 643.2429562764733 1013.5069399350206 39059.11344618443 177317.5456076482 1576.207086379888 625.8488929181905 626.7902591714981 622.2176000986414 1027.324086900842 622.5002342381335)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 2.0 0.0 1.8000000000000007 0.6000000000000014 0.7999999999999972 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 1.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.16017028665036603)
Average genome size in population (length): 37.558
Average program size in population (points): 38.558
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.336
Error (vector) diversity:			 0.342
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8743830
--- Timings ---
Current time: 1481492817123 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_replace in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub integer_yank float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 65997.40049204345
Median total errors in population: 3055.0
Error averages by case: (662.9704535836124 666.1529339284612 663.2311113830544 673.2087856002152 665.1912997522297 671.9289644804827 682.3018480645663 697.6630792867603 692.9242937634522 688.0236256131006 688.7149254966284 679.1924012701036 697.2032389760589 1000.0142509988566 9140.110205025168 675.2423669394761 762.4055939783245 704.4209695494387 1045.7572043620878 683.5245625444281 692.9524835338616 918.0712083876389 30156.495324123935 6435.728792621436 1408.6354274850937 681.2574659158179 683.7827208645705 682.0369964686689 825.9066770537057 672.3512809924567)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 1.0 0.0 1.8000000000000007 0.3999999999999986 0.20000000000000284 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 38.013
Average program size in population (points): 39.013
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.351
Error (vector) diversity:			 0.353
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9884220
--- Timings ---
Current time: 1481492826987 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub integer_yank float_frominteger float_add)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 70333.32945527999
Median total errors in population: 3066.0000000000005
Error averages by case: (732.8607493644952 736.2948042338684 723.2163472028412 734.8434111953521 735.2474917104544 741.8793148673866 792.1550158214072 787.7606329509821 792.7456207915378 748.0108070951084 754.9472761435113 740.7252502548788 787.7034744324573 1067.3551587428371 9224.159149191908 745.4903377060477 813.9518551013789 770.7672147838633 1103.7267270720122 783.223535435208 782.9602349891965 1013.5169117715415 31587.50462651336 6948.690349287739 1759.8257629758534 747.2137559926729 748.5321142611352 781.9872010565279 903.6804950680574 742.3538292665979)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.13333333333333286 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 1.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 3.200000000000003 0.0)
Average genome size in population (length): 37.896
Average program size in population (points): 38.896
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.366
Error (vector) diversity:			 0.369
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11021100
--- Timings ---
Current time: 1481492837232 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_swap} {:close 1, :instruction float_div} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction float_sub} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction vector_integer_subvec})
Best program: (integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc integer_min in1 in1 vector_integer_pushall integer_rot integer_fromfloat float_dec float_frominteger integer_max vector_integer_flush vector_integer_remove integer_swap float_div float_frominteger vector_integer_shove float_sub 5 integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1 vector_integer_subvec)
Partial simplification: (vector_integer_replace vector_integer_take vector_integer_stackdepth integer_inc in1 vector_integer_pushall integer_rot float_frominteger integer_max integer_swap float_frominteger float_sub 5 integer_yankdup integer_yank float_frominteger float_add in1)
Errors: [3.0 3.8 1.0 11.4 3.8 0.2 0.4 13.6 10.8 7.0 27.8 1.1999999999999993 6.4 6.0 96.0 6.0 65.8 70.4 5.799999999999997 3.0 8.0 35.8 117.80000000000001 1458.2 81.2 11.6 5.0 1.4 37.8 0.8]
Total: 2101.0000000000005
Mean: 70.03333
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 150713.5333809775
Median total errors in population: 3115.4
Error averages by case: (732.8327903010822 726.9681620320694 733.1855222642503 744.0769752548501 735.4913930641231 731.9061856598282 732.1586476514569 736.4630556354495 732.6980242198035 755.4955671029871 762.4108384798118 752.461926732071 737.1555233705373 1037.6672020676815 9214.84510314704 744.9747506346074 836.9015802176141 775.1249316861264 1052.1516009890133 743.388465952332 733.0005242198033 1096.5526256866876 24346.51341611995 94936.04891545625 1611.0090144949295 754.2297933679486 757.1361081354846 731.9982181216998 1006.4667853962112 722.2197335161133)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 1.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 1.7999999999999972 2.8000000000000114 61.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 38.085
Average program size in population (points): 39.084
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.358
Error (vector) diversity:			 0.365
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12163650
--- Timings ---
Current time: 1481492847633 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction float_div} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction float_div} {:close 1, :instruction float_tan} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_mod float_inc float_div integer_fromfloat float_shove float_max float_frominteger integer_mod float_inc float_div float_tan in1 vector_integer_pushall integer_rot integer_fromfloat float_shove float_frominteger 5 vector_integer_reverse integer_dup_times integer_yank integer_div vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger 5 integer_dup_times integer_yank integer_div float_frominteger float_add float_dec)
Errors: [1.0 2.2 0.0 9.4 4.8 0.2 1.4 12.6 2.8 7.0 6.199999999999999 0.8000000000000007 7.4 5.0 50.0 9.0 18.2 5.399999999999999 30.200000000000003 1.0 3.0 36.8 619.8 1028.2 31.799999999999997 4.4 1.0 1.4 73.8 0.8]
Total: 1975.6000000000001
Mean: 65.85333
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 138557.98331992794
Median total errors in population: 3054.6000000000004
Error averages by case: (832.4870376005641 856.2204631334602 832.8605512327014 832.5153182165598 824.8627388702446 841.5815122533211 841.895783769669 846.7183120848863 852.3231068773348 844.9293551091049 844.0729678876996 840.3075247381 857.1606883002974 1128.0150299504617 5670.237180384787 832.0479688392569 899.5367945809058 876.7416296181369 1120.1576057028237 843.2460745204456 842.9281120848855 1007.4789664722126 17590.16201710288 90917.16344573282 1428.1237447809522 838.5557415162273 841.5254569420731 831.747156236075 1090.409040363754 851.9719950268513)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 1.7999999999999972 1.8000000000000114 61.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 38.061
Average program size in population (points): 39.061
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.375
Error (vector) diversity:			 0.381
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13305480
--- Timings ---
Current time: 1481492857766 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction float_div} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction float_div} {:close 1, :instruction float_tan} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_mod float_inc float_div integer_fromfloat float_shove float_max float_frominteger integer_mod float_inc float_div float_tan in1 vector_integer_pushall integer_rot integer_fromfloat float_shove float_frominteger 5 vector_integer_reverse integer_dup_times integer_yank integer_div vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger 5 integer_dup_times integer_yank integer_div float_frominteger float_add float_dec)
Errors: [1.0 2.2 0.0 9.4 4.8 0.2 1.4 12.6 2.8 7.0 6.199999999999999 0.8000000000000007 7.4 5.0 50.0 9.0 18.2 5.399999999999999 30.200000000000003 1.0 3.0 36.8 619.8 1028.2 31.799999999999997 4.4 1.0 1.4 73.8 0.8]
Total: 1975.6000000000001
Mean: 65.85333
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 57856.072261130896
Median total errors in population: 2986.2000000000003
Error averages by case: (722.5400247715698 756.2935909299692 713.0019118461654 723.3384842300545 724.7213983272376 721.7734542464119 722.0545466764327 746.950556791034 732.524840886934 730.4885756431036 793.461642406477 731.8074782604149 746.5483578096379 1020.9957388089842 3976.514980718299 731.4028070142507 781.2915338723044 753.7751550009473 952.916756118058 733.1492633930826 732.8153822066215 867.0002763450976 15533.455901209943 5724.800590408285 12442.939194609848 729.6673573783721 745.6525168201315 721.8575700881245 1130.2190670792218 712.1133072341757)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.048386733339738086 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 61.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.07210771952295492)
Average genome size in population (length): 38.342
Average program size in population (points): 39.341
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.415
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14455740
--- Timings ---
Current time: 1481492868106 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mod} {:close 1, :instruction float_inc} {:close 0, :instruction float_div} {:close 1, :instruction float_tan} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_shove} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_mod float_inc vector_integer_yankdup integer_fromfloat float_shove float_max float_frominteger integer_mod float_inc float_div float_tan in1 vector_integer_pushall integer_rot integer_fromfloat float_shove float_frominteger 5 vector_integer_reverse integer_dup_times integer_yank integer_div vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot float_frominteger 5 integer_dup_times integer_yank integer_div float_frominteger float_add float_dec)
Errors: [1.0 2.2 0.0 9.4 4.8 0.2 1.4 12.6 2.8 7.0 6.199999999999999 0.8000000000000007 7.4 5.0 50.0 9.0 18.2 5.399999999999999 30.200000000000003 1.0 3.0 36.8 619.8 1028.2 31.799999999999997 4.4 1.0 1.4 73.8 0.8]
Total: 1975.6000000000001
Mean: 65.85333
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 39908.37908824501
Median total errors in population: 2952.2
Error averages by case: (682.5477029663765 705.9224536815943 682.9162054236083 692.1104069942046 684.4898865862679 681.7117929831294 691.9528477492423 697.392247912842 692.7026431523858 695.8960916008378 704.0504679012291 697.4596181298616 697.2128525275245 920.0219835502702 2159.3339246376263 692.019768462627 783.6302746021785 707.7338517158852 882.2347795181009 693.2861541816528 692.8513424372295 809.7643485209752 12605.190103760657 5092.58853990029 1265.0853640380028 699.7013382536464 700.4837786401445 691.8329724133208 824.3071250582673 681.9482209452111)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.048386733339738086 0.40000000000000036 1.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 61.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.07210771952295492)
Average genome size in population (length): 38.1
Average program size in population (points): 39.1
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.396
Error (vector) diversity:			 0.408
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15598740
--- Timings ---
Current time: 1481492878759 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_conj})
Best program: (float_mod in1 integer_fromfloat float_shove vector_integer_replace in1 vector_integer_pushall 5 integer_yankdup integer_yank vector_integer_dup_times vector_integer_subvec float_mod float_frominteger vector_integer_occurrencesof integer_flush vector_integer_shove vector_integer_nth float_dup_times integer_dup integer_flush vector_integer_shove vector_integer_yankdup integer_max float_mult vector_integer_conj)
Partial simplification: (in1 in1 vector_integer_pushall 5 integer_yankdup integer_yank vector_integer_dup_times vector_integer_subvec float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1791.6
Mean: 59.72
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 279478.7000849974
Median total errors in population: 2960.5999999999995
Error averages by case: (712.3741461895565 726.5137037365183 712.7468637826981 721.8892826624842 714.3627003726092 731.4921126623022 761.6714061360933 756.2903175986536 762.6323342956824 724.6253996792625 728.6740000333824 726.3289124679301 756.3095394094224 939.465009485396 1632.8168129951305 722.1709742744607 744.4740744845882 744.5997398280317 881.0749139566868 743.1965227091869 762.7403655409973 771.7469528635476 10123.878318653795 246625.48168808574 1175.711994303814 726.259935506328 728.7324036872195 751.6225239750562 1137.0853755527312 731.7317600645937)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 4.440892098500626E-16 0.19999999999999996 0.0 0.1999999999999993 0.048386733339738086 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 61.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.046097745656695444)
Average genome size in population (length): 38.168
Average program size in population (points): 39.168
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.438
Error (vector) diversity:			 0.446
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 16743780
--- Timings ---
Current time: 1481492889286 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction 5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction vector_integer_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_conj})
Best program: (float_mod in1 integer_fromfloat float_shove vector_integer_replace in1 vector_integer_pushall 5 integer_yankdup integer_yank vector_integer_dup_times vector_integer_subvec float_mod float_frominteger vector_integer_occurrencesof integer_flush vector_integer_shove vector_integer_nth float_dup_times integer_dup integer_flush vector_integer_shove vector_integer_yankdup integer_max float_mult vector_integer_conj)
Partial simplification: (in1 in1 vector_integer_pushall 5 integer_yankdup integer_yank vector_integer_dup_times vector_integer_subvec float_frominteger)
Errors: [1.0 3.2 0.0 9.4 4.2 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 1791.6
Mean: 59.72
Genome size: 26
Size: 27
Percent parens: 0.037
--- Population Statistics ---
Average total errors in population: 38418.753914174784
Median total errors in population: 2943.2000000000003
Error averages by case: (572.5095742667398 576.2620947823527 572.9359915555935 582.9904045230979 574.6691780573348 581.6155202353048 571.6671973756845 577.2038018734395 582.6040934599906 588.4086291718803 594.1507711554852 589.1998017980837 576.4451475515655 839.8569581370009 2296.740062002669 582.6904385981059 605.3134518695229 597.7027466107296 808.6752617771051 573.4246022875792 572.8572426899437 645.2298917080899 15212.055478944449 3951.571362731637 1173.1904620733737 589.7035356956029 592.2725117938796 571.6435545621069 693.2530829570305 571.9110639295083)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.041470984807896905 0.08366218546322624 0.11633781453677378 4.440892098500626E-16 0.19999999999999996 0.0 0.1999999999999993 0.041470984807896016 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.07210771952295492)
Average genome size in population (length): 38.142
Average program size in population (points): 39.141
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.434
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17888040
--- Timings ---
Current time: 1481492899960 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth})
Best program: (vector_integer_subvec vector_integer_pushall in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dec float_frominteger integer_max vector_integer_flush integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth)
Partial simplification: (vector_integer_pushall in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat vector_integer_pushall integer_rot integer_yank 5 float_frominteger float_frominteger integer_max integer_yankdup integer_yank float_frominteger float_stackdepth)
Errors: [3.0 0.7999999999999998 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 12.0 26.8 1.1999999999999993 9.6 48.0 249.0 10.0 18.2 17.6 49.8 2.0 2.0 53.8 404.2 118.20000000000005 137.2 3.5999999999999996 10.0 0.4 23.799999999999997 0.8]
Total: 1219.0
Mean: 40.633335
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 34400.94437097147
Median total errors in population: 2952.5
Error averages by case: (652.3604764539173 655.9645277724333 652.7408603191523 661.3665052902402 654.397737087697 671.3476384451155 681.4366201502969 676.4169069548274 682.3273044457029 664.9760211673523 663.2540191302018 664.329948949964 676.5923567011139 847.6374986325121 2058.4404700210257 661.3756832938749 674.2170969164339 677.0862059252282 809.0387260846118 672.992889408409 682.4379553773272 722.5857864346343 10181.873073951307 3462.984841306538 890.5185366475603 661.8756363238259 665.5797900372918 661.4220482224679 751.6481443778142 661.719065142637)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 38.519
Average program size in population (points): 39.518
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.411
Error (vector) diversity:			 0.415
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 19043610
--- Timings ---
Current time: 1481492910905 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction float_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth})
Best program: (vector_integer_subvec vector_integer_pushall in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dec float_frominteger integer_max float_dup_items integer_yankdup integer_yank vector_integer_dup_times float_frominteger float_stackdepth)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat vector_integer_pushall integer_rot integer_yank float_frominteger float_dec integer_max float_dup_items integer_yankdup integer_yank float_frominteger)
Errors: [0.0 0.7999999999999998 3.0 3.5999999999999996 4.2 0.2 0.4 3.4 1.8 12.0 26.8 0.1999999999999993 9.6 48.0 249.0 8.0 18.2 17.6 49.8 2.0 2.0 53.8 404.2 118.20000000000005 25.200000000000003 19.6 10.0 0.4 23.799999999999997 0.8]
Total: 1116.6
Mean: 37.22
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 39804.03835930042
Median total errors in population: 2814.4000000000005
Error averages by case: (622.1577438182242 615.6939464078835 612.7017889177295 621.0295801388197 624.2672037004734 621.4294623738034 621.4590372705187 636.4240755388284 622.4128721516283 624.3922124887422 627.9946144125861 622.6553326540013 616.159995597788 780.4147215827677 1635.0080061573215 630.7738487451425 642.2199197492357 646.2637152488553 753.0340711824645 612.9602932827312 632.6328432526507 675.9347609867758 8484.748514238123 12046.817584367065 960.3243178713245 624.2782495817064 625.1969930014731 621.428873015197 721.4829046258783 621.7408769405586)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 38.44
Average program size in population (points): 39.44
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.403
Error (vector) diversity:			 0.408
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 20196810
--- Timings ---
Current time: 1481492921743 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (vector_integer_subvec vector_integer_pushall in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dec float_frominteger integer_max vector_integer_flush integer_yankdup integer_yank vector_integer_dup_times float_frominteger vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (vector_integer_subvec in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat vector_integer_pushall integer_rot integer_yank 5 float_frominteger float_frominteger integer_max integer_yankdup integer_yank float_frominteger vector_integer_dup_times float_frominteger float_add)
Errors: [2.0 0.7999999999999998 3.0 5.4 2.2 0.8 0.4 3.4 7.2 4.0 33.8 16.2 25.6 2.0 209.0 9.0 12.2 20.6 6.200000000000003 7.0 8.0 50.8 50.80000000000001 55.200000000000045 249.2 35.6 30.0 0.4 2.200000000000003 1.2]
Total: 854.2000000000003
Mean: 28.473333
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 34349.54684103511
Median total errors in population: 2877.7999999999997
Error averages by case: (832.0102045968582 835.8389516619824 832.6104081312574 840.3093092973788 834.186267989472 831.3800706633399 841.3854403688691 855.8367783462645 842.2830649505499 842.9362610970901 852.1942038671839 843.7182295646778 836.621151725655 975.9310069255782 1397.960616785848 840.6401321946857 875.1366786242145 866.8018848425702 940.1064857742698 842.8888173875854 842.3992679889717 943.8037659206193 5757.721111592558 3533.3738574020313 1296.1955336118851 846.0116405228495 846.8284283225369 841.4332337313684 959.4276770595949 821.5763600874013)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.14971215984288477 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 38.328
Average program size in population (points): 39.327
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.408
Error (vector) diversity:			 0.412
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 21346650
--- Timings ---
Current time: 1481492932574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (vector_integer_subvec vector_integer_pushall in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dec float_frominteger integer_max vector_integer_flush integer_yankdup integer_yank vector_integer_dup_times float_frominteger vector_integer_dup_times float_frominteger float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_fromfloat vector_integer_pushall integer_rot integer_yank float_frominteger float_dec integer_max integer_yankdup integer_yank float_frominteger float_frominteger float_add)
Errors: [2.0 0.7999999999999998 3.0 5.4 2.2 0.8 0.4 3.4 7.2 4.0 33.8 16.2 25.6 2.0 209.0 9.0 12.2 20.6 6.200000000000003 7.0 8.0 50.8 50.80000000000001 55.200000000000045 249.2 35.6 30.0 0.4 2.200000000000003 1.2]
Total: 854.2000000000003
Mean: 28.473333
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1860035.9417853998
Median total errors in population: 2950.2
Error averages by case: (582.3773609954316 597.1324747149321 583.8828818653508 603.2624089035362 585.3369049232895 601.786307831236 602.1269971471501 617.7657394883142 603.2923250497976 603.9764398947972 612.7310311597105 603.8992406349305 596.9102382610116 718.3055155295053 2262.3607846751834 590.1467713503849 635.9182048939623 721.4161262823047 727.6426351660252 595.5876737028917 593.2841888595972 666.9747294739475 26327.493885649343 1811930.9115057644 1094.4147277000416 610.0235649414318 611.6657315453803 602.1288357772823 2951.3530288287066 601.8335244079663)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12255168517415527 0.40000000000000036 0.0 0.0 0.0 0.8000000000000007 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.19999999999999996)
Average genome size in population (length): 39.009
Average program size in population (points): 40.008
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.423
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 22516920
--- Timings ---
Current time: 1481492943432 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_mult integer_rot integer_min integer_rot float_frominteger float_add integer_dup vector_integer_dup_times)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31867.32635578088
Median total errors in population: 2916.3999999999996
Error averages by case: (651.817481348828 665.2902419156927 662.3364489113305 659.8237187511968 653.9793981060214 651.2070934713781 651.281333896988 665.411235342352 652.5825268593837 661.3489956861669 669.4561268917087 662.3527305143274 656.889216367645 754.0431328144421 1394.44392827249 658.9394518823615 707.5852286047773 685.0972005127132 729.939256517692 652.8993077731722 642.6590535785359 729.1918497193899 4358.041040929874 7519.735520537399 1057.8308152700595 665.8527532244406 665.1808937532365 651.2563149179208 779.4062014419987 651.4478579673977)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 8.51433251830791E-4 0.07677282398941537 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.08790331666506646 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 38.884
Average program size in population (points): 39.884
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.432
Error (vector) diversity:			 0.435
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 23683440
--- Timings ---
Current time: 1481492954873 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (integer_fromfloat in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot float_mod integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult integer_rot integer_min float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 25236.738192803346
Median total errors in population: 2899.3000000000006
Error averages by case: (631.8554922369167 644.9718870265602 632.2318233961976 639.5661002855231 633.46985467988 681.2624022811967 671.3499437653372 665.2873933778551 672.6456104120206 640.298267135544 649.7579194232802 640.3172940735741 646.7447321884708 729.9065809302537 916.101132406798 637.8253204294514 688.0505414663126 669.5956414362889 690.139942094924 662.872267484163 642.8743847986995 685.3696641395006 2911.3128609510063 3211.2829277284623 978.9822218960527 634.8908549470184 643.9262883456178 661.3259893353189 771.0048495078727 651.5180046232881)
Error minima by case: (0.0 0.20000000000000018 0.0 0.32727272727272627 0.20000000000000018 0.08366218546322624 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.08790331666506646 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 25.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.10929742682568167)
Average genome size in population (length): 38.865
Average program size in population (points): 39.864
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.4
Error (vector) diversity:			 0.407
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 24849390
--- Timings ---
Current time: 1481492965917 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup vector_integer_conj integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (vector_integer_stackdepth integer_dup_items in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult integer_min float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27767.953652657987
Median total errors in population: 2786.8
Error averages by case: (731.7044418418768 725.3390043810422 722.2561314156194 729.7051235938055 723.6482132494648 771.3034190235122 741.3658088584363 755.2488910839751 762.4908575657138 731.1483332702932 743.2351420969824 729.7009354438866 766.4752076278975 819.9816594745322 972.1550930521045 728.1153644292488 744.9818836121768 773.0096532328412 789.3164866184884 722.7982134164682 762.5477580542951 774.1801859873074 2848.341273155527 3164.5217232500318 1231.1856199062543 737.570035166952 735.9109872333294 741.2956190962909 846.8353906157679 741.5851969038862)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.08790331666506646 0.40000000000000036 0.0 0.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 26.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.7999999999999972 0.10929742682568167)
Average genome size in population (length): 39.457
Average program size in population (points): 40.456
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.396
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 26033100
--- Timings ---
Current time: 1481492976948 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (float_frominteger integer_fromfloat vector_integer_rest integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult integer_min integer_rot float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27706.235600174263
Median total errors in population: 2916.3999999999996
Error averages by case: (641.703447632996 634.7809343912845 632.1124989200792 640.0379034634336 633.6163703060116 731.289914484679 661.3234350472794 655.0140204700168 652.4695545998109 641.6205276154885 655.0017141060147 643.1716581975558 656.3792553474061 730.9245094346459 953.474778699397 638.2633565466685 651.9246699801353 664.1839346556516 718.8758655008711 632.8478149587996 652.6553475360133 687.8397784067579 5226.529557825224 3125.4203630782727 1196.7979275161363 658.3226661673856 647.2410915544999 641.3053212324669 739.6071592670452 661.50022323225)
Error minima by case: (0.0 0.18935824662338163 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.07941549819892657 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 26.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.10929742682568167)
Average genome size in population (length): 39.685
Average program size in population (points): 40.683
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.398
Error (vector) diversity:			 0.402
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 27223650
--- Timings ---
Current time: 1481492987854 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (integer_fromfloat integer_rot in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult integer_min float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 38721.8000670589
Median total errors in population: 2872.6000000000004
Error averages by case: (761.7027684696255 764.7801851723377 762.113983243248 772.5115384289065 763.8282451900182 911.2288402185645 831.2973570996646 1055.100197577877 1052.5980432183426 774.1666173495412 776.0246968085376 771.2930107439687 1056.0462794440457 1200.294926187482 1274.7040258412028 769.3643369404633 789.7471573366682 806.3869097563597 938.8883187715919 762.7800475640383 1062.5827983411507 818.7412604469243 9721.716223501915 4425.6264230677125 1028.2267857677402 772.0696848361815 773.815738552449 781.2811524348319 911.4592659897669 831.423248757848)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.07516333805159725 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.3939600668920775 2.8000000000000114 26.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 39.681
Average program size in population (points): 40.678
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.398
Error (vector) diversity:			 0.4
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 28414080
--- Timings ---
Current time: 1481492998863 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_dup})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_add vector_integer_replace float_dup)
Partial simplification: (vector_integer_replace in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot float_mod integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_mult integer_min integer_div float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44990.24407362649
Median total errors in population: 2719.3999999999996
Error averages by case: (741.7345526656318 744.7421171043713 742.1522159170092 750.5946234895013 743.5403552451642 891.3033054699872 871.3979905921111 835.0627655049101 822.6470724285934 752.72564034752 762.7486716261384 752.5573868286576 826.475787389264 877.3488083217429 1292.6231523125596 748.4576399587531 772.3321737087132 774.154380891839 871.4518293402854 752.9010959913065 902.5445054802888 792.284237055326 9739.053640901531 11946.56799156689 1280.7955879050908 756.9517863804115 757.3500139526432 771.3307396487387 844.9286765719604 871.4853290294764)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.09999999999999998 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.3939600668920775 2.8000000000000114 26.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.10807341827357114 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 40.153
Average program size in population (points): 41.153
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.423
Error (vector) diversity:			 0.426
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 29618670
--- Timings ---
Current time: 1481493009865 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (integer_fromfloat in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult integer_min integer_dup float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34360.21561761878
Median total errors in population: 2644.425693529426
Error averages by case: (691.6987243739799 694.8884589844977 692.2690865278679 700.1578446478296 693.6704880630493 801.3827781857789 771.4727567475801 724.5871886064001 722.5156658707313 701.8042279286695 710.0185825083597 700.2640803180376 726.6890582932296 822.780597345036 1176.2369127354634 698.4013950528816 728.885907311761 741.6113496697518 805.5580698854577 692.6870493385112 782.8570033737676 742.4062295389296 8632.173698565379 4377.926668071938 1119.769632252936 705.2290119384071 704.7842723915276 731.3227173791674 794.6200132259934 771.5461484859021)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.09999999999999998 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 26.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.10807341827357114 1.2000000000000028 0.05755321584639339)
Average genome size in population (length): 39.845
Average program size in population (points): 40.845
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.39
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 30814020
--- Timings ---
Current time: 1481493021158 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (integer_min in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger integer_mult float_dup integer_min float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43799.95232036574
Median total errors in population: 2721.2000000000003
Error averages by case: (711.9104525508748 715.3132090511031 712.2009792583189 722.8532210866 714.2089252509721 841.2746401394098 791.4590051059807 774.7326793348672 772.5287213989877 724.905964613308 726.2918746343889 723.0654473386779 776.7540554437205 889.1068124594668 1488.5132902301348 720.9438887894612 748.1108618890979 750.2049767914435 874.8059445465053 722.715131113451 783.0203545901634 766.4281863730931 14844.809996219092 6625.780199312153 1058.6328683436607 723.1304354440805 725.2745282220679 741.2080085335086 838.2375067057056 791.5301555956295)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.11439525852354915 0.09391564547484021 0.014960136738481067 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.10807341827357114 1.6903937106919926 0.16017028665036603)
Average genome size in population (length): 40.072
Average program size in population (points): 41.071
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.427
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 32016180
--- Timings ---
Current time: 1481493032153 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_dup})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_add vector_integer_replace float_dup)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger integer_mult integer_min float_frominteger float_add vector_integer_replace)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49351.630170183875
Median total errors in population: 2638.1999999999994
Error averages by case: (801.8902742959343 794.9075839829002 782.2114990778852 793.0095366754631 784.1186801540949 951.0622954584101 881.1420751643844 854.4880419900659 842.4970592696109 795.3806706986747 797.1683499804087 790.9127669345007 857.5340635004121 932.084207327564 1499.7961962848167 790.3327783182145 823.7529314301323 829.058265289111 924.4187661795129 802.7208938832231 923.1997408243482 835.5790155140933 13535.928785423712 11442.268022492588 1105.5576830955501 804.0238309580018 793.8869395043303 811.0926375035533 900.3253432172675 871.2812357550754)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08284576225821372 0.041470984807896516 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.3939600668920775 1.9376658640392748 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.10807341827357114 1.2000000000000028 0.04147098480789646)
Average genome size in population (length): 39.969
Average program size in population (points): 40.966
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.434
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 33215250
--- Timings ---
Current time: 1481493043229 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot integer_mult float_dup integer_rot integer_min integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add integer_dup vector_integer_replace vector_integer_dup_times)
Partial simplification: (vector_integer_replace integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min integer_mult integer_min float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 98.20000000000005 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 540.2
Mean: 18.006666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 214547.08898119972
Median total errors in population: 2639.2513870588514
Error averages by case: (771.866825393682 774.9464061409158 772.0888856973016 785.2280955788814 774.4303324089276 871.1242625773458 831.2374160864397 894.4103610882415 892.5091236227984 789.1325713436403 780.866754550053 782.483000922659 896.8897940206472 968.853235077074 1751.81669264304 782.0819265758311 792.2813546467462 812.543454341802 980.0403102288994 772.9307932606766 932.8935510294351 825.470774815831 19342.468850897156 170926.72126651058 899.7054433375625 781.9010292967171 782.1660190267378 781.1791102318867 965.4761588601224 831.3451809831491)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08284576225821372 0.041470984807896516 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.09999999999999964 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.3939600668920775 3.1999999999999886 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.08224261632601304)
Average genome size in population (length): 40.153
Average program size in population (points): 41.152
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.447
Error (vector) diversity:			 0.453
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 34419840
--- Timings ---
Current time: 1481493054406 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (integer_dup_items integer_rot float_yank in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times vector_integer_subvec float_frominteger float_add float_dec)
Errors: [1.0 5.2 0.0 2.5999999999999996 4.2 1.2 1.4 4.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 210.0 8.0 16.2 13.399999999999999 5.200000000000003 1.0 3.0 51.8 49.80000000000001 56.200000000000045 26.200000000000003 2.5999999999999996 5.0 0.4 1.2000000000000028 1.8]
Total: 500.0
Mean: 16.666666
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 35811.03499953781
Median total errors in population: 2719.3999999999996
Error averages by case: (661.9062619336993 685.1252669357796 662.1498212822971 681.5799930950467 664.031264523255 781.3200865402757 721.4152289555323 714.6662648975123 732.5398474180275 674.5154358177268 670.402854431985 670.0085364330116 717.0286074974742 852.3646460044147 1244.3868695163474 669.5949459682973 682.7214749869784 712.5896233725034 804.9369585142354 672.86021022714 753.074026337261 715.5314340047541 9339.70830772356 6001.241904264437 808.1251153176347 680.1705430238292 672.5098771182511 691.3048430754857 761.7101960474638 711.5145542736717)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.20000000000000018 0.032293673094284825 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.09999999999999964 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.7999999999999972 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.09999999999999998 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 39.898
Average program size in population (points): 40.898
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.445
Error (vector) diversity:			 0.452
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 35616780
--- Timings ---
Current time: 1481493065540 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times float_frominteger float_add float_dec)
Errors: [1.0 5.2 0.0 2.5999999999999996 4.2 1.2 1.4 4.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 210.0 8.0 16.2 13.399999999999999 5.200000000000003 1.0 3.0 51.8 49.80000000000001 56.200000000000045 26.200000000000003 2.5999999999999996 5.0 0.4 1.2000000000000028 1.8]
Total: 500.0
Mean: 16.666666
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 40584.01890442557
Median total errors in population: 2697.2000000000003
Error averages by case: (811.7799802545713 814.4872617631802 811.8813820619077 820.6111273772983 813.694419432687 881.1897213080131 851.2819786082571 864.231926486857 882.4038162606661 822.2300549476752 819.2664753943379 818.0971904183417 886.3071377572544 953.9918017714095 1411.5837106656954 818.8758229358169 833.5024751239249 859.9776771255251 933.2379182270846 812.6197823030233 892.8775842018335 863.7692010151864 10766.11459031099 5399.51426652916 929.5229316038497 818.1328401301644 820.7265756385941 821.1880528357983 899.5330364366713 851.388165499907)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.11113026188467678 0.041470984807896516 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.164495672538008 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.1999999999999886 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 39.34
Average program size in population (points): 40.336
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.416
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 36796980
--- Timings ---
Current time: 1481493076695 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_yank vector_integer_remove float_frominteger float_add float_dec)
Errors: [1.0 5.2 0.0 2.5999999999999996 4.2 1.2 1.4 4.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 210.0 8.0 16.2 13.399999999999999 5.200000000000003 1.0 3.0 51.8 49.80000000000001 56.200000000000045 26.200000000000003 2.5999999999999996 5.0 0.4 1.2000000000000028 1.8]
Total: 500.0
Mean: 16.666666
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 41291.166571983544
Median total errors in population: 2629.51725343304
Error averages by case: (791.8554415567743 794.6501375085642 791.9592121524548 801.0391882538157 793.8806490885793 831.1730161232741 831.2138963453533 834.2841850883275 822.4068939087031 803.437629134367 809.7093604787334 809.1036254739112 835.9718624025254 971.6260984204318 1453.191480411598 799.4155911343329 821.2559779092818 864.079924087825 940.3694587895783 792.5885618941768 842.5528228111494 855.6939005198318 10851.299839624862 6432.76197787495 957.5506494237778 809.412866230847 811.4892930096981 811.1194850274493 904.7589233362949 821.3146239621764)
Error minima by case: (0.0 0.050460182731407066 0.0 0.40000000000000036 0.11113026188467678 0.2 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.07516333805159725 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 26.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 39.232
Average program size in population (points): 40.227
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.423
Error (vector) diversity:			 0.427
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 37973940
--- Timings ---
Current time: 1481493087653 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_dup_times})
Best program: (float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add float_dec integer_div vector_integer_dup_times)
Partial simplification: (vector_integer_stackdepth integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_yank float_frominteger float_add float_dec)
Errors: [1.0 5.2 0.0 2.5999999999999996 4.2 1.2 1.4 4.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 210.0 8.0 16.2 13.399999999999999 5.200000000000003 1.0 3.0 51.8 49.80000000000001 56.200000000000045 26.200000000000003 2.5999999999999996 5.0 0.4 1.2000000000000028 1.8]
Total: 500.0
Mean: 16.666666
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 43495.105330261
Median total errors in population: 2643.7
Error averages by case: (611.7929048702395 614.3472992089537 611.9465781903034 621.9708276517827 613.9660266078856 641.187195884981 631.1830334702923 674.1372159601569 652.4118550642108 623.9262531006394 619.9638322839947 619.6618468633327 666.3221339285111 814.7419852692565 1391.5379769283304 620.1027999320602 631.9595416728243 673.5261625983196 782.7664579076496 602.6660174992871 682.724446244771 665.5618562171071 14404.942678285855 10099.54378798555 756.9745787717043 619.2155387116876 621.9803341002807 611.0895542197784 691.6322499399557 621.3223608912975)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.08366218546322624 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.07516333805159725 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 53.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.16017028665036603)
Average genome size in population (length): 40.112
Average program size in population (points): 41.109
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.462
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 39177300
--- Timings ---
Current time: 1481493098772 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_subvec vector_integer_pushall vector_integer_rest integer_fromfloat float_inc vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add)
Partial simplification: (integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 497.20000000000005
Mean: 16.573334
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 38710.89618048927
Median total errors in population: 2624.6000000000004
Error averages by case: (661.7639997838622 664.292221258988 651.8804135716022 662.0171708801963 663.7773322012415 671.1474390020988 671.1253491974172 734.2593799728096 722.5544186910854 663.4406149396275 660.3059486427899 659.0490038355946 716.0481366504799 800.4466371844212 1354.3775486650802 669.1700581668505 678.322942622938 690.7546339012595 797.6314602343645 662.6530454027456 722.4476689665465 702.6608026202016 13265.599925469534 5387.995671237318 805.4353407126678 658.9374476635426 661.345047800611 651.0907295214159 729.0939529112097 671.2718387808343)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.11113026188467678 0.08366218546322618 0.11439525852354915 0.09391564547484021 0.04609774565669533 0.0 0.1999999999999993 0.07516333805159725 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 31.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.11439525852354915 1.2000000000000028 0.16017028665036603)
Average genome size in population (length): 39.806
Average program size in population (points): 40.805
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.435
Error (vector) diversity:			 0.442
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 40371480
--- Timings ---
Current time: 1481493110265 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_subvec vector_integer_pushall vector_integer_rest integer_fromfloat float_inc vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add)
Partial simplification: (vector_integer_pushall vector_integer_reverse in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot float_mod integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 497.20000000000005
Mean: 16.573334
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 51489.72089439613
Median total errors in population: 2691.4000000000005
Error averages by case: (851.8347254872185 864.4120136136883 851.7845148578897 860.792687694154 853.9080611877417 841.1543675490815 851.0949086060997 874.3645903851309 892.4302352751309 863.6392099079158 859.4876751747383 860.1814349185094 896.3633050813607 1042.055484007211 1720.115089448891 859.4446606747365 870.6375796712302 888.3633866045586 1026.092873272558 882.5353531092613 882.5387385544957 908.1195596394257 12569.048776362106 13265.401052409708 978.3832049106646 858.3013860311569 862.0693793967348 861.0434028717024 952.8622890219158 841.2609486707814)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.11113026188467678 0.08366218546322618 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 50.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 39.593
Average program size in population (points): 40.593
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.466
Error (vector) diversity:			 0.471
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 41559270
--- Timings ---
Current time: 1481493121995 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_subvec vector_integer_pushall vector_integer_rest integer_fromfloat float_inc vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items vector_integer_reverse float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add)
Partial simplification: (vector_integer_reverse in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_yank float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 497.20000000000005
Mean: 16.573334
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 38151.39840607779
Median total errors in population: 2647.5
Error averages by case: (721.8401505957655 734.3905325240975 721.903384753718 729.0865461265098 723.9234980147838 751.1918397044549 741.1690213514634 754.3682380809622 762.4642537845449 731.3485605461359 729.4403592458331 728.2144670041447 756.675796942336 852.1134569376691 1640.7739615387243 728.7396471536548 740.0262266000655 759.2433997113369 841.0374280459197 822.3727581066114 752.6492143711531 782.8223721849372 8682.397959376145 7386.14376073069 832.8230519619923 729.3836118721035 730.6936757190587 731.1323494366833 811.6881508923709 741.3407327640068)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.11113026188467678 0.08366218546322618 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 53.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 1.2000000000000028 0.19999999999999996)
Average genome size in population (length): 40.276
Average program size in population (points): 41.275
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.44
Error (vector) diversity:			 0.445
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 42767550
--- Timings ---
Current time: 1481493133484 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_mod} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_reverse} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_set} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_yank} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_subvec vector_integer_pushall vector_integer_rest integer_fromfloat float_inc vector_integer_replace float_mod vector_integer_stackdepth integer_dup_items vector_integer_reverse float_max float_frominteger integer_fromfloat vector_integer_rest integer_fromfloat vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_rot float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_rot vector_integer_set float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger integer_dup_times integer_yank vector_integer_remove vector_integer_subvec float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_rot integer_rot integer_fromfloat integer_yank float_frominteger integer_yank float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 7.2 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 2.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.6 2.200000000000003 0.8]
Total: 497.20000000000005
Mean: 16.573334
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 41838.31849083769
Median total errors in population: 2589.0
Error averages by case: (691.9063947198408 704.4891243403831 691.9282052915548 700.7785528403438 693.737185227826 701.1290788420775 701.1550549940476 713.7452625612049 712.4955403511456 701.9343031587825 699.4960737140259 699.9054889473615 706.5358927422595 876.7501604647744 1500.5407303184127 699.1418708067918 717.6481913763339 735.6222154932914 839.6232919067725 732.3584397279396 702.9189555888739 740.5859807595403 11598.233206177358 9129.497271773309 859.5087873234521 698.874823626971 701.62780317568 701.0830954123677 783.793680961002 701.2738282139909)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.11439525852354915 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 7.7999999999999545 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 39.948
Average program size in population (points): 40.946
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.436
Error (vector) diversity:			 0.438
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 43965990
--- Timings ---
Current time: 1481493144627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_mod in1 integer_fromfloat float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger vector_integer_dup_times float_frominteger vector_integer_pop float_add in1)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 35644.854599199774
Median total errors in population: 2669.7999999999993
Error averages by case: (721.8932022148391 734.3423813458869 721.8154007280082 729.7070766110279 723.5000634218973 731.0970322116285 731.1201579183298 723.6116552471844 722.2861326786086 731.8418149005523 728.2635434844667 728.428234000298 726.1027289019457 888.407776609117 1510.332565955003 729.4817079520565 739.9425594390756 763.3609377487936 856.8202918081771 782.394598787043 732.6287650817862 773.3090507125196 9154.939977640735 4715.4679702802005 829.9228354982995 728.2457995929923 730.4593350733845 731.0487518655369 792.8084943049444 731.2737571854929)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11439525852354915 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 37.799999999999955 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 1.2000000000000028 0.04147098480789646)
Average genome size in population (length): 39.789
Average program size in population (points): 40.789
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.427
Error (vector) diversity:			 0.43
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 45159660
--- Timings ---
Current time: 1481493155983 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_mod in1 integer_fromfloat float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 vector_integer_take float_yank in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_rot float_frominteger float_dup float_stackdepth integer_div vector_integer_dup_times float_frominteger float_add integer_flush)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32801.2171030432
Median total errors in population: 2624.6000000000004
Error averages by case: (751.8512405522077 783.8761742196735 751.7646361960666 758.0628946631981 753.1333217534903 761.0765563682742 761.1515018126178 773.3540008746714 772.3061575206906 759.3806227438416 758.3132753688473 757.0682018422017 776.564591570254 910.8356068269703 1251.6232253199523 758.7555714338848 771.0328142911794 790.0963277906242 857.3124484095799 842.3055029593718 772.8080006494695 799.3994188196423 6506.541129890048 3894.842506586797 874.0465489173042 758.8896097075313 759.9261870881197 751.0755674168377 822.5621673587706 761.2612940911204)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11439525852354915 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 50.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 40.002
Average program size in population (points): 41.002
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.432
Error (vector) diversity:			 0.434
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 46359720
--- Timings ---
Current time: 1481493167384 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_stackdepth integer_div vector_integer_dup_times float_frominteger vector_integer_conj integer_dup float_add in1)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 34720.748658730125
Median total errors in population: 2606.6000000000004
Error averages by case: (721.9139076815421 733.946896275761 731.8504288929461 728.5955839896449 723.4158965956027 731.0956908186673 731.1124994532508 743.5156655407727 772.3292731070788 730.7805395624871 728.7108411728098 727.909565981014 756.6437341579871 848.8033470730082 1491.590340291589 729.2176661002351 739.9529682991475 747.6398462779082 835.1932897787614 802.2812002180357 752.8449728159859 773.3046639480626 8665.05940704388 4182.402328873889 858.0735057429209 729.0488353552786 730.7380086556707 751.0650961106958 790.4777202446496 731.2349386708945)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322624 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.18111135433392533 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 51.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.046097745656695444)
Average genome size in population (length): 40.083
Average program size in population (points): 41.08
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.435
Error (vector) diversity:			 0.437
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 47562210
--- Timings ---
Current time: 1481493179536 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_stackdepth integer_div vector_integer_dup_times float_frominteger float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 51450.73246348278
Median total errors in population: 2549.1000000000004
Error averages by case: (781.8880812349892 794.1439342897952 781.8456485373606 785.9136037688797 782.9286298311642 811.0331316632104 801.0308631961988 813.3615666312377 812.3401826392294 786.9367376205475 788.3836220689055 786.3030005527584 796.7488891954711 892.7885050284672 1313.6249733500065 787.4422477817194 801.0860917577892 818.8864066916328 841.1757920999094 822.1529101008342 792.8202251911617 837.4489783830182 2049.4587473272254 26237.08747087432 892.616078637247 788.7433410813306 789.1773984043625 791.000277921577 881.1897398016756 791.1753878204676)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322624 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 51.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.04147098480789646)
Average genome size in population (length): 40.059
Average program size in population (points): 41.057
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.415
Error (vector) diversity:			 0.417
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 48763980
--- Timings ---
Current time: 1481493190836 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_stackdepth integer_div vector_integer_dup_times float_frominteger vector_integer_conj integer_dup integer_yankdup float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 30862.393731469503
Median total errors in population: 2456.3
Error averages by case: (691.8812635315062 704.1026842894643 691.9994851234285 696.1235564427516 693.0866276061518 701.0392321613182 711.058735880676 723.5401007869689 742.2675068076724 697.2101981928924 698.8991582320606 696.0939447229913 736.2118123015907 782.6617464539643 921.596683310737 697.6733701966816 710.8703514553688 726.1021328208059 740.4162052924443 732.2486018874083 722.7727116770715 734.1431713014517 1503.7951813436614 9060.452848307748 772.4951313477707 698.7113251298937 698.5996059015545 711.0261470311525 764.067829388036 701.2463825442558)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.18999249660044543 0.11439525852354915 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 51.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.046097745656695444)
Average genome size in population (length): 39.86
Average program size in population (points): 40.86
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.42
Error (vector) diversity:			 0.422
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 49959780
--- Timings ---
Current time: 1481493202180 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_pop} {:close 0, :instruction float_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in1})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot float_stackdepth integer_div integer_rot vector_integer_dup_times float_frominteger vector_integer_conj vector_integer_pop vector_integer_conj integer_dup float_frominteger integer_yankdup vector_integer_occurrencesof float_stackdepth vector_integer_pop float_add integer_flush in1)
Partial simplification: (in1 in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_stackdepth integer_div vector_integer_dup_times float_frominteger float_stackdepth float_add)
Errors: [2.0 4.2 1.0 1.5999999999999996 3.2 0.2 0.4 3.4 1.8 4.0 5.199999999999999 2.1999999999999993 9.6 2.0 209.0 7.0 15.2 12.399999999999999 6.200000000000003 2.0 8.0 50.8 50.80000000000001 55.200000000000045 27.200000000000003 3.5999999999999996 6.0 0.4 2.200000000000003 0.8]
Total: 497.6
Mean: 16.586666
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 27100.67886738295
Median total errors in population: 2460.0
Error averages by case: (641.8431899609454 653.8817882364662 642.0739947321047 656.1198236042064 643.2150039299421 641.042692252235 631.0995449341226 633.6491434809311 642.4766901090594 657.5019835920576 659.3566896374915 656.8740230986142 656.269180264372 737.0120355343569 922.9536049746835 647.2498184845456 672.8782206332284 675.1816566218417 702.2602468332997 692.2540162077825 642.8042251542388 686.7762833328909 1708.2906466364973 6532.102235023459 760.5932733018235 649.7671109018384 659.4263257607461 631.0750790679696 733.4534847910887 631.1968562902426)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11439525852354915 0.14030230586813985 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 32.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11439525852354915 0.7999999999999972 0.046097745656695444)
Average genome size in population (length): 39.971
Average program size in population (points): 40.97
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.464
Error (vector) diversity:			 0.465
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 51158910
--- Timings ---
Current time: 1481493213626 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (vector_integer_swap in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_stackdepth integer_div float_dec float_frominteger vector_integer_replace float_max integer_div integer_dup float_add float_dec)
Errors: [2.0 5.2 3.0 3.5999999999999996 5.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 184.0 8.0 17.2 13.399999999999999 4.200000000000003 0.0 3.0 39.8 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 470.8
Mean: 15.693334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30548.84762230823
Median total errors in population: 2488.0811267994313
Error averages by case: (761.8294657878581 783.9555744809076 761.9832940668268 765.796481103546 762.94784691486 791.1009129707975 781.1651133369483 803.4975695791936 812.263832259808 769.6199543581827 768.7725400774908 766.2032443746895 806.044829725362 836.8004023444951 986.778882179549 766.7827978435715 788.1539439670479 796.0026668954844 808.4494159688733 792.1858793869429 802.7982255757005 804.7739889852933 1923.161561729717 6334.207962232704 843.3498561929435 768.548885743088 768.2930731736004 781.1706065910192 830.9626618263408 781.2461526354303)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.18733927752382584 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 50.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.786
Average program size in population (points): 40.784
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.466
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 52352490
--- Timings ---
Current time: 1481493225559 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_min float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_stackdepth integer_div float_dec float_frominteger float_max float_add float_dec)
Errors: [2.0 5.2 3.0 3.5999999999999996 5.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 184.0 8.0 17.2 13.399999999999999 4.200000000000003 0.0 3.0 39.8 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 470.8
Mean: 15.693334
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 28120.182336881568
Median total errors in population: 2485.6599587879796
Error averages by case: (811.8324906747634 813.7749176586866 811.9637482060191 815.5817402775294 812.9255205701013 811.1491279313028 811.1770444222531 823.405354964064 822.3573877539276 816.855151337638 820.453903209061 815.9484639535539 826.0284962131328 914.8387185136835 1075.84131717644 817.3630966198505 838.9178707655539 846.5181484586107 865.3721397946741 822.1116045893189 822.8177740542443 854.1284859454172 2011.205992159778 2562.9653021766844 935.0133572728188 819.5844745127603 818.5323242865292 811.1847756828673 879.0806905288013 811.252917171514)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 51.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11439525852354915 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.486
Average program size in population (points): 40.481
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.432
Error (vector) diversity:			 0.433
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 53537070
--- Timings ---
Current time: 1481493237279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (vector_integer_rest integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_rot float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger float_max integer_dec integer_dup float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30952.299736506946
Median total errors in population: 2470.0000000000005
Error averages by case: (851.7786839826808 853.4866559843025 851.8236952802821 855.5168384918107 852.7338156216866 851.0935058163345 841.1373177095766 893.4037253624217 882.2438963433668 857.1254718179123 859.0275256307477 856.0784623171635 886.150509273444 965.3935737122422 1170.5319534562286 857.0288436527651 871.1316662863868 887.5387776651481 914.1161038063636 852.1087992688268 882.8493613563555 895.9158272694427 2409.11177428967 3781.096165271929 948.0418166631458 858.0239198089838 858.4224300132427 841.1431025879924 927.0117795888965 841.2337381776437)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.04031208714117884 0.0588799919401328 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 51.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.226
Average program size in population (points): 40.226
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.424
Error (vector) diversity:			 0.427
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 54713850
--- Timings ---
Current time: 1481493249043 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (float_max float_frominteger in1 vector_integer_rest vector_integer_replace float_yank in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger vector_integer_rest float_max integer_div integer_rot vector_integer_conj float_frominteger float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 24614.68809553865
Median total errors in population: 2471.4000000000005
Error averages by case: (691.8135124739526 703.8398199821386 691.7248470592365 695.4548849370957 692.9358606536118 711.1789241572602 701.2061310312845 733.1372175514946 732.3297685636658 696.5749571195119 699.0722349772278 695.2478515800628 735.5767129012211 783.8769431450319 942.9396742855132 697.422390901725 710.4830058954993 722.1067382138714 743.2523063548523 732.042213626631 752.5951286752163 736.6681578528763 1753.831617105342 2526.404804279326 785.6412952528631 698.2339133526666 698.2886575854412 691.2003167387124 758.4377693688671 701.1704399164655)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.04031208714117884 0.0588799919401328 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 30.799999999999955 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 39.875
Average program size in population (points): 40.874
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.415
Error (vector) diversity:			 0.416
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 55910100
--- Timings ---
Current time: 1481493260713 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (in1 integer_rot float_yank vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_rot float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger float_max vector_integer_conj float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26165.175243631522
Median total errors in population: 2416.000000000001
Error averages by case: (751.6720993909316 763.5499631018066 751.6481315394441 754.8514939259303 752.6200780658021 771.0302249240609 771.0512343481862 783.1707843903444 772.2166977343774 756.164295971775 758.6892226984527 755.2516003871353 765.5767318158543 803.7197113620169 977.685267175186 756.2668673243603 771.1008539806376 775.1610528587594 785.8779199035592 762.012916035294 782.5573471953405 794.8992281276601 1362.6809097679195 2967.6224676494207 849.4746403715536 758.3570390001846 757.9397099541371 761.0627897420047 820.1323068787838 771.1316580106406)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.0588799919401328 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 33.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.131
Average program size in population (points): 41.131
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.427
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 57114030
--- Timings ---
Current time: 1481493272212 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_times integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (float_frominteger in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max float_dec float_frominteger vector_integer_rest float_max float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26842.644213490104
Median total errors in population: 2416.000000000001
Error averages by case: (741.6307952251767 743.7046141610923 741.6782617358914 745.1709482936915 742.7218955578403 751.1147938268579 741.0892602068113 783.1928263731392 792.1137448977124 746.8998431492914 748.3126034250793 745.1935815136611 795.2014985419606 825.2276326350741 1234.000745269628 746.6815939421939 760.4177461025012 772.3048866913688 790.1724760260248 771.9396952728224 782.5976920765486 794.3154464360467 1999.8277726200843 2912.0054658139798 827.0256294391994 747.6924291944989 747.7082736397932 741.079853742538 830.488361251001 741.1338464286175)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.0588799919401328 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 52.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 39.991
Average program size in population (points): 40.99
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.446
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 58313760
--- Timings ---
Current time: 1481493283855 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger float_max integer_dec float_frominteger float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34565.40808987514
Median total errors in population: 2394.5
Error averages by case: (1031.6789350245715 1033.2159584761923 1021.6173078564099 1024.7697707127747 1022.6096897546032 1031.064335093512 1051.0784589898922 1053.4514618493079 1062.0635916446647 1026.0374314308006 1027.5558042838718 1024.5732832843066 1065.090595152113 1074.7521524198453 1437.2203544141753 1025.8956956002505 1039.0711676024794 1054.059160825633 1060.6075505832928 1091.9812707974952 1062.3468896581237 1065.590923194388 2276.4846220059294 2609.327719030103 1085.1215358329757 1026.8920146142902 1026.8827875539735 1041.0468819704352 1072.193843087914 1041.1268971308264)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.0588799919401328 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 52.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.184
Average program size in population (points): 41.183
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.431
Error (vector) diversity:			 0.432
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 59519280
--- Timings ---
Current time: 1481493295763 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take vector_integer_stackdepth integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (integer_dup_items in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger integer_max float_max integer_dup float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 28063.098372666915
Median total errors in population: 2360.2
Error averages by case: (811.6758141064062 813.337998003899 811.6743070645479 815.2467250143524 812.5445875203519 821.005302199195 811.0708035254853 813.6566951532021 822.175309753702 816.5741903010071 818.3755262438257 815.6717282065077 825.8074916274744 871.6073145573224 1091.1211065004131 815.8332108912588 830.3511947455881 835.374146539999 859.4346919867536 822.0785205157982 822.5163795902316 853.9456114516395 2221.8051013133613 2389.540346435191 917.2613565959479 817.9120778123889 818.0248198380034 811.0842590090988 865.3186521311223 811.0731040328287)
Error minima by case: (0.0 0.146356379136388 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.694
Average program size in population (points): 41.694
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.433
Error (vector) diversity:			 0.435
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 60740100
--- Timings ---
Current time: 1481493307615 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dec})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dec)
Partial simplification: (vector_integer_swap vector_integer_rest in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger integer_max float_max float_add float_dec)
Errors: [2.0 4.2 3.0 3.5999999999999996 4.2 1.2 1.4 4.4 5.2 6.0 7.199999999999999 0.1999999999999993 7.6 0.0 50.0 6.0 17.2 7.399999999999999 4.200000000000003 0.0 1.0 7.799999999999997 48.80000000000001 57.200000000000045 25.200000000000003 10.4 4.0 1.4 0.20000000000000284 1.8]
Total: 292.8
Mean: 9.76
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27080.33146726542
Median total errors in population: 2384.5776394380273
Error averages by case: (741.6445256264551 733.426462619376 731.7725026121518 735.1874623472085 732.660283982023 740.9469984139761 731.0418567386279 723.4801808274598 741.8631295108097 737.2649391465121 738.524871989024 735.6680320360011 755.6330059225668 794.4013137619319 1060.697413766537 736.0016748925796 749.575100927616 765.173200025286 779.1103995269241 772.0425806468359 752.473179690165 775.9798062506579 2100.6736372938526 3640.487177370939 847.7716659869382 738.024390689665 738.3875049196706 731.0068838942785 788.3853326070708 731.0259532422805)
Error minima by case: (0.0 0.146356379136388 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.3514201892101356 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 3.8000000000000114 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 41.1
Average program size in population (points): 42.098
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.448
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 61973100
--- Timings ---
Current time: 1481493319243 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (in1 integer_rot float_yank vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div vector_integer_reverse float_dec float_frominteger integer_max float_max vector_integer_conj float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29253.438612667826
Median total errors in population: 2399.0891428226896
Error averages by case: (841.6774386648283 843.1168803306159 841.6802927674483 845.1313485922043 842.3820661412241 870.9731475499883 851.0837299015145 843.6890136164035 871.7989053768272 846.0042748375461 847.7117932759259 844.6991968637699 894.6660798434958 914.8652069229278 1540.11977627076 845.3929875699017 858.8594766627053 879.7839053490183 885.9391717680397 862.0416465045748 892.290162186334 882.8240856584737 1687.0535002973402 2699.1174523876275 920.4088546194866 847.4455571496159 847.6645864768884 851.012198145289 902.9564901424258 851.0493867946368)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 6.7999999999999545 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.785
Average program size in population (points): 41.783
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.429
Error (vector) diversity:			 0.432
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 63196650
--- Timings ---
Current time: 1481493330972 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (in1 integer_min vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max float_dec float_frominteger float_max float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26609.495605576703
Median total errors in population: 2412.150785115041
Error averages by case: (791.6042254219964 803.3140479196628 791.5906478803618 794.9026683566901 792.5293312829856 810.9643803903703 801.0146117527506 803.5311973730585 811.9315079329215 796.2195538583273 797.6082127431937 794.4424491357406 804.3106515583812 840.9582462166915 1046.8288074946558 795.7810847822924 807.2356122595634 811.6849337885114 825.2647872740484 811.8471920645239 802.2758444619644 836.8230151487737 1295.2894701883074 2452.855717188872 848.4652293740202 796.7005432271673 796.7119428232269 800.9487786699724 844.8167601142505 801.0441548934202)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.05364362086361174 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.15740772465490238 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.343
Average program size in population (points): 41.343
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.454
Error (vector) diversity:			 0.456
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 64406940
--- Timings ---
Current time: 1481493342743 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (float_frominteger in1 integer_rot vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger float_max float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31246.250343997657
Median total errors in population: 2397.6000000000004
Error averages by case: (771.5566909504786 773.4223861173087 771.529733303066 775.0798918726944 772.7411147863912 810.998041874851 791.0943046080168 793.3296361763606 801.795660103392 777.334754234223 778.2760258455954 775.1213675463969 794.1320144261941 883.9819967683691 1141.9666553265529 775.977813860398 788.8514784275188 806.086214570957 825.028682521342 821.9105983040859 792.2439746621656 827.5080041555262 1500.9599253234865 6997.478315405987 852.7307445331669 776.4317826495212 777.0805377965944 801.0387714797316 899.5262459545231 791.0369804127689)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.05364362086361174 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.723
Average program size in population (points): 41.721
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.443
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 65628630
--- Timings ---
Current time: 1481493354666 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (integer_min in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_rot float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger integer_max float_max float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 22927.931365923818
Median total errors in population: 2329.4269609908733
Error averages by case: (681.5356170199681 683.1540022802378 681.5710029643428 685.0664221285095 682.4776760620881 690.8635504742334 680.9220858373654 683.6882151982772 691.749560299252 686.6614989368304 687.4638361221192 684.4305965056053 694.1392047220443 722.5384198636799 886.2577308973176 686.0921665007891 697.5972080340978 698.7778240776777 709.8239352924547 701.9223314128863 691.9004251321318 725.3069039246991 1082.383990263815 2209.598564993492 734.4370231915192 686.258443004378 686.4094562829642 680.9735611855093 732.969934451919 680.9601788636061)
Error minima by case: (0.0 0.11113026188467678 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.05364362086361174 0.12034057330073211 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 26.19999999999999 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.784
Average program size in population (points): 41.782
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.423
Error (vector) diversity:			 0.425
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 66852150
--- Timings ---
Current time: 1481493366635 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (float_max vector_integer_rest float_dup_items integer_min in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger integer_max float_max integer_div float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 23838.960007984617
Median total errors in population: 2338.2000000000007
Error averages by case: (701.5165447154706 693.0590405072945 681.5805269935043 684.7376281946839 692.3754847072948 710.9553950262525 701.0145706910804 693.4603033641167 711.7205601769947 686.3322267547851 686.920642280052 684.33956058171 713.9543726067361 718.1497860409141 945.7905365202008 695.6587625727976 697.111935882096 719.4634798891553 710.6353656850193 711.958286798238 711.9362005964847 732.2309781803472 1131.2018227153478 2766.2520463084866 739.7216420976324 686.0522479356389 686.2422204340526 700.9979590231808 742.5770142283127 701.0128664767412)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 24.80000000000001 52.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.756
Average program size in population (points): 41.755
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.46
Error (vector) diversity:			 0.462
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 68074830
--- Timings ---
Current time: 1481493378264 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (in1 integer_dup_items vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div float_dec float_frominteger float_max vector_integer_conj float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 107808.64830180527
Median total errors in population: 2338.600000000001
Error averages by case: (811.4781832305779 813.1573471517845 811.5116905490753 814.6725502842762 812.2127017459799 810.9417565679678 810.9492875561037 823.081644668206 821.6386976198013 816.2262902377593 817.6449222994448 814.0851458051081 823.8144572519799 845.536566111971 995.9522849740343 815.4583389908058 827.4898466763038 829.5673109665695 834.907438487486 811.7626737439443 821.872769358209 853.1321881264473 1069.2902769527077 83417.10845873533 867.0225394513789 816.2270980898139 816.267911358303 810.9683590673922 963.7263220162185 810.9432437307139)
Error minima by case: (0.0 0.20000000000000018 0.0 0.316337814536773 0.04031208714117884 0.08366218546322618 0.11633781453677378 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 26.80000000000001 54.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.027721798251973073)
Average genome size in population (length): 40.227
Average program size in population (points): 41.226
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.437
Error (vector) diversity:			 0.437
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 69281640
--- Timings ---
Current time: 1481493390370 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (float_max in1 vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max float_dec float_frominteger float_max float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 23089.23541728664
Median total errors in population: 2325.8540635435743
Error averages by case: (671.4742557013406 672.8352334759048 671.4033064135134 674.7486579220902 672.2673437263328 680.9499583547442 680.9497447065423 683.4742453653548 691.6241432866697 676.0688072452275 677.1584146617042 674.404062519625 693.9133514310291 705.0703712351494 915.2556747686538 675.4304817001682 686.2260841987979 687.849183934175 699.6580662927365 671.8094620141899 691.8440654445614 714.9573523560076 1235.5580044604837 2419.8936923331403 723.271469463656 676.0185638391818 676.3923260976596 680.9781483921014 726.779049485688 680.9718964602187)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.04031208714117884 0.03907152907645245 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 0.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 21.19999999999999 54.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.454
Average program size in population (points): 41.454
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.406
Error (vector) diversity:			 0.408
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 70495260
--- Timings ---
Current time: 1481493402109 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (float_max float_frominteger in1 float_yank vector_integer_pushall integer_rot integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max float_dec float_frominteger float_max float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 23998.278827253358
Median total errors in population: 2247.9
Error averages by case: (741.3856133439001 732.7402367143288 721.4720631295785 714.3495598415711 731.9900417963063 780.8788818431965 770.9285458136741 743.0114389875393 751.5739256869966 715.5116066264728 716.8745290119338 713.8907129783992 743.7086297195544 740.542936672612 899.1101958914169 734.9371106230875 725.8931150263007 734.8247146105891 732.4242992433101 731.8137145085201 751.737479234318 752.7575054440711 979.5551908537383 2140.1268907557724 772.0385241251655 715.9469323079495 716.2189697054154 760.9236472822914 760.2435835777591 770.8682318975746)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.04031208714117884 0.03907152907645245 0.05364362086361196 0.18385316345285796 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.04609774565669511 1.8000000000000114 47.799999999999955 1.2000000000000028 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.094
Average program size in population (points): 41.092
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.412
Error (vector) diversity:			 0.416
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 71698080
--- Timings ---
Current time: 1481493413648 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction float_max} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction float_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_max float_frominteger vector_integer_swap in1 vector_integer_rest vector_integer_replace vector_integer_take float_dup_items integer_dup_items integer_rot integer_min float_yank in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_dec float_frominteger float_min float_rot float_frominteger float_dup integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max vector_integer_reverse float_dec float_frominteger integer_max vector_integer_rest 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add)
Partial simplification: (float_frominteger integer_dup_items in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank float_frominteger 5 integer_div integer_fromfloat float_frominteger float_frominteger float_dup integer_fromfloat integer_yank float_frominteger 5 integer_div integer_max float_dec float_frominteger float_max integer_rot float_add)
Errors: [1.0 3.2 2.0 2.5999999999999996 3.2 0.2 0.4 3.4 6.2 5.0 6.199999999999999 1.1999999999999993 8.6 1.0 49.0 5.0 16.2 6.399999999999999 5.200000000000003 1.0 0.0 6.799999999999997 49.80000000000001 56.200000000000045 26.200000000000003 9.4 5.0 0.4 1.2000000000000028 0.8]
Total: 282.8
Mean: 9.426666
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26527.30375933895
Median total errors in population: 2320.5418310927316
Error averages by case: (771.4476307886493 772.7212075612846 771.5543544387309 774.4345776206546 772.0327650954495 790.9669973936074 781.0365325794797 783.0961912877781 781.6672886846765 776.0093338076665 778.0597561928462 774.5718539096839 783.9438522057158 803.7645282738698 990.6922073940689 774.9911551187147 788.0357124508829 783.8485226728244 803.9660042448147 781.8545238784515 781.8383213167197 813.4163746072651 2110.2729432912256 2207.525950333569 858.419877723139 776.8920727955518 777.4018921026909 771.0104659119735 820.8864437181436 770.9444219387989)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.18385316345285796 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 0.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 7.7999999999999545 1.2000000000000028 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 39.726
Average program size in population (points): 40.726
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.443
Error (vector) diversity:			 0.45
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 72889860
--- Timings ---
Current time: 1481493425091 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 integer_fromfloat vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger vector_integer_replace 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 21951.060504147736
Median total errors in population: 2313.2000000000003
Error averages by case: (621.5209663480535 632.9097766094993 621.6638230652785 624.6686077386174 622.225864579317 631.0756483011445 621.1097715646455 643.3286667085332 621.7939470256069 626.7352532059184 628.9168913717731 624.6681317962416 624.0004746314291 656.4773109286608 1009.2989965299927 625.7295507820997 645.2214116301434 635.1985918324219 651.7579881044804 651.9615034984558 631.8878536202818 666.5270368325265 1503.7060424270194 2210.874911984449 738.8962694373536 627.2824079111446 627.2685380736933 621.09585502472 682.1683389412782 621.0900736429472)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.18385316345285796 0.014960136738481067 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 51.200000000000045 1.2000000000000028 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.118
Average program size in population (points): 41.115
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.463
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 74093400
--- Timings ---
Current time: 1481493436827 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat vector_integer_first float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max integer_div vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_nth vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 28026.09311611096
Median total errors in population: 2213.1000000000004
Error averages by case: (731.5695201770898 722.8682272830232 741.6281249452911 724.1990753677811 722.0251753317788 750.9208525601222 750.9641275461888 742.7355947155334 741.61175089277 725.4081136836309 726.9176625046725 723.9006487509143 743.6779677317821 742.4156055601073 894.5710809351841 724.7322946876574 736.0817769518192 743.5517243584595 738.8835775898124 741.7684477382743 751.7688213360974 760.2713401847242 936.8837982959645 6218.487057382324 769.8349871882231 725.5798144176996 726.1631939407154 750.9444365653166 774.7958335904744 740.932483897588)
Error minima by case: (0.0 0.08366218546322646 0.0 0.2978304130061922 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.3899924966004451 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 0.0 0.0 0.048079485103468045 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 52.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.413
Average program size in population (points): 41.411
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.443
Error (vector) diversity:			 0.445
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 75305790
--- Timings ---
Current time: 1481493448840 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger vector_integer_replace 6 float_max integer_dec integer_div float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25287.82745840095
Median total errors in population: 2220.5
Error averages by case: (771.5368645026971 792.8381277197365 761.5765282599631 764.3367979546473 772.15593500759 780.8902699251489 780.9229210016381 792.9277652247744 761.7177042279885 766.2237400542531 766.4689388567418 764.1779188402273 763.5264618479036 792.5475411239067 938.3362391456621 775.3651039458347 775.5902550839409 773.6122983427595 784.5718494845786 761.8976231646669 781.6784599004587 800.1885459359586 1000.6259224487954 2366.103198376757 808.1074889384197 765.2970637256094 766.0343207058737 770.9234106717989 806.706344538517 780.941819444091)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.3999999999999999 0.1995350933713549 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.175
Average program size in population (points): 41.175
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.426
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 76511040
--- Timings ---
Current time: 1481493460521 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 23792.365825512898
Median total errors in population: 2248.687752673023
Error averages by case: (721.5221089671112 732.9311857726159 721.5542741968801 724.2790042120856 722.0247050293017 720.9868842265911 721.0195865523078 732.8876148039038 721.694943254846 725.6243891647297 726.6744520829186 724.0302934301686 723.3923174749236 742.9851621507962 888.4474746246477 724.9889887377012 735.8747111891921 733.4692330608761 740.2563996738697 721.7769698177723 721.710093446027 758.7969952869477 941.9044243772378 2227.519817668956 769.5251817637987 725.4987761031729 726.2568329451765 720.9937768611657 772.7145628625477 721.0246657746185)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.09391564547484021 0.04147098480789646 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 39.794
Average program size in population (points): 40.792
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.424
Error (vector) diversity:			 0.427
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 77704860
--- Timings ---
Current time: 1481493472078 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 integer_fromfloat vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26103.809044969457
Median total errors in population: 2217.6581689072686
Error averages by case: (791.568737741893 802.8897634097999 791.5658470755011 794.3694496028168 792.1415524884357 810.8871399145241 810.938977562798 803.1113886460081 801.5846645344509 795.8989603588133 797.1447207554022 794.3298880916824 803.5437831855622 816.5632696901613 958.6287025499144 795.1095504464379 806.5644939275361 803.858077281236 812.2398703552359 791.867714788404 811.654545296023 825.742064764907 1117.0260000501878 2288.3257303299665 841.4088573942283 795.8255530126149 796.3252917544055 800.9103995505383 840.8184982269753 810.9655521829809)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.03907152907645273 0.03907152907645245 0.05364362086361185 0.11633781453677372 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 5.800000000000011 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.482
Average program size in population (points): 41.481
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.437
Error (vector) diversity:			 0.438
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 78919320
--- Timings ---
Current time: 1481493483659 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 22853.327152615293
Median total errors in population: 2178.778829740162
Error averages by case: (681.5418256311641 682.8333155576606 671.6541811254565 674.3741330968314 682.0947677181158 690.9276783276804 690.9733252967425 693.1886381454734 671.6356780680898 675.6152001275585 676.5980429653046 674.2405706101899 673.6005661101646 695.1174443916166 838.3074161845768 684.9663905474172 685.3849576604446 683.9634461457003 693.8522029072769 671.8947793044332 681.6937206582921 707.6470573427363 1125.360308836638 2374.0662264363787 731.5919934435809 675.6704202573343 676.6468641434384 680.9387388745573 725.9584511219539 680.9888115784878)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.20000000000000018 0.03907152907645245 0.05364362086361185 0.11633781453677328 0.19999999999999996 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.344
Average program size in population (points): 41.343
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.423
Error (vector) diversity:			 0.424
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 80129640
--- Timings ---
Current time: 1481493495343 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 22028.49643919022
Median total errors in population: 2226.975505346046
Error averages by case: (651.6051244384087 653.232411445353 651.7535060771082 654.2640745030806 652.1856117786382 651.0032817418546 651.0384617600844 653.1974398274708 651.6790997288667 655.7150090849594 656.5693587836073 653.7819718253126 653.5516770996455 675.6198268866871 985.2653893473484 655.1181576657292 665.335893699855 664.5119754037112 672.2616990898022 651.8368464946383 651.6117310832138 698.1371790388641 932.0863255139687 2266.751571028927 699.8562380394106 655.3487708409608 655.7333146692174 651.0134702708574 707.3303454850303 651.1006765376039)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.0431975046920714 0.03907152907645245 0.05364362086361185 0.01657656541299346 0.16003693029466137 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 52.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.586
Average program size in population (points): 41.586
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.433
Error (vector) diversity:			 0.434
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 81347220
--- Timings ---
Current time: 1481493506858 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat vector_integer_first float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max integer_div vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27942.127963934887
Median total errors in population: 2193.2000000000003
Error averages by case: (831.4688051697557 832.9644021123711 831.7576030329199 833.9645393922899 831.8380313397043 830.9168442625216 830.9075342306534 833.0863589435148 831.6992200959698 835.4528988139366 836.2785162251184 833.9029571762821 833.6574640077504 856.0285795662987 1339.5810856739697 834.6573489343459 845.0766984678847 843.7873445458963 853.7226273589006 831.5213275782337 831.6551554148635 883.9382207322992 1318.0270148790617 2579.6273185228765 878.2123201822285 835.2893075820214 835.8929138880001 830.9039962830659 885.3390466153796 830.9724829067634)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.01657656541299346 0.16003693029466137 0.0 0.1999999999999993 0.05784580318621835 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 50.200000000000045 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 40.322
Average program size in population (points): 41.319
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.428
Error (vector) diversity:			 0.43
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 82556880
--- Timings ---
Current time: 1481493518502 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 2.0 4.6 2.2 0.2 0.4 3.4 0.8 7.0 8.2 0.8000000000000007 0.5999999999999996 1.0 28.0 4.0 18.2 3.3999999999999986 3.200000000000003 1.0 0.0 11.200000000000003 47.80000000000001 58.200000000000045 24.200000000000003 0.5999999999999996 3.0 0.4 0.7999999999999972 0.8]
Total: 240.2000000000001
Mean: 8.006667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 20915.08175128948
Median total errors in population: 2192.5000000000005
Error averages by case: (611.4998713217695 613.0401628861198 611.9188804434523 614.0624958222464 612.1272233011432 620.893331728471 620.9054870768418 613.2745127073931 621.6975134971386 615.5080691405714 616.47140060129 613.8728681320025 623.7892177192379 637.7313046624963 946.132024970038 614.8651554628404 625.4418530804502 624.6553117122745 634.2933995399917 611.73355075517 621.5589272333779 656.1474048579284 915.1903042207226 2207.6683129016265 673.2381481922062 615.4646770758463 616.0415812456486 620.879800645706 664.0005054903003 620.9784548651891)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.11633781453677372 0.16003693029466137 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 1.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 52.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.046097745656695444)
Average genome size in population (length): 41.137
Average program size in population (points): 42.136
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.446
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 83790990
--- Timings ---
Current time: 1481493530229 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 24341.039405377433
Median total errors in population: 2164.1788297401617
Error averages by case: (731.5138460573004 753.0667380945 731.7867419474478 733.9730602541684 732.003358148459 730.9054880421295 730.9538272220784 753.045651394718 731.6281507006432 735.1323798636712 736.6370703074873 733.7068872897285 733.7063032878266 755.6819307989307 1069.0102265673017 734.6062479455207 745.7066920322413 743.7465269663955 752.2060917379199 731.653856881903 731.6767477331152 776.681261538482 1048.3524370825783 2176.1011215970616 792.4263778924587 735.637026235519 736.0516960812453 730.9074701223669 781.5585866614308 730.9756048927827)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.1403023058681403 0.043341815059193545 0.0 0.1999999999999993 0.12059217668847388 0.11633781453677372 0.0 0.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.762
Average program size in population (points): 41.761
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.441
Error (vector) diversity:			 0.442
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 85013850
--- Timings ---
Current time: 1481493542111 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 30093.176623882755
Median total errors in population: 2158.221032288369
Error averages by case: (921.554269593372 932.9133066508238 921.6855772567641 923.884117492018 931.9520617491353 920.9206339110199 920.9149030220736 942.9663598827307 921.6476532927039 925.0448030314082 926.3509479563832 923.7123196078132 923.3470575420672 943.7020478656651 1069.2801461283977 934.559404381835 934.7584931124132 934.559537731558 941.6772822771654 921.57795145715 911.5292201690368 955.3323955968573 1361.059880757251 2504.043497530732 970.4288460205632 925.5486408287236 925.8993974227595 930.89757695922 970.4394171073606 920.9888775477448)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.146356379136388 0.08366218546322618 0.05364362086361185 0.1403023058681403 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.14635637913638888 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 6.7999999999999545 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.612
Average program size in population (points): 41.611
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.428
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 86232210
--- Timings ---
Current time: 1481493553832 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26222.62385311314
Median total errors in population: 2164.957659480324
Error averages by case: (781.44176861182 782.9269983099508 781.7871609744216 784.3849232358423 782.1069516050601 800.8637454063421 800.8700097337552 782.8537686745092 801.6871235983209 786.0071597296893 792.5274706454112 784.7747454157972 803.5155870379544 818.209048667395 982.4700660509731 785.177576792328 826.2014606978514 807.7061375895498 807.5973913800492 781.5663377617706 801.4640828064805 820.8814517783502 1125.9132919555614 2344.719432238633 1023.9899794148088 789.119938747684 788.043450495285 800.8511355765384 852.0253660027563 800.9402921782394)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.03907152907645245 0.05364362086361185 0.3715935703873936 0.06738159169423863 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 7.7999999999999545 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.746
Average program size in population (points): 41.743
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.429
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 87454590
--- Timings ---
Current time: 1481493565547 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 29477.65848316467
Median total errors in population: 2162.778829740162
Error averages by case: (901.5788042964754 903.0629314356931 901.851225150464 904.2538889008586 902.1103308807583 910.8799896897654 910.8676334078414 903.0661784011569 911.6678340319196 905.7012384271422 906.1455519489151 903.9376884837944 913.8568493715609 930.439232284093 1108.0587847334382 904.9533200655703 914.5760640452171 915.2546878313328 925.8129814450223 901.6513680226427 911.6854639060118 940.9860170029613 1207.060524153355 2509.5330301077674 948.7489173062992 905.364583848489 905.869864295706 910.8399882696144 946.9457062412937 910.8978051795062)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.701
Average program size in population (points): 41.698
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.425
Error (vector) diversity:			 0.425
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 88675620
--- Timings ---
Current time: 1481493577312 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 float_flush vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27956.29537642957
Median total errors in population: 2193.2000000000003
Error averages by case: (851.5249060426113 842.9854067591559 851.8815177122325 843.9143224951343 842.1431902417028 850.9637199699804 850.9709034886636 852.8628893635423 841.7738099199971 845.3446540826205 856.5019744386905 844.1167948422044 843.5446324232171 869.7754365579883 1044.0449263193461 844.6531332633381 865.5627988830228 853.6908472499789 866.8835195778693 851.6557458012837 851.6724135413973 876.8862539104929 1379.316969384768 2460.252973841267 889.8466257996871 845.3105105086012 845.9993614278523 850.936170535195 890.2513947892548 851.0275732584643)
Error minima by case: (0.0 0.17159357038739387 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.3715935703873936 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.07969487651666896 0.1385949674116187 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.138
Average program size in population (points): 42.137
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.443
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 89909760
--- Timings ---
Current time: 1481493589061 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 integer_fromfloat vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 30257.706938482545
Median total errors in population: 2204.3
Error averages by case: (951.4468191526462 942.6848305625815 941.7401371555744 943.8536033382514 941.9752970617453 950.9520346382939 950.9438409238529 942.7503385362508 951.6421033367917 944.8900573605315 945.9894471671722 943.4919902016834 953.3876338172242 960.7631874951321 1084.2456978135042 944.3478439500074 954.6035927749557 963.0845980015781 958.8674607238576 941.4981290341532 951.5869851314566 974.2874763285682 1143.8225346631007 2309.846261899333 986.7604431591886 944.9504897150258 945.4092291269175 950.923527956339 986.0000025925117 950.961344864303)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.23907152907645246 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.07969487651666896 0.1385949674116187 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.731
Average program size in population (points): 41.729
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.425
Error (vector) diversity:			 0.425
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 91131690
--- Timings ---
Current time: 1481493600892 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 integer_fromfloat float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 24707.9612032277
Median total errors in population: 2193.2000000000003
Error averages by case: (751.4500200032908 752.939047514314 751.6824789815323 754.0243071234552 752.1156198997381 750.9453171368721 750.9034347987408 752.9747949680473 751.6255921381343 755.6596549700471 755.9671103894623 753.8414852969184 753.3345108294556 779.7135771160907 911.1727292957265 755.0568486363638 764.6094626402147 764.5039232476754 773.2590299356663 751.5484099343032 751.4868591666243 785.6828459389287 1020.9088072384948 2259.7040571779708 792.3788774742078 754.6040809704939 755.2918640228354 750.9009577764132 798.7098288782914 750.9656697273755)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.3999999999999999 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 19.200000000000045 0.07969487651666896 0.1385949674116187 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.811
Average program size in population (points): 41.809
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.454
Error (vector) diversity:			 0.455
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 92356020
--- Timings ---
Current time: 1481493612372 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 float_flush vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 32199.036930440165
Median total errors in population: 2145.3
Error averages by case: (861.4811229358488 862.9318601405366 861.8087070496242 864.0420433596961 862.0338384557672 860.8700453556627 860.8799466743764 862.8415020806924 861.5732965446439 865.6156215848555 866.1081606470867 864.1030876802361 863.4275427386993 928.8375970470898 1317.8077678131483 864.5376954060706 874.5805362818378 874.1629657146176 910.5598690743137 861.4940361547411 861.5008663607192 899.5270024265801 4325.881552484397 2962.4456517838685 921.3469325039583 864.6571135351037 865.5399446356076 860.8694962820742 926.6335120735213 860.937615614796)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.3999999999999999 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.07969487651666896 0.1385949674116187 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.794
Average program size in population (points): 41.792
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.462
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 93579840
--- Timings ---
Current time: 1481493624379 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_nth vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger vector_integer_rest 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25042.97256557162
Median total errors in population: 2168.0806046117364
Error averages by case: (761.43708526952 763.0953689073875 761.8324063356122 764.1542090267529 762.0583065443294 760.8879342217664 760.9007814886244 763.1243996187518 761.667083278529 765.261274212229 766.4898629689828 763.8611212273343 763.4630239313847 784.1976144905402 949.2866834524883 764.5723052675353 775.1876814324094 773.3759006001071 782.2803928832062 761.4790494183857 761.5991724051242 796.5440439578877 1088.5854944709959 2209.074188207375 816.6877694889703 765.2302272762108 765.9094934004061 760.8741419502383 808.9094516732993 760.9460981652205)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.03907152907645273 0.08366218546322618 0.05364362086361185 0.11633781453677372 0.16003693029466137 0.0 0.1999999999999993 0.04334181505919332 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 19.200000000000045 0.07969487651666896 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 40.846
Average program size in population (points): 41.844
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.464
Error (vector) diversity:			 0.47
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 94805220
--- Timings ---
Current time: 1481493636448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_tan} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot float_tan integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26614.546634586757
Median total errors in population: 2168.0806046117364
Error averages by case: (811.3848892604768 813.2340535580986 811.8045520936514 813.9765704165118 811.9384721458374 810.9187298843714 810.8990935314272 812.9953507071518 811.67586186355 815.0837144522774 816.1617688516875 813.7078554491026 813.4466827081447 834.65114962839 971.6570076951697 814.4209532745326 824.370788017188 823.6723520270889 831.5825105308788 811.4060051310287 811.5548975720293 846.3065895913386 1082.8925173469283 2420.4894223002443 860.5511763628871 814.7092084752868 815.3839656780228 810.8836232251398 861.7746209893589 811.0122518189518)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.05364362086361174 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.7999999999999545 0.07969487651666896 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.936
Average program size in population (points): 41.932
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.461
Error (vector) diversity:			 0.464
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 96033300
--- Timings ---
Current time: 1481493648437 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 integer_fromfloat float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_replace 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26413.910199116155
Median total errors in population: 2179.080604611737
Error averages by case: (781.3659409710085 783.2304440896172 781.8897447060447 783.8862582808481 781.8990835242005 800.8793864139956 790.9130013979948 802.9415333934706 781.6649954785848 785.5202262778573 785.7776657364833 783.8295511403203 783.7181855037454 811.805474108004 1257.9977849176912 784.6426481936196 793.6357563373455 795.9177510872075 808.5436091291839 781.4341634693952 791.5607450501631 834.3121909699632 1443.5326025569018 2278.8692572137993 829.1360795922066 784.5960743475548 785.545365361565 790.8970861692015 832.9758176373934 780.9917760607758)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 51.200000000000045 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.741
Average program size in population (points): 41.741
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.457
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 97255530
--- Timings ---
Current time: 1481493660524 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_tan} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot float_tan integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot float_tan integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 31709.451179464395
Median total errors in population: 2114.6000000000004
Error averages by case: (721.3250008813482 722.9713689496921 721.7790122463932 724.0162824117638 721.7877907987659 710.918755763192 710.9552983233193 713.1164058069658 711.544737187283 725.1294132416798 727.1656059567798 723.9190368149605 713.3235261384251 747.117719485016 869.907294270362 724.2942601684784 737.7276373273958 735.2350762189022 741.8320925092803 721.3707284719871 711.5888897506796 756.1811978957583 950.0320011150569 10207.497730980283 795.0643507803594 725.2967025538529 725.8224369812071 710.887036563012 790.6259423494122 711.0178475227282)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677372 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 51.200000000000045 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.0
Average program size in population (points): 41.994
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.462
Error (vector) diversity:			 0.466
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 98485530
--- Timings ---
Current time: 1481493672464 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_tan} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot float_tan integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27782.087475662433
Median total errors in population: 2121.1990099008394
Error averages by case: (811.4081002011923 813.1107770295419 811.7850589568728 814.1718284034723 811.9380801218667 820.9006932172044 820.9069738461442 823.0885034170024 821.6953808631376 815.1030520065717 815.8827155016277 813.576860882916 813.5368455957547 834.2412702001656 980.0542599301021 814.5542851670998 823.8967925399186 822.9801121138966 832.8669824592578 821.4209393580339 811.6586515910218 849.143549500685 1268.361141005907 3330.8329399490026 855.9042491681535 814.7844586617022 815.2748081900806 820.873885798736 857.1339301112341 821.0003498741463)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677372 0.16003693029466137 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322912 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 7.7999999999999545 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.27
Average program size in population (points): 42.269
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.466
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 99723630
--- Timings ---
Current time: 1481493684439 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27043.757213900808
Median total errors in population: 2115.6892831989644
Error averages by case: (831.366956269371 833.1517580161246 831.9294955152633 833.8832878646045 831.808243722257 840.8449910218617 840.8702515688549 842.6863140593845 841.546750251427 834.6733975019553 836.0110668912947 833.5825492056773 833.3698559490775 850.9724544145488 977.3657926178952 834.1630798479164 844.2330903437476 833.6082728786799 849.224268791801 841.3505384331071 831.5519831392464 864.8051160329761 1028.5232644764253 2323.1762880603774 871.117461104363 834.8035820736711 835.1222265131686 840.8260977682988 876.2329877836354 840.9557917837819)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.11633781453677372 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.16732437092645291 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.556
Average program size in population (points): 42.553
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.441
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 100970310
--- Timings ---
Current time: 1481493696438 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_flush} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_tan} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_flush vector_integer_pushall integer_rot float_tan integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min vector_integer_remove vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_replace float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 30529.377305993436
Median total errors in population: 2114.3790930823957
Error averages by case: (941.3611483114236 943.0168528571791 941.7157329724024 943.8712954699276 941.8911949604981 940.7910032657053 940.813008129353 942.8331449969323 941.4439866795889 945.3820291583645 945.5546973316243 943.7506504346393 943.4238216370219 972.522713142489 1191.8405462975572 944.4083672933418 953.1928336071646 955.246082538452 969.7183988747206 941.2730389441975 941.5126177407824 983.6476598495998 1515.6969668130105 2161.280703521223 986.2727692951878 944.5367536641891 945.0583184424914 940.8023271692007 985.63939949742 940.8792430977165)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677372 0.05755321584639339 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.16732437092645291 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.183
Average program size in population (points): 42.182
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.412
Error (vector) diversity:			 0.414
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 102205800
--- Timings ---
Current time: 1481493708265 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_nth vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 19530.40117092939
Median total errors in population: 2101.770151152934
Error averages by case: (591.3946840652816 593.1762595651998 581.7465764926918 584.2525539058223 591.9496901997138 590.7818311368901 590.8355559319325 592.8861896896098 581.6734285058699 585.062377025524 587.2728730927445 583.7509629010592 583.6574123260954 602.951356215455 743.6301608643221 594.3701502516135 601.4219436108517 593.1048681611893 600.7826882687671 581.40482805806 591.4270671948294 618.3717764278426 786.7856299826447 1926.401039796402 669.3475547470765 584.6800946399035 585.6959813773234 590.8080295080254 629.8514322895352 590.926174697113)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.11633781453677328 0.19999999999999996 0.0 0.08366218546322735 0.04609774565669689 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.14030230586813985 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 45.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.753
Average program size in population (points): 42.752
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.42
Error (vector) diversity:			 0.422
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 103458390
--- Timings ---
Current time: 1481493719905 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 integer_fromfloat float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25401.095348687995
Median total errors in population: 2120.1487491857497
Error averages by case: (771.441629826977 773.1924331771845 771.8573316935673 774.1180252199763 771.909888843326 780.7813699232925 780.841452024735 772.9240307729494 781.6473491496529 775.1028798279247 775.6318226289725 773.835687110228 783.4500363117966 794.2599155508999 933.7174630821698 774.3531078393642 783.9447763364082 784.1423794657112 790.256389912607 771.483016844935 781.5441692647795 807.025073145526 991.8927220235735 2359.4915027718184 811.5335227151752 774.6487150657792 775.1331740879907 780.7888318339161 819.2105210043961 780.9361312323459)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361185 0.11633781453677328 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 45.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.774
Average program size in population (points): 42.774
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.447
Error (vector) diversity:			 0.448
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 104711610
--- Timings ---
Current time: 1481493731662 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger vector_integer_rest 6 float_max integer_dec integer_div integer_dup float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 28162.74159139382
Median total errors in population: 2110.8
Error averages by case: (871.3644615446237 873.1593622013602 871.6660698452409 873.6404582154651 871.7998143315509 880.7803265037448 880.8591055492882 872.7717642077944 881.5013757728545 875.0824737004499 875.2071334583658 873.849582809813 883.2636944585704 896.953081388804 1014.9570369739121 874.4249732121388 882.8348480449393 883.8569808120591 891.1550445566282 871.3539242168919 881.4479395932877 903.4997777579424 1102.1737436422673 2238.9587982417693 907.4354133220063 874.445860114922 874.8839591195543 880.7994690247484 917.6912904764852 880.9238282963228)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.11633781453677328 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 45.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361185 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.255
Average program size in population (points): 42.252
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.428
Error (vector) diversity:			 0.431
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 105949260
--- Timings ---
Current time: 1481493743617 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27224.351260512696
Median total errors in population: 2110.8
Error averages by case: (831.4692949203242 833.1544493376861 831.66467854974 834.010620484191 831.8797966898162 830.7851507637588 830.847400911922 832.9160699916919 831.6424733136676 835.1365049483856 835.359038541928 834.01549871822 833.5699653262834 855.2927783346091 1024.1288825991605 834.3674496530922 842.6111516223013 843.8827963352047 851.998615619945 831.4020722978898 831.458614483962 869.9012442140058 1247.7877128198709 2268.4221737148 882.0384590299188 834.8014089668428 835.3389768414271 830.7893464926238 882.7740591065251 830.9045758828918)
Error minima by case: (0.0 0.08366218546322646 0.0 0.01948499375341406 0.20000000000000018 0.08366218546322618 0.01657656541299324 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.04300647892250353 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 40.939
Average program size in population (points): 41.938
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.455
Error (vector) diversity:			 0.458
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 107177430
--- Timings ---
Current time: 1481493755331 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27799.396122613474
Median total errors in population: 2110.8
Error averages by case: (841.5307013869127 843.2683556886634 841.7197862495696 843.9533000536276 841.8246878906294 850.7793514352483 850.8400276532432 842.6696003862131 851.5908467067121 844.7881452155744 845.8420350143768 843.719142987418 853.3903793169503 865.1226503057683 1005.7253456231139 844.1846371572902 852.9366800300436 852.784853984857 860.1992925390163 841.3529438344706 851.5592349195866 878.2579729065922 1040.7218331960546 2737.189848569939 891.8578556796804 844.6363724258442 845.173121353758 850.7621742082683 890.1215677758934 850.8933781181689)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.01657656541299324 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.04300647892250353 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.7999999999999972 0.14030230586813985 0.0 0.05364362086361196 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 41.334
Average program size in population (points): 42.331
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.43
Error (vector) diversity:			 0.433
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 108417450
--- Timings ---
Current time: 1481493767329 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 29187.98986204363
Median total errors in population: 2110.8
Error averages by case: (891.4180382479193 892.9288849021137 881.6062360452315 883.7336909863417 891.8292671247605 900.7649942262395 900.7726578630331 892.6191545198071 891.5481084449954 884.8679474098282 885.4914884586007 883.6525463083652 893.1811378580538 907.9174985427875 1146.3924114451497 893.9919684864021 892.2919329011642 893.985121416564 907.0562910569472 881.3268218397362 901.3494685794919 919.0732830583987 1667.1523279754383 2186.0496842454004 920.8278671614189 884.1389215639958 884.8833617170293 900.7379903075569 925.5664111257565 900.8343482250871)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.06929748370580935 0.07987335076852736 0.05364362086361196 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 19.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.706
Average program size in population (points): 42.704
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.427
Error (vector) diversity:			 0.43
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 109668630
--- Timings ---
Current time: 1481493779283 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27757.341521410228
Median total errors in population: 2061.280604611736
Error averages by case: (841.4168586612411 843.0125489159299 841.6196149638836 843.9129175044021 851.8518914363506 870.7691392041797 880.812842351501 862.7344202686858 871.4963060382362 844.8417971043865 845.369792548139 843.6021808986673 873.2003084622415 863.293780293527 1039.3250196801025 854.1701586907891 852.740934296394 852.3387853811807 861.9737945565279 851.4109532020907 871.3578979308278 878.2763027911558 1282.8620724264933 2230.990196352065 877.2120835624136 844.0319015799415 844.696059191375 880.7625381217266 886.3701724058668 870.8882525898919)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.20000000000000018 0.08366218546322618 0.05364362086361196 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.14030230586813985 0.0 0.05364362086361196 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.894
Average program size in population (points): 42.893
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.416
Error (vector) diversity:			 0.419
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 110925450
--- Timings ---
Current time: 1481493791074 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_nth vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div integer_dup float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 32581.804361186852
Median total errors in population: 2100.0326756290738
Error averages by case: (741.4946170929913 753.2153573514646 741.773368218576 744.0744082254165 741.9472449581102 760.7731962931531 760.8196830348916 762.8956723296867 751.5557644319102 745.0681574878978 747.3137286213699 744.1686742799762 753.3385103698039 769.1401930881344 897.2347901173982 744.2262593531632 760.8872016545381 755.9345620113055 762.2068367998712 751.4641889796227 761.4216533155357 776.5292730053278 949.4980796237011 10249.74916496529 831.387912654011 745.4088092510032 745.6042038949848 760.756593689261 811.0422680263966 760.8739880619581)
Error minima by case: (0.0 0.0431975046920714 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.11633781453677328 0.16003693029466137 0.0 0.1999999999999993 0.19060735569486909 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 1.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.05755321584639339)
Average genome size in population (length): 41.881
Average program size in population (points): 42.88
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.442
Error (vector) diversity:			 0.447
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 112181880
--- Timings ---
Current time: 1481493802992 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 23883.514105074973
Median total errors in population: 2092.6000000000004
Error averages by case: (711.4672916831865 713.1214230979098 711.5945149389767 714.1206347462554 711.7788972313043 710.772024372684 710.8131748318492 712.8663306411852 711.6110279544998 715.0485150464126 715.3115760092334 714.4070122104486 713.3372823441514 756.3323818546327 872.4037491995505 714.1495152591397 722.7028351403285 722.8904247188224 746.4574618208568 711.4168687513777 711.3823824008734 746.3862260830588 1059.8629635344992 2256.424719922291 982.1245132379105 714.7153307434933 715.9485256678631 710.7790712652759 762.3838225346022 710.9036078323035)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18342343458700583 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.11633781453677328 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 55.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.034344819917976)
Average genome size in population (length): 41.442
Average program size in population (points): 42.441
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.423
Error (vector) diversity:			 0.424
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 113425140
--- Timings ---
Current time: 1481493814863 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 24958.82737514976
Median total errors in population: 2092.6000000000004
Error averages by case: (751.4873506081404 752.9934487067068 751.5630262631263 753.923535718314 751.8435820907242 750.8171744175354 750.8833376090694 752.885295824712 751.5873107466592 755.0882402503939 755.3968173867676 753.9009575788311 763.2411847648725 775.3837819655189 914.6733486961588 754.2828137026827 762.6155892139116 762.1362709944948 770.9641388442708 751.3636612202923 751.3620777931932 784.9181656461842 1054.852055750963 2484.6779583996527 788.462741089905 754.1640834256186 754.5693832970621 750.8236953807022 797.013926837847 750.952420925448)
Error minima by case: (0.0 0.20000000000000018 0.0 0.18342343458700583 0.08366218546322646 0.08320486306409758 1.1102230246251565E-16 0.11633781453677328 0.16003693029466137 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 7.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.632
Average program size in population (points): 42.632
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.442
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 114674100
--- Timings ---
Current time: 1481493826594 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div vector_integer_conj integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27696.005518224214
Median total errors in population: 2061.280604611736
Error averages by case: (861.4255329163828 862.9479041248723 861.654642939215 863.8317704725422 861.7522888678457 860.7336439867132 860.7638054979969 862.6225563761392 871.4697390594368 864.6213936036096 864.9661258784153 863.7277244190161 863.2272280097359 880.4816951631122 1013.3008008850748 863.9801875814909 871.6605682456525 871.6061719767555 878.0494897028641 861.2306962652774 871.3531919191009 896.2727134023293 1068.387479120314 2145.5680501456095 896.3273993879676 864.1818237871104 864.5290183264896 860.7171103362932 903.7713590601318 860.8434067667117)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.08320486306409758 1.1102230246251565E-16 0.11633781453677328 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 5.7999999999999545 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.20000000000000284 0.13207362310796922)
Average genome size in population (length): 41.673
Average program size in population (points): 42.673
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.428
Error (vector) diversity:			 0.431
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 115924290
--- Timings ---
Current time: 1481493838719 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger 6 float_max integer_dec integer_div vector_integer_conj integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 24658.339921623454
Median total errors in population: 2100.0326756290738
Error averages by case: (711.4750790158744 713.060352608233 711.6877100400246 714.4984892573378 711.849665269704 720.7922924432099 720.8434190386381 722.8488772718765 711.5814740462351 715.4824026011414 715.4745373508847 714.3281559933123 713.2809231539608 738.223020598472 904.6689621086646 714.2418554812859 722.6316863790408 721.7507580146131 737.4186402950254 711.3523918591003 711.4716047492223 746.1446480721157 1946.0369203482783 2326.5445811826594 752.6967660234545 714.3331161678287 715.110441300896 720.811528755753 756.7925206102545 720.907101586353)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.08320486306409758 1.1102230246251565E-16 0.07204257956574178 0.18746056987348036 0.0 0.08366218546322735 0.04300647892250353 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 5.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 41.509
Average program size in population (points): 42.509
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.458
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 117169560
--- Timings ---
Current time: 1481493851018 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 21822.637751216276
Median total errors in population: 2092.6000000000004
Error averages by case: (651.43668042017 653.1400376716709 651.6520181297012 654.0760460139896 651.8579346957657 670.7607210015024 670.8176014796512 652.8773963958979 671.599182923003 655.0160231495715 655.3989017589214 653.9057281564941 673.2923682102169 673.1359335726429 824.3806600070975 654.1439983351207 662.5517950693571 662.7146342590472 670.7455634274728 651.2988722288875 671.3828709700775 686.2096200892632 978.4243941865951 2081.7044655491954 690.1420439282662 654.5367606767769 654.9151931575229 670.77410795977 698.8247361790873 670.9214616135322)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08320486306409758 1.1102230246251565E-16 0.09391564547484021 0.19999999999999996 0.0 0.08366218546322735 0.17019125320533135 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 6.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 42.0
Average program size in population (points): 42.998
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.461
Error (vector) diversity:			 0.462
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 118429560
--- Timings ---
Current time: 1481493863222 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div integer_rot integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26129.633000783284
Median total errors in population: 2100.0326756290738
Error averages by case: (781.4047858224001 792.8977654506253 781.6394823108463 783.8863201885903 781.7641739252449 800.7516291614091 800.8038614944753 802.8887387445508 781.539046765331 784.6503788690193 785.0212774498541 783.6839308420645 783.6303028129466 802.6977489810006 926.3955367925364 783.8700492308855 791.7255610004698 791.1202594600662 801.7683511882368 781.219237315762 801.6968059176514 814.1168687639372 1190.8045914643876 2596.662466150389 832.5425179162722 784.3909599387317 784.7860541900028 780.7586053109765 829.6150323568774 790.900660967735)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.02926597673604492 1.1102230246251565E-16 0.09391564547484021 0.19999999999999996 0.0 0.08366218546322735 0.16279988079509877 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.1999999999999886 5.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.16003693029466148)
Average genome size in population (length): 42.149
Average program size in population (points): 43.148
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.459
Error (vector) diversity:			 0.46
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 119694030
--- Timings ---
Current time: 1481493875470 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max vector_integer_rest 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27697.358441765642
Median total errors in population: 2105.4163378145367
Error averages by case: (861.3714423456163 862.8206372297028 861.5261441841726 863.869941254105 861.746345404919 860.7838677495841 860.8017908261264 862.7636376500227 861.5133445494239 864.8650916089364 865.0216713513427 863.713772656102 863.5333674284551 885.5123911174212 1021.6762057638464 863.9359774672806 871.5067635490303 871.6086534592004 880.3503272510958 861.2564433863816 861.562149514244 898.3861629112469 1066.7229551630137 2151.1952155553095 895.8327294004424 864.3112369585962 864.4365209018868 860.7576470805433 903.0957940864417 860.8802139611433)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.20000000000000018 0.02926597673604492 1.1102230246251565E-16 0.09391564547484021 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 55.200000000000045 0.20000000000000284 0.21948499375341335 0.0 0.05364362086361196 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 40.935
Average program size in population (points): 41.934
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.442
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 120922080
--- Timings ---
Current time: 1481493887793 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 float_mod vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25471.09529264043
Median total errors in population: 2131.2209069176047
Error averages by case: (781.5044462945278 782.9564977094877 781.5622197252728 784.0583862647848 781.801920431559 780.8134498609378 780.8283385925445 782.7786040884921 781.541826454656 784.9405369024851 785.0563110444762 783.9788931200236 783.6957544713026 804.1600890644254 939.1865648716959 783.9496958043978 791.6280732545301 791.7652484445144 800.2865923489138 781.3038987531038 781.6595420671018 816.6200753729709 1039.36179523175 2185.8436065604515 822.5697116905138 784.1951397662947 784.6376123484793 780.780723168789 826.7312694023974 780.8984695295442)
Error minima by case: (0.0 0.20000000000000018 0.0 0.047040330830963484 0.08366218546322646 0.08320486306409758 1.1102230246251565E-16 0.05400444920145597 0.17057295539074402 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.20000000000000284 0.16732437092645291 0.0 0.05364362086361196 0.20000000000000284 0.043341815059193656)
Average genome size in population (length): 41.505
Average program size in population (points): 42.503
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.45
Error (vector) diversity:			 0.453
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 122167230
--- Timings ---
Current time: 1481493899963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_fromfloat float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 29659.812836443423
Median total errors in population: 2113.4000000000005
Error averages by case: (921.3494931097212 922.8320535520608 921.4356779252938 923.6876245674987 921.6558849109468 920.6997325264297 920.7592389825235 922.5701205900207 921.4716207002522 924.8058837099252 924.655815684976 924.383931644798 923.4543781906282 946.5848062233624 1108.0487390581318 923.6633604158884 930.8285710181486 931.1730196896772 940.8815443562349 921.213762112019 921.5997102785738 958.4333992374749 1263.8921996304884 2209.7936261025407 955.9065147462555 923.9549660531138 924.4686308928187 920.6973533761911 964.0770510995142 920.834126057903)
Error minima by case: (0.0 0.08366218546322646 0.0 0.047040330830963484 0.20000000000000018 0.08320486306409758 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.7999999999999972 0.16732437092645291 0.0 0.05364362086361196 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 41.78
Average program size in population (points): 42.779
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.419
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 123420630
--- Timings ---
Current time: 1481493911858 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_take vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_fromfloat vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30907.6776931578
Median total errors in population: 2131.2209069176047
Error averages by case: (971.3906659383189 972.787166022719 971.567957822387 973.8050282248058 971.7009096407434 970.7361355431323 970.7692385253619 972.5674586884498 971.3225728624036 974.4360320890609 975.0701777199479 973.7776840089386 973.4305109584675 989.1677369094989 1131.1135133533455 973.6435766407998 981.5073805316381 980.9633762052736 987.7183937438857 971.1930955094234 971.5931408781918 1007.6870240839874 1157.1849373415341 2206.05088407767 1004.8000389744552 974.2434715580647 974.4888081626113 970.7402076745016 1011.3827803737817 970.8377890943858)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.20000000000000018 0.08320486306409758 0.05364362086361196 0.05364362086361174 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 18.200000000000045 0.7999999999999972 0.16732437092645291 0.0 0.05364362086361196 0.20000000000000284 0.1336332546071195)
Average genome size in population (length): 41.405
Average program size in population (points): 42.402
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.425
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 124662780
--- Timings ---
Current time: 1481493923780 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 32277.747183467935
Median total errors in population: 2100.0326756290738
Error averages by case: (1011.2717345374901 1012.6619289551619 1011.4934842400696 1013.6413878182534 1011.6163990367385 1010.7611877686032 1020.8331931083228 1012.5089011120422 1021.449096917536 1014.6795558904047 1014.4128852942384 1013.7456942356948 1023.4751139220504 1035.7065169962189 1194.3854448302345 1013.6944290409511 1020.4807786746181 1020.43987101398 1032.315657222432 1021.2310826409381 1021.6873200016876 1051.1257602690216 1255.91488646066 2255.9777891277404 1048.5519968260392 1013.943464954482 1014.2103182498546 1020.7941165316861 1053.849193613654 1010.8879941771238)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.08320486306409758 0.05364362086361196 0.05364362086361174 0.18746056987348036 0.0 0.08366218546322735 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.7999999999999972 0.027881707458353944 0.0 0.05364362086361196 0.20000000000000284 0.18746056987348036)
Average genome size in population (length): 41.693
Average program size in population (points): 42.692
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.429
Error (vector) diversity:			 0.432
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 125913570
--- Timings ---
Current time: 1481493935762 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 28525.093477068538
Median total errors in population: 2036.6000000000001
Error averages by case: (891.3074393818001 902.6260754464855 891.4920652298266 893.5627720704462 891.4940388082821 900.6603168293253 900.7483247529494 902.4041701666878 911.2843868075796 894.2210178139675 894.7666724388569 893.4210121583396 913.297253991184 908.1417407793526 1056.2363908457746 893.1701397592018 901.7150250051352 899.7456724538364 906.7474466975068 901.064449104624 911.4625933894239 928.8677657070128 1065.3625790340673 2033.3388673233894 929.9079514513408 893.8723468018666 893.9296939993387 890.7110797079863 928.7605072216825 900.7736818912615)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.1965280511069878 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322912 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 42.235
Average program size in population (points): 43.235
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.403
Error (vector) diversity:			 0.409
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 127180620
--- Timings ---
Current time: 1481493947810 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 32656.34468055044
Median total errors in population: 2079.6403023058683
Error averages by case: (1031.3193389877724 1032.6856736481952 1031.5461527024427 1033.5854099468415 1031.6037244163156 1030.7080151087073 1030.7424600345319 1032.5235781081758 1031.489507282432 1034.0957355777418 1034.5187267917806 1033.64281311996 1033.4887642332005 1049.0835948766392 1190.454531190865 1033.2500788884338 1040.3065782391304 1040.7321951082704 1047.0916109118705 1031.165294336846 1031.532118238171 1066.845080180729 1207.0449106430506 2222.9056784546656 1072.8398227728405 1034.3024542163157 1034.150148952308 1030.7266275876782 1071.1506821295413 1030.8133738649751)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08320486306409758 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.058879991940132825 0.1999999999999993 0.013548836761277272 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.7999999999999972 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.1336332546071195)
Average genome size in population (length): 41.839
Average program size in population (points): 42.833
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.402
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 128435790
--- Timings ---
Current time: 1481493959900 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 30675.75291308626
Median total errors in population: 2053.5806046117364
Error averages by case: (921.2947622025598 922.7091801537641 921.4229579745755 923.7231053054649 921.6200050408735 930.763115736691 930.742813311964 932.6036807808969 941.255366921651 924.3331578191302 924.3716139347276 923.6838415759325 942.9558913333677 942.9054795744839 1099.0934646335222 923.4799160780176 930.0106497297228 931.5430346907973 939.5013073018928 931.1113755701178 941.3375637618777 958.7770305306693 1137.5356919203273 3258.300486080117 958.9524294192507 923.9314203603615 924.1068019085225 930.7526106855312 962.1373458472342 920.7968129022192)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.07943427512473261 0.05364362086361196 0.013548836761276384 0.19999999999999996 0.0 0.058879991940132825 0.12059217668847388 0.013548836761277272 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 47.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 42.48
Average program size in population (points): 43.479
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.414
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 129710190
--- Timings ---
Current time: 1481493971687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_fromfloat vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27903.856097667056
Median total errors in population: 2032.1
Error averages by case: (881.1338967998466 882.4702475763293 871.3743306741301 873.6265507503491 881.4466309462169 880.6742218902795 880.7174085877502 882.6307360050008 871.2828347937099 873.9067950791301 873.8399902071902 873.2962528850377 872.9875144465774 887.7922283488227 1026.8890113196805 883.1108528816222 878.7812063096109 880.4210689384697 886.0570758275069 871.0739561167362 881.3152031553985 905.87131281391 1048.9779286034661 2037.43920704563 898.5545112209433 873.3393991432612 873.5786466060764 880.7088189588791 909.8038654048703 880.7543943306201)
Error minima by case: (0.0 0.08366218546322646 0.0 0.18168907268386825 0.08366218546322646 0.08320486306409758 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.058879991940132825 0.1999999999999993 0.013548836761277272 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.08798813203624722)
Average genome size in population (length): 42.449
Average program size in population (points): 43.448
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.375
Error (vector) diversity:			 0.378
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 130983660
--- Timings ---
Current time: 1481493983488 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction float_dup_items} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 float_dup_items vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div integer_rot float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 33010.14473133165
Median total errors in population: 2092.6000000000004
Error averages by case: (1041.2814953576542 1032.6998803940385 1041.430447933876 1043.687625622381 1041.6192923628787 1040.7648716405872 1040.785999472493 1042.601223014201 1041.3379137350094 1044.3042498493064 1044.3668052442888 1043.6613684048227 1043.0987258006514 1059.9397727993532 1202.427351820009 1043.5170395889556 1049.8744433579475 1051.061003762018 1057.1454282700072 1031.137547852165 1041.3904964960245 1076.5829493386273 1218.8749963838566 2305.1819867300223 1076.3577924097083 1043.8083110983891 1043.9125322766467 1040.7484702024665 1085.7064395793807 1040.8382705338859)
Error minima by case: (0.0 0.08366218546322646 0.0 0.21457448345444696 0.20000000000000018 0.08320486306409758 0.05364362086361196 0.09391564547484021 0.18746056987348036 0.0 0.058879991940132825 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 55.200000000000045 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.05081571768092541)
Average genome size in population (length): 41.442
Average program size in population (points): 42.435
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.416
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 132226920
--- Timings ---
Current time: 1481493995101 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_min float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27443.541597480114
Median total errors in population: 2059.780604611736
Error averages by case: (811.2372557937981 812.5683711676566 811.33747105429 813.607058702031 811.5789227966317 810.7100492441006 810.7617942739278 812.6192911771456 811.341281276423 814.5588922164802 814.2628951322024 814.1506246812684 813.3349021523921 837.0743976766774 1038.1599935856448 813.4500579805261 819.6458325762156 823.3935929037817 834.9515906163983 811.1074054512849 811.5241030010269 851.4854358082611 2245.800612992273 2030.4469586581165 861.0951798040408 814.1757602997677 814.4159133930829 810.7208051458983 853.2073408080631 810.8178071107184)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.08366218546322646 0.08320486306409758 0.05364362086361196 0.09391564547484021 0.17057295539074402 0.0 0.08366218546322735 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 5.7999999999999545 0.20000000000000284 0.40000000000000036 0.0 0.05364362086361196 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 42.215
Average program size in population (points): 43.214
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.431
Error (vector) diversity:			 0.436
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 133493370
--- Timings ---
Current time: 1481494007035 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger integer_max 6 float_max integer_dec integer_div vector_integer_conj float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 32431.033169951777
Median total errors in population: 2067.2788299961694
Error averages by case: (1011.2432584164483 1012.5681122576684 1011.3517119102444 1013.8244583430163 1011.6186868346609 1010.7222611083523 1010.7525267172948 1012.6177843321868 1011.324617071971 1014.6182963675259 1014.2531886371618 1013.6256175219486 1012.9598931295122 1034.1731663647479 1189.390802857423 1013.545061258807 1019.8790153966315 1020.6770218251285 1031.630744190726 1011.0459197738074 1011.3320353226619 1049.1020524765868 1289.3642378425093 2456.648475323 1043.2090562202213 1013.5830014033348 1013.907021008995 1010.7022179729395 1050.5716516380373 1010.7912764282345)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.01133686667277356 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.14061586415174832 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 5.7999999999999545 0.7999999999999972 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.04609774565669533)
Average genome size in population (length): 42.281
Average program size in population (points): 43.28
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.405
Error (vector) diversity:			 0.41
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 134761800
--- Timings ---
Current time: 1481494019047 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_rot float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger vector_integer_replace 6 float_max integer_dec integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27132.10882226132
Median total errors in population: 2092.6000000000004
Error averages by case: (841.3569266368177 842.5817071474905 841.4621427958675 843.5745471897463 841.6544730146554 870.7409424707938 850.7752778891751 862.6719876385863 871.4161965640583 844.1811836132521 844.4401585019133 843.7037514652496 873.0387865310827 858.9726285151703 1003.1408639787096 843.2508670749766 850.1043190332064 850.8301667456485 856.8411954229857 841.1693233801118 871.3339551726982 877.8467516292424 1022.8407802446977 2042.3084534833854 870.8595800270946 843.8497093165917 843.9583869613753 850.752711415986 881.5991638799403 850.851884520808)
Error minima by case: (0.0 0.20000000000000018 0.0 0.3139164029620769 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.17057295539074402 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 6.7999999999999545 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361185 0.20000000000000284 0.15163917254091341)
Average genome size in population (length): 42.046
Average program size in population (points): 43.045
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.445
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 136023180
--- Timings ---
Current time: 1481494031026 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (float_mod in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_nth vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div float_frominteger vector_integer_rest 6 float_max integer_dec integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 24119.186905684357
Median total errors in population: 1997.2
Error averages by case: (711.3817583738837 712.6275507116112 711.38569985178 713.5416485018395 711.5440125576367 720.7786958633787 720.8362316785017 712.7795185459925 721.3980792877635 713.7932891462096 714.2265456476692 713.2843966900597 722.9760331836815 731.2464870718192 884.1282932036576 713.0759336021493 719.761020270556 721.0553971336627 726.9741591179634 711.1503362498919 721.3340626554123 747.5777553321639 952.195286796667 2830.103216627233 738.9036709768851 713.3712368315938 713.5458157995661 720.8015174644302 752.5383988174218 720.8708576932837)
Error minima by case: (0.0 0.20000000000000018 0.0 0.316337814536773 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.16279988079509877 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.1805150062465799 0.0 0.0 0.20000000000000284 0.8000000000000114 6.7999999999999545 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 42.725
Average program size in population (points): 43.724
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.413
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 137304930
--- Timings ---
Current time: 1481494043195 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 2, :instruction float_min} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_swap} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mult} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec vector_integer_pushall in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall integer_rot integer_fromfloat integer_yank integer_yank float_frominteger 5 integer_fromfloat float_dec float_frominteger float_min float_rot vector_integer_swap float_dup integer_rot float_stackdepth integer_div integer_mult float_dup integer_rot float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger integer_max vector_integer_replace vector_integer_rest 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_yank integer_yank float_frominteger 5 integer_fromfloat float_frominteger float_dup integer_rot float_stackdepth integer_div integer_mult float_dup float_stackdepth integer_div float_dec float_dec float_stackdepth integer_div vector_integer_swap float_frominteger 6 float_max integer_dec integer_div integer_dup float_frominteger float_add float_dup_items)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.2 0.4 3.4 0.8 6.0 7.199999999999999 0.1999999999999993 0.5999999999999996 0.0 28.0 4.0 17.2 3.3999999999999986 4.200000000000003 1.0 0.0 11.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.4 0.20000000000000284 0.8]
Total: 237.00000000000006
Mean: 7.9
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 34028.16128769672
Median total errors in population: 2099.016337814537
Error averages by case: (1061.3382352876536 1072.6517283804806 1071.4547917586958 1063.5084388091466 1061.6350359183355 1080.809514620919 1070.8577251132465 1082.5746854743034 1081.36265871336 1063.8575571473007 1073.8797720120888 1063.4796145013934 1082.9658944189289 1081.2678337315256 1229.3489785791696 1063.200973401868 1069.148190954818 1071.5471277365366 1087.585044590971 1071.1041895067535 1081.3308233685898 1096.5677968639252 1360.8496386468669 2404.438883968559 1100.026367475425 1073.446735250303 1073.7200246993211 1060.835534878797 1102.483975304387 1070.8835165830508)
Error minima by case: (0.0 0.146356379136388 0.0 0.316337814536773 0.20000000000000018 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.18746056987348036 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.0877100760764904 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.04857981078986395)
Average genome size in population (length): 41.819
Average program size in population (points): 42.818
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.427
Error (vector) diversity:			 0.431
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 138559500
--- Timings ---
Current time: 1481494055317 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction float_div} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction float_cos} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_take in1 integer_fromfloat vector_integer_nth vector_integer_reverse vector_integer_pushall integer_rot integer_fromfloat float_shove vector_integer_replace vector_integer_pushall integer_rot float_frominteger 5 float_div integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max vector_integer_replace float_inc 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max float_max vector_integer_first integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_reverse vector_integer_pushall integer_rot integer_rot float_frominteger 5 float_div integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max float_inc 5 float_max integer_dec integer_div integer_rot float_stackdepth integer_div float_dec float_frominteger 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.34030230586813975 0.14030230586813974 2.85969769413186 5.2 6.0 2.1999999999999993 0.1999999999999993 7.6 0.0 1.0 4.0 0.8000000000000007 28.6 4.200000000000003 0.0 0.0 5.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.14030230586813974 0.20000000000000284 0.2596976941318603]
Total: 216.7403023058682
Mean: 7.2246766
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32182.863942601085
Median total errors in population: 2100.0326756290738
Error averages by case: (1011.2716470394274 1012.6045068514935 1011.3275103906378 1013.5786219630858 1011.5394990932651 1020.7477245502643 1020.770936385554 1022.8219607334988 1021.4302898209814 1013.8144494426128 1013.8186846806384 1013.3317866167135 1012.920062026007 1028.5611460000619 1162.8966070176893 1013.1232738962145 1019.4570469639501 1021.2499700466379 1025.3060674450012 1021.0353426889335 1011.3116635804724 1045.391833567018 1181.9434955894972 2280.1405061954974 1049.8069211044028 1013.3891064743899 1013.6726705835468 1020.7604880826232 1054.0719580653877 1020.7681657055829)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 18.200000000000045 1.2000000000000028 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.16017028665036603)
Average genome size in population (length): 42.012
Average program size in population (points): 43.01
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.392
Error (vector) diversity:			 0.399
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 139819860
--- Timings ---
Current time: 1481494067369 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction float_div} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction float_cos} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_take in1 integer_fromfloat vector_integer_nth vector_integer_reverse vector_integer_pushall integer_rot integer_fromfloat float_shove vector_integer_replace vector_integer_pushall integer_rot float_frominteger 5 float_div integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max vector_integer_replace float_inc 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max float_max vector_integer_first integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_fromfloat vector_integer_reverse vector_integer_pushall integer_rot vector_integer_replace integer_rot float_frominteger 5 integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max vector_integer_replace float_inc 5 float_max integer_dec integer_div vector_integer_conj integer_rot float_stackdepth integer_div float_dec float_frominteger vector_integer_rest 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.34030230586813975 0.14030230586813974 2.85969769413186 5.2 6.0 2.1999999999999993 0.1999999999999993 7.6 0.0 1.0 4.0 0.8000000000000007 28.6 4.200000000000003 0.0 0.0 5.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.14030230586813974 0.20000000000000284 0.2596976941318603]
Total: 216.7403023058682
Mean: 7.2246766
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27811.62963130025
Median total errors in population: 2048.3999999999996
Error averages by case: (871.2753790870498 872.4735089582708 871.3960180005132 873.5177494815158 871.6420628225704 870.7886859609148 870.8116672488045 872.6505747924296 871.4296954362012 873.9390980852976 873.5874771189089 873.3895340500221 872.8900973749641 889.4989178838589 1032.8253186774539 873.0850447694396 878.0448423930453 880.5622759777788 885.8155972822736 871.0938669388117 871.2093313627278 907.4414848347461 1042.4762799340467 2046.732213931241 895.3854406106974 873.1254468291035 873.489628842797 870.8053527896167 909.4810928598303 870.7659469653115)
Error minima by case: (0.0 0.08366218546322646 0.0 0.40000000000000036 0.20000000000000018 0.041470984807896516 0.05364362086361196 0.09391564547484021 0.19999999999999996 0.0 0.1999999999999993 0.11391640296207761 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 0.20000000000004547 1.2000000000000028 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18746056987348036)
Average genome size in population (length): 42.435
Average program size in population (points): 43.434
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.41
Error (vector) diversity:			 0.414
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 141092910
--- Timings ---
Current time: 1481494079199 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction float_div} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction float_cos} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_take in1 integer_fromfloat vector_integer_nth vector_integer_reverse vector_integer_pushall integer_rot integer_fromfloat float_shove vector_integer_replace vector_integer_pushall integer_rot float_frominteger 5 float_div integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max vector_integer_replace float_inc 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max float_max vector_integer_first integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_take in1 vector_integer_reverse vector_integer_pushall integer_rot integer_fromfloat integer_rot float_frominteger 5 integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max float_inc 5 float_max integer_dec integer_div integer_rot float_stackdepth integer_div float_dec float_frominteger vector_integer_replace vector_integer_rest 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.34030230586813975 0.14030230586813974 2.85969769413186 5.2 6.0 2.1999999999999993 0.1999999999999993 7.6 0.0 1.0 4.0 0.8000000000000007 28.6 4.200000000000003 0.0 0.0 5.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.14030230586813974 0.20000000000000284 0.2596976941318603]
Total: 216.7403023058682
Mean: 7.2246766
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27897.269767177546
Median total errors in population: 1976.7897529420325
Error averages by case: (831.3083171417089 832.6415302564859 831.4310782950758 833.7936290001642 831.6694999512104 830.734422705583 830.7455076515611 832.9240533336329 831.4462842435582 834.3879102090112 833.7409728800362 833.7773075269022 833.0656303693414 854.0653158688641 1028.8443510353075 833.3048284936501 838.2880873307803 840.9327860702467 853.8191406325979 831.0905920439704 831.2124217604803 867.2730272594902 1997.98177558727 2240.329106317791 860.788160090072 833.3497620826706 833.7826702132654 830.7163677232571 869.0413501072451 830.7838809963158)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.16017028665036603 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.14030230586813985 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 12.200000000000045 1.2000000000000028 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.16017028665036603)
Average genome size in population (length): 42.424
Average program size in population (points): 43.422
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.397
Error (vector) diversity:			 0.402
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 142365630
--- Timings ---
Current time: 1481494091131 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction integer_dup_times} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction 5} {:close 0, :instruction float_div} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction float_cos} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction vector_integer_rest} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_first} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_take in1 integer_fromfloat integer_dup_times vector_integer_reverse vector_integer_pushall integer_rot integer_fromfloat float_shove vector_integer_replace vector_integer_pushall integer_rot float_frominteger 5 float_div integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max vector_integer_replace float_inc 5 float_max integer_dec integer_div integer_rot vector_integer_conj integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace vector_integer_rest 5 float_max float_max vector_integer_first integer_div integer_rot vector_integer_conj integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 integer_dup_times vector_integer_reverse vector_integer_pushall integer_rot integer_rot float_frominteger 5 integer_div float_dec float_stackdepth float_frominteger integer_max float_cos integer_max float_inc 5 float_max integer_dec integer_div float_stackdepth integer_div float_dec float_frominteger 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 2.2 1.0 3.5999999999999996 2.2 0.34030230586813975 0.14030230586813974 2.85969769413186 5.2 6.0 2.1999999999999993 0.1999999999999993 7.6 0.0 1.0 4.0 0.8000000000000007 28.6 4.200000000000003 0.0 0.0 5.200000000000003 48.80000000000001 57.200000000000045 25.200000000000003 1.5999999999999996 4.0 0.14030230586813974 0.20000000000000284 0.2596976941318603]
Total: 216.7403023058682
Mean: 7.2246766
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 190843.95514307078
Median total errors in population: 2060.7403023058678
Error averages by case: (891.34734729706 893.1808248971163 891.4247106394519 893.8841311194755 891.5697531600587 890.7853423388194 890.7861409334979 892.6890774219966 891.3918922657048 894.7607799552119 893.9445092995967 894.0433838464505 892.8875603429408 926.9022410450236 1059.0989962922235 893.7990713319565 899.0743706153937 910.6280474811884 913.0770765713668 891.0656806125153 891.3059708698661 926.2924236710074 1155.4982269454329 164157.38634341324 919.302681880451 893.5838407208714 893.7513733810025 890.7494137065926 1128.9159360731928 890.8279949415679)
Error minima by case: (0.0 0.20000000000000018 0.0 0.059697694131859436 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.09391564547484021 0.18746056987348036 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 5.7999999999999545 1.2000000000000028 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18746056987348036)
Average genome size in population (length): 41.937
Average program size in population (points): 42.935
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.406
Error (vector) diversity:			 0.41
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 143623740
--- Timings ---
Current time: 1481494103031 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max integer_fromfloat 5 float_max float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall integer_fromfloat 5 integer_rot float_stackdepth float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 integer_add integer_add integer_max 5 integer_div integer_dup float_frominteger float_add)
Errors: [0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 1.8 1.6 1.6 1.2 4.0 4.199999999999999 4.800000000000001 1.4000000000000004 22.0 11.0 2.0 4.199999999999999 3.3999999999999986 13.799999999999997 2.0 1.0 5.799999999999997 19.19999999999999 4.2000000000000455 41.8 5.4 4.0 1.6 14.799999999999997 1.2]
Total: 180.0
Mean: 6.0
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 28698.12590072096
Median total errors in population: 2069.540302305868
Error averages by case: (881.4378803629129 882.8167170732785 881.4936161129128 883.7743689463243 881.76079910719 910.7943739717603 900.8267195878013 912.719428595455 911.541411298549 884.506265420016 884.2959073771932 884.0169414864833 893.1229813736509 905.4498251766788 1043.6532029905588 883.5062780964124 890.464499157388 891.9493823114406 899.9208620403956 901.1755996819093 891.3449809846545 917.4550538703245 1071.6819102638942 2383.6714940607035 919.1934259352705 883.9164903845342 884.0926572664808 900.7821868715746 925.9054687160703 910.8551721991457)
Error minima by case: (0.0 0.08366218546322646 0.0 0.01948499375341406 0.20000000000000018 0.07987335076852736 0.05364362086361196 0.05364362086361174 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 1.2000000000000028 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18746056987348036)
Average genome size in population (length): 42.394
Average program size in population (points): 43.391
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.454
Error (vector) diversity:			 0.459
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 144895560
--- Timings ---
Current time: 1481494114764 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max integer_fromfloat 5 float_max float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall float_max 5 integer_rot float_stackdepth float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 float_max integer_add integer_add integer_max 5 integer_div float_frominteger float_add)
Errors: [0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 1.8 1.6 1.6 1.2 4.0 4.199999999999999 4.800000000000001 1.4000000000000004 22.0 11.0 2.0 4.199999999999999 3.3999999999999986 13.799999999999997 2.0 1.0 5.799999999999997 19.19999999999999 4.2000000000000455 41.8 5.4 4.0 1.6 14.799999999999997 1.2]
Total: 180.0
Mean: 6.0
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 27012.939617118333
Median total errors in population: 2024.0
Error averages by case: (831.3748253214542 832.7631559089006 831.5264635700594 833.6578385230885 831.6353773044406 840.849080893242 830.8716847059385 842.7698699562623 841.4738803958919 834.0747570939155 833.8276541508761 833.6414294772062 843.0446978199867 851.3972577571876 1000.1753278078654 833.1860881245465 838.887405288899 841.8318585669133 848.2180962468705 831.0977414276551 841.2557648832102 866.6631423076702 1098.7284792012879 2237.042297691483 859.3363469072062 833.4955422494319 833.7073728262468 830.8395081654412 874.6523559906304 830.9143165545348)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.07590682436501267 0.05364362086361196 0.14030230586813985 0.18746056987348036 0.0 0.14635637913638888 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.20000000000000284 0.14061586415174832)
Average genome size in population (length): 42.701
Average program size in population (points): 43.701
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.408
Error (vector) diversity:			 0.412
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 146176590
--- Timings ---
Current time: 1481494126956 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max integer_fromfloat 5 float_max float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 integer_rot float_stackdepth float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 integer_add integer_add integer_max vector_integer_nth 5 integer_div integer_dup float_frominteger float_add)
Errors: [0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 1.8 1.6 1.6 1.2 4.0 4.199999999999999 4.800000000000001 1.4000000000000004 22.0 11.0 2.0 4.199999999999999 3.3999999999999986 13.799999999999997 2.0 1.0 5.799999999999997 19.19999999999999 4.2000000000000455 41.8 5.4 4.0 1.6 14.799999999999997 1.2]
Total: 180.0
Mean: 6.0
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 30819.290708176344
Median total errors in population: 2059.3612092234725
Error averages by case: (971.1979039378522 972.6167468069896 971.3070368408182 973.3749374098078 971.480218689002 970.6862761427126 970.7333166956478 972.5677315545133 971.3773308178199 973.7417537179432 973.5091642717706 973.646064287252 972.814350912702 989.6243872581116 1123.9916175945311 973.1285238851272 977.7470676126278 980.9524214796037 985.9026978933477 971.0342662638907 971.0694516594931 1005.5532173412337 1142.2228489329043 2154.287876490355 1005.4444681785543 973.315282965951 973.8688550578538 970.6779290863036 1010.6733688874901 970.7435955041327)
Error minima by case: (0.0 0.20000000000000018 0.0 0.01948499375341406 0.146356379136388 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.1590594379582766 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 42.447
Average program size in population (points): 43.444
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.414
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 147450000
--- Timings ---
Current time: 1481494138817 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max integer_fromfloat 5 float_max float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 integer_rot float_stackdepth float_frominteger 6 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_max integer_add float_inc 5 vector_integer_nth integer_add integer_add integer_max 5 integer_div float_frominteger float_add)
Errors: [0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 1.8 1.6 1.6 1.2 4.0 4.199999999999999 4.800000000000001 1.4000000000000004 22.0 11.0 2.0 4.199999999999999 3.3999999999999986 13.799999999999997 2.0 1.0 5.799999999999997 19.19999999999999 4.2000000000000455 41.8 5.4 4.0 1.6 14.799999999999997 1.2]
Total: 180.0
Mean: 6.0
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 31493.689770126857
Median total errors in population: 1986.5015115293406
Error averages by case: (991.2730273737983 992.5550216991409 991.3303062866217 993.4456502903338 991.5259244705296 1000.7502066073274 990.7919990778316 1002.6440976843492 1001.390133233907 993.5730930610688 993.3620476477449 993.294158967195 1002.6677493839834 1007.684609241798 1155.0470676559614 992.8816766813144 997.3353769789347 1000.6543857859476 1005.4868760703703 990.9527115312654 1001.0875874057717 1026.297139197409 1204.2703553105937 2154.603669655111 1019.7335817029461 993.2401756146897 993.3882039057779 990.7374392140338 1030.8896052761106 990.795893114977)
Error minima by case: (0.0 0.08366218546322646 0.0 0.01948499375341406 0.20000000000000018 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.1805150062465859 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.529
Average program size in population (points): 43.524
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.4
Error (vector) diversity:			 0.402
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 148725870
--- Timings ---
Current time: 1481494151301 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_dup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 7} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot})
Best program: (vector_integer_subvec vector_integer_pushall integer_fromfloat vector_integer_take in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall vector_integer_occurrencesof float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 7 vector_integer_set integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add vector_integer_subvec 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_min integer_dup float_frominteger float_add float_max integer_dec integer_div integer_rot)
Partial simplification: (vector_integer_pushall integer_fromfloat in1 float_mod vector_integer_pushall float_stackdepth integer_div float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 7 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add 6 float_max integer_dec integer_div integer_min integer_dup float_frominteger float_add float_max integer_div integer_rot)
Errors: [0.0 2.2 0.0 0.5999999999999996 1.2000000000000002 0.8 0.6 1.6 0.19999999999999996 3.0 2.1999999999999993 3.8000000000000007 0.5999999999999996 17.0 6.0 3.0 2.1999999999999993 7.399999999999999 10.799999999999997 1.0 1.0 45.8 20.80000000000001 51.799999999999955 18.799999999999997 2.4000000000000004 3.0 0.6 7.799999999999997 0.19999999999999996]
Total: 216.39999999999998
Mean: 7.213333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29312.933384078886
Median total errors in population: 2023.2161277386974
Error averages by case: (911.2314423213005 922.5228607058503 911.1994506951763 913.5621148525989 911.4664254108588 930.6995120001777 920.725561972766 932.4631923762246 921.3109091905452 913.7932844333604 913.4415829462043 913.5666958179409 922.7290184797395 928.9208740238116 1069.7284329835832 912.9572407146835 917.3301680857111 920.5817756002772 926.6857051242552 910.9433439181438 931.087250226659 945.9825667087213 1224.608204525273 2131.2009699059086 943.8089516834042 913.2454862112183 913.6198866130874 910.690984288494 952.1089261422647 920.7205661206473)
Error minima by case: (0.0 0.20000000000000018 0.0 0.01948499375341406 0.20000000000000018 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.1805150062465859 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.324
Average program size in population (points): 43.321
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.404
Error (vector) diversity:			 0.407
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 149995590
--- Timings ---
Current time: 1481494163456 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_dup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 7} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot})
Best program: (vector_integer_subvec vector_integer_pushall integer_fromfloat vector_integer_take in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall vector_integer_occurrencesof float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 7 vector_integer_set integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add vector_integer_subvec 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_min integer_dup float_frominteger float_add float_max integer_dec integer_div integer_rot)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 7 vector_integer_set integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_min float_frominteger float_add integer_dec)
Errors: [0.0 2.2 0.0 0.5999999999999996 1.2000000000000002 0.8 0.6 1.6 0.19999999999999996 3.0 2.1999999999999993 3.8000000000000007 0.5999999999999996 17.0 6.0 3.0 2.1999999999999993 7.399999999999999 10.799999999999997 1.0 1.0 45.8 20.80000000000001 51.799999999999955 18.799999999999997 2.4000000000000004 3.0 0.6 7.799999999999997 0.19999999999999996]
Total: 216.39999999999998
Mean: 7.213333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34986.686282720104
Median total errors in population: 2023.2161277386974
Error averages by case: (1111.1684957937498 1112.2952593307716 1111.203372867894 1113.1950941519783 1111.4010396346914 1110.782926138009 1110.808023659463 1112.3748391285058 1111.382309834669 1113.653137003466 1113.7218793411648 1113.436970044717 1112.8407644421786 1127.0432200020484 1272.0983241044148 1112.853993703586 1117.9238254412494 1120.032514209957 1125.0707490345198 1110.9462878591917 1111.1845345896918 1145.8048518146875 1331.9798608121607 2221.1174712340558 1136.4147058162084 1113.4757256284827 1113.585672213859 1110.7801879335768 1147.3246586935998 1110.7855882575489)
Error minima by case: (0.0 0.20000000000000018 0.0 0.35539338390519326 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.39557430201194776 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.04609774565669511 0.18334031018354613)
Average genome size in population (length): 42.504
Average program size in population (points): 43.502
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.372
Error (vector) diversity:			 0.374
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 151270710
--- Timings ---
Current time: 1481494175531 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_dup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 7} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_inc} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 6} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot})
Best program: (vector_integer_subvec vector_integer_pushall integer_fromfloat vector_integer_take in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall vector_integer_occurrencesof float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 7 vector_integer_set integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add vector_integer_subvec 6 float_max integer_dec integer_div integer_rot vector_integer_conj integer_min integer_dup float_frominteger float_add float_max integer_dec integer_div integer_rot)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 7 integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger float_inc integer_add 6 float_max integer_dec integer_div integer_min float_frominteger float_add)
Errors: [0.0 2.2 0.0 0.5999999999999996 1.2000000000000002 0.8 0.6 1.6 0.19999999999999996 3.0 2.1999999999999993 3.8000000000000007 0.5999999999999996 17.0 6.0 3.0 2.1999999999999993 7.399999999999999 10.799999999999997 1.0 1.0 45.8 20.80000000000001 51.799999999999955 18.799999999999997 2.4000000000000004 3.0 0.6 7.799999999999997 0.19999999999999996]
Total: 216.39999999999998
Mean: 7.213333
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 28053.49479683373
Median total errors in population: 1905.0326756290738
Error averages by case: (881.1922364758924 882.4253660133955 881.3184567422087 883.7563557391019 881.4753611536246 880.7984262463481 880.8378100433174 882.5614205483004 881.4383557733427 884.069731952122 883.693931450012 883.6185644737893 882.8641404020709 897.4368468870387 1042.3167503585883 882.9789217017792 887.9328324948408 890.6378129147892 895.922609343206 881.014090181344 881.1377220663712 917.169367442973 1055.7197817767506 1997.5312817014476 906.7651821212147 883.4356217238769 883.6938153207162 880.7894792917974 918.1741178393037 880.7884066541561)
Error minima by case: (0.0 0.146356379136388 0.0 0.35539338390519326 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.05364362086361174 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.39557430201194776 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.04609774565669511 0.10929742682568167)
Average genome size in population (length): 42.21
Average program size in population (points): 43.21
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.597
Total error diversity:				 0.403
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 152537010
--- Timings ---
Current time: 1481494187394 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction integer_mod} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot})
Best program: (vector_integer_subvec vector_integer_pushall integer_fromfloat vector_integer_take in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall vector_integer_occurrencesof float_stackdepth integer_div float_dec float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div integer_inc float_stackdepth integer_div float_dec float_frominteger 6 integer_dec vector_integer_indexof integer_mod float_yank integer_max integer_add vector_integer_subvec 5 float_max vector_integer_rest integer_div integer_rot vector_integer_conj integer_min float_frominteger float_frominteger float_add float_max integer_dec integer_div integer_rot)
Partial simplification: (integer_fromfloat in1 vector_integer_pushall float_stackdepth float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div integer_inc float_stackdepth integer_div float_dec float_frominteger 6 integer_dec vector_integer_indexof integer_mod float_yank integer_max integer_add 5 integer_div float_frominteger float_add)
Errors: [1.0 2.2 1.0 1.5999999999999996 1.2000000000000002 0.2 0.4 0.6000000000000001 0.8 4.0 2.1999999999999993 4.800000000000001 0.40000000000000036 22.0 10.0 3.0 2.1999999999999993 14.399999999999999 17.799999999999997 1.0 0.0 5.799999999999997 61.19999999999999 10.799999999999955 5.799999999999997 1.4000000000000004 2.0 0.4 8.799999999999997 0.8]
Total: 187.79999999999995
Mean: 6.26
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30754.218714782444
Median total errors in population: 2023.2161277386974
Error averages by case: (951.2565571697085 952.5367632068812 951.3015474245177 953.3494680985214 951.772523920872 951.0206366843141 950.839072721987 952.4864585980997 951.4105357867452 953.8799303387458 953.3820954320912 953.5254323131263 952.7804196311233 970.4483187470709 1140.061361910479 953.1373918228077 957.2894596059614 961.6858269025838 967.9504206709165 951.0587766454406 951.054756647822 988.6054047407926 1268.6571989419633 2480.1030476490396 981.7299420898303 953.1984506778033 953.5413233379028 950.7957923300495 994.5256456627503 950.8341550724938)
Error minima by case: (0.0 0.146356379136388 0.0 0.35539338390519326 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.18746056987348036 0.0 0.14635637913638888 0.16017028665036648 0.40000000000000036 0.0 1.0 0.0 0.18999249660044626 0.1838531634528593 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.11633781453677372 0.0 0.05364362086361196 0.04609774565669511 0.10929742682568167)
Average genome size in population (length): 41.837
Average program size in population (points): 42.837
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.41
Error (vector) diversity:			 0.417
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 153792120
--- Timings ---
Current time: 1481494199167 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_fromfloat} {:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_inc} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 1, :instruction 6} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_indexof} {:close 0, :instruction integer_mod} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction integer_min} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_div} {:close 0, :instruction integer_rot})
Best program: (vector_integer_subvec vector_integer_pushall integer_fromfloat vector_integer_take in1 integer_fromfloat vector_integer_nth float_mod vector_integer_pushall vector_integer_occurrencesof float_stackdepth integer_div float_dec float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div integer_inc float_stackdepth integer_div float_dec float_frominteger 6 integer_dec vector_integer_indexof integer_mod float_yank integer_max integer_add vector_integer_subvec 5 float_max vector_integer_rest integer_div integer_rot vector_integer_conj integer_min float_frominteger float_frominteger float_add float_max integer_dec integer_div integer_rot)
Partial simplification: (in1 vector_integer_nth vector_integer_pushall float_stackdepth float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div integer_inc float_stackdepth integer_div float_frominteger 6 integer_mod float_yank integer_max integer_add 5 float_max integer_div float_frominteger float_add)
Errors: [1.0 2.2 1.0 1.5999999999999996 1.2000000000000002 0.2 0.4 0.6000000000000001 0.8 4.0 2.1999999999999993 4.800000000000001 0.40000000000000036 22.0 10.0 3.0 2.1999999999999993 14.399999999999999 17.799999999999997 1.0 0.0 5.799999999999997 61.19999999999999 10.799999999999955 5.799999999999997 1.4000000000000004 2.0 0.4 8.799999999999997 0.8]
Total: 187.79999999999995
Mean: 6.26
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32307.48150694165
Median total errors in population: 2048.2287294035145
Error averages by case: (1011.2018726410056 1012.4549764227996 1011.2133228485063 1013.6403437601839 1011.5322876830569 1010.8016415604661 1010.8272136177403 1012.4880975311466 1011.4102867297024 1013.982345203055 1013.6257356326805 1013.7593053772814 1012.7004898086872 1029.9902691909938 1176.03393194927 1013.0431342936516 1017.5408693587772 1020.9848829060245 1028.540075836365 1011.050049071356 1011.0994057504665 1046.698098540616 1441.1233039839103 2202.483010499415 1049.5961389904069 1013.60044028944 1013.831953463247 1010.7997233267979 1050.621391799998 1010.8069088745929)
Error minima by case: (0.0 0.08366218546322646 0.0 0.032675629073546375 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.05364362086361174 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 0.4376209237092894 0.0 0.1999999999999993 0.39557430201194776 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.04609774565669511 0.027721798251973073)
Average genome size in population (length): 41.142
Average program size in population (points): 42.142
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.406
Error (vector) diversity:			 0.409
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 155026380
--- Timings ---
Current time: 1481494211155 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest float_mod in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max vector_integer_replace integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39135.20531433196
Median total errors in population: 2060.2
Error averages by case: (791.1779729071791 792.561598671235 791.2333471514863 793.4337710777954 791.5289763164807 790.8019458067148 790.829299518099 792.6068439689805 791.4193786988985 793.931666841224 793.6776652036804 793.5895397546717 792.7662062878514 810.1655012403712 951.5810406676451 793.0541101031893 797.9083371465166 802.1515995922249 807.0513320204824 791.0754371934427 791.1466183139969 827.2889554731239 1025.8452734932978 15593.649175083545 822.706428402933 793.5597148301165 793.6517465436349 790.7825676397816 853.1996478526495 790.8296165306814)
Error minima by case: (0.0 0.20000000000000018 0.0 0.316337814536773 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.38999249660044555 0.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.027721798251973073)
Average genome size in population (length): 41.902
Average program size in population (points): 42.9
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.403
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 156283440
--- Timings ---
Current time: 1481494223255 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 vector_integer_pushall vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 33981.907204675656
Median total errors in population: 2053.7949693134933
Error averages by case: (871.2450753966317 872.487814753676 871.25950856982 874.2032290138538 871.6466408281897 870.8218620112971 870.8101937181889 872.7204088008953 871.4321133722318 874.8984766758906 874.2716730015027 874.2314581027521 872.8003257964958 901.5247131578334 1077.7176801645187 873.4156933234574 878.3235801005284 881.4910718508817 900.4785204563283 871.0293636880992 871.1985167334258 905.9066611437893 2235.9559089864315 6915.262411084895 917.2001328520635 873.8038422423538 874.3846545369596 870.7623946979309 919.807508693194 870.8157709215399)
Error minima by case: (0.0 0.08366218546322646 0.0 0.19191793818660763 0.08366218546322646 0.036655728816938404 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.08366218546322735 0.041470984807896016 0.40000000000000036 0.0 0.7163378145367574 0.0 0.04217871765042247 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.06600429080441472 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.044
Average program size in population (points): 43.042
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.44
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 157544760
--- Timings ---
Current time: 1481494235111 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div vector_integer_butlast float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_take in1 float_mod vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add integer_max 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 24838.633955854573
Median total errors in population: 2019.4080638693488
Error averages by case: (771.1509041187444 772.436226771508 771.3276495397872 773.4326759965629 771.5057397413602 770.8404117627938 770.8797765304174 772.4425323840115 771.4320790519837 773.7844229247806 773.6617262363349 773.6008492603728 772.7782754372997 787.7713376632241 931.9766468965596 772.9548116151858 777.7624403927626 780.6313196144501 785.6667888118975 771.0225630370282 771.1761957058825 806.9742849010097 948.433256747664 1962.7286078751295 802.8859354187321 773.5788205130838 773.7519845866854 770.8193556867529 810.3521090559991 770.87422757657)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.036655728816938404 0.05364362086361196 0.07204257956574178 0.18746056987348036 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.036655728816938904 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.406
Average program size in population (points): 43.404
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.427
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 158816940
--- Timings ---
Current time: 1481494247437 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 float_mod vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32724.33163342832
Median total errors in population: 2081.940302305868
Error averages by case: (1031.0719172809147 1032.3242495099146 1031.1572283526682 1033.200456636411 1031.3628260225996 1030.7564708816174 1030.8093645969525 1032.3969542524287 1031.3126557139326 1033.7588241114631 1033.454119344822 1033.4341988947986 1032.3946965395176 1051.4487934486215 1223.6013158254457 1032.9366754709042 1037.6915303705155 1041.2792328780515 1047.875727971149 1030.9599368514162 1031.0543042013253 1068.9211760419078 1278.7741343446708 2199.798368741959 1062.3304899773127 1033.2772769874489 1033.4497396850243 1030.747749407094 1071.9872308911893 1030.7639881962307)
Error minima by case: (0.0 0.146356379136388 0.0 0.316337814536773 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 1.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 41.907
Average program size in population (points): 42.904
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.411
Error (vector) diversity:			 0.413
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 160074150
--- Timings ---
Current time: 1481494259796 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_yank in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29415.902433874802
Median total errors in population: 1988.6
Error averages by case: (921.1714862732169 922.5558604758787 921.2813580288583 923.5876059556763 921.451091936998 930.7247770510559 930.7883220505666 922.4317503913757 931.437061246001 923.8808969347549 923.7092583205146 923.5253424502419 932.6577328915198 938.2599780154036 1089.788697573962 923.1072211241428 927.8197872975516 931.3027721696328 935.4871858533659 921.0355264000947 931.0422753492543 956.1298743919492 1106.67573106163 2108.3237285354535 947.8761152836368 923.4045700079694 923.6618428235588 930.7285555109428 961.2625655625648 930.7934629070176)
Error minima by case: (0.0 0.20000000000000018 0.0 0.316337814536773 0.08366218546322646 0.03665572881693843 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 0.0 0.0 0.08366218546322557 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.842
Average program size in population (points): 42.838
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.396
Error (vector) diversity:			 0.4
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 161329410
--- Timings ---
Current time: 1481494271704 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_yank float_mod in1 vector_integer_pushall vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 21478.4268064832
Median total errors in population: 1986.2209069176042
Error averages by case: (661.2316420865583 662.5625116632339 661.3504816592018 663.5776689430885 661.4470828045218 660.8294689961085 660.8642976600412 662.5681523120572 661.4294533527737 663.8982285466601 664.0005845556698 663.676799097037 662.7526894725045 678.1350491421779 818.212002620163 662.9379286013991 668.3835627559288 671.0402833053129 675.6865141703097 661.0798417058104 661.1278103848563 695.3321447528425 838.0193437485341 1801.0637504300964 688.7538899561142 663.6247773996166 663.7665315660107 660.8226386262834 699.399791735303 660.8518844329783)
Error minima by case: (0.0 0.20000000000000018 0.0 0.316337814536773 0.08366218546322646 0.08366218546322618 0.05364362086361185 0.07204257956574178 0.18746056987348036 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.08366218546322557 0.11633781453677017 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.1705729553907439)
Average genome size in population (length): 42.898
Average program size in population (points): 43.894
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.395
Error (vector) diversity:			 0.399
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 162616350
--- Timings ---
Current time: 1481494283813 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat float_stackdepth float_dec float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29780.658656017822
Median total errors in population: 2015.6000000000001
Error averages by case: (931.120468771755 932.5274226789131 931.2882823514425 933.4540544989209 931.4588883325217 930.7246506400066 930.7431298641251 932.4130169275433 931.4185431773909 933.9052056009762 933.4825284124947 933.672807488461 932.7646265881696 949.289379178326 1106.8246314516807 933.0261237856447 937.3546497817373 941.5031296674395 946.9510811633629 931.0132429066531 931.0438611088236 964.374357196129 1216.1382096060092 2145.6307312669082 959.1206769862716 933.3844149593502 933.718195542586 930.70029957633 970.8515516423813 930.7604948654468)
Error minima by case: (0.0 0.06326278179216693 0.0 0.316337814536773 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.07204257956574178 0.19999999999999996 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 0.31460489938910996 0.0 0.08366218546322557 0.11633781453677017 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.10929742682568167)
Average genome size in population (length): 42.176
Average program size in population (points): 43.176
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.396
Error (vector) diversity:			 0.397
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 163881630
--- Timings ---
Current time: 1481494295722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_take float_mod in1 float_mod vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 integer_max 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34632.84324175926
Median total errors in population: 2023.2161277386974
Error averages by case: (1101.161658867234 1102.3072654895377 1101.2150543904017 1103.4248970390486 1101.4283012027709 1100.7951789743154 1100.8204551444041 1102.434704409589 1101.4877274269552 1103.9359797379682 1104.0192408079592 1103.703838728404 1102.7358429707983 1116.7118443647364 1244.666814567039 1103.0034974508349 1108.4726885065425 1110.8657333948208 1115.1677676128527 1101.0206990598501 1101.1836206123683 1133.389562497763 1259.1909275389125 2234.6889877925673 1127.838158809685 1103.5997241409495 1103.8284236762092 1100.7586861178181 1138.162169371973 1100.8237910549317)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.0061265507738474945 0.0 0.08366218546322735 0.0061265507738479386 0.14030230586813985 0.0 1.0 0.0 0.08366218546322557 0.11633781453677017 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.587
Average program size in population (points): 42.584
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.42
Error (vector) diversity:			 0.422
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 165129240
--- Timings ---
Current time: 1481494307571 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest float_mod in1 in1 vector_integer_pushall vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 integer_max 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30145.129953596235
Median total errors in population: 1998.5
Error averages by case: (941.1629967467221 942.4512490275005 941.3507713634855 943.5744985621562 941.4853160677561 940.7829234730508 940.838752137229 942.4295375299456 941.3697843884257 943.7187114976267 943.9754926575046 943.5148746265664 942.7336719041351 957.3249860033516 1093.2575943525817 942.9555039050614 948.4465114754273 951.5006398856318 955.8846303127508 941.0583184977925 941.219273835169 974.9980985230285 1213.4285154482784 2251.5505988067603 973.1192906307316 943.741052449725 943.7758255900201 940.7839431939444 981.8965643242896 940.8000263795761)
Error minima by case: (0.0 0.11564256469915524 0.0 0.316337814536773 0.08366218546322646 0.041470984807896516 0.05364362086361196 0.05364362086361174 0.08665868500452789 0.0 0.08366218546322735 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.08366218546322912 0.15680249530792523 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.468
Average program size in population (points): 43.466
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.44
Error (vector) diversity:			 0.446
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 166403280
--- Timings ---
Current time: 1481494319719 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add integer_max 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 33474.82058908272
Median total errors in population: 1905.0326756290738
Error averages by case: (1061.1180284651546 1062.5238044545467 1061.3330119666703 1063.747234469773 1061.430868674357 1060.746909622018 1060.8078584058792 1062.4191917658254 1061.2746342635105 1063.814628298602 1065.023353374872 1063.6736884999489 1062.7410152552054 1078.7117257038587 1204.105251708014 1062.9111120018927 1075.1182789584434 1070.409972301827 1076.180789789047 1060.9550159674707 1061.1289929622753 1093.1649664449121 1224.612398457409 2168.2011549556782 1135.8218686131838 1064.2389287546523 1064.1130975020405 1060.72906013805 1102.9755828438883 1060.7881644636932)
Error minima by case: (0.0 0.08366218546322646 0.0 0.2544999661913874 0.08366218546322646 0.03665572881693843 0.05364362086361196 0.05364362086361174 0.18746056987348036 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 1.0 0.0 0.1999999999999993 0.11633781453677372 0.20000000000000284 0.0 0.0 0.20000000000000284 0.06600429080441472 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.18334031018354613)
Average genome size in population (length): 42.116
Average program size in population (points): 43.114
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.391
Error (vector) diversity:			 0.394
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 167666760
--- Timings ---
Current time: 1481494332268 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_dec float_frominteger integer_max 5 float_max float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32762.38054320598
Median total errors in population: 1905.0326756290738
Error averages by case: (1041.0241940760113 1042.3033876217783 1041.2205686512327 1043.400301961021 1041.4306783962543 1040.6936317223208 1040.7513184350805 1042.1132723501964 1041.305931162234 1043.585512145748 1043.3266085040127 1043.297389468467 1042.4150660967523 1055.7986749695592 1190.6272457374062 1042.8034268397635 1046.7576694818192 1049.595745800583 1054.0339703422487 1040.9723886241777 1040.9912130532853 1074.6784345684844 1192.7806155984422 2118.0169496274652 1064.2913157482114 1043.0633788622267 1043.312757235726 1040.697926066885 1076.3750942929175 1040.7158757656443)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.03665572881693843 0.05364362086361196 0.05364362086361174 0.18746056987348036 0.0 0.08366218546322735 0.1999999999999993 0.40000000000000036 0.0 1.0 0.0 0.18999249660044626 0.11633781453677372 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.509
Average program size in population (points): 43.507
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.392
Error (vector) diversity:			 0.397
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 168942030
--- Timings ---
Current time: 1481494344157 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_yank float_mod in1 vector_integer_pushall vector_integer_pushall float_max float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 float_max vector_integer_replace integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29201.278482519716
Median total errors in population: 1559.2145744834543
Error averages by case: (921.0848542105442 922.2939792489057 921.2614136812085 923.5957638739818 921.3478789392534 920.7141260421027 920.7400594433191 922.3168130496383 921.3069784128056 923.6622557094984 924.1692393108781 923.6359798636894 922.570690464445 938.6743200712356 1066.8983681525153 922.6495627195891 929.7646499328574 930.1467727607284 935.3481960746994 920.9440660927977 921.03618963698 953.7839797337422 1076.7107192889625 1998.0357487348679 968.974331747205 923.7173902076543 923.9131167313559 920.6779703604724 960.5805989362503 920.7224690875136)
Error minima by case: (0.0 0.08366218546322646 0.0 0.316337814536773 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.006126550773847272 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 1.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 1.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 43.002
Average program size in population (points): 44.002
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.383
Error (vector) diversity:			 0.39
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 170232090
--- Timings ---
Current time: 1481494356213 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_take float_mod in1 vector_integer_pushall vector_integer_pushall integer_fromfloat float_stackdepth float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 integer_max 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32439.370612905535
Median total errors in population: 1518.2596976941318
Error averages by case: (1031.0864593157662 1032.3040659186447 1031.2739127041202 1033.3401048246967 1031.3700502721292 1030.7235053933964 1020.7672857826633 1022.1598758037013 1021.2420744412378 1033.538958331692 1033.4102878541 1033.305907190555 1022.3023027830977 1046.3636900725407 1185.6417854077497 1032.6938048314637 1037.0685844327704 1040.2652468214385 1044.1961732583445 1020.9350103824147 1020.9882284343159 1064.03920757651 1191.87031927078 2139.486254216149 1053.894351635465 1033.234907629262 1033.2826727469894 1020.7006713889363 1067.1356898461559 1030.74922433843)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.006126550773847272 0.0 0.08366218546322735 0.04609774565669511 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 4.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.886
Average program size in population (points): 43.883
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.395
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 171518670
--- Timings ---
Current time: 1481494368276 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_take in1 vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth float_frominteger integer_max 5 float_max float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec integer_max 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30698.323456452817
Median total errors in population: 1999.1826022429366
Error averages by case: (951.1193799404867 952.4413753614775 951.3664845449704 953.6877879966021 961.4413208585205 960.7534771813966 960.8143326325242 962.3118753565442 961.2339618925462 954.0329735119554 953.8404396861839 953.6064129530112 952.475028604447 968.3010776114788 1111.8606591142861 962.7919800826427 957.685385459637 971.5734420283565 966.9640063187506 961.0411592961113 951.1179218738315 983.1257312772003 1269.0413315071662 2367.1401630481955 978.1442930835279 953.4315435827358 953.760339906239 960.7360889236977 991.6684405462554 960.8150422720214)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.006126550773847272 0.0 0.08366218546322735 0.04609774565669511 0.40000000000000036 0.0 0.7163378145367574 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 10.799999999999955 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.506
Average program size in population (points): 43.504
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.404
Error (vector) diversity:			 0.411
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 172793850
--- Timings ---
Current time: 1481494380274 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_yank float_mod in1 float_mod vector_integer_pushall vector_integer_pushall float_stackdepth float_dec float_frominteger integer_max 5 float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 integer_max 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29509.867573604697
Median total errors in population: 1692.8927127582729
Error averages by case: (931.1097882573752 932.3512904021517 931.2717784108031 933.53200778495 931.3830332927583 930.7293936765857 930.7695910711252 932.3455235219193 931.3489036459828 933.5427725139349 933.6276246064302 933.2660272982536 932.6358327041112 945.0167639667122 1074.8455382087432 932.719866024811 937.641068837656 940.0668014079542 943.6763412646368 930.9192936562456 931.1150492338027 963.852490172591 1080.714647451645 2061.4373775245813 955.0215104245494 933.3162522820209 933.4030084370268 930.699718247158 966.7571410616588 930.7511382165027)
Error minima by case: (0.0 0.08366218546322646 0.0 0.2536436208636115 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.18746056987348036 0.0 0.08366218546322735 0.04609774565669511 0.35765948032338457 0.0 0.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 10.799999999999955 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.468
Average program size in population (points): 43.465
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.395
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 174067890
--- Timings ---
Current time: 1481494392364 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest vector_integer_take in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_dec float_frominteger integer_max 5 vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add 5 integer_max 5 float_max integer_div integer_dup float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34090.966894561476
Median total errors in population: 1886.5163378145367
Error averages by case: (1060.9646655590288 1062.1983746223384 1061.1280429352296 1063.4213115936288 1061.3700980945528 1070.6239883770963 1070.6813075900493 1062.2719584177441 1071.1860430557508 1063.6184665112976 1063.0604138560816 1063.1434174484925 1072.2566837211568 1075.7805289874443 1220.7223737572376 1062.671435231941 1066.0484179368186 1070.1289599118397 1074.3103558325467 1060.8692673060903 1070.8846935007969 1091.038778020115 1280.5400127883986 2725.204459881603 1083.1172121559732 1062.8782611145998 1063.1293571647234 1070.6123838514195 1096.4206889082086 1070.684936429244)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.14635637913638821 0.0 0.08366218546322735 0.04609774565669511 0.11633781453677372 0.0 0.7163378145367574 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 12.200000000000045 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 43.04
Average program size in population (points): 44.037
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.384
Error (vector) diversity:			 0.386
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 175359090
--- Timings ---
Current time: 1481494404426 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 1, :instruction vector_integer_take} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_pushall} {:close 2, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_yankdup} {:close 2, :instruction float_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_add} {:close 1, :instruction vector_integer_subvec} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (in1 vector_integer_rest vector_integer_yank vector_integer_take float_mod in1 float_mod in1 float_mod vector_integer_pushall vector_integer_pushall integer_fromfloat vector_integer_pushall float_max float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max vector_integer_yankdup float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add vector_integer_subvec 5 vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add)
Partial simplification: (in1 vector_integer_rest in1 vector_integer_pushall vector_integer_pushall float_stackdepth float_frominteger integer_max 5 float_max float_dup integer_rot float_stackdepth integer_div float_dec float_frominteger integer_max 5 float_max integer_dec integer_rot float_stackdepth integer_div integer_mod float_frominteger integer_add integer_max 5 float_max integer_div float_frominteger float_add)
Errors: [2.0 1.2000000000000002 0.0 1.5999999999999996 2.2 0.8 0.6 0.6000000000000001 3.2 4.0 7.199999999999999 2.8000000000000007 2.5999999999999996 7.0 29.0 4.0 16.2 12.600000000000001 3.799999999999997 0.0 3.0 4.799999999999997 21.80000000000001 12.799999999999955 16.799999999999997 2.4000000000000004 1.0 0.6 7.799999999999997 0.19999999999999996]
Total: 172.59999999999997
Mean: 5.7533336
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32201.83609864354
Median total errors in population: 1664.0104534588022
Error averages by case: (1021.0007963433949 1022.3611081080618 1021.2442317010556 1023.4789016845659 1021.3844412036073 1020.651874395993 1020.6651248830838 1022.2397258343798 1021.2017297486329 1023.7375175465858 1023.3139277796007 1023.3801572209455 1022.4876621774587 1035.9632058286281 1154.62052787662 1022.8686450106112 1026.879602806058 1030.6714531407224 1034.1913951483739 1020.9303971034287 1020.9870288699824 1050.170904673488 1176.2462430973385 2151.023930465234 1043.5834346479053 1023.2670909026809 1023.4308978245045 1020.6309197058927 1058.5361102886486 1020.6871126260361)
Error minima by case: (0.0 0.08366218546322646 0.0 0.053643620863612185 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.006126550773847272 0.0 0.08366218546322735 0.04609774565669511 0.11633781453677372 0.0 0.5403023058681242 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 6.7999999999999545 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.15
Average program size in population (points): 43.149
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.413
Error (vector) diversity:			 0.416
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 176623590
--- Timings ---
Current time: 1481494416255 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall integer_rot integer_add float_inc 5 float_max integer_yankdup integer_add integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (float_max in1 vector_integer_pushall integer_add 5 integer_yankdup integer_add integer_add integer_max integer_dec 5 integer_add 5 integer_div float_frominteger)
Errors: [0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.8 0.6 0.6000000000000001 0.19999999999999996 1.0 1.1999999999999993 2.8000000000000007 2.4000000000000004 10.0 8.0 0.0 1.1999999999999993 8.399999999999999 10.799999999999997 1.0 0.0 0.20000000000000284 90.19999999999999 12.200000000000045 21.799999999999997 2.4000000000000004 4.0 0.6 4.799999999999997 0.19999999999999996]
Total: 187.00000000000006
Mean: 6.233333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 31572.67967665711
Median total errors in population: 1499.2
Error averages by case: (1000.9836483179707 1002.2766698106269 1001.203486974719 1003.6589934186685 1001.4687463892212 1000.6563173657298 1000.706244962803 1002.4509690431997 1001.2896046270337 1003.98597920613 1003.5478869168595 1003.6531512950754 1002.4532358333934 1017.3169729804948 1138.0294597406144 1002.9639457753215 1007.9082933078076 1010.4874627462569 1015.5769458375529 1000.970906617644 1000.9030679386119 1031.3416829904527 1165.2278569829418 2074.7757710900737 1033.4966571997325 1003.3996290241006 1003.7700641647393 1000.6328751096347 1036.823614042718 1000.7195369469614)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.006126550773847272 0.0 0.08366218546322735 0.04609774565669511 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 7.2000000000000455 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.253
Average program size in population (points): 43.249
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.379
Error (vector) diversity:			 0.383
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 177891180
--- Timings ---
Current time: 1481494427953 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall integer_rot integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_yank in1 vector_integer_pushall integer_rot integer_add 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 float_max integer_div integer_dup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 1.5999999999999996 0.20000000000000018 0.8 1.6 0.6000000000000001 1.2 1.0 5.199999999999999 2.8000000000000007 1.4000000000000004 8.0 1.0 0.0 5.199999999999999 0.3999999999999986 3.799999999999997 0.0 0.0 0.7999999999999972 0.19999999999998863 4.2000000000000455 42.8 6.4 5.0 1.6 12.799999999999997 1.2]
Total: 112.00000000000003
Mean: 3.7333333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 31463.406421354553
Median total errors in population: 1100.8000000000002
Error averages by case: (1001.0152074285644 1002.284443269407 1001.2303867499975 1003.4904321300094 1001.3984556147994 1000.6373162978762 1000.6936498435688 1002.0716093882055 1001.2241130459219 1003.6660052729952 1003.9664716296588 1003.460083975547 1002.5319131398304 1015.3079309817008 1138.8973951537544 1002.8610510628757 1007.4664930260856 1009.915520886761 1013.8594084199595 1000.9591008353495 1001.0057815531537 1031.8014415420548 1144.325663903387 2000.9689945154546 1025.2632044740462 1003.5644855831424 1003.6714893110135 1000.6304538322393 1034.519524839521 1000.7183936476448)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.016146836547142218 0.16017028665036626 0.0 0.08366218546322735 0.1999999999999993 0.14030230586813985 0.0 0.0 0.0 0.18999249660044626 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 2.7999999999999545 0.20000000000000284 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.145
Average program size in population (points): 43.144
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.404
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 179155530
--- Timings ---
Current time: 1481494439571 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall integer_rot integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (float_mod vector_integer_pushall in1 vector_integer_pushall integer_rot integer_add 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 float_max integer_div integer_dup float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 1.5999999999999996 0.20000000000000018 0.8 1.6 0.6000000000000001 1.2 1.0 5.199999999999999 2.8000000000000007 1.4000000000000004 8.0 1.0 0.0 5.199999999999999 0.3999999999999986 3.799999999999997 0.0 0.0 0.7999999999999972 0.19999999999998863 4.2000000000000455 42.8 6.4 5.0 1.6 12.799999999999997 1.2]
Total: 112.00000000000003
Mean: 3.7333333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 26660.908047339402
Median total errors in population: 1100.8000000000002
Error averages by case: (831.0533805406344 832.4551603818078 841.2277233806593 833.6116789282726 831.6993393592286 850.8139410346179 850.6473464136077 852.1718900763886 861.2403540894918 833.8715317198803 833.7687045186859 833.7928756731957 862.4965374921297 846.4165186789323 970.0612444923397 832.9585170657409 837.4113153776118 840.5017688919032 844.6662470849865 860.8913095647224 860.938712963374 861.5455240650946 982.2708880724111 1882.938143242788 856.6237123016995 843.5839824765709 833.9154658516161 850.5892041958807 866.0486756814912 840.6963537236182)
Error minima by case: (0.0 0.08366218546322646 0.0 0.3084764742512274 0.08366218546322646 0.08366218546322618 0.05364362086361196 0.05364362086361174 0.16017028665036626 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.0061265507738426095 0.19999999999998863 2.7999999999999545 0.05322010772258068 0.053643620863612185 0.0 0.05364362086361196 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.284
Average program size in population (points): 43.282
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.393
Error (vector) diversity:			 0.394
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 180424050
--- Timings ---
Current time: 1481494451327 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall integer_rot integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_rot integer_add 5 float_stackdepth integer_max vector_integer_nth integer_max integer_dec integer_add 5 integer_add integer_add integer_max integer_max 5 integer_div float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 1.5999999999999996 0.20000000000000018 0.8 1.6 0.6000000000000001 1.2 1.0 5.199999999999999 2.8000000000000007 1.4000000000000004 8.0 1.0 0.0 5.199999999999999 0.3999999999999986 3.799999999999997 0.0 0.0 0.7999999999999972 0.19999999999998863 4.2000000000000455 42.8 6.4 5.0 1.6 12.799999999999997 1.2]
Total: 112.00000000000003
Mean: 3.7333333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 37230.765389580425
Median total errors in population: 1102.0
Error averages by case: (1190.9387241254642 1192.2606347649296 1191.1655971052255 1193.4798388990482 1191.2686424621684 1190.6920074775433 1190.7448749892128 1192.1116242491821 1191.1273510068506 1193.6160983674508 1193.7628114974025 1193.4777336268733 1192.205530403098 1210.4907587994803 1322.4182119240018 1192.7885810920552 1197.8494443501766 1199.8435102035355 1205.2043139165662 1190.8715727817369 1190.9295412767656 1220.4170663315797 1334.340654924041 2248.988342616026 1223.326674565875 1193.4289747248367 1193.684226319587 1190.6831205648562 1227.9072417872917 1190.741684427525)
Error minima by case: (0.0 0.08366218546322646 0.0 0.15390225434330596 0.08366218546322646 0.08366218546322618 0.01614683654714233 0.016146836547142218 0.16003693029466137 0.0 0.08366218546322735 0.11391640296207761 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.504
Average program size in population (points): 42.498
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.393
Error (vector) diversity:			 0.393
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 181669170
--- Timings ---
Current time: 1481494462823 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall integer_rot integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_rot integer_add 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 integer_div float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 1.5999999999999996 0.20000000000000018 0.8 1.6 0.6000000000000001 1.2 1.0 5.199999999999999 2.8000000000000007 1.4000000000000004 8.0 1.0 0.0 5.199999999999999 0.3999999999999986 3.799999999999997 0.0 0.0 0.7999999999999972 0.19999999999998863 4.2000000000000455 42.8 6.4 5.0 1.6 12.799999999999997 1.2]
Total: 112.00000000000003
Mean: 3.7333333
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 26033.89219927251
Median total errors in population: 959.8781382748183
Error averages by case: (810.9829365677588 812.2198583582499 811.1890572657788 813.4405310198875 811.3654651059223 810.7039235309916 810.7531587413623 812.1578097991438 811.258229057379 813.6639863425384 813.6581306656374 813.4246488335314 812.5139507500686 826.0409287115018 947.5450310024598 812.8600543888173 817.3236847442043 820.7932529194438 824.9491319864416 810.9331306181493 810.9633700785159 840.6106569734811 1070.2119493625037 1959.2106401128208 840.579285064808 813.5088886839523 813.6987048560958 810.7023297367285 845.8442322702239 810.7852417240935)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.08366218546322618 0.01614683654714233 0.016146836547142218 0.16017028665036603 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.010900179870141358 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.443
Average program size in population (points): 43.442
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.403
Error (vector) diversity:			 0.403
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 182942460
--- Timings ---
Current time: 1481494474388 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_rest in1 vector_integer_pushall float_sin integer_add 5 float_stackdepth integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 integer_div float_frominteger)
Errors: [1.0 1.2000000000000002 0.0 1.5999999999999996 0.20000000000000018 0.8 0.6 1.6 1.2 1.0 5.199999999999999 2.8000000000000007 1.4000000000000004 8.0 1.0 0.0 5.199999999999999 0.3999999999999986 3.799999999999997 0.0 0.0 0.7999999999999972 0.19999999999998863 4.2000000000000455 42.8 6.4 5.0 1.6 12.799999999999997 0.19999999999999996]
Total: 111.00000000000003
Mean: 3.7
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 29502.147134627998
Median total errors in population: 964.8
Error averages by case: (940.9134377538479 942.1393415115485 941.0734519503378 943.1473812881788 941.3731584174159 940.6449484733364 940.6938954887345 942.0520309064756 941.1263088611881 943.4848701631743 933.2134742939127 933.2191552610666 932.4154645269333 945.3936939673465 1058.3309467798726 942.7547078691841 936.7170509790774 939.605606600481 943.9859831235354 940.9589311155663 940.9245978535781 968.6609698211299 1076.4806528894992 1921.5205636990154 958.4686589714955 933.2619288634802 933.489151415435 940.6319350512316 964.7424842815184 940.722352450389)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.08366218546322618 0.01614683654714233 0.016146836547142218 0.006126550773847272 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.131
Average program size in population (points): 43.131
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.402
Error (vector) diversity:			 0.402
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 184206390
--- Timings ---
Current time: 1481494486080 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod vector_integer_pushall vector_integer_yank float_stackdepth integer_div float_dec float_frominteger float_max float_dup float_stackdepth in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (float_stackdepth float_dec float_frominteger in1 vector_integer_pushall integer_add float_inc 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 float_max vector_integer_nth integer_add integer_add vector_integer_nth integer_max 5 integer_div float_frominteger float_add)
Errors: [0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 1.8 1.6 2.6 2.2 0.0 4.199999999999999 1.8000000000000007 0.40000000000000036 7.0 0.0 1.0 4.199999999999999 0.6000000000000014 2.799999999999997 1.0 1.0 0.20000000000000284 0.8000000000000114 3.2000000000000455 41.8 5.4 4.0 2.6 11.799999999999997 1.2]
Total: 105.80000000000005
Mean: 3.5266666
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 33212.82740166492
Median total errors in population: 1100.8
Error averages by case: (1060.9710869145024 1062.1949774947345 1061.1687759567953 1063.3425291024337 1061.3476375524524 1060.6634880642694 1060.7040307010711 1062.0827641619217 1061.1715028246908 1063.4334782928447 1063.5261267407097 1063.3074528082104 1062.3332343084808 1074.8272262119683 1184.8438577116628 1062.726352044102 1067.1853098468882 1070.0063409774443 1073.0916164887929 1061.016726052555 1060.9815827556047 1088.5150848577302 1197.2161354827076 2040.811918541341 1083.4307099520838 1063.21172906778 1063.4923589533182 1060.6639702138364 1093.8306438164507 1060.7287537675081)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.08366218546322618 0.01614683654714233 0.016146836547142218 0.16017028665036603 0.0 0.08366218546322735 0.1999999999999993 0.11316346069538508 0.0 0.0 0.0 0.1999999999999993 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.651
Average program size in population (points): 42.65
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.388
Error (vector) diversity:			 0.389
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 185455920
--- Timings ---
Current time: 1481494497960 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod vector_integer_pushall vector_integer_yank float_stackdepth integer_div float_dec float_frominteger float_max float_dup float_stackdepth in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (float_stackdepth float_frominteger float_dup in1 vector_integer_pushall integer_add float_inc 5 float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec integer_add 5 vector_integer_nth integer_add integer_add integer_max 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Errors: [0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 1.8 1.6 2.6 2.2 0.0 4.199999999999999 1.8000000000000007 0.40000000000000036 7.0 0.0 1.0 4.199999999999999 0.6000000000000014 2.799999999999997 1.0 1.0 0.20000000000000284 0.8000000000000114 3.2000000000000455 41.8 5.4 4.0 2.6 11.799999999999997 1.2]
Total: 105.80000000000005
Mean: 3.5266666
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 33493.082042442904
Median total errors in population: 1080.6000000000001
Error averages by case: (940.956546883989 942.3909414918902 941.2191615265724 943.7426623998631 941.4211475304345 940.6258319873219 940.6820694059548 942.1906167166355 941.1204676963439 943.9358120126694 944.214138611023 943.8272288808065 942.5559544828288 958.9404850534225 1107.7189662826481 943.012065185095 949.5670302681154 950.8444649976875 956.003842058437 940.9900143463174 941.0512303008852 971.0247296556489 1138.018836271914 5650.2816520301385 981.6857555991544 944.0019977591722 944.172781973228 940.6328804993994 985.5392063145506 940.7135242207324)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.07987335076852736 0.05364362086361196 0.016146836547142218 0.1336332546071195 0.0 0.08366218546322735 0.1999999999999993 0.053643620863612185 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.931
Average program size in population (points): 42.931
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.388
Error (vector) diversity:			 0.391
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 186713850
--- Timings ---
Current time: 1481494509768 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction integer_max})
Best program: (vector_integer_subvec float_mod vector_integer_pushall vector_integer_yank float_stackdepth integer_div float_dec float_frominteger float_max float_dup float_stackdepth in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add integer_max)
Partial simplification: (vector_integer_subvec float_stackdepth float_frominteger in1 vector_integer_pushall integer_add float_inc 5 float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 1.8 1.6 2.6 2.2 0.0 4.199999999999999 1.8000000000000007 0.40000000000000036 7.0 0.0 1.0 4.199999999999999 0.6000000000000014 2.799999999999997 1.0 1.0 0.20000000000000284 0.8000000000000114 3.2000000000000455 41.8 5.4 4.0 2.6 11.799999999999997 1.2]
Total: 105.80000000000005
Mean: 3.5266666
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 30533.41425416319
Median total errors in population: 957.4000000000001
Error averages by case: (960.9014157823304 962.075952133103 961.1361902108832 963.3156737461553 961.3030707620212 960.630702193673 960.6803281888839 962.0742112554057 961.0981974100847 963.6460152712815 963.6708057869462 963.5611928263677 962.4504776003798 977.6635124696155 1129.4868977966291 962.7530064980466 967.2854284763918 969.9080505169491 976.2970810630154 960.9126387868646 960.95669452694 988.2624043120729 1275.8058353562406 2021.7010427475898 992.5598794231319 963.5554880412267 963.8672448376536 960.6211772668646 994.5226345352613 960.7110043411601)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.07987335076852736 0.01614683654714233 0.016146836547142218 0.04147098480789646 0.0 0.08366218546322735 0.04031208714117973 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.05351258147095095 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.832
Average program size in population (points): 42.827
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.382
Error (vector) diversity:			 0.385
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 187968810
--- Timings ---
Current time: 1481494522137 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod vector_integer_pushall vector_integer_yank float_stackdepth integer_div float_dec float_frominteger float_max float_dup float_stackdepth in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (float_stackdepth integer_div float_frominteger in1 vector_integer_pushall integer_add float_inc 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 integer_div float_frominteger float_add)
Errors: [0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 1.8 1.6 2.6 2.2 0.0 4.199999999999999 1.8000000000000007 0.40000000000000036 7.0 0.0 1.0 4.199999999999999 0.6000000000000014 2.799999999999997 1.0 1.0 0.20000000000000284 0.8000000000000114 3.2000000000000455 41.8 5.4 4.0 2.6 11.799999999999997 1.2]
Total: 105.80000000000005
Mean: 3.5266666
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 21119.099356458784
Median total errors in population: 856.5999999999999
Error averages by case: (660.8261322278623 661.9297278277695 661.1190889203651 663.1642216176677 661.2143456020533 660.5828465468504 660.6553240262099 662.1907166708897 661.0315728039844 663.2684331065307 663.0385766439675 663.1450499629902 662.2086386649057 673.7122754244884 783.8235433804682 662.4772835262248 666.1538297034535 670.1398620243202 672.8574491534706 660.8736400588544 660.8974780069117 688.0150953634287 801.7360093640152 1554.6452163515023 681.4431122837377 662.9799343043056 663.2732102921829 660.5896734822179 690.4712403131199 660.635828804031)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.07987335076852736 0.01614683654714233 0.016146836547142218 0.17057295539074402 0.0 0.08366218546322735 0.1999999999999993 0.016146836547141774 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 42.314
Average program size in population (points): 43.312
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.376
Error (vector) diversity:			 0.383
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 189238230
--- Timings ---
Current time: 1481494533837 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 2, :instruction float_dup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 1, :instruction float_inc} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_dup_items})
Best program: (vector_integer_subvec float_mod vector_integer_pushall vector_integer_yank float_stackdepth integer_div float_dec float_frominteger float_max float_dup float_stackdepth in1 vector_integer_pushall float_sin integer_add float_inc 5 float_max float_stackdepth float_stackdepth integer_add integer_max vector_integer_nth integer_max integer_dec vector_integer_pushall integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div integer_dup float_frominteger float_add float_dup_items)
Partial simplification: (vector_integer_subvec float_stackdepth float_frominteger float_stackdepth in1 vector_integer_pushall integer_add float_inc 5 float_stackdepth float_stackdepth integer_add integer_max integer_max integer_dec integer_add 5 integer_add integer_add integer_max 5 vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.0 0.20000000000000018 1.0 0.5999999999999996 0.7999999999999998 1.8 1.6 2.6 2.2 0.0 4.199999999999999 1.8000000000000007 0.40000000000000036 7.0 0.0 1.0 4.199999999999999 0.6000000000000014 2.799999999999997 1.0 1.0 0.20000000000000284 0.8000000000000114 3.2000000000000455 41.8 5.4 4.0 2.6 11.799999999999997 1.2]
Total: 105.80000000000005
Mean: 3.5266666
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 29381.71521254033
Median total errors in population: 1100.8000000000002
Error averages by case: (930.8940974721249 932.1128428329939 931.0890380971977 933.2014533257161 931.2699035102527 930.6177024110434 930.682965170488 931.9379017245673 931.0577894644281 933.7228009458296 933.5289583525725 933.6330805384265 932.3311446576163 944.8678942303121 1048.1111594158579 932.7538047401803 937.1072277825646 940.8301669083465 943.0303511694993 930.9251481729522 931.0037080592894 957.057714246267 1063.7173522549278 1987.5022648169531 954.1282420651359 933.369120761071 933.6544431113641 930.6193362991223 966.2835568344473 930.6740431687523)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.03665572881693843 0.01614683654714233 0.016146836547142662 0.1320736231079691 0.0 0.08366218546322735 0.1999999999999993 0.016146836547141774 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.798
Average program size in population (points): 42.797
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.397
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 190492170
--- Timings ---
Current time: 1481494545406 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 1, :instruction float_mod} {:close 1, :instruction float_rot} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_take} {:close 2, :instruction float_max} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_cos} {:close 2, :instruction float_dup} {:close 0, :instruction float_cos} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_subvec float_mod float_rot integer_fromfloat vector_integer_rest vector_integer_yank vector_integer_take float_max vector_integer_pushall vector_integer_swap in1 vector_integer_pushall float_cos float_dup float_cos float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace integer_inc 5 float_frominteger float_cos integer_add integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_subvec vector_integer_swap in1 vector_integer_pushall integer_max integer_inc 5 float_frominteger float_cos integer_add integer_add 5 integer_add integer_add 5 integer_div float_frominteger float_add)
Errors: [0.2836621854632262 0.9163378145367735 1.2836621854632266 0.683662185463227 0.08366218546322646 1.0836621854632262 0.8836621854632262 0.8836621854632267 1.4836621854632261 2.7163378145367734 0.08366218546322735 1.516337814536774 0.8836621854632263 14.716337814536772 10.716337814536786 2.7163378145367734 0.08366218546322557 3.1163378145367737 9.516337814536769 1.2836621854632266 1.2836621854632262 4.516337814536769 18.916337814536746 0.08366218546325399 1.5163378145367687 0.8836621854632263 0.28366218546322663 0.8836621854632262 1.5163378145367687 0.48366218546322615]
Total: 85.30197311277935
Mean: 2.843399
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 24853.76336668544
Median total errors in population: 846.9999999999998
Error averages by case: (780.8629814568187 781.8934428277106 781.0299875152567 782.9859638114405 781.2038851171653 780.5954139763323 780.6650817462993 781.7082221081722 781.0220997125474 783.2696210842546 783.3931808464699 783.1224007396614 782.2586223803381 794.2938657960411 900.0027315615458 782.5612022097965 786.8443272170385 790.6178969476523 792.798699467821 780.8744035384923 780.9879670355186 806.924228929008 933.9121165200966 1794.5138570627523 803.7801053792231 783.2495768672815 783.3329845823013 780.6062327663915 813.8137667469751 780.6385007350126)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.08366218546322646 0.03665572881693843 0.01614683654714233 0.016146836547142662 0.10929742682568167 0.0 0.08366218546322735 0.1999999999999993 0.016146836547141774 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.14635637913642086 0.08366218546325399 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.06738159169423863)
Average genome size in population (length): 42.196
Average program size in population (points): 43.194
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.397
Error (vector) diversity:			 0.399
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 191758050
--- Timings ---
Current time: 1481494557080 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction 5} {:close 0, :instruction float_cos} {:close 2, :instruction float_dup} {:close 0, :instruction float_cos} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_take in1 integer_fromfloat vector_integer_nth vector_integer_reverse vector_integer_pushall vector_integer_shove integer_fromfloat float_shove vector_integer_replace integer_add vector_integer_pushall vector_integer_pushall 5 float_cos float_dup float_cos float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace integer_inc 5 float_frominteger float_cos integer_add integer_add 5 float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_reverse vector_integer_pushall vector_integer_replace integer_add 5 float_stackdepth float_frominteger integer_max integer_inc 5 float_frominteger float_cos integer_add integer_add 5 integer_add integer_add vector_integer_nth 5 integer_div float_frominteger float_add)
Errors: [1.2836621854632266 1.0836621854632265 1.2836621854632266 0.683662185463227 1.0836621854632265 2.083662185463226 1.8836621854632263 1.8836621854632267 1.4836621854632261 1.2836621854632249 1.0836621854632273 1.4836621854632241 0.8836621854632263 1.2836621854632284 1.2836621854632426 1.2836621854632266 1.0836621854632256 0.8836621854632263 1.4836621854632313 1.2836621854632266 1.2836621854632262 1.4836621854632313 1.083662185463254 1.083662185463254 1.4836621854632313 0.8836621854632263 1.2836621854632249 1.8836621854632263 1.4836621854632313 2.483662185463226]
Total: 40.509865563896874
Mean: 1.3503288
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 33521.38614052598
Median total errors in population: 1100.8000000000002
Error averages by case: (1030.8437755593097 1031.9381033862023 1031.03008754262 1032.9632013808007 1031.183836994254 1030.5602867547661 1030.6359170161713 1031.819983255954 1031.0181087652286 1033.4264406526213 1033.677776640837 1033.1125684028405 1032.3058459080285 1046.0320047623431 1193.5503274512778 1032.6587025805625 1037.545310462275 1040.875239427192 1045.0526587552338 1030.885263196926 1031.015908154945 1056.573684128374 1384.0003532162184 2954.8086076295926 1060.4629956658457 1033.5665454830016 1033.5368690978853 1030.5679571443393 1065.092173915803 1030.645607194504)
Error minima by case: (0.0 0.08366218546322646 0.0 0.059697694131859436 0.036655728816938016 0.03665572881693843 0.01614683654714233 0.01657656541299346 0.01537098547301241 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.01700572533533773 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.08366218546325399 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 41.727
Average program size in population (points): 42.726
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.403
Error (vector) diversity:			 0.406
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 193009860
--- Timings ---
Current time: 1481494568855 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_take} {:close 1, :instruction in1} {:close 1, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction 5} {:close 0, :instruction float_cos} {:close 2, :instruction float_dup} {:close 0, :instruction float_cos} {:close 0, :instruction float_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction float_dec} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_take in1 integer_fromfloat vector_integer_nth vector_integer_reverse vector_integer_pushall vector_integer_shove integer_fromfloat float_shove vector_integer_replace integer_add vector_integer_pushall vector_integer_pushall 5 float_cos float_dup float_cos float_stackdepth integer_div float_dec float_frominteger integer_max vector_integer_replace integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_reverse vector_integer_pushall integer_add 5 float_stackdepth float_frominteger integer_max integer_inc 5 float_frominteger float_cos integer_add integer_add integer_add 5 float_max integer_div float_frominteger float_add)
Errors: [0.2836621854632262 0.08366218546322646 0.2836621854632262 0.316337814536773 0.08366218546322646 1.0836621854632262 0.8836621854632262 0.8836621854632267 0.48366218546322615 0.28366218546322486 0.08366218546322735 0.4836621854632259 0.11633781453677372 0.2836621854632284 0.2836621854632426 0.28366218546322663 0.08366218546322557 0.11633781453677372 0.48366218546323125 0.2836621854632262 0.2836621854632262 0.48366218546323125 0.08366218546325399 0.08366218546325399 0.48366218546323125 0.11633781453677372 0.28366218546322663 0.8836621854632262 0.48366218546323125 1.4836621854632261]
Total: 11.84056808019107
Mean: 0.3946856
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 27308.076317370214
Median total errors in population: 957.4000000000001
Error averages by case: (860.9989978965315 862.1908677574914 861.0854976953453 863.2169605831456 861.3212030776127 860.7227805609404 860.7746240318428 861.8204137865165 861.178337844869 863.8021937147973 863.7295971705278 863.5578497010649 862.405496986211 876.3610257733192 982.1393142928514 862.9324506298408 867.4677163350602 871.412572240362 874.4004616551238 860.952161374227 861.1313469201025 887.9984885387181 996.65050635133 1926.3289237711585 886.4872688920639 863.6430140243051 863.7770890428046 860.7252418129198 898.1037098830186 860.7602050260889)
Error minima by case: (0.0 0.08366218546322646 0.0 0.01948499375341406 0.036655728816938016 0.03665572881693843 0.01614683654714233 0.01657656541299346 0.0061265507738474945 0.0 0.08366218546322735 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.08366218546322557 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.08366218546325399 0.08366218546325399 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.746
Average program size in population (points): 42.744
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.385
Error (vector) diversity:			 0.386
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 194262240
--- Timings ---
Current time: 1481494580559 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_add integer_add integer_max 5 integer_div float_frominteger float_add)
Errors: [0.2836621854632262 0.08366218546322646 0.2836621854632262 0.316337814536773 0.08366218546322646 0.08366218546322624 0.11633781453677378 0.11633781453677372 0.5163378145367739 0.28366218546322486 0.08366218546322735 0.5163378145367741 0.11633781453677372 0.2836621854632284 0.2836621854632426 0.28366218546322663 0.08366218546322557 0.11633781453677372 0.5163378145367687 0.2836621854632262 0.2836621854632262 0.5163378145367687 0.08366218546325399 0.08366218546325399 0.5163378145367687 0.11633781453677372 0.28366218546322663 0.11633781453677378 0.5163378145367687 0.5163378145367739]
Total: 7.767324370926508
Mean: 0.2589108
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 28173.2220215398
Median total errors in population: 584.7999999999998
Error averages by case: (890.892636989384 891.891036573908 891.0459223342746 892.8608721785416 891.1922884985402 890.7027253593773 890.7090619375205 891.6838817784678 891.0509463288305 893.4941940872757 893.3184126993959 893.3978968224222 892.2145469048762 908.1433655123894 1012.7745121815776 892.5187103910598 896.5694586726107 900.0915608051002 906.1110357800031 890.8816350034434 890.9061577137084 912.4314773961588 1183.3283669447399 1767.8497620856856 923.0281980564772 893.3325996695497 893.6482288298067 890.678739283249 925.6270386627847 890.8467520586313)
Error minima by case: (0.0 0.007040387711091611 0.0 0.059697694131859436 0.0798733507685272 0.04369911575788776 0.01614683654714233 0.01657656541299346 0.0061265507738474945 0.0 0.07987335076852808 0.1999999999999993 0.11633781453677372 0.0 0.0 0.0 0.07987335076852631 0.05364362086361041 0.20000000000000284 0.0 0.0 0.20000000000000284 0.07987335076853697 0.07987335076859381 0.20000000000000284 0.053643620863612185 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 41.841
Average program size in population (points): 42.838
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.355
Error (vector) diversity:			 0.356
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 195517470
--- Timings ---
Current time: 1481494592046 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_max integer_add integer_add integer_inc 5 float_frominteger float_cos integer_add float_max float_sin integer_add 5 vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.2798733507685274 0.0798733507685272 0.2798733507685274 0.32012664923147227 0.0798733507685272 0.07987335076852736 0.12012664923147265 0.12012664923147254 0.47987335076852733 0.2798733507685256 0.07987335076852808 0.47987335076852666 0.12012664923147298 0.2798733507685256 0.2798733507685256 0.2798733507685274 0.07987335076852631 0.12012664923147298 0.47987335076852844 0.2798733507685274 0.2798733507685274 0.47987335076852844 0.07987335076853697 0.07987335076859381 0.47987335076852844 0.12012664923147298 0.2798733507685274 0.12012664923147265 0.47987335076852844 0.47987335076852733]
Total: 7.477973612296513
Mean: 0.24926579
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 12575.734127590318
Median total errors in population: 11.757213716907675
Error averages by case: (390.7844849359732 391.57447435358137 390.8328279468714 392.33176612437114 391.06951458527146 390.59777803216275 390.59298035932045 391.07658482256306 390.839725979503 393.185125531478 392.6263723379668 392.97194574228297 391.47654783676154 402.9796418580558 454.89742038075747 392.3449766925368 394.6295604412901 396.8982389922878 401.8587477627533 390.8309681421598 390.77074603325156 404.8633592516483 479.71759338302127 988.1033082154031 407.4989703387715 392.5032038508841 392.92971679034423 390.58218389193064 413.5225577147693 390.84280526235773)
Error minima by case: (0.0 0.0798733507685272 0.0 0.032675629073546375 0.0798733507685272 0.04369911575788776 0.01614683654714233 0.01657656541299346 0.0061265507738474945 0.0 0.07987335076852808 0.1999999999999993 0.10847647425122897 0.0 0.0 0.0 0.07987335076852631 0.11633781453677017 0.20000000000000284 0.0 0.0 0.20000000000000284 0.07987335076853697 0.07987335076859381 0.20000000000000284 0.016146836547141774 0.0 0.01614683654714233 0.20000000000000284 0.0061265507738474945)
Average genome size in population (length): 33.848
Average program size in population (points): 34.848
Average percent parens in population: 0.032
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 314
Genome diversity (% unique Plush genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 314
Syntactic diversity (% unique Push programs):	 0.421
Total error diversity:				 0.241
Error (vector) diversity:			 0.241
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 196532910
--- Timings ---
Current time: 1481494603042 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_add integer_add integer_add integer_add integer_inc 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.800000000000043
Mean: 0.19333333
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 17000.668999055895
Median total errors in population: 9.20000000000004
Error averages by case: (540.8661538975284 541.6608848798234 540.9081241939292 542.5453275362104 541.1583987838393 540.5229660451447 540.5472120293125 540.9688281158441 540.89962441048 543.4316430705975 542.8691314671801 543.3310249132378 541.5622487056627 554.1156176373511 601.350031790494 542.4314222531685 544.8606655543404 546.8253756994594 552.7727090397883 540.8557515765409 540.790697978603 554.3265317091273 631.4532767465698 1061.1398773311355 559.1149852875428 542.7910134048316 543.257358653937 540.5247157001238 562.0037529212722 540.7836477227687)
Error minima by case: (0.0 0.0762339294153982 0.0 0.032675629073546375 0.0762339294153982 0.04369911575788776 0.01614683654714233 0.01657656541299346 0.0061265507738474945 0.0 0.0762339294153982 0.041470984807896016 0.053643620863612185 0.0 0.0 0.0 0.0762339294153982 0.11633781453677372 0.041470984807901345 0.0 0.0 0.0061265507738426095 0.07623392941542306 0.07623392941536622 0.041470984807901345 0.053643620863612185 0.0 0.01614683654714233 0.041470984807901345 0.0061265507738474945)
Average genome size in population (length): 37.795
Average program size in population (points): 38.794
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 282
Genome diversity (% unique Plush genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.214
Error (vector) diversity:			 0.214
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 197666760
--- Timings ---
Current time: 1481494613279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_inc integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 13726.609635920722
Median total errors in population: 7.538594967411713
Error averages by case: (430.8736244158311 431.6970400772649 430.88697676721654 432.6266901763579 431.19078658851345 430.46137966476107 430.5339767049628 430.94758653013184 430.77307665067286 433.6190930770287 433.10337350572314 433.46161713059877 431.54992430004023 446.34756768117404 490.16428183220563 432.50621706374346 435.3387915951492 436.8858750100399 443.99514981390433 430.86961237553874 430.74243682970234 443.87969380697007 522.5666833352254 964.0549885872547 454.1129348129243 432.9623998853031 433.40175510586135 430.52173544375876 455.8649065848385 430.66946056806745)
Error minima by case: (0.0 0.07273429469004 0.0 0.027373626464038736 0.018574144461719122 0.04369911575788776 0.008083009640765582 0.008083009640765582 0.012941579421177574 0.0 0.07273429469004 0.041470984807896016 0.053643620863612185 0.0 0.0 0.0 0.07273429469004 0.11439525852355104 0.041470984807901345 0.0 0.0 0.0061265507738426095 0.07273429469006487 0.03023688754160503 0.041470984807901345 0.053643620863612185 0.0 0.008083009640765582 0.041470984807901345 0.04147098480789646)
Average genome size in population (length): 39.067
Average program size in population (points): 40.067
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.195
Error (vector) diversity:			 0.195
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 198838770
--- Timings ---
Current time: 1481494623450 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_set} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth vector_integer_set integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger integer_inc integer_add integer_add integer_add integer_add integer_max integer_inc 5 float_frominteger 5 float_max float_max integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 20066.01812452434
Median total errors in population: 14.233538459006926
Error averages by case: (640.9568785473325 641.8806349590475 640.9764058651035 642.7192182497371 641.3640209486485 640.5104145498218 640.5791817009774 641.0673657175587 640.8630520743042 643.827758240112 643.1436969257574 643.5856180791201 641.7732491488189 655.3677911788238 704.0741206200565 642.9920513041579 645.1631176837868 647.597262661717 653.902526665827 640.9729373839543 640.8154200690611 654.669750767022 740.6507673457568 1204.534421484525 660.5526012407252 643.1145632650915 643.5758075180811 640.5733153119862 663.532899740786 640.6812752766191)
Error minima by case: (0.0 0.018574144461719122 0.0 0.027373626464038736 0.018574144461719122 0.01857414446171929 0.008083009640765582 0.008083009640765582 0.00764885937514137 0.0 0.018574144461718234 0.041470984807896016 0.053643620863612185 0.0 0.0 0.0 0.01857414446172001 0.03321730886563046 0.041470984807901345 0.0 0.0 0.0061265507738426095 0.01857414446169514 0.018574144461808828 0.041470984807901345 0.053643620863612185 0.0 0.008083009640765582 0.041470984807901345 0.00764885937514137)
Average genome size in population (length): 41.354
Average program size in population (points): 42.354
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.23
Error (vector) diversity:			 0.23
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 200079390
--- Timings ---
Current time: 1481494633480 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_inc 5 float_frominteger integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger 5 vector_integer_replace integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 22817.764942917773
Median total errors in population: 7.645531413121253
Error averages by case: (740.7506906227793 741.3616567491049 740.7610328469494 742.0063970432724 741.0093714228149 740.463760162359 740.5489275411048 740.8347335576129 740.7355288872883 742.7705832048229 742.3246104135637 742.688564033763 741.2527715547396 751.1191456888909 786.9164485676989 741.9897865351395 743.7284798189858 745.4408252728326 750.1267329815408 740.7547293487681 740.6539763463927 750.7179829023885 812.0897649054921 1138.5419973002904 754.9950406603203 742.2786804129559 742.6039715317562 740.539407149508 757.1145964230827 740.6447490315516)
Error minima by case: (0.0 0.018574144461719122 0.0 0.027373626464038736 0.018574144461719122 0.01857414446171929 0.008083009640765582 0.008083009640765582 0.010619127001597839 0.0 0.018574144461718234 0.041470984807896016 0.053643620863612185 0.0 0.0 0.0 0.01857414446172001 0.03321730886563046 0.041470984807901345 0.0 0.0 0.041470984807901345 0.01857414446169514 0.018574144461808828 0.041470984807901345 0.053643620863612185 0.0 0.008083009640765582 0.041470984807901345 0.01865177489973191)
Average genome size in population (length): 40.894
Average program size in population (points): 41.893
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 196
Genome diversity (% unique Plush genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.448
Total error diversity:				 0.211
Error (vector) diversity:			 0.211
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 201306210
--- Timings ---
Current time: 1481494643885 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall integer_inc 5 float_frominteger integer_add integer_add float_max float_max integer_add integer_add integer_max integer_inc 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 26455.52362578411
Median total errors in population: 8.541702066182117
Error averages by case: (860.8193257990687 861.5309956858549 860.8344216653163 862.2545134970695 861.1670612059195 860.4608890503762 860.5419760640646 860.9144032419371 860.8060423210968 863.2149839165871 862.6314529370252 863.0427132427297 861.4337535555693 872.786292781254 910.7189015749741 862.3313066609896 864.2950577133872 866.0175167940582 871.6518522216849 860.8442990503743 860.7287206255909 871.7709944495825 941.7581084333609 1271.3709156875943 876.8192208188783 862.5596069659487 862.9758251619842 860.5342622826976 878.0185905019046 860.6896218771697)
Error minima by case: (0.0 0.018574144461719122 0.0 0.034856568669589194 0.018574144461719122 0.01857414446171929 0.008083009640765582 0.008083009640765582 0.010619127001597839 0.0 0.018574144461718234 0.041470984807896016 0.053643620863612185 0.0 0.0 0.0 0.01857414446172001 0.03321730886563046 0.041470984807901345 0.0 0.0 0.041470984807901345 0.01857414446169514 0.018574144461808828 0.041470984807901345 0.025760205994030727 0.0 0.008083009640765582 0.041470984807901345 0.0192127480044475)
Average genome size in population (length): 40.705
Average program size in population (points): 41.705
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 139
Genome diversity (% unique Plush genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.494
Total error diversity:				 0.195
Error (vector) diversity:			 0.195
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 202527360
--- Timings ---
Current time: 1481494654073 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_inc 5 float_frominteger integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 20739.218206707723
Median total errors in population: 8.541702066182117
Error averages by case: (660.742304580791 661.435395190668 660.771668343689 662.1541487105085 661.0702639681638 660.4480749019006 660.5339847439218 660.8695305962543 660.7353067925188 663.0178678034245 662.4092647048104 662.8971446826652 661.3653854078487 675.121020314737 726.9214274720156 662.1381233290299 663.8246312290898 666.7308847291239 673.584514327602 660.7759643335496 660.6370055247733 671.8587729182696 895.1957709688439 1180.2842760403778 677.5782275461348 662.4481714949953 662.8202715674674 660.5273234639521 679.6960946473292 660.625386373245)
Error minima by case: (0.0 0.018574144461719122 0.0 0.034856568669589194 0.018574144461719122 0.01857414446171929 0.008083009640765582 0.008083009640765582 0.010619127001597839 0.0 0.018574144461718234 0.041470984807896016 0.008083009640765582 0.0 0.0 0.0 0.01857414446172001 0.008083009640763805 0.041470984807901345 0.0 0.0 0.041470984807901345 0.01857414446169514 0.018574144461808828 0.041470984807901345 0.008083009640765582 0.0 0.008083009640765582 0.01634971755217407 0.0012603858989483907)
Average genome size in population (length): 41.006
Average program size in population (points): 42.005
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 108
Genome diversity (% unique Plush genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.221
Error (vector) diversity:			 0.221
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 203757540
--- Timings ---
Current time: 1481494664172 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger integer_inc 5 float_frominteger integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 22904.93310238461
Median total errors in population: 9.270671845747746
Error averages by case: (740.8218847428524 741.5832656322813 740.8205493042581 742.2839527876877 741.1579236599342 740.5016813785132 740.5742053409793 740.9020744067731 740.8033012887246 743.1351198484737 742.6132488593194 743.0178041943923 741.4244379501707 752.7430628340173 793.4313968035102 742.2770893195831 744.1860355551321 745.9650290496237 751.4809330121114 740.8036921677177 740.7176631650003 752.2670734660588 820.4165642493317 1197.3349111905316 757.2199744748295 742.5903849832646 742.9532410169998 740.5607255144843 759.6473182941419 740.6985578938877)
Error minima by case: (0.0 0.018574144461719122 0.0 0.034856568669589194 0.01699452277138569 0.01857414446171929 0.008083009640765582 0.008083009640765582 0.00764885937514137 0.0 0.018574144461718234 0.019212748004447278 0.008083009640765582 0.0 0.0 0.0 0.01857414446172001 0.008083009640763805 0.019212748004449054 0.0 0.0 0.019212748004449054 0.01857414446169514 0.018574144461808828 0.019212748004449054 0.008083009640765582 0.0 0.008083009640765582 0.01634971755217407 0.00764885937514137)
Average genome size in population (length): 40.409
Average program size in population (points): 41.409
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.25
Error (vector) diversity:			 0.25
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 204969810
--- Timings ---
Current time: 1481494674498 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger float_cos integer_add integer_add float_cos integer_add integer_add float_max vector_integer_nth integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin integer_add integer_max vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_add integer_add integer_inc integer_inc 5 float_frominteger integer_add integer_add 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 18769.601313335315
Median total errors in population: 9.99593472750749
Error averages by case: (600.9381767554097 601.7705363689923 600.9583971463401 602.6063413096298 601.3398891081459 600.5153079673566 600.5901227195737 601.0346162125296 600.8720376319433 603.731232830627 603.0675085887844 603.5476280218722 601.6658916145442 614.978958771665 661.64023192661 602.6873793480794 604.9427486975774 606.7749215186485 613.6857661187519 600.9728338203541 600.8197170727599 614.1345010983231 696.244883128555 1080.973466356583 620.3679050208304 603.060356644875 603.561694945782 600.5791976962942 620.7931594603361 600.7459054335471)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.026510267304633572 0.0010067512230147457 0.0010067512230151343 0.008083009640765582 0.008083009640765582 0.010619127001597839 0.0 0.001006751223016522 0.019212748004447278 0.008083009640765582 0.0 0.0 0.0 0.001006751223016522 0.008083009640763805 0.019212748004449054 0.0 0.0 0.01865177489973746 0.001006751223030733 0.001006751223030733 0.019212748004449054 0.008083009640765582 0.0 0.008083009640765582 0.019212748004449054 0.0012603858989483907)
Average genome size in population (length): 40.286
Average program size in population (points): 41.286
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.258
Error (vector) diversity:			 0.258
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 206178390
--- Timings ---
Current time: 1481494685178 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth integer_max 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_inc 5 float_frominteger integer_add integer_add float_sin integer_add integer_add integer_max integer_max integer_inc 5 float_frominteger 5 float_max integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 27136.13845753595
Median total errors in population: 9.628701666123316
Error averages by case: (880.9609912586186 881.7905254418181 880.9612166794991 882.5883592758721 881.3564398566084 880.5222070404304 880.5959733711368 881.0335450477477 880.899651711454 883.6476049988847 882.9923952951892 883.4595462814617 881.6001786810156 894.3939914306513 938.8970780335158 882.6622946073308 884.7869975912815 886.5822733234763 893.0987166795142 880.9690941446433 880.8327040161155 893.5687012513171 971.7195809061074 1339.6189816232168 898.7579725106032 882.8967850969626 883.4212024592189 880.5848578635173 900.1981136054771 880.740477453219)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.002292526409604534 0.0010067512230147457 0.0010067512230151343 0.008083009640765582 0.008083009640765582 0.010619127001597839 0.0 0.001006751223016522 0.019212748004447278 0.008083009640765582 0.0 0.0 0.0 0.001006751223016522 0.008083009640763805 0.019212748004449054 0.0 0.0 0.019212748004449054 0.001006751223030733 0.001006751223030733 0.019212748004449054 0.008083009640765582 0.0 0.008083009640765582 0.019212748004449054 0.00764885937514137)
Average genome size in population (length): 39.883
Average program size in population (points): 40.881
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.278
Error (vector) diversity:			 0.279
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 207374880
--- Timings ---
Current time: 1481494695797 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_dup} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_inc 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth float_sin float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth integer_max integer_max vector_integer_replace integer_inc 5 float_frominteger vector_integer_nth float_dup 5 float_max float_max vector_integer_replace integer_div float_frominteger)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger integer_inc 5 float_frominteger integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger 5 integer_div float_frominteger)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.4 0.20000000000000284 0.19999999999999996]
Total: 5.600000000000044
Mean: 0.18666667
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 27074.539675572887
Median total errors in population: 9.699997911989149
Error averages by case: (880.8581735413401 881.6097605286653 880.8684605084486 882.3963167663603 881.2165495842174 880.5338570883067 880.5690312680069 880.9214201739967 880.7596140308463 883.3756433698776 882.7623807916938 883.1993787042973 881.4717825174997 893.4430721969786 934.5949690159766 882.4194396510717 884.4596140641044 886.0239872554855 892.1734539678063 880.8476351659936 880.7339218942582 892.5709474311586 964.1699801675272 1299.1304780134885 897.7696135718033 882.7050513442292 883.1978041835281 880.5665595583627 898.5310079199817 880.6597712975731)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.027428732199862083 0.0010067512230147457 0.0010067512230151343 0.008083009640765582 0.008083009640765582 0.008373993964997384 0.0 0.001006751223016522 0.008373993964996274 0.008083009640765582 0.0 0.0 0.0 0.001006751223016522 0.008083009640763805 0.008373993965001603 0.0 0.0 0.008373993965001603 0.001006751223030733 0.001006751223030733 0.008373993964994497 0.008083009640765582 0.0 0.008083009640765582 0.008373993964994497 0.006159837580126948)
Average genome size in population (length): 40.769
Average program size in population (points): 41.767
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.265
Error (vector) diversity:			 0.265
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 208597950
--- Timings ---
Current time: 1481494706460 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod vector_integer_pushall vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_replace integer_inc float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_add integer_inc integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.19999999999999996]
Total: 5.116337814536816
Mean: 0.1705446
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 15317.281058930932
Median total errors in population: 9.31175765325904
Error averages by case: (490.77536848802794 491.4730302307575 490.79823593828115 492.25370833354077 491.1045209484169 490.52832636266066 490.5522822072203 490.8641151081383 490.74311313315815 493.03834273028014 492.69726288455735 493.0021619578805 491.4470216079795 502.2006299175871 539.6679281433101 492.13796788520244 494.42818018524963 495.6392093753909 501.13872529497235 490.7775764609635 490.693205723415 501.4808129459536 567.2994856699983 871.078515322441 507.5712842213368 492.6724466652093 493.0580309225457 490.5481776852061 506.9706728602977 490.6407197209524)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.027428732199862083 0.0010067512230147457 0.0010067512230151343 0.0016314363023116618 0.008083009640765582 0.004669992406012513 0.0 0.001006751223016522 0.004669992406013179 0.008083009640765582 0.0 0.0 0.0 0.001006751223016522 0.008083009640763805 0.00466999240600785 0.0 0.0 0.00466999240600785 0.001006751223030733 0.001006751223030733 0.00466999240600785 0.008083009640765582 0.0 0.0016314363023116618 0.00466999240600785 0.004669992406012513)
Average genome size in population (length): 40.329
Average program size in population (points): 41.329
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.483
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.3
Error (vector) diversity:			 0.3
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 209807820
--- Timings ---
Current time: 1481494716847 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 5.108476474251271
Mean: 0.17028254
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 19169.55388895113
Median total errors in population: 8.99481460104128
Error averages by case: (620.7241370218912 621.3197502047119 620.7290626716233 622.0759843210267 621.0311011928609 620.5178333341235 620.5234340631006 620.8117133599536 620.697059412406 622.7868332662914 622.3673352173828 622.700611155796 621.2880625409674 631.2462238423116 666.0603404631265 621.968680856349 623.8918727835685 625.0947897933202 630.3365302326991 620.728767296439 620.6400708543111 630.6055097853493 693.0419734389936 971.4421393958341 635.1854844009102 622.327130771387 622.7020591459371 620.5195110506567 635.5707121412228 620.6191749365717)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.00221752033845668 0.0010067512230147457 0.0010067512230151343 0.008083009640765582 0.008083009640765582 0.0030781099552614766 0.0 0.001006751223016522 0.0030781099552612545 0.008083009640765582 0.0 0.0 0.0 0.001006751223016522 0.008083009640763805 0.0030781099552612545 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.008083009640765582 0.0 0.008083009640765582 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 40.822
Average program size in population (points): 41.82
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.292
Error (vector) diversity:			 0.292
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 211032480
--- Timings ---
Current time: 1481494727494 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 5.108476474251271
Mean: 0.17028254
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 18507.996020646893
Median total errors in population: 8.95075024071578
Error averages by case: (590.9491547116937 591.8113859605646 590.9457519505451 592.7982498601637 591.4187063447093 600.57325370938 600.5995619855327 591.0736072224981 590.8291524926211 593.872086279578 593.2067414252745 593.6811984342719 591.7177862941476 605.7093489505158 653.3871077453238 592.764740817074 595.31534495767 597.0126038679463 604.3023030982348 590.9532462595796 590.7623354615697 604.431993427767 689.6878633538122 1069.961091783835 610.8101815156526 593.1352940739757 593.6592144136096 600.5931292580333 611.3451164467169 590.6884685445881)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.027428732199862083 0.0010067512230147457 0.0010067512230151343 0.0016314363023116618 0.0016314363023117728 0.0030781099552614766 0.0 0.001006751223016522 6.258931281788449E-4 0.0016314363023113287 0.0 0.0 0.0 0.001006751223016522 0.0016314363023113287 0.002837197190309837 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.0016314363023113287 0.0 0.0016314363023116618 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 40.747
Average program size in population (points): 41.746
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.321
Error (vector) diversity:			 0.321
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 212254890
--- Timings ---
Current time: 1481494738193 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_replace integer_inc float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add float_max integer_add integer_add integer_inc 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.19999999999999996]
Total: 4.916337814536817
Mean: 0.16387793
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 24127.57504990768
Median total errors in population: 8.707423433242448
Error averages by case: (780.9489152080139 781.7177817660423 780.9491477257861 782.6780617962695 781.3486251466526 780.5671077274243 780.60035317329 781.0699429897118 780.8373660695937 783.6995598343112 783.0907563848649 783.5499015535793 781.6401781413842 795.0479741188175 840.2439386979833 782.6215015958248 785.0718619955654 786.5774144659175 793.760847173716 780.9495705487061 780.7638648741795 793.6805750119519 876.0238451794129 1222.1951625022436 800.2329007666483 783.0237147337835 783.5304112294908 780.596023067442 799.8712947217156 780.6864517073559)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.009532095468090418 0.0010067512230147457 0.0010067512230151343 0.0016314363023116618 0.0016314363023117728 0.0030781099552614766 0.0 0.001006751223016522 6.258931281788449E-4 0.0016314363023113287 0.0 0.0 0.0 0.001006751223016522 0.0016314363023113287 0.002837197190309837 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.0016314363023113287 0.0 0.0016314363023116618 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.36
Average program size in population (points): 42.357
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.341
Error (vector) diversity:			 0.341
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 213495690
--- Timings ---
Current time: 1481494749043 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add integer_max vector_integer_replace integer_inc float_max vector_integer_nth integer_add integer_add integer_max vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add vector_integer_replace integer_inc integer_add 5 float_max integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.11633781453677378 0.20000000000000284 0.19999999999999996]
Total: 4.916337814536817
Mean: 0.16387793
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 25314.229796302392
Median total errors in population: 8.99481460104128
Error averages by case: (810.8845381349381 811.6875366884 810.8746507664338 812.6349378441297 811.2897847250072 810.585295808627 810.6128760794678 811.0188346060528 810.7818217521507 813.7316932789731 813.0058505111342 813.5829271845441 811.5391941315868 827.1768699185666 878.1065742910031 812.5935375107908 814.9441700483043 817.3945067920363 825.940472312612 810.8768240177221 810.740970164597 823.4262011739565 1055.2393875034027 1374.4990606219035 831.7181034482687 812.9470518031404 813.5315276158263 810.6130719643609 831.5740843034514 810.6774413009928)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.0023987647991638994 0.0010067512230147457 0.0010067512230151343 0.0033217814168737814 0.0033217814168735593 0.0030781099552614766 0.0 0.001006751223016522 0.0030781099552612545 0.0033217814168740034 0.0 0.0 0.0 0.001006751223016522 0.003321781416872227 0.002837197190309837 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.0033217814168740034 0.0 0.0033217814168737814 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.293
Average program size in population (points): 42.291
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.353
Error (vector) diversity:			 0.353
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 214734480
--- Timings ---
Current time: 1481494760077 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos integer_add float_max integer_add integer_inc 4 float_frominteger float_cos float_max float_tan integer_add integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26505.46791782628
Median total errors in population: 8.99481460104128
Error averages by case: (860.9016758297616 861.7318458034792 860.9081072174737 862.6511350920014 861.3379065151393 860.4584966930961 860.5198043236876 861.0044778967841 860.7654752199762 863.6524122602239 863.1224498745196 863.5567718749517 861.7031473093792 874.6988598095433 916.7046062381297 862.58406257408 865.1217767790363 866.5864160922755 873.4059849581511 860.8882783102605 860.7267450908884 873.0079199971266 952.0119579864999 1289.9244236054594 880.178498569373 863.0882601301342 863.5531616715705 860.517985603659 879.5708935667503 860.5843809328594)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.0023987647991638994 0.0010067512230147457 0.0010067512230151343 5.513389842245475E-4 0.0033217814168735593 0.0030781099552614766 0.0 0.001006751223016522 0.0030781099552612545 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.0016976097643031096 0.002837197190309837 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.011935503167698869 0.0 5.513389842245475E-4 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.498
Average program size in population (points): 42.496
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.363
Error (vector) diversity:			 0.363
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 215979420
--- Timings ---
Current time: 1481494771511 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_inc 4 float_frominteger float_cos integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max float_tan vector_integer_nth 5 float_max integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 23763.05002956575
Median total errors in population: 8.707423433242448
Error averages by case: (770.7905671341728 771.555462078941 770.7783448856117 772.3876617391214 771.1650121232731 770.5080466772001 770.5460069883795 770.9002980867771 770.6950368666335 773.2685735284801 772.7011252449673 773.1755364265458 771.4227854032717 783.4022118677888 823.3511386076283 772.3301832351028 774.4228002478291 775.940996036116 782.1348499671647 770.7804270906611 770.6464248799309 782.2513961907987 853.4450592848209 1181.6671116982657 787.5885574822014 772.6737408068288 773.0838797596383 770.5439166581735 788.3246574635051 770.5682211059193)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.0021401237421638797 0.0010067512230147457 0.0010067512230151343 0.009752675461943583 4.6313559965360795E-4 0.0030781099552614766 0.0 8.576517580394238E-5 0.0030781099552612545 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.01270588011916729 0.002837197190309837 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.0016668317363155438 0.011935503167698869 0.0 0.009752675461943583 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.792
Average program size in population (points): 42.791
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.362
Error (vector) diversity:			 0.362
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 217233180
--- Timings ---
Current time: 1481494783202 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max integer_add integer_inc 4 float_frominteger float_cos integer_add float_max float_tan 5 integer_div float_frominteger float_max 5)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 26762.485545174553
Median total errors in population: 8.928160774754367
Error averages by case: (860.7997785709435 861.5673955467496 860.811376929539 862.5425585934942 861.2178973359462 860.4848013254327 860.5406841512188 860.9634765602598 860.7715702363491 863.5160028841633 862.8475448337756 863.4195138511501 861.5070814025293 876.3818013337419 925.455075930116 862.4016468556914 864.6716075192452 867.0136356107818 875.2899391611469 860.8238120147834 860.6918981710132 872.7378765752167 1100.5826193042726 1387.3451102054073 880.656677132855 862.820453840318 863.4566976655499 860.5415272578223 880.0436882800803 860.5817960949521)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.0023987647991638994 0.0010067512230147457 0.0010067512230151343 0.0013819511402325402 4.6313559965360795E-4 0.0030781099552614766 0.0 8.576517580394238E-5 0.0030781099552612545 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.010448728975301691 0.001923337297462524 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.010448728975301691 0.0 0.008083009640765582 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.445
Average program size in population (points): 42.443
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.372
Error (vector) diversity:			 0.372
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 218476530
--- Timings ---
Current time: 1481494794448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos float_max integer_add float_max integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add 5 vector_integer_replace integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27398.13817297682
Median total errors in population: 8.99481460104128
Error averages by case: (890.8587175213265 891.6533862377111 890.8624081657199 892.538687544673 891.2765135416203 890.5102255860879 890.5557974698362 890.98459431544 890.7763418559668 893.5599998039493 892.8837345412869 893.4006308117991 891.5239856717492 904.6073149369482 947.0289605236447 892.5126981639607 894.7183855883966 896.3662845891873 903.3267304442918 890.8536797748025 890.700871411819 903.0524362860122 982.0774509865478 1316.3629046718459 908.8134517708631 892.8027387650653 893.3333232876713 890.5530698741118 909.0287463158866 890.6141025186016)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.0062653964601331325 0.0010067512230147457 0.0010067512230151343 1.5753490866304842E-4 4.6313559965360795E-4 0.0030781099552614766 0.0 8.576517580394238E-5 0.0030781099552612545 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.01270588011916729 0.001923337297462524 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.011935503167698869 0.0 1.5753490866304842E-4 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.519
Average program size in population (points): 42.519
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.401
Error (vector) diversity:			 0.401
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 219722100
--- Timings ---
Current time: 1481494805776 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (float_mod in1 float_mod vector_integer_pushall 5 float_frominteger float_cos vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max float_tan 5 float_max integer_div float_frominteger float_max 5)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 27507.701013979684
Median total errors in population: 8.836938113470808
Error averages by case: (880.8661109205796 881.660624320307 880.8620348511221 882.5286368509112 881.2611281762709 880.4997021097721 880.5461298723621 881.0013466125648 880.7806761708613 883.5886256232936 882.9690136952861 883.424189768401 881.6499256249975 894.6447989744535 937.866112061522 882.5116643682982 885.1433492469899 886.5078521853918 893.3721861549067 880.8490438619453 881.0439104925885 893.2508392806956 972.0595372206321 1304.475653385835 899.368132132093 882.8936110424752 883.355283620274 880.546022731862 899.1228361527179 1289.0520364702702)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 6.471757996841521E-4 4.6313559965360795E-4 0.0030781099552614766 0.0 8.576517580394238E-5 0.0030781099552612545 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.00300561235510699 0.001923337297462524 0.0 0.0 0.0030781099552612545 0.001006751223030733 0.001006751223030733 0.00307810995526836 0.005962022251537746 0.0 6.471757996841521E-4 0.00307810995526836 0.0030781099552615876)
Average genome size in population (length): 41.782
Average program size in population (points): 42.781
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.405
Error (vector) diversity:			 0.405
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 220975560
--- Timings ---
Current time: 1481494817291 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add vector_integer_first float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos float_max integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25581.05099072116
Median total errors in population: 8.707423433242448
Error averages by case: (830.813139101391 831.52866337706 830.8225579267696 832.4243824336601 831.1595658975184 830.5253928765217 830.5579862967045 830.8964481868142 830.7797826871554 833.425415925925 832.8745655389608 833.3042281245249 831.5134833889922 844.2956363515535 885.8063339727913 832.3693174098696 834.7809842093584 836.1790731120085 843.0119777714849 830.8004105850375 830.7249608572741 842.6727872075271 920.2103816516518 1244.5716174396184 849.2236624642278 832.8005009447035 833.279542639021 830.5600122165127 848.5361706965832 830.6020094299313)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 0.002831959026106168 4.6313559965360795E-4 0.011908009571950151 0.0 8.576517580394238E-5 0.0159722935394786 0.0033367083808899523 0.0 0.0 0.0 0.001006751223016522 0.00300561235510699 0.001923337297462524 0.0 0.0 0.0058318469312581556 0.001006751223030733 0.001006751223030733 0.00680297641991956 0.004967322233955684 0.0 0.002831959026106168 0.012575381148650422 0.0018738872393491146)
Average genome size in population (length): 41.559
Average program size in population (points): 42.556
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.41
Error (vector) diversity:			 0.41
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 222222330
--- Timings ---
Current time: 1481494828737 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 23834.08947268289
Median total errors in population: 8.646047380420525
Error averages by case: (750.9746536483755 751.9333953273299 750.9781365026979 753.0263102684391 751.4814117720266 750.4758078847465 750.546466959022 751.1271635522797 750.8573934247877 754.29889142947 753.4914859595161 754.2244057909959 751.9246370669618 771.628260686537 834.430944363498 752.8959059671794 755.6941369357985 759.467255867301 770.0261542909951 750.9767552484602 750.7942102273432 765.3501451949069 1109.3123961043054 1471.0420372309159 782.3353057660457 753.5322906645014 754.2222090822268 750.5487450159662 775.8496227157685 750.6429377344913)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 0.002603134393306339 4.6313559965360795E-4 0.011169486314362986 0.0 8.576517580394238E-5 0.0159722935394786 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.011721216354555253 0.001923337297462524 0.0 0.0 0.0058318469312581556 0.001006751223030733 0.001006751223030733 0.00680297641991956 0.005962022251537746 0.0 0.002603134393306339 0.011690007908399025 0.009422528025811672)
Average genome size in population (length): 42.184
Average program size in population (points): 43.181
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.383
Error (vector) diversity:			 0.383
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 223487850
--- Timings ---
Current time: 1481494840389 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25487.16211460078
Median total errors in population: 8.75737086808334
Error averages by case: (820.9468836078772 821.8707707068636 820.9562152826336 822.9286869096397 821.3721348344678 820.5581694154324 820.6168646870002 821.1215313820977 820.8997767292824 824.2499899447416 823.42769971844 823.975786100268 821.7626316458264 838.8419926297312 900.6216966140147 822.9579242854701 825.799738431176 827.9474988464382 836.6827139912842 820.9473481849261 820.8211397201965 836.8636439541991 942.5621705028698 1352.7961249178034 843.0027743909756 823.3239113900986 823.9381103256134 820.6193393421291 844.0347726472014 820.7140734620838)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.005424161888813117 0.0010067512230147457 0.0010067512230151343 0.002603134393306339 4.6313559965360795E-4 0.011169486314362986 0.0 8.576517580394238E-5 0.012690132631172801 0.0033367083808899523 0.0 0.0 0.0 9.40820903281292E-5 0.011721216354555253 0.001923337297462524 0.0 0.0 0.0058318469312581556 0.001006751223030733 0.001006751223030733 0.005698245125103085 0.005962022251537746 0.0 0.002603134393306339 0.011690007908399025 6.296233794160777E-4)
Average genome size in population (length): 41.647
Average program size in population (points): 42.645
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.421
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 224737260
--- Timings ---
Current time: 1481494851725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add integer_inc 4 float_frominteger float_cos float_max integer_add integer_inc 4 float_frominteger float_cos integer_add float_max float_tan 5 vector_integer_replace integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 28016.414712427566
Median total errors in population: 8.509827899883822
Error averages by case: (871.0071556424914 871.8749282718729 871.028318011611 872.9790328698904 871.4490586724575 870.5203646874759 1279.0247229907734 871.1254264829812 870.8916194956778 874.2430320309824 873.3852918828507 874.0586370742523 871.7710966157746 889.3208897976297 946.4843588750616 872.8914590796469 875.6049550945472 878.2171452435979 888.0210782257477 871.0324757769877 870.8160486847154 885.2395278252943 1130.5117528943772 1479.9245697017143 894.2910612284386 873.3416941091892 874.0216504783929 1279.0255229224288 893.6192513424211 870.6925864182974)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 0.002603134393306339 4.6313559965360795E-4 0.0037490786801270826 0.0 8.576517580394238E-5 0.003499164340116323 5.513389842244365E-4 0.0 0.0 0.0 9.40820903281292E-5 0.011721216354555253 0.0016270632325614542 0.0 0.0 0.0058318469312581556 0.001006751223030733 0.001006751223030733 0.005698245125103085 0.005962022251537746 0.0 0.002603134393306339 0.003446512604782015 0.0061265507738474945)
Average genome size in population (length): 41.784
Average program size in population (points): 42.783
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.423
Error (vector) diversity:			 0.423
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 225990780
--- Timings ---
Current time: 1481494863461 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add integer_add 5 vector_integer_replace integer_div integer_dup float_frominteger float_max vector_integer_nth)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 25184.963013132885
Median total errors in population: 8.425621572371918
Error averages by case: (820.7892161327264 821.5079676388748 820.7860411685917 822.3538656851915 821.1538942907322 810.4871808760489 810.5572964072929 810.9309581179049 810.7495537431734 823.3114344498599 822.6350526703866 823.121502050684 821.3934781616337 833.5487594050304 874.7612032498474 822.3189998236112 824.3517733159749 825.9309123013492 832.4126644213671 810.7963370883249 820.6688496000063 832.4895822302093 907.0694792907889 1218.8701171462808 837.3412930584029 822.601849370082 823.0480151044379 810.5572151762495 837.7857568378013 810.6327643200189)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 5.513389842245475E-4 0.0014950269426692309 0.011169486314362986 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.011721216354555253 0.0016270632325614542 0.0 0.0 0.0058318469312581556 0.001006751223030733 7.125979643660685E-4 0.011843155203379752 0.005962022251537746 0.0 5.513389842245475E-4 6.740866647731991E-4 0.010800223901187955)
Average genome size in population (length): 42.073
Average program size in population (points): 43.073
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.395
Error (vector) diversity:			 0.395
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 227252970
--- Timings ---
Current time: 1481494875079 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add float_max integer_add integer_inc 4 float_frominteger float_cos vector_integer_replacefirst float_max float_tan 5 float_max integer_div float_frominteger float_max float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 24192.44597302235
Median total errors in population: 8.45864377573896
Error averages by case: (770.9027157251475 771.7317710473448 770.9050293751494 772.7739189912821 771.3529692743361 770.4844405472511 770.5552116421067 771.0435388773446 770.809179061079 773.9908909813785 773.3794081263867 773.8634522574762 771.6997757560555 790.1306961395312 842.5358573163945 772.6562794711664 775.6400264252111 777.6671404493783 787.8055777815662 770.9094321752056 770.7680313317046 784.3925890460295 1022.24967140729 1376.8902246910059 802.24713008809 773.3091780084992 773.9399308203316 770.5582063549679 796.3825661391038 770.8711337145342)
Error minima by case: (0.0 5.562018255975687E-4 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 3.17251291391929E-4 0.0014950269426692309 0.007560909106624214 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0011316784102675115 0.0 0.0 0.0 6.117582768148111E-4 0.0038241967829399925 0.001923337297462524 0.0 0.0 0.0058318469312581556 0.001006751223030733 7.125979643660685E-4 0.00680297641991956 5.386447831625674E-4 0.0 4.007544408445307E-4 6.740866647731991E-4 0.007560909106624103)
Average genome size in population (length): 42.166
Average program size in population (points): 43.163
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.418
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 228517950
--- Timings ---
Current time: 1481494886533 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add float_max integer_add integer_inc 4 float_frominteger float_cos float_max float_tan integer_add 5 float_max integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 25774.51030155984
Median total errors in population: 8.46915173247144
Error averages by case: (831.0227628450415 831.9804761082236 831.0285029887438 833.0735470733712 831.4950090230036 830.5529997007492 830.6204040966377 831.1330308678035 830.909418177688 834.4205833054216 833.6743295986388 834.1824356423404 831.8977247669859 848.2224146337297 902.8346190344522 833.0517532885298 836.1514531670396 837.9641735881149 846.628076432309 831.021750365429 830.8523951180038 846.5430777176139 946.332644390347 1361.893048756422 854.1386666165394 833.5517340688137 834.2011938700215 830.6210610958904 853.7769867567048 830.7340284652275)
Error minima by case: (0.0 6.732452179569748E-5 0.0 0.010347514248433498 0.0010067512230147457 0.0010067512230151343 0.002603134393306339 0.0014950269426692309 0.00701052768013799 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0014904931486512396 0.002837197190309837 0.0 0.0 0.00890921177455084 0.001006751223030733 7.125979643660685E-4 0.00680297641991956 5.386447831625674E-4 0.0 0.002603134393306339 6.740866647731991E-4 0.005382868688649567)
Average genome size in population (length): 42.02
Average program size in population (points): 43.018
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.42
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 229778550
--- Timings ---
Current time: 1481494898267 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove} {:close 1, :instruction 5})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove 5)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 28750.403619661465
Median total errors in population: 8.198140676911725
Error averages by case: (930.8877735934481 931.7416243812149 930.8818440175977 932.7212222514593 931.3248910849716 930.4585198690548 930.5205078068092 931.0207678344248 930.7721138496674 933.8308492357835 933.1852300867689 933.617937267335 931.6400346536843 945.7590441508099 991.8119074506635 932.7427445293168 935.2954780708109 937.1327438197931 944.5036899122904 930.8666761646448 930.7236839972852 943.9565982639621 1109.0259617364084 1405.537656538126 951.63205410008 933.0826893813828 933.6248661248751 930.5181613194356 950.9670154072369 930.6193327621215)
Error minima by case: (0.0 6.732452179569748E-5 0.0 0.010347514248433498 0.0010067512230147457 2.2087900323844445E-4 5.513389842245475E-4 0.0014950269426692309 0.00701052768013799 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.008076974912686552 0.002837197190309837 0.0 0.0 0.00890921177455084 0.001006751223030733 7.125979643660685E-4 0.00680297641991956 5.386447831625674E-4 0.0 5.513389842245475E-4 6.740866647731991E-4 0.001037517936323562)
Average genome size in population (length): 41.95
Average program size in population (points): 42.948
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.42
Error (vector) diversity:			 0.42
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 231037050
--- Timings ---
Current time: 1481494909971 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add vector_integer_nth integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan integer_add 5 float_max integer_div float_frominteger float_max vector_integer_nth)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 26836.336471303603
Median total errors in population: 8.070975236807755
Error averages by case: (861.0975840850748 862.2606256063502 861.0834964158025 863.4142898584988 861.6955199678393 870.4726163414639 870.5710431537597 871.2844509523401 870.9122155733539 864.9278222199225 863.9596827262009 864.5874971753162 862.0857973798327 880.2005292086245 940.21891358618 863.4495472415217 866.5566561693137 868.6879723919426 878.302762542172 871.1006181801274 860.8500310816762 878.2741668440979 987.836759972416 1446.1148266552343 890.4001906200606 863.8863177908056 864.5944540745834 870.5665388108376 886.2372296444432 870.7063150338025)
Error minima by case: (0.0 5.562018255975687E-4 0.0 0.0062653964601331325 0.0010067512230147457 2.2087900323844445E-4 0.006171533105703619 0.003775523686263327 0.00701052768013799 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.010448728975301691 0.002837197190309837 0.0 0.0 0.00890921177455084 0.001006751223030733 7.125979643660685E-4 0.00917862804540448 5.386447831625674E-4 0.0 0.006171533105703619 6.740866647731991E-4 0.004984018800112455)
Average genome size in population (length): 42.042
Average program size in population (points): 43.04
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.427
Error (vector) diversity:			 0.427
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 232298310
--- Timings ---
Current time: 1481494922908 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add float_max float_tan integer_add integer_add 5 integer_div float_frominteger float_max vector_integer_remove)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 34014.60949849046
Median total errors in population: 8.358571379810186
Error averages by case: (1110.8276141560361 1111.6452701862843 1110.8284567752173 1112.5556718541254 1111.2211545371035 1110.439588099015 1110.4926449748748 1110.9479534534257 1110.7484893420874 1113.6309167000925 1112.9554582552655 1113.4228573219925 1111.5332638287666 1124.8771344837328 1168.922341061293 1112.5245988424742 1114.8349727812624 1116.496194905344 1123.5201580535 1110.8187942129875 1110.6772650597406 1123.443338819841 1203.4465192974098 1547.6036374190817 1129.2690534502583 1112.8584019706657 1113.3883186462783 1110.4943968482262 1129.5900815801351 1110.5949515739396)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.012943416000881669 0.0010067512230147457 2.2087900323844445E-4 4.007544408445307E-4 0.003775523686263327 0.00701052768013799 0.0 8.576517580394238E-5 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.00953635909437267 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.001006751223030733 7.125979643660685E-4 0.012477865116338194 5.386447831625674E-4 0.0 4.007544408445307E-4 6.740866647731991E-4 0.008082297898535873)
Average genome size in population (length): 41.877
Average program size in population (points): 42.876
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.426
Error (vector) diversity:			 0.426
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 233554620
--- Timings ---
Current time: 1481494936065 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add vector_integer_nth integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan 5 float_max integer_div float_frominteger float_max vector_integer_nth)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 26539.30070056607
Median total errors in population: 8.070975236807755
Error averages by case: (860.8116465758171 861.605238436605 860.8128372035051 862.6410919376417 861.1917636557384 860.4420543660056 860.5208361608718 860.956791040791 860.8192603310415 863.7443384177352 863.0199017050164 863.4930527120653 861.4698100025164 877.388822796997 920.1296132446322 862.5308330625285 865.0561829362308 866.396353893861 875.0863978883584 860.8108980304338 860.6552284742233 873.2547038158554 974.9084552130063 1287.3264275204656 886.8534667243673 862.9385726603546 863.6350876217447 860.5209760573052 879.6626835012462 860.6173745791112)
Error minima by case: (0.0 0.0010067512230147457 0.0 0.012943416000881669 0.0010067512230147457 2.2087900323844445E-4 9.536467373784108E-4 0.003775523686263327 1.6847609425818533E-4 0.0 5.487037979072795E-4 7.246030222471944E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.006712643641673566 5.608806731913774E-4 0.0 0.0 0.0018738872393484485 0.001006751223030733 7.125979643660685E-4 0.001873887239341343 5.386447831625674E-4 0.0 9.536467373784108E-4 6.740866647731991E-4 0.0018738872393491146)
Average genome size in population (length): 42.473
Average program size in population (points): 43.471
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.409
Error (vector) diversity:			 0.409
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 234828810
--- Timings ---
Current time: 1481494948976 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan 5 float_max integer_div integer_dup float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 25226.63456805566
Median total errors in population: 7.9320742892421
Error averages by case: (811.0061997276796 812.0550586161468 811.0014680605157 813.1790433108781 811.5287198760074 810.5074479117868 810.5850525145847 811.1834620064845 810.8692996453709 814.5845018901963 813.7297011543607 814.2838455476887 811.8862216255966 828.8234950395101 884.9210821163884 813.183523005509 816.2476632094962 818.1967559228941 828.0227091985199 811.0124530256774 810.8276123582334 827.0057344988019 947.7051448147186 1365.4055626575782 835.0258077649897 813.5922509094901 814.275144269832 810.5831095928511 834.7026011333638 810.7038966505049)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.012943416000881669 4.501004734587255E-4 2.2087900323844445E-4 9.536467373784108E-4 0.003775523686263327 1.6847609425818533E-4 0.0 5.487037979072795E-4 0.0018738872393502248 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.006712643641673566 5.608806731913774E-4 0.0 0.0 0.0018738872393484485 0.002719447807010056 7.125979643660685E-4 0.001873887239341343 5.386447831625674E-4 0.0 9.536467373784108E-4 0.001873887239341343 6.296233794160777E-4)
Average genome size in population (length): 42.995
Average program size in population (points): 43.993
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.421
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 236118660
--- Timings ---
Current time: 1481494961140 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 26481.97256005844
Median total errors in population: 8.021527427091723
Error averages by case: (841.1474499379643 842.3093738822756 841.1800442690062 843.7155337053018 841.7281584337443 840.5141043866769 840.5887187684219 841.4022685442682 840.9852511434339 845.2783677825082 844.4175940762126 845.0364079887448 842.2447267249034 863.5958780051415 932.2568079921658 843.5611254470019 847.3737942436595 849.9607422410464 861.9268679325824 841.1606543580792 840.9350540219302 858.485482948386 1130.0625895344087 1551.7585554799805 870.895232887686 844.272607139979 845.1553779111548 840.5949492353534 868.6775219400441 840.7513190963651)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.00810196305078037 4.501004734587255E-4 2.2087900323844445E-4 5.513389842245475E-4 0.003775523686263327 1.6847609425818533E-4 0.0 5.487037979072795E-4 6.258931281788449E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0012034572493462292 5.608806731913774E-4 0.0 0.0 0.0018738872393484485 0.002719447807010056 7.125979643660685E-4 0.001873887239341343 5.386447831625674E-4 0.0 5.513389842245475E-4 0.001873887239341343 0.0018738872393491146)
Average genome size in population (length): 42.397
Average program size in population (points): 43.395
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.437
Error (vector) diversity:			 0.437
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 237390570
--- Timings ---
Current time: 1481494973292 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos vector_integer_nth integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan integer_add integer_add 5 integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 26450.664838103177
Median total errors in population: 7.7549682445132815
Error averages by case: (860.7567380229731 861.4599178740146 860.7475404011421 862.2850522997664 861.0989429149838 860.4263296903481 860.4929292361936 860.8862168627913 860.7088245162912 863.2382160048321 862.6258489906684 863.0356986083877 861.4037526509704 874.3304385429244 912.8910018953501 862.2582166047563 864.274567353121 865.6742890355442 872.84166727366 860.7399695861599 860.646636262778 871.6443781174164 961.5739798646656 1241.3171568121438 879.2060728872148 862.5557430496755 863.0748172454236 860.4937371563532 877.3886235117234 860.5875348309114)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.010347514248433498 4.501004734587255E-4 2.2087900323844445E-4 5.513389842245475E-4 6.40044084100122E-4 1.6847609425818533E-4 0.0 5.487037979072795E-4 0.0015167012319619033 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0012034572493462292 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.002719447807010056 7.125979643660685E-4 0.01106545358835831 5.386447831625674E-4 0.0 5.513389842245475E-4 0.00988207755960957 0.004005922665695438)
Average genome size in population (length): 42.444
Average program size in population (points): 43.443
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.403
Error (vector) diversity:			 0.403
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 238663890
--- Timings ---
Current time: 1481494985099 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_add integer_inc 4 float_frominteger float_cos integer_add vector_integer_nth integer_add float_max integer_inc 4 float_frominteger float_cos float_max float_tan integer_add 5 vector_integer_replace integer_div float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 24627.29757804361
Median total errors in population: 7.804070082499807
Error averages by case: (791.0423281495734 792.0997971546494 791.022721905712 793.1770595829523 791.5167093601727 790.5043705144955 790.5720804721597 791.1548230234857 790.8908877656708 794.5934815864422 793.8047384576865 794.2620745417876 791.9328387464872 808.9856902028457 864.5961353296201 793.1731090318686 796.4036185588367 798.257149924177 807.1081232793478 790.9964428986976 790.8418257516779 807.140315539793 909.1472732423873 1359.8184445786019 819.7356964606719 793.6897568727562 794.323249915904 790.5692866969613 815.2447911106376 790.6927573875475)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.0023788252461702797 4.501004734587255E-4 2.2087900323844445E-4 8.999068455072812E-4 0.0012545719774288422 0.0022950877795262503 0.0 5.487037979072795E-4 0.0054107498134357 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0012034572493462292 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.002719447807010056 0.0017143183267762652 0.011473288542944715 5.386447831625674E-4 0.0 8.999068455072812E-4 0.007219063734368092 0.0018738872393491146)
Average genome size in population (length): 42.199
Average program size in population (points): 43.195
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.446
Error (vector) diversity:			 0.446
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 239929860
--- Timings ---
Current time: 1481494996571 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add integer_add vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos integer_add integer_add integer_add float_max integer_inc 4 float_frominteger float_cos vector_integer_replacefirst float_max float_tan integer_add 5 integer_div integer_dup float_frominteger float_max)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 25901.548775540177
Median total errors in population: 7.76240665687683
Error averages by case: (840.8195683070318 841.6432028774343 840.8196484773346 842.5739019844866 841.2425774736022 840.4284994487545 840.497839887758 840.9873743271453 840.7584731581461 843.5537352308962 842.9119817654192 843.3825235151833 841.5449237720501 854.5435022324683 897.2420987221544 842.5086540301107 844.8190836776499 846.435266986638 853.3325888528681 840.8147131826046 840.6738230523442 853.0070305022396 932.8969421145547 1268.7732041750503 858.8298937730317 842.8055894399578 843.3154816378583 840.4964960357705 859.2552170994207 840.6349398002073)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.012943416000881669 4.501004734587255E-4 2.2087900323844445E-4 8.999068455072812E-4 0.0012545719774288422 0.0022950877795262503 0.0 5.487037979072795E-4 0.0054107498134357 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0012034572493462292 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.002719447807010056 0.001804109768499984 0.0012097272520321667 5.386447831625674E-4 0.0 8.999068455072812E-4 0.007219063734368092 0.004005922665695438)
Average genome size in population (length): 42.653
Average program size in population (points): 43.652
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.424
Error (vector) diversity:			 0.424
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 241209450
--- Timings ---
Current time: 1481495008467 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_max} {:close 0, :instruction float_tan} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_max} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_remove})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add float_max vector_integer_replace integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan integer_add vector_integer_set vector_integer_nth 5 float_max vector_integer_replace integer_div integer_dup float_frominteger float_max float_max vector_integer_nth vector_integer_remove)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos integer_inc 4 float_frominteger float_cos integer_add integer_add integer_add float_max integer_inc 4 float_frominteger float_cos integer_add vector_integer_replacefirst float_max float_tan 5 integer_div float_frominteger float_max vector_integer_remove)
Errors: [0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0915235257487716 0.10847647425122842 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 0.0 0.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 0.20000000000004547 0.20000000000000284 0.40000000000000036 0.0 0.10847647425122842 0.20000000000000284 0.19999999999999996]
Total: 4.908476474251271
Mean: 0.16361588
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 26835.313720168684
Median total errors in population: 7.6196599695764355
Error averages by case: (860.8186715394161 861.6285346845145 860.8217128450273 862.6142153178131 861.2158910933258 860.4282962544823 860.4911843865532 860.9528698108683 860.7315666018408 863.7032359369615 863.0817560218424 863.5668889528641 861.5591383740633 878.8432955410703 927.5420132865155 862.4760645574477 865.0837593301856 867.1208071897778 876.5064773079969 860.8194833170554 860.6594843475814 873.4390358171034 1101.8490951595727 1436.5708139994713 890.230616307497 863.0058341470692 863.6018324294689 860.490006299344 884.863931167531 860.5972081444168)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.007587250383940258 0.0011666645950461074 2.2087900323844445E-4 8.999068455072812E-4 0.003775523686263327 0.0011487447003348805 0.0 5.487037979072795E-4 0.0054107498134357 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.002719447807010056 0.001804109768499984 0.012032964487602271 5.386447831625674E-4 0.0 8.999068455072812E-4 0.00988207755960957 0.012032964487599829)
Average genome size in population (length): 42.481
Average program size in population (points): 43.48
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.419
Error (vector) diversity:			 0.419
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 242483880
--- Timings ---
Current time: 1481495020075 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.035723840669387386 0.02168942446798372 0.035723840669387386 0.06131073047995983 0.02727167056650437 0.35452700692529854 0.2686890422899957 0.3970939100154718 0.19419269062001843 0.13879184132323985 0.1999498158052493 0.02745237945833523 0.4044679463981975 4.555610759382489E-5 0.21190919905814098 0.17539183191854946 0.20132639270339325 0.011622280232174376 0.12455378021909524 0.035723840669387386 0.0023258293355694626 0.22502949124680072 0.581227674334059 0.19559681772238946 0.031416095514956055 0.0426744414347251 0.06212629828159422 0.2686890422899957 0.1874858074233856 0.34467598880906625]
Total: 4.868704506989904
Mean: 0.16229016
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 28945.792030473196
Median total errors in population: 7.6196599695764355
Error averages by case: (940.7852261747524 941.533122548161 940.7749254065471 942.4332100583979 941.1339759141478 940.4912334773439 940.531653826409 940.9237775170952 940.7256936955241 943.4836146489968 942.9055935512627 943.2973588858547 941.4506624045509 956.1450465879316 997.2798266050444 942.3699172527869 944.9150487281099 946.1887350078587 953.7943357287754 940.7744052136553 940.6628039690229 953.1189635543333 1029.452560906945 1403.0403227677566 967.2585970736219 942.8178092403004 943.3179160876366 940.5304739943589 963.0325027701812 940.6227168758248)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.012943416000881669 0.0011666645950461074 2.2087900323844445E-4 8.999068455072812E-4 0.003775523686263327 0.0011487447003348805 0.0 5.487037979072795E-4 0.003969291837744748 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 5.608806731913774E-4 0.0 0.0 0.00890921177455084 0.002719447807010056 0.001804109768499984 0.012032964487602271 5.386447831625674E-4 0.0 8.999068455072812E-4 0.00988207755960957 0.006660990073012352)
Average genome size in population (length): 42.392
Average program size in population (points): 43.391
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.421
Error (vector) diversity:			 0.421
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 243755640
--- Timings ---
Current time: 1481495031956 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29838.833694820514
Median total errors in population: 7.69981289576838
Error averages by case: (970.8612766358506 971.7216106609937 970.8546450363195 972.6788634287337 971.2898896255888 970.4905282960576 970.5452529440614 971.0046022650461 960.7996303151547 973.8381661584616 973.1059701534726 973.606954750695 961.5595296999469 986.1743861993109 1034.1362982343705 972.6730180103814 975.1828187125716 966.9479504688976 984.6418724009242 960.8645728622777 970.7185197943835 984.6105342814988 1071.5823398243995 1445.5047541807708 994.4643260793434 973.0056807420239 973.5875089526731 970.544271759887 991.1663682117011 970.6715541347089)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.009820120237586494 0.0011666645950461074 2.2087900323844445E-4 8.999068455072812E-4 0.003775523686263327 0.005085943958581973 0.0 5.487037979072795E-4 0.002557540445168982 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.0031338025642924094 0.0 0.0 9.864593246931008E-4 0.0017984081432587118 0.0017143183267762652 0.007548626197291242 5.386447831625674E-4 0.0 8.999068455072812E-4 0.007548626197291242 0.005085943958581862)
Average genome size in population (length): 42.173
Average program size in population (points): 43.17
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.429
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 245020830
--- Timings ---
Current time: 1481495043847 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 201
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 201
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 25880.170719108715
Median total errors in population: 7.6196599695764355
Error averages by case: (840.7450592441851 841.519623533255 840.7388620742522 842.3660839765186 841.1457915123337 840.4606398737772 840.4979520048181 840.9045247089382 840.7219525630148 843.3717903069941 842.6030042951568 843.1347739451635 841.3766577371282 854.9114475440717 902.9418283857966 842.3462863621254 844.3029591631445 846.2053392199069 853.185686443665 840.7532531794151 840.6283939447299 853.2829921665098 938.0176565832198 1241.0921408140966 857.6757498049703 842.5924505029525 842.9924276047202 840.4982495618885 858.5660626674929 840.5910793844663)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.012943416000881669 0.0011666645950461074 2.2087900323844445E-4 8.999068455072812E-4 2.178316658225654E-4 0.00701052768013799 0.0 5.487037979072795E-4 6.537613118950958E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.0031338025642924094 0.0 0.0 0.001319226093912107 0.002719447807010056 0.001804109768499984 0.007548626197291242 5.386447831625674E-4 0.0 8.999068455072812E-4 3.0511283394218935E-4 0.007548626197293684)
Average genome size in population (length): 42.699
Average program size in population (points): 43.695
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.429
Error (vector) diversity:			 0.429
--- Run Statistics ---
Number of program evaluations used so far: 202000
Number of point (instruction) evaluations so far: 246301800
--- Timings ---
Current time: 1481495055783 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 201
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 202
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 202
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc float_sin float_inc float_cos float_mod 5 float_max float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30786.64403063174
Median total errors in population: 7.679218016541462
Error averages by case: (1000.8548189908004 1001.7077900368239 1000.8513551517767 1002.677436624935 1001.2719977380848 1000.4321553605594 1000.4834488466159 1000.9726947422947 1000.7457452541275 1003.8135107189984 1003.2327778016786 1003.6690677545021 1001.6497131713616 1017.3624113819927 1060.5754815348137 1002.5845180515212 1005.3974378799802 1006.6507551014935 1014.9644386162461 1000.841376387785 1000.6733038463689 1013.9324127815539 1097.127585761748 1482.713888073309 1029.1825744441453 1003.1301105050982 1003.7025772306522 1000.474949918879 1024.3634953107432 1000.6042016128409)
Error minima by case: (0.0 0.0010816623414253712 0.0 4.267633707044638E-5 0.0011666645950461074 2.2087900323844445E-4 8.999068455072812E-4 2.2087872519449547E-5 0.002423977927630494 0.0 5.487037979072795E-4 0.003969291837744748 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.0031338025642924094 0.0 0.0 1.2518310411735456E-4 0.0015116433283424158 0.001511643328512946 0.007548626197291242 5.386447831625674E-4 0.0 8.999068455072812E-4 0.007548626197291242 0.007548626197293684)
Average genome size in population (length): 41.927
Average program size in population (points): 42.924
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.438
Error (vector) diversity:			 0.438
--- Run Statistics ---
Number of program evaluations used so far: 203000
Number of point (instruction) evaluations so far: 247559610
--- Timings ---
Current time: 1481495067769 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 202
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 203
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 203
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_rot integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_rot integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29551.488693569812
Median total errors in population: 7.346544340925576
Error averages by case: (960.8443646927224 961.7070563623091 960.829764894489 962.6246594796837 961.2464601745199 960.459863438889 960.516370715653 960.9976912194126 960.7755353226916 963.7321808235079 963.0501728536769 963.522452650284 961.5776732212531 975.2948585471158 1021.0163931694668 962.6107622750652 965.0561304993033 966.7371342434354 973.8792417883018 960.8206475259633 960.6994606449541 973.9510820331438 1055.9388705957385 1425.596262772911 979.8644843706139 962.9619651762504 963.4674997864768 960.5159113232761 980.5668975516128 960.6268454170823)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.00487734216720348 0.0011666645950461074 2.2087900323844445E-4 9.536467373784108E-4 0.0025264733056817867 0.006565479774850669 0.0 5.487037979072795E-4 0.0024640718005635165 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.0021235603136204872 0.0 0.0 1.2518310411735456E-4 0.0013874388857288977 0.001511643328512946 0.007548626197291242 5.386447831625674E-4 0.0 9.536467373784108E-4 0.007548626197291242 0.007548626197293684)
Average genome size in population (length): 42.053
Average program size in population (points): 43.05
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.413
Error (vector) diversity:			 0.413
--- Run Statistics ---
Number of program evaluations used so far: 204000
Number of point (instruction) evaluations so far: 248821200
--- Timings ---
Current time: 1481495079591 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 203
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 204
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 204
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 28926.697622515363
Median total errors in population: 7.453747263414046
Error averages by case: (940.8141156713414 941.6274766668511 940.811905200489 942.569167459611 941.223123588359 940.4500983902857 940.7244945601217 940.9695795375794 940.7453662206783 943.6852013260733 942.9740027937573 943.4031705752941 941.5073755909174 955.1201629113214 1000.6230198005767 942.5490548107839 944.9788477211545 946.54596611993 953.8049308715108 940.8088366819802 940.6739404937261 953.7767678318774 1037.3296172873938 1382.3762222019034 959.510776907826 942.8481832844424 943.3642845283953 940.4970515832662 959.7463037592979 940.6385781386177)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.00487734216720348 0.0011666645950461074 2.2087900323844445E-4 9.536467373784108E-4 0.003775523686263327 0.001111507255083355 0.0 5.487037979072795E-4 0.003969291837744748 8.600295654952461E-4 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.0031338025642924094 0.0 0.0 1.2518310411735456E-4 0.0013874388857288977 0.001511643328512946 3.4649418175547453E-4 5.386447831625674E-4 0.0 9.536467373784108E-4 0.007548626197291242 0.006240004998513293)
Average genome size in population (length): 42.197
Average program size in population (points): 43.195
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.439
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 205000
Number of point (instruction) evaluations so far: 250087110
--- Timings ---
Current time: 1481495091424 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 204
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 205
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 205
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_max float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30249.79728742509
Median total errors in population: 7.591428961864459
Error averages by case: (980.9436205798451 981.9173218816551 980.9368490226117 982.962839218771 981.3886388272687 980.4968183602516 980.5510826130861 981.1204088394736 980.8481987121745 984.2475562953297 983.4549176648884 983.9953574315111 981.7697634273337 997.6193226274506 1048.7973253082228 982.9759305157354 985.8009320763251 987.6445812426077 996.016889538457 980.950051303618 980.7753925908556 995.6641255563869 1091.5058491814714 1502.6479520559521 1002.980493805201 983.327705322457 983.9499051387475 980.5519983343833 1003.289476922563 980.6659830304541)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.0016603057468991267 0.0011666645950461074 2.2087900323844445E-4 9.536467373784108E-4 0.003775523686263327 0.001111507255083355 0.0 0.001010143463624047 0.003969291837744748 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.0031338025642924094 0.0 0.0 1.2518310411735456E-4 0.0013874388857288977 0.001804109768499984 3.4649418175547453E-4 5.386447831625674E-4 0.0 9.536467373784108E-4 0.007548626197291242 0.007548626197293684)
Average genome size in population (length): 42.192
Average program size in population (points): 43.189
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.465
Error (vector) diversity:			 0.465
--- Run Statistics ---
Number of program evaluations used so far: 206000
Number of point (instruction) evaluations so far: 251352870
--- Timings ---
Current time: 1481495103371 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 205
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 206
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 206
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26862.697651518025
Median total errors in population: 7.453747263414046
Error averages by case: (860.8212504348407 861.6756374507664 860.8307185808188 862.6828974939299 861.2175838768463 860.433426440826 860.4859232377589 860.9657936389649 860.740787338315 863.7977842230497 863.2034743352157 863.7001518106606 861.5871824940432 879.43965429013 928.65987738437 862.5236010281276 865.3404341927412 867.3932499146641 877.027092880206 860.819388544916 860.6706619663642 873.6677562617344 1105.5077330350389 1454.5239965112833 891.0546340439128 863.1351089250195 863.7144045349081 860.4901568834204 885.9361251316002 860.6511646335452)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.0037396333146233474 0.0011666645950461074 2.2087900323844445E-4 9.536467373784108E-4 0.003775523686263327 0.001111507255083355 0.0 0.0012258284107051765 0.003969291837744748 2.1205402001456264E-5 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 0.001333832797058676 0.001511643328512946 3.4649418175547453E-4 5.386447831625674E-4 0.0 9.536467373784108E-4 0.00988207755960957 0.00292526644997515)
Average genome size in population (length): 42.648
Average program size in population (points): 43.648
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.426
Error (vector) diversity:			 0.426
--- Run Statistics ---
Number of program evaluations used so far: 207000
Number of point (instruction) evaluations so far: 252632310
--- Timings ---
Current time: 1481495115531 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 206
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 207
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 207
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult integer_min float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2547342.1691989577
Median total errors in population: 7.381317326458909
Error averages by case: (780.923139001581 2884.517047325416 780.9189484273379 786.370320986009 781.412151347474 780.5732441247839 780.639219894729 781.2138418538528 784.3323525849733 787.6235014434043 783.4475547341706 2519331.2579958006 781.9065106447006 797.5087338453485 849.2689632446236 885.8776751056689 785.6236179504782 890.4672906447535 795.8634505501444 781.0115817027726 913.3786591899391 2898.381435354723 891.3816103702683 1290.6748983497191 806.0299058983038 783.4607148470162 784.065681278533 780.6932068109202 802.5853380897295 780.7606075587797)
Error minima by case: (0.0 2.706845232101074E-4 0.0 0.0037396333146233474 0.001164552352313386 2.2087900323844445E-4 5.18035076000567E-4 5.18035076000789E-4 0.001111507255083355 0.0 0.0012258284107051765 0.003969291837744748 5.180350760003449E-4 0.0 0.0 0.0 6.117582768148111E-4 5.180350760021213E-4 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 2.3415557473072113E-4 0.001511643328512946 3.4649418175547453E-4 5.180350760003449E-4 0.0 5.18035076000567E-4 0.00988207755960957 0.01081333309369592)
Average genome size in population (length): 43.139
Average program size in population (points): 44.138
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.419
Error (vector) diversity:			 0.419
--- Run Statistics ---
Number of program evaluations used so far: 208000
Number of point (instruction) evaluations so far: 253926480
--- Timings ---
Current time: 1481495127434 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 207
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 208
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 208
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin vector_integer_replace float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 25481.848714266696
Median total errors in population: 7.453747263414046
Error averages by case: (820.9339926978904 821.9855860886332 820.9301823037954 823.045652239954 821.4417815108886 820.4593088479729 820.5242012074511 821.1054827053403 820.832579058871 824.4230822425056 823.5589751012201 824.0770782539789 821.8103866539484 838.1909596477033 892.7598620412689 823.0642805753072 825.936296670585 827.8755859614274 836.5746302688574 820.9344892491594 820.9472556395017 836.5728197842927 935.8240205456033 1361.8892791248736 843.4472764120306 823.4134361268849 824.0497158017698 820.5276226872013 844.0255432229194 820.6873515948514)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.0037396333146233474 1.6734311332111673E-4 2.2087900323844445E-4 5.18035076000567E-4 5.18035076000789E-4 0.001111507255083355 0.0 0.0015116433283797193 0.003969291837744748 5.180350760003449E-4 0.0 0.0 0.0 6.117582768148111E-4 5.180350760021213E-4 0.001923337297462524 0.0 0.0 1.2518310411735456E-4 2.3415557473072113E-4 0.001511643328512946 3.4649418175547453E-4 5.180350760003449E-4 0.0 5.18035076000567E-4 0.006699068221905691 0.00292526644997515)
Average genome size in population (length): 42.261
Average program size in population (points): 43.258
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.452
Error (vector) diversity:			 0.452
--- Run Statistics ---
Number of program evaluations used so far: 209000
Number of point (instruction) evaluations so far: 255194310
--- Timings ---
Current time: 1481495139444 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 208
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 209
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 209
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_rot integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin vector_integer_replace float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 133615.13391487475
Median total errors in population: 7.362409443038564
Error averages by case: (1121.4436148271461 1123.855125041231 1121.4409096774489 1126.7527146935804 1122.5729120366407 1120.4973307174312 1120.6131025611828 1121.7225985167402 1121.097828539062 1131.9942109343888 1128.904041532162 1130.671850246345 1123.331115644097 1251.6949709913831 2913.520364099863 1126.8663458244814 1139.8009609168334 1150.062062999997 1230.0385773016485 1121.451670700594 1121.0361942136026 1227.06252057544 5766.117056924259 93780.4971218066 1337.864793243608 1128.1627936958828 1130.7657860234121 1120.6065988944858 1333.9481546993188 1120.7405869960044)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.002198474979131504 1.6734311332111673E-4 2.2087900323844445E-4 6.471757996841521E-4 0.003775523686263327 0.001111507255083355 0.0 0.0015116433283797193 0.003969291837744748 0.00245645204335343 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.001923337297462524 0.0 0.0 1.2518310411735456E-4 0.001333832797058676 0.001511643328512946 3.4649418175547453E-4 0.0011647156088532284 0.0 3.449693781141794E-4 0.006595076568757463 0.006595076568758351)
Average genome size in population (length): 41.971
Average program size in population (points): 42.97
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.414
Error (vector) diversity:			 0.414
--- Run Statistics ---
Number of program evaluations used so far: 210000
Number of point (instruction) evaluations so far: 256453440
--- Timings ---
Current time: 1481495152279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 209
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 210
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 210
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_rot} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_rot integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 28772.165637018665
Median total errors in population: 7.581957116268226
Error averages by case: (920.9578980132258 922.0075354936841 920.9618410825038 923.1620466718425 921.4530936664754 920.4703744679686 920.5368446471714 921.1314739156373 920.8467727934345 924.5595741093847 923.6546482569462 924.3031226120809 921.8522977940552 940.7887848882872 1003.0189263991823 923.1133529062502 926.0308933764175 928.8351235275452 939.2523982980788 920.965534121272 920.752339145211 936.7190179825004 1189.1800032214383 1576.7364534960334 946.1533133071441 923.5281649689806 924.2697680682933 920.5307387128919 945.7489716991006 920.6443293756068)
Error minima by case: (0.0 0.0015116433283797193 0.0 0.0037396333146233474 1.6734311332111673E-4 2.2087900323844445E-4 5.513389842245475E-4 0.006051433755079216 0.001111507255083355 0.0 0.0015116433283797193 0.003969291837744748 0.00245645204335343 0.0 0.0 0.0 6.117582768148111E-4 7.140529763809411E-4 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 0.001333832797058676 0.001073619906719614 3.4649418175547453E-4 0.0011647156088532284 0.0 5.513389842245475E-4 0.006699068221905691 0.006699068221907134)
Average genome size in population (length): 42.894
Average program size in population (points): 43.894
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.455
Error (vector) diversity:			 0.455
--- Run Statistics ---
Number of program evaluations used so far: 211000
Number of point (instruction) evaluations so far: 257740260
--- Timings ---
Current time: 1481495164177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 210
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 211
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 211
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26655.84867318421
Median total errors in population: 7.362409443038564
Error averages by case: (860.948458826889 861.9522729939041 860.9398769588774 863.0262744133374 861.4353346215959 860.517082118638 860.5813716569226 861.1318146334377 860.8812659634838 864.318445008959 863.4982717758835 864.0283983220755 861.7765199652746 877.7585619641333 930.2986469739765 863.007176782337 865.7781197488492 867.7266992093289 876.1651949762678 860.9457026982664 860.7768901542692 876.0366218681584 973.0532965609998 1384.1297594682587 883.0948461768726 863.3747925561801 863.9890195041065 860.57915809775 883.4046936758715 860.6941055092994)
Error minima by case: (0.0 0.002231752492694916 0.0 0.012943416000881669 1.6734311332111673E-4 1.8465147330798404E-4 3.989092007362638E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.00245645204335343 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 0.001333832797058676 0.001804109768499984 3.4649418175547453E-4 0.0011647156088532284 0.0 3.989092007362638E-4 0.00988207755960957 0.012312615366152801)
Average genome size in population (length): 42.594
Average program size in population (points): 43.593
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.444
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 212000
Number of point (instruction) evaluations so far: 259018080
--- Timings ---
Current time: 1481495176439 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 211
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 212
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 212
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30707.321205398566
Median total errors in population: 7.162826269706219
Error averages by case: (990.8035799901795 991.6282433239129 990.8153033375971 992.6077066737994 991.2028282602467 990.4287839981661 990.4901471613194 990.9494462545904 990.7594632677242 993.7054443641924 993.001505682749 993.5206725506912 991.5356951426985 1007.2379152282672 1058.8014658755592 992.5103537657333 994.9975211882179 997.4166236774583 1006.090711680871 990.8215986250557 990.6719731612748 1003.5069007876823 1237.4543434968853 1545.8202552542325 1011.7460721409415 992.9214717543632 993.5163491416412 990.490124250062 1011.2742781660927 990.5944271963583)
Error minima by case: (0.0 0.002231752492694916 0.0 0.010347514248433498 1.6734311332111673E-4 2.2087900323844445E-4 8.955787705699492E-4 0.0026360702217465004 0.001111507255083355 0.0 0.0020491976814245305 6.537613118950958E-4 1.7017778395267413E-4 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 0.001333832797058676 0.001804109768499984 3.4649418175547453E-4 0.0011647156088532284 0.0 8.955787705699492E-4 3.0511283394218935E-4 4.2718232908456333E-4)
Average genome size in population (length): 42.576
Average program size in population (points): 43.572
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.418
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 213000
Number of point (instruction) evaluations so far: 260295360
--- Timings ---
Current time: 1481495188600 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 212
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 213
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 213
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31590.342339461647
Median total errors in population: 7.346544340925576
Error averages by case: (1001.4045798063528 1003.0004547469713 1001.3989049550706 1004.5611571127338 1002.1861774453326 1000.5396983073701 1000.6177235421154 1001.632476836773 1001.1526342796183 1006.6980102453716 1005.4776244637458 1006.2784010532284 1002.7283753933737 1029.538623079938 1117.425985430112 1004.5730264568953 1009.1292164976819 1012.6243667316028 1027.2009599461855 1001.3995273922333 1001.0990955662094 1024.4738500832798 1324.7302407402974 1912.446929282144 1037.9172631380206 1005.2218119422864 1006.2840352657478 1000.6169082151072 1037.180584665508 1000.8036968403376)
Error minima by case: (0.0 0.0034737785337481952 0.0 0.004238600078595667 1.6734311332111673E-4 2.2087900323844445E-4 8.955787705699492E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.0021383682792279757 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 3.4649418175547453E-4 0.0011647156088532284 0.0 8.955787705699492E-4 0.00644009185198513 0.002503262827261876)
Average genome size in population (length): 42.534
Average program size in population (points): 43.53
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.435
Error (vector) diversity:			 0.435
--- Run Statistics ---
Number of program evaluations used so far: 214000
Number of point (instruction) evaluations so far: 261571380
--- Timings ---
Current time: 1481495200411 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 213
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 214
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 214
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26545.282482650346
Median total errors in population: 7.233992981524898
Error averages by case: (860.8305161948183 861.7216149806239 860.8273005120923 862.6699525390094 861.2654142124296 860.4239880745795 860.4877823080868 861.0020593872309 860.7713919883938 863.7576388549021 863.093155943531 863.5415041700578 861.5929015155488 875.6788123947837 920.7086881195756 862.6348663436087 865.1037993286818 866.736379049222 874.2312474061259 860.8297392360136 860.6687616822452 873.8096847871653 958.7726029770006 1311.9163426236767 884.1913867846375 863.032068591174 863.5701163147392 860.4888319484513 880.3363072041016 860.5876271778294)
Error minima by case: (0.0 0.0034737785337481952 0.0 4.4309509554985027E-4 1.6734311332111673E-4 2.2087900323844445E-4 8.955787705699492E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.00245645204335343 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 3.4649418175547453E-4 0.0011647156088532284 0.0 8.955787705699492E-4 0.007935274788366087 7.230742784692934E-4)
Average genome size in population (length): 42.831
Average program size in population (points): 43.831
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.419
Error (vector) diversity:			 0.419
--- Run Statistics ---
Number of program evaluations used so far: 215000
Number of point (instruction) evaluations so far: 262856310
--- Timings ---
Current time: 1481495212825 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 214
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 215
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 215
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin vector_integer_replace float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32275.765645324052
Median total errors in population: 7.299830053682342
Error averages by case: (1050.7792902601582 1051.627393303205 1050.7753932901849 1052.575954841194 1051.1817953973803 1050.449403265857 1050.505682746057 1050.9577276773077 1050.7588961570927 1053.6640387760835 1053.0854062370288 1053.482508818464 1051.5326367313457 1066.9478884853024 1109.55438234602 1052.4847962890692 1055.1868028325296 1056.5209232790226 1064.5424179007769 1050.7764907839455 1050.6687293575858 1063.6220597175022 1144.796361323658 1529.0879688054843 1078.5517074801924 1052.999888874926 1053.5380390090868 1050.5070937193025 1074.0141222129441 1050.5898454053274)
Error minima by case: (0.0 0.0034737785337481952 0.0 0.008494517175467564 1.6734311332111673E-4 2.2087900323844445E-4 2.497724831746484E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.00245645204335343 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 3.4649418175547453E-4 0.0011647156088532284 0.0 2.497724831746484E-4 0.00988207755960957 0.008082297898535873)
Average genome size in population (length): 42.451
Average program size in population (points): 43.448
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.428
Error (vector) diversity:			 0.428
--- Run Statistics ---
Number of program evaluations used so far: 216000
Number of point (instruction) evaluations so far: 264129840
--- Timings ---
Current time: 1481495224893 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 215
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 216
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 216
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin vector_integer_replace float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29763.570406388124
Median total errors in population: 7.167028076111791
Error averages by case: (951.3469269950413 952.9276397608343 951.3443766836216 954.4520422922623 952.1488130122432 950.4778076913417 950.5787032739785 951.5695269223675 951.0950690229687 956.4241985599105 955.2960476714067 956.0020034204343 952.6798844714023 976.3466717236427 1054.8620141576862 954.4490022243893 958.7961205857089 961.4905475993942 973.9950210755062 951.3381051715311 951.0362785979909 973.8050593189975 1118.5298239674173 1721.021662381306 984.6199304989311 955.0593548036462 956.0296648333399 950.5769835534081 984.5148904009884 950.75623571642)
Error minima by case: (0.0 0.0034737785337481952 0.0 0.0028063793941512927 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.006317977953213649 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 0.0077978355519405795 0.0011647156088532284 0.0 9.536467373784108E-4 0.00988207755960957 0.0033052854169303147)
Average genome size in population (length): 42.831
Average program size in population (points): 43.829
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.443
Error (vector) diversity:			 0.443
--- Run Statistics ---
Number of program evaluations used so far: 217000
Number of point (instruction) evaluations so far: 265414770
--- Timings ---
Current time: 1481495236917 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 216
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 217
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 217
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29330.863288219236
Median total errors in population: 7.137653725399234
Error averages by case: (921.5888850167116 933.4694827971388 921.5809723115726 935.2246708189208 922.550405838836 920.5156957844534 930.6149737350953 931.8397952693903 931.2164430738175 937.6230031133575 936.2725437602622 937.081461952368 933.1437019670149 961.2883460740246 1053.960343944075 925.29698215665 940.4731865476434 933.6437221639109 958.4613900616396 931.5780113416741 931.170629741496 958.1375095080341 1130.322704246407 1847.3771012776606 971.0896747888683 935.9801166887029 937.1366082893002 920.6287105090832 970.7892561984676 930.8069592426555)
Error minima by case: (0.0 0.003453175733427294 0.0 0.0028063793941512927 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.006317977953213649 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 6.227505080431683E-4 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.0015580182421217614 0.0077978355519405795 0.0011647156088532284 0.0 9.536467373784108E-4 0.006026879772150551 0.004129014988516255)
Average genome size in population (length): 42.691
Average program size in population (points): 43.688
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.435
Error (vector) diversity:			 0.435
--- Run Statistics ---
Number of program evaluations used so far: 218000
Number of point (instruction) evaluations so far: 266695500
--- Timings ---
Current time: 1481495248954 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 217
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 218
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 218
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_max float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48977.80146822919
Median total errors in population: 7.143093739255114
Error averages by case: (912.0701988223933 914.6680275473535 912.0723602976637 917.1487445181214 913.3740749831414 910.6261452975767 910.7527418444988 912.3808971838932 911.544144543667 920.9461318295713 918.8218486734237 920.0978797388713 914.160209057166 971.4342908581883 1407.5990659447175 917.2991858854102 925.7962427175445 931.2553613228843 963.9123182335303 912.0773087727849 911.5196740989794 962.8411585121837 2064.640096635388 20462.12192215242 999.7009638730611 918.3144765544444 920.1875212720091 910.7516373161138 998.6627546349903 911.0240851073459)
Error minima by case: (0.0 0.0034737785337481952 0.0 0.002158216175372374 1.6734311332111673E-4 2.2087900323844445E-4 9.970212211440899E-5 0.003775523686263327 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.006317977953213649 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 6.227505080431683E-4 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 0.003873258555373127 0.0011647156088532284 0.0 4.007544408445307E-4 0.006026879772150551 0.00405045346233146)
Average genome size in population (length): 42.513
Average program size in population (points): 43.51
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.455
Error (vector) diversity:			 0.455
--- Run Statistics ---
Number of program evaluations used so far: 219000
Number of point (instruction) evaluations so far: 267970890
--- Timings ---
Current time: 1481495260926 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 218
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 219
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 219
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction float_add} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin float_add integer_div float_frominteger float_add)
Partial simplification: (in1 integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30685.54368349381
Median total errors in population: 7.131959526345215
Error averages by case: (971.425658920696 973.291724873016 971.4234650574781 974.6611943304785 972.2834652860357 970.5172928507251 970.6030733156556 971.6684819324272 971.150330973826 976.7489334298575 975.445090244421 976.3201439371543 972.7715251023053 999.4467168120066 1086.8618117536425 974.6430173523815 978.9696102268925 982.6682331400901 997.1276238177057 971.4362374529024 971.0955841389134 994.7002361886449 1294.4843007966674 1878.3833591589932 1007.4063812064629 975.2461632364822 976.3145229698481 970.6043572868658 1007.0054068575552 970.8397408436625)
Error minima by case: (0.0 0.0021652023890261773 0.0 0.005424161888813117 1.6734311332111673E-4 2.2087900323844445E-4 5.513389842245475E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.003969291837744748 0.006317977953213649 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 6.227505080431683E-4 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 0.0032887300380792794 0.0011647156088532284 0.0 5.513389842245475E-4 0.006026879772150551 0.004129014988516255)
Average genome size in population (length): 42.211
Average program size in population (points): 43.209
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.416
Error (vector) diversity:			 0.416
--- Run Statistics ---
Number of program evaluations used so far: 220000
Number of point (instruction) evaluations so far: 269237220
--- Timings ---
Current time: 1481495273096 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 219
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 220
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 220
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 27157.573239612397
Median total errors in population: 7.225968854906549
Error averages by case: (880.8209422646844 881.7289682172953 880.8149800097515 882.6877380388407 881.2630060590395 880.416249123292 880.6935835022155 880.9891703716758 880.7608370251962 883.8017677052331 883.1703100510938 883.5758677108488 881.629286054387 895.6180664653285 941.5590720148103 882.6487281121655 885.2754251237332 886.867668318063 894.2132964859002 880.8091431560595 880.6759005119892 893.9994913891394 980.0390938193896 1344.0770052496507 900.8136035823454 883.0939712074323 883.5913762710435 880.6944991257865 900.6695281160733 880.5746645299294)
Error minima by case: (0.0 0.0034737785337481952 0.0 0.01317496569601495 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.007106953847665576 0.001111507255083355 0.0 8.677867826101249E-5 0.003969291837744748 0.010155205848450422 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 6.227505080431683E-4 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 0.0032887300380792794 0.0011647156088532284 0.0 9.536467373784108E-4 0.008250513784318514 0.004129014988516255)
Average genome size in population (length): 42.408
Average program size in population (points): 43.407
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.44
Error (vector) diversity:			 0.44
--- Run Statistics ---
Number of program evaluations used so far: 221000
Number of point (instruction) evaluations so far: 270509460
--- Timings ---
Current time: 1481495284958 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 220
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 221
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 221
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34272.35825078306
Median total errors in population: 7.1881320517396965
Error averages by case: (1120.7235818470178 1121.5397944032504 1120.7223055967659 1122.4152817740016 1121.1195286486889 1120.408579069162 1120.4561378893602 1120.8922534707485 1120.6996640947962 1123.4071277469009 1122.7652443920113 1123.1951356930151 1121.4137438618409 1134.0486018389272 1175.0622994063056 1122.3678078840785 1124.5840491659344 1126.1533427382537 1132.795712421607 1120.724299830981 1120.5960224811488 1132.5117337232323 1209.9119240154685 1530.2779163203872 1138.2974362678715 1122.687912684672 1123.1723112295685 1120.4568333689435 1138.3979706675054 1120.5536982506026)
Error minima by case: (0.0 0.0033442209073983875 0.0 0.013052573103086829 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.005949390548824596 0.001111507255083355 0.0 0.0020491976814245305 0.002194699165663394 0.00782388287825686 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.004390675685606027 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 9.536467373784108E-4 0.00988207755960957 0.004129014988516255)
Average genome size in population (length): 42.54
Average program size in population (points): 43.535
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.432
Error (vector) diversity:			 0.432
--- Run Statistics ---
Number of program evaluations used so far: 222000
Number of point (instruction) evaluations so far: 271785660
--- Timings ---
Current time: 1481495297144 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 221
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 222
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 222
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30678.337731631313
Median total errors in population: 7.083319937721442
Error averages by case: (981.3921700567644 982.9497005293164 981.3854211295472 984.4823721876088 982.1603030032162 980.5368201116346 980.6333257602074 981.6137877008719 981.1386688787466 986.4774675139029 985.3386803092757 986.006700685553 982.6754588566902 1006.7301166626391 1084.9769124541629 984.4940584554536 988.8074025332837 991.6971551152272 1004.3160019096275 981.3913093965858 981.0829194409562 1003.6091712611175 1151.416109840869 1761.2952384123178 1014.6411650645479 985.0330977370654 986.040594689222 980.6328818416265 1014.5699761552637 980.812743938008)
Error minima by case: (0.0 0.0033442209073983875 0.0 0.0040652194563595145 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.007106953847665576 0.001111507255083355 0.0 0.0020491976814245305 0.0020975215494001276 0.00782388287825686 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.002925561767675333 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 1.147834270796011E-4 9.549024289441377E-4 0.0011647156088532284 0.0 9.536467373784108E-4 0.002045955981330394 0.004129014988516255)
Average genome size in population (length): 42.093
Average program size in population (points): 43.091
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.44
Error (vector) diversity:			 0.44
--- Run Statistics ---
Number of program evaluations used so far: 223000
Number of point (instruction) evaluations so far: 273048450
--- Timings ---
Current time: 1481495309271 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 222
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 223
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 223
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_max float_sin vector_integer_replace float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 25674.433679350015
Median total errors in population: 7.062642079448453
Error averages by case: (830.8477406674015 831.7664864097255 830.8447583542024 832.7017682215269 831.3060397260939 830.4193640150762 830.5058031538293 831.0264037681347 830.770965580083 833.8811797968311 833.062550744991 833.5586667784872 831.5835652913062 846.8762045639819 902.7579006300014 832.7272756415042 835.0436837945151 837.06848546225 844.9373149624915 830.8503245866498 830.669803063748 845.0683358522973 940.117460370136 1287.3188605978671 850.0764905243933 832.9509707893391 833.5113252079983 830.5041141564071 851.0790925142513 830.6007441244883)
Error minima by case: (0.0 0.0033442209073983875 0.0 0.014151791901985789 1.6734311332111673E-4 2.2087900323844445E-4 9.536467373784108E-4 0.007106953847665576 0.001111507255083355 0.0 0.0032323290217277645 2.4027690010441916E-4 0.003670313705523398 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.002925561767675333 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 9.536467373784108E-4 0.002045955981330394 0.003348271245194323)
Average genome size in population (length): 42.801
Average program size in population (points): 43.799
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.447
Error (vector) diversity:			 0.448
--- Run Statistics ---
Number of program evaluations used so far: 224000
Number of point (instruction) evaluations so far: 274332480
--- Timings ---
Current time: 1481495321485 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 223
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 224
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 224
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin vector_integer_replace float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32215.770691633814
Median total errors in population: 7.1881320517396965
Error averages by case: (1050.78814565283 1051.6489191700823 1050.781184567282 1052.5398701208958 1051.1820288555537 1050.4383904911253 1050.4798278436774 1050.9697351266575 1050.7577273042618 1053.5945907473497 1052.939111455401 1053.3483167368013 1051.4797247087988 1064.7126353785845 1108.5700745920828 1052.5393616513106 1054.82287284122 1056.5497316785024 1063.5200467697443 1050.7832011622545 1050.6616278303995 1063.2675515519552 1144.02241885329 1491.2791365392125 1068.2675078342572 1052.8228129416468 1053.2584224848697 1050.4806589018158 1068.668192960937 1050.5968648809996)
Error minima by case: (0.0 0.0028124067306549705 0.0 4.4609234356762784E-4 1.6734311332111673E-4 2.2087900323844445E-4 8.445830658742048E-4 0.007106953847665576 0.001111507255083355 0.0 0.002812406730653194 2.4027690010441916E-4 0.00782388287825686 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.0021869550111262015 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 8.445830658742048E-4 0.005726963702130661 4.546493203319013E-4)
Average genome size in population (length): 42.536
Average program size in population (points): 43.536
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.455
Error (vector) diversity:			 0.455
--- Run Statistics ---
Number of program evaluations used so far: 225000
Number of point (instruction) evaluations so far: 275608560
--- Timings ---
Current time: 1481495333706 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 224
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 225
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 225
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31302.62145601167
Median total errors in population: 7.222678618610787
Error averages by case: (1001.3736688432675 1002.9445069712209 1001.3646197855577 1004.464314370255 1002.135744701708 1000.5752274940473 1000.6502588843118 1001.5958987786631 1001.1388054761045 1006.5424319589412 1005.3183039864268 1006.0591238637123 1002.7394187186235 1026.7908556809753 1106.9497977147976 1004.5339520631766 1009.0168933236541 1011.7641292992437 1024.3896249537331 1001.3710237944999 1001.3239399124417 1024.2353085269817 1172.6664411372465 1798.9194147299054 1035.3114138514347 1005.1222254184122 1006.0369587112366 1000.6481815565645 1035.814966650721 1000.8240048537912)
Error minima by case: (0.0 5.710141567192295E-4 0.0 4.4609234356762784E-4 1.6734311332111673E-4 2.2087900323844445E-4 3.200991020242405E-4 3.200991020242405E-4 0.001111507255083355 0.0 0.0032323290217277645 2.4027690010441916E-4 3.2009910202379643E-4 0.0 0.0 0.0 6.117582768148111E-4 3.2009910202646097E-4 0.005841201840460997 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 3.200991020246846E-4 0.0 3.200991020242405E-4 0.004149827694675423 0.0027143353552163685)
Average genome size in population (length): 42.313
Average program size in population (points): 43.312
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.447
Error (vector) diversity:			 0.447
--- Run Statistics ---
Number of program evaluations used so far: 226000
Number of point (instruction) evaluations so far: 276877950
--- Timings ---
Current time: 1481495345952 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 225
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 226
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 226
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26767.843890515178
Median total errors in population: 7.1881320517396965
Error averages by case: (851.2340336150767 852.7895021853057 851.2361591789838 854.1630130436768 851.9378208893205 860.4083983152964 860.5081783806343 851.4965886444584 851.068690682119 856.1941112575291 855.1139747798771 855.8449714033684 852.5461884425287 876.6136768832538 949.3258234921558 854.2157345204985 858.8464282182501 860.8528125289068 873.5578321265265 851.2240648515996 850.9715468101043 872.5918860170157 1008.6312741642514 1606.4876892238517 891.707577688549 855.0486035235568 855.9298971125753 860.5096745088169 886.0803717440486 850.7073662830392)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 2.2087900323844445E-4 3.200991020242405E-4 3.200991020242405E-4 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 3.2009910202379643E-4 0.0 0.0 0.0 6.117582768148111E-4 3.2009910202646097E-4 0.005841201840460997 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 3.200991020246846E-4 0.0 3.200991020242405E-4 0.007444024636512836 0.0027143353552163685)
Average genome size in population (length): 42.937
Average program size in population (points): 43.934
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.447
Error (vector) diversity:			 0.447
--- Run Statistics ---
Number of program evaluations used so far: 227000
Number of point (instruction) evaluations so far: 278166060
--- Timings ---
Current time: 1481495358313 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 226
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 227
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 227
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29956.52474986092
Median total errors in population: 7.2356492590364265
Error averages by case: (970.9189872554515 971.8849959151148 970.9180549895394 972.901449794426 971.4048759405105 980.4301436342244 980.4868444347742 971.0953640047696 970.8096810561653 974.1379245558627 973.4183635192394 973.8752838157028 971.7877035093596 986.7806354640123 1037.66002749165 973.1579716013755 975.7290814635022 977.4396693545143 985.3757724013715 970.9141491752372 970.729830932384 985.6214193166071 1078.4825793308235 1477.0893420796706 992.4280161972305 973.3184520916765 973.8407437030146 980.4888312677174 992.7570040488686 970.6415515161214)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 2.2087900323844445E-4 8.445830658742048E-4 0.0012545719774288422 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.004443147441063999 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.005841201840460997 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 8.445830658742048E-4 0.009533731207000073 0.0027143353552163685)
Average genome size in population (length): 42.773
Average program size in population (points): 43.771
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.449
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 228000
Number of point (instruction) evaluations so far: 279449250
--- Timings ---
Current time: 1481495370590 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 227
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 228
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 228
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction float_dec} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_dup_items in1 float_dec float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 34866.82695600273
Median total errors in population: 7.056966849668324
Error averages by case: (960.8543067769372 961.7939309617818 960.8484607651058 962.9980547386257 961.3564954427203 960.4500302311711 960.5154177954979 961.0192528162653 960.793055803489 964.3359893693023 963.2479903098399 963.8278296736504 961.622315190367 982.3923822483956 1223.528691515393 962.9890445140322 965.4399228416158 967.1440792653734 981.7107251732058 960.8603966170472 960.7026524807322 978.8826913821749 1628.1345056183818 5936.812605154676 982.6077045910303 963.1044607405082 963.7572972975877 960.5147492635449 983.945272592989 960.6366448312878)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 2.2087900323844445E-4 8.445830658742048E-4 0.004419173167940382 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.0021383682792279757 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.005841201840460997 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 8.445830658742048E-4 0.00988207755960957 3.244419660690667E-4)
Average genome size in population (length): 42.503
Average program size in population (points): 43.501
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.434
Error (vector) diversity:			 0.434
--- Run Statistics ---
Number of program evaluations used so far: 229000
Number of point (instruction) evaluations so far: 280724340
--- Timings ---
Current time: 1481495382882 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 228
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 229
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 229
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction float_dec} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_dup_items in1 float_dec float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 25857.339624625212
Median total errors in population: 6.962967062190784
Error averages by case: (840.7129848381854 841.5483210672932 840.7110545553974 842.3456943897992 841.1004871702572 840.373729840207 840.4374544348284 840.8857237999765 840.6834565712933 843.4002732194172 842.6463112104411 843.1825161326277 841.3961927737028 853.4937027403801 895.3867037611419 842.3633590296 844.4996579155013 846.0317133588211 852.450392212126 840.7078795690843 840.5821746001664 852.6050911909658 926.4080780824121 1241.1121188513514 857.5725373258828 842.690107434404 843.0676721468928 840.4453116289283 857.9424660384781 840.556458735642)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 3.960379964002003E-5 5.513389842245475E-4 0.004419173167940382 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 5.00447953982075E-4 0.0 0.0 1.2518310411735456E-4 4.036372649807163E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 5.513389842245475E-4 0.008550414370944281 0.0017656702915445077)
Average genome size in population (length): 42.912
Average program size in population (points): 43.911
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.418
Error (vector) diversity:			 0.418
--- Run Statistics ---
Number of program evaluations used so far: 230000
Number of point (instruction) evaluations so far: 282011700
--- Timings ---
Current time: 1481495395200 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 229
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 230
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 230
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32142.14761286635
Median total errors in population: 7.049992129512443
Error averages by case: (1031.3545331968542 1032.8970671389127 1031.383641274674 1034.4064902799048 1032.1226441637803 1030.4951776419457 1030.5982369718597 1031.5684885309686 1031.1433681668036 1036.3719925710084 1035.410015576323 1036.047345158302 1032.810746975607 1056.0490690843283 1132.097652285169 1034.3864868823732 1039.147488995998 1041.4740776203087 1053.7398434849072 1031.3607853658873 1031.066942518966 1053.1342624393205 1196.745484927602 1783.3574729971815 1065.8481066994302 1035.2766300874137 1036.1418584760079 1030.603021267397 1064.328876256085 1030.779805831018)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 2.2087900323844445E-4 8.445830658742048E-4 0.0026360702217465004 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.005841201840460997 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 0.001804109768499984 9.549024289441377E-4 0.0011647156088532284 0.0 8.445830658742048E-4 0.008550414370944281 0.0013288250319085648)
Average genome size in population (length): 42.834
Average program size in population (points): 43.83
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.448
Error (vector) diversity:			 0.448
--- Run Statistics ---
Number of program evaluations used so far: 231000
Number of point (instruction) evaluations so far: 283296720
--- Timings ---
Current time: 1481495407437 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 230
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 231
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 231
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction in1} {:close 1, :instruction float_dec} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_dup_items in1 float_dec float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_dec float_shove vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin vector_integer_replace float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 33053.17359764109
Median total errors in population: 7.1881320517396965
Error averages by case: (1061.2787286746272 1062.7774492816725 1061.275686399065 1064.2142941152401 1062.046230363971 1060.537335234924 1060.8353593610043 1061.4784830803512 1061.0713669364573 1066.219354520968 1064.9946032404457 1065.7222211157741 1062.474842343336 1086.9227123800665 1173.2089556649867 1064.29546685964 1068.4197276533946 1071.3386057840248 1083.9824342358027 1061.2717726015103 1060.986367349608 1084.182511268742 1234.6644213794511 1809.3536152969239 1093.3208194330136 1064.7935002700408 1065.718209619104 1060.8345619730785 1094.1788322486168 1060.7751289552518)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.6734311332111673E-4 3.960379964002003E-5 8.445830658742048E-4 0.0025833377497428422 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.0045577369576612625 0.0 0.0 0.0 6.117582768148111E-4 2.9581419969915146E-4 4.6340819999102223E-4 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 0.0010551261822318025 0.0 8.445830658742048E-4 0.008550414370944281 7.77216781630008E-4)
Average genome size in population (length): 42.43
Average program size in population (points): 43.427
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.469
Error (vector) diversity:			 0.469
--- Run Statistics ---
Number of program evaluations used so far: 232000
Number of point (instruction) evaluations so far: 284569620
--- Timings ---
Current time: 1481495419631 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 231
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 232
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 232
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30736.893064532516
Median total errors in population: 7.216642572880145
Error averages by case: (1000.7717697163259 1001.5909079182485 1000.7718729146403 1002.5258058842945 1001.1590029478893 1000.4789642000943 1000.743853418489 1000.934151091529 1000.7704574848386 1003.6267415849171 1002.8648396791889 1003.3966613947742 1001.4544608035205 1015.2524100184522 1060.806459572449 1002.4904969253206 1004.7784495962627 1006.6439548847343 1013.8870559597005 1000.7768943404972 1000.6414956373561 1013.7482415783453 1098.438045518486 1451.046466897063 1019.7027170266309 1002.8217401657223 1003.3564849994241 1000.7461907335774 1020.0384060166621 1000.6280656230772)
Error minima by case: (0.0 5.710141567192295E-4 0.0 1.1581088410217433E-4 1.405991397387396E-4 0.002283186464886927 5.513389842245475E-4 0.0015743554689318096 0.001111507255083355 0.0 2.522009600038899E-4 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 4.6340819999102223E-4 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 0.0011647156088532284 0.0 5.513389842245475E-4 0.008550414370944281 0.0013288250319085648)
Average genome size in population (length): 42.724
Average program size in population (points): 43.721
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.457
Error (vector) diversity:			 0.457
--- Run Statistics ---
Number of program evaluations used so far: 233000
Number of point (instruction) evaluations so far: 285851340
--- Timings ---
Current time: 1481495432140 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 232
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 233
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 233
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (float_mod in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 26648.150275246182
Median total errors in population: 7.045270225310061
Error averages by case: (860.9234893545784 861.9620118106006 860.9249083102493 863.0289242971822 861.449646683628 860.4341102005159 860.4986285920883 861.120389677936 860.8390198619751 864.3351035891844 863.4923032729492 864.0421281842546 861.781106814308 877.7531584099295 930.3543631157993 863.006724341519 865.7324989564659 867.7832163840226 876.1843650956184 860.9317233778053 860.7254741444815 875.9730905541928 973.9756868992387 1376.4836491741996 882.7957945676009 863.3781882445415 863.988309392754 860.4987321647199 883.135797258324 860.617732515515)
Error minima by case: (0.0 0.0022831864648864553 0.0 1.1581088410217433E-4 1.6734311332111673E-4 0.002283186464886927 8.445830658742048E-4 0.003217640785272202 0.001111507255083355 0.0 0.001853118164399703 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.00557798677931487 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 8.445830658742048E-4 0.00557798677931487 0.0013288250319085648)
Average genome size in population (length): 43.113
Average program size in population (points): 44.113
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.451
Error (vector) diversity:			 0.451
--- Run Statistics ---
Number of program evaluations used so far: 234000
Number of point (instruction) evaluations so far: 287144730
--- Timings ---
Current time: 1481495444599 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 233
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 234
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 234
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin float_sin float_max float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 33970.88933984599
Median total errors in population: 7.056966849668324
Error averages by case: (1110.735809419458 1111.4980860235246 1110.738386739851 1112.3317094545287 1111.1092976815785 1110.4406386640544 1110.502388790625 1110.8542913231322 1110.711808901121 1113.320567670827 1112.6911304978946 1113.1056534429188 1111.397452578679 1123.7677238568117 1164.9128392069354 1112.3006799969019 1114.535127828208 1116.10629074659 1122.527072192939 1110.7250210361622 1110.614705640584 1122.485164730094 1197.2829774436996 1522.2633756470586 1128.4007442385457 1112.65982672052 1113.0776323878922 1110.5014536805159 1128.7204167288783 1110.5710665754593)
Error minima by case: (0.0 0.0028950738402713228 0.0 1.1581088410217433E-4 1.6734311332111673E-4 0.002974197810098972 0.0018143873362778118 0.0012545719774288422 0.001111507255083355 0.0 9.815258041356856E-5 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.00557798677931487 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.008550414370944281 0.0013288250319085648)
Average genome size in population (length): 42.131
Average program size in population (points): 43.127
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.441
Error (vector) diversity:			 0.441
--- Run Statistics ---
Number of program evaluations used so far: 235000
Number of point (instruction) evaluations so far: 288408660
--- Timings ---
Current time: 1481495457694 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 234
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 235
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 235
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add vector_integer_nth integer_add integer_add integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult integer_min float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29515.682238681118
Median total errors in population: 7.104764019186392
Error averages by case: (941.3070439433508 942.8673424357214 941.3053373086951 944.3614442975295 942.102260030751 950.4876040990873 950.578499518286 951.5357076377907 951.1143201785632 946.381986455785 945.1767003630131 945.8750077261567 942.617763425051 966.0240843426283 1044.4951376925 944.3897903532682 948.6518730858695 951.3170636313087 963.6932829702615 951.3135286350871 940.9881166974062 963.6236320466899 1107.596753871893 1697.7812450281303 974.0011414100304 944.9615387202708 945.9169969247276 950.5801731779096 973.910143868658 950.7267188046978)
Error minima by case: (0.0 0.0028950738402713228 0.0 1.1581088410217433E-4 1.6734311332111673E-4 0.0028433158475881237 9.536467373784108E-4 0.0015743554689318096 0.001111507255083355 0.0 9.815258041356856E-5 2.4027690010441916E-4 0.005084639329727025 0.0 0.0 0.0 6.117582768148111E-4 0.001129539028923432 0.00557798677931487 0.0 0.0 1.2518310411735456E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 9.536467373784108E-4 0.008550414370944281 0.0013288250319085648)
Average genome size in population (length): 42.682
Average program size in population (points): 43.68
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.439
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 236000
Number of point (instruction) evaluations so far: 289689120
--- Timings ---
Current time: 1481495469923 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 235
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 236
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 236
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31433.925835238657
Median total errors in population: 7.224291761912104
Error averages by case: (1001.5589972875763 1003.3867368069851 1001.567665787414 1005.083144485455 1002.4927081086535 1000.5172288385113 1000.6297092249146 1001.7977515152676 1001.2371791867425 1007.3914399475759 1006.1004075511523 1006.9095625772354 1003.279811958821 1030.120398748417 1118.7876735464467 1005.1233211246732 1010.1365788407511 1013.2328846956565 1027.3575505476156 1001.562020930487 1001.6205304369328 1026.900451981228 1193.55952517344 1870.333286760546 1039.8415312747763 1005.8568691757137 1006.9557940111658 1000.6303600487436 1039.1308185029748 1000.8238961627712)
Error minima by case: (0.0 0.0028950738402713228 0.0 1.1581088410217433E-4 1.6734311332111673E-4 6.474626228197278E-4 0.0018143873362778118 0.0015743554689318096 0.001111507255083355 0.0 9.815258041356856E-5 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 0.0011160909102336802 8.765196643238937E-4 0.0 0.0 0.004022912759154451 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.008550414370944281 4.2718232908456333E-4)
Average genome size in population (length): 42.372
Average program size in population (points): 43.372
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.45
Error (vector) diversity:			 0.45
--- Run Statistics ---
Number of program evaluations used so far: 237000
Number of point (instruction) evaluations so far: 290960280
--- Timings ---
Current time: 1481495482010 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 236
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 237
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 237
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult float_tan float_inc integer_sub float_sin float_inc float_cos float_mod 5 float_sin float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30125.575637479204
Median total errors in population: 7.087608682873183
Error averages by case: (951.4096577612089 953.0921746177739 951.4129254657112 954.6909453722653 952.2398991564403 950.4952718343748 950.5910830784884 951.6553778286045 951.1326334275828 956.8375670623649 955.5574011092277 956.3705756276291 952.7925217379569 979.9922299492144 1069.4466740395076 954.6812968044336 959.218530038169 962.9581046362125 977.5644811085753 951.4099301706779 951.0709499189189 974.9695808163673 1277.823810786669 1888.587481043414 988.3364061695066 955.3484589093174 956.3952305304416 950.5905789671261 988.1403146418465 950.7635448691618)
Error minima by case: (0.0 0.0010816623414253712 0.0 0.0031189057348477434 1.6734311332111673E-4 0.001777524166607175 0.0018143873362778118 0.0015743554689318096 0.001111507255083355 0.0 9.815258041356856E-5 2.4027690010441916E-4 0.0033367083808899523 0.0 0.0 0.0 6.117582768148111E-4 0.0011160909102336802 1.3753660612536578E-4 0.0 0.0 0.004022912759154451 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.00880504303302132 0.0027143353552163685)
Average genome size in population (length): 42.985
Average program size in population (points): 43.983
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.451
Error (vector) diversity:			 0.451
--- Run Statistics ---
Number of program evaluations used so far: 238000
Number of point (instruction) evaluations so far: 292249830
--- Timings ---
Current time: 1481495494461 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 237
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 238
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 238
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction float_mod} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_cos} {:close 0, :instruction float_cos} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction float_cos} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction float_tan} {:close 0, :instruction float_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_sin} {:close 0, :instruction float_max} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (float_mod in1 float_mod integer_max vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add float_max vector_integer_nth integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall integer_min float_tan float_inc integer_sub float_sin float_inc float_cos float_mod integer_max 5 float_max float_sin vector_integer_replace float_sin float_max float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall 5 float_frominteger float_cos float_cos integer_add integer_add integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger float_swap integer_dup float_frominteger float_add float_cos integer_dup float_frominteger float_mult vector_integer_pushall float_tan float_inc float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.03571624273622964 0.019878015895219647 0.03571624273622964 0.014151791901985789 0.028129284018122647 0.3265412442513356 0.26906607343838745 0.3970939141059655 0.19419272326172865 0.1383466750457245 0.1999498158052706 0.025496253880918474 0.4044679315329489 4.5556107579614036E-5 0.21032677449062476 0.17449397150710233 0.20132639231446703 0.021312546191577297 0.12462533482579374 0.03571624273622964 0.0023258272386481593 0.22502687793510745 0.5720602873419125 0.18535898095024095 0.03221350226746722 0.050230024829044595 0.06208634141994729 0.26906607343838745 0.1778618164646133 0.344171811144496]
Total: 4.776994569813307
Mean: 0.15923315
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29385.4702091798
Median total errors in population: 7.128586708321058
Error averages by case: (950.9004275387231 951.8961624328612 960.902167139378 952.9377357009399 951.4230358174259 960.4234604513965 960.7203119986137 961.1086723340333 960.8396235069628 954.1057286528697 953.3538572488997 953.8256734632866 961.7381244329845 966.6964346717535 1016.667830399314 952.8609013322573 955.5201204512736 957.2732888459196 965.2364305626077 960.9057422066121 960.7276650167469 965.1706805502321 1057.0814008040916 1431.5341961239915 971.6425660260658 953.2251038945883 953.8900811536447 960.7198879565187 971.5327650998597 950.6101333659444)
Error minima by case: (0.0 4.6812102414417467E-4 0.0 0.0031189057348477434 1.6734311332111673E-4 4.6812102414442447E-4 0.0018143873362778118 0.005928865099650071 0.001111507255083355 0.0 4.681210241432865E-4 2.4027690010441916E-4 7.057428738121985E-4 0.0 0.0 0.0 4.6812102414506285E-4 0.0011160909102336802 8.122155052845415E-4 0.0 0.0 0.0018738872393484485 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.001873887239341343 0.0018738872393491146)
Average genome size in population (length): 42.628
Average program size in population (points): 43.628
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.446
Error (vector) diversity:			 0.446
--- Run Statistics ---
Number of program evaluations used so far: 239000
Number of point (instruction) evaluations so far: 293528670
--- Timings ---
Current time: 1481495506942 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 238
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 239
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 239
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_butlast in1 vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_dup float_frominteger float_add vector_integer_pop float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 vector_integer_last float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32272.65344811188
Median total errors in population: 7.140104021941893
Error averages by case: (1050.8927133417585 1051.8575367009407 1050.8907751335762 1052.8476467728012 1051.3933695771082 1050.3935914630586 1050.4588119945518 1051.0704676238734 1050.7919985741607 1053.9957646510468 1053.261571251048 1053.7290905057578 1051.7085293939738 1066.1189434836924 1114.7159841174412 1052.7891238038358 1055.3415965950458 1057.0268173492782 1064.705728786708 1050.8948838922897 1050.6990719891148 1064.781463340794 1152.7881469077588 1519.702438255949 1070.9661278135954 1053.1663925542837 1053.679400332229 1050.4590696745395 1070.9553074227285 1050.5710848089293)
Error minima by case: (0.0 4.6812102414417467E-4 0.0 0.0031189057348477434 1.6734311332111673E-4 4.6812102414442447E-4 0.0018143873362778118 0.003300251667647469 0.001111507255083355 0.0 4.681210241432865E-4 2.4027690010441916E-4 0.003736624974736813 0.0 0.0 0.0 4.6812102414506285E-4 0.0011160909102336802 8.765196643238937E-4 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.008197433763811546 0.0012670280864229833)
Average genome size in population (length): 42.912
Average program size in population (points): 43.912
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.43
Error (vector) diversity:			 0.43
--- Run Statistics ---
Number of program evaluations used so far: 240000
Number of point (instruction) evaluations so far: 294816030
--- Timings ---
Current time: 1481495519996 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 239
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 240
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 240
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_butlast in1 float_shove vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add integer_dup float_frominteger float_add float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29215.51723973741
Median total errors in population: 7.03017598883764
Error averages by case: (950.8086026804027 951.6133710768545 950.81873597032 952.6025899687581 951.1783583138105 950.4171590768437 950.4823660107455 950.9138925499425 950.7416330328749 953.5864651718681 953.077031087684 953.4202817034287 951.5693981582082 964.9004951462654 1008.2222247658481 952.492684597949 955.1747948200283 956.5114268476398 963.5595549748602 950.7939257313494 950.6875888623708 963.2258384795779 1045.451402222185 1385.8947984498814 970.2841979609728 952.9955721340353 953.4333366288527 950.4835221214522 969.5812189867088 950.5947722056932)
Error minima by case: (0.0 4.6812102414417467E-4 0.0 8.583095088585679E-4 1.6734311332111673E-4 4.6812102414442447E-4 5.513389842245475E-4 0.002574457470936764 0.001111507255083355 0.0 4.681210241432865E-4 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 4.6812102414506285E-4 0.0011160909102336802 0.001823892370666158 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.147834270796011E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 5.513389842245475E-4 0.00559421465445098 0.0027143353552163685)
Average genome size in population (length): 43.049
Average program size in population (points): 44.048
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.442
Error (vector) diversity:			 0.443
--- Run Statistics ---
Number of program evaluations used so far: 241000
Number of point (instruction) evaluations so far: 296107500
--- Timings ---
Current time: 1481495532272 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 240
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 241
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 241
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall integer_add integer_add float_yankdup integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_min integer_dup float_frominteger float_add float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 36044.00111508713
Median total errors in population: 7.224291761912104
Error averages by case: (1170.748089279486 1171.5276062289236 1170.750171001319 1172.3891918434763 1171.1061403185342 1170.3828142043858 1170.4309915412996 1170.8657464058479 1170.6916814419324 1173.4330137882419 1172.8026316584758 1173.2439859404785 1171.4218860421302 1185.9631120479603 1233.247112175704 1172.3108497752678 1174.6039081326242 1176.7959224087847 1184.8497480557687 1170.7438764837184 1170.615853103448 1182.2925126222428 1407.5337105395524 1688.618035909154 1190.085355699931 1172.7186531978589 1173.211408089349 1170.4312786676007 1189.6066617276108 1170.57916675602)
Error minima by case: (0.0 4.6812102414417467E-4 0.0 0.0025836353059442985 1.6734311332111673E-4 4.6812102414442447E-4 3.34942933926885E-4 0.012231324933976051 0.001111507255083355 0.0 4.681210241432865E-4 2.4027690010441916E-4 0.0021383682792279757 0.0 0.0 0.0 4.6812102414506285E-4 0.0011160909102336802 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 3.34942933926885E-4 0.005704637774712751 0.0027143353552163685)
Average genome size in population (length): 42.351
Average program size in population (points): 43.348
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.445
Error (vector) diversity:			 0.445
--- Run Statistics ---
Number of program evaluations used so far: 242000
Number of point (instruction) evaluations so far: 297378030
--- Timings ---
Current time: 1481495544627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 241
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 242
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 242
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_remove integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_butlast in1 vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_min integer_dup integer_dup float_frominteger float_add integer_min float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 vector_integer_last float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49679.791635309535
Median total errors in population: 7.179361921606011
Error averages by case: (951.2342127544747 952.7728613881162 951.2359674267043 954.439600411845 951.9431798681894 950.5276941468774 950.6038385793977 951.480228207995 951.0291351515043 956.9206266540245 955.3745536176816 956.3519490728587 952.4822850115937 996.9845653808154 1392.1231413504563 954.4528366547308 959.991219128645 964.8756045623611 991.1653271944563 951.2486401738234 950.9552259569904 988.1899007728841 2147.4539063547627 20145.182664234046 1019.2702634150902 955.1146707184095 956.3752171277825 950.6038154945098 1018.606041334257 950.8024631643175)
Error minima by case: (0.0 4.6812102414417467E-4 0.0 0.0031189057348477434 1.6734311332111673E-4 4.6812102414442447E-4 0.0010050971880750104 0.0017903743681215722 0.001111507255083355 0.0 4.681210241432865E-4 2.4027690010441916E-4 0.0021383682792279757 0.0 0.0 0.0 4.6812102414506285E-4 6.574449141893979E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0010050971880750104 0.005704637774712751 0.001244456959326401)
Average genome size in population (length): 42.518
Average program size in population (points): 43.516
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.463
Error (vector) diversity:			 0.463
--- Run Statistics ---
Number of program evaluations used so far: 243000
Number of point (instruction) evaluations so far: 298653570
--- Timings ---
Current time: 1481495557006 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 242
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 243
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 243
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_remove integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_butlast in1 float_mod vector_integer_pushall integer_add integer_add float_yankdup integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_dup float_frominteger float_add float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30039.261145820856
Median total errors in population: 7.014430797069477
Error averages by case: (970.9619568922309 972.1226880905326 970.9878350742772 973.1589889260905 971.4698368207088 970.4070400064038 970.4742885939177 971.1381350416378 970.8682778209683 974.6397930144769 973.9999076973655 974.4574193491471 972.0027842122768 990.6186761251754 1044.432749984976 973.1266909018079 976.9476683156174 978.2387083442118 987.8860968463252 970.9719877715308 970.7944914038932 987.0417817279454 1087.4036856376515 1543.4582571504304 1003.8644291408384 973.8669423500444 974.5166968824396 970.4792929631892 998.3089769410809 970.6150617936621)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 0.002974197810098972 0.0018143873362778118 0.004391733622670646 0.001111507255083355 0.0 4.851678135011639E-4 2.4027690010441916E-4 0.0019379692173124852 0.0 0.0 0.0 6.117582768148111E-4 6.574449141893979E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.004444723360123248 0.001244456959326401)
Average genome size in population (length): 43.054
Average program size in population (points): 44.052
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.45
Error (vector) diversity:			 0.45
--- Run Statistics ---
Number of program evaluations used so far: 244000
Number of point (instruction) evaluations so far: 299945190
--- Timings ---
Current time: 1481495569524 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 243
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 244
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 244
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall integer_add integer_add float_yankdup integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_min integer_dup float_frominteger float_add float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45420.33981084767
Median total errors in population: 7.103721524296461
Error averages by case: (830.7981273200055 831.8580489625999 830.7949162223732 833.020097227924 831.2676238881617 830.3854887510358 830.4173713658596 830.9482474687059 830.7233237291797 834.7721290667185 833.7919029809598 834.4308413824258 831.6764453156892 867.7935040236742 1226.5458966680526 832.9775428017737 837.320038197722 840.2466065329168 861.5102259312188 830.7857768482502 830.6217526285969 860.1245115212373 1817.3370799242862 19686.231634244312 894.9463084365183 833.6178317077442 834.4882308013866 830.4175490001358 889.9413372560998 830.5494206421348)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 0.0022911285269838766 0.0018143873362778118 0.004391733622670646 0.004129014988516255 0.0 4.851678135011639E-4 2.4027690010441916E-4 0.005493156841708036 0.0 0.0 0.0 6.117582768148111E-4 6.574449141893979E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0018143873362778118 0.004444723360123248 0.001244456959326401)
Average genome size in population (length): 43.313
Average program size in population (points): 44.311
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.456
Error (vector) diversity:			 0.456
--- Run Statistics ---
Number of program evaluations used so far: 245000
Number of point (instruction) evaluations so far: 301244580
--- Timings ---
Current time: 1481495581995 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 244
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 245
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 245
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_shove vector_integer_pushall integer_add integer_add vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add integer_dup float_frominteger float_add vector_integer_pop float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31770.40079910068
Median total errors in population: 7.226037657953058
Error averages by case: (1030.9987046592696 1032.1146393525646 1030.9992000478142 1033.2018498683544 1031.5478248563672 1030.4586138408176 1030.508587131667 1031.1823876326325 1030.86767730403 1034.594086885992 1023.7664818974038 1034.2806972803594 1031.9317963486367 1048.7913700694842 1104.5575724862492 1033.1974270414175 1026.2057214828806 1038.2951829345075 1047.0447956966143 1030.99549441364 1020.7900027859058 1046.965745188423 1150.0406698380882 1588.2915391371018 1044.666347866446 1033.6454807703142 1034.290180250771 1030.5112541448223 1055.0188316374615 1030.6406362506402)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 8.514332518306245E-4 8.825145131773349E-4 0.008676164770434536 0.0022807847515040613 0.0 4.851678135011639E-4 2.4027690010441916E-4 0.007147439701439495 0.0 0.0 0.0 6.117582768148111E-4 8.979701857789735E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 1.3044624097346968E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 0.0011935258414365046 0.0030234788558516357 0.001244456959326401)
Average genome size in population (length): 42.832
Average program size in population (points): 43.828
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.449
Error (vector) diversity:			 0.449
--- Run Statistics ---
Number of program evaluations used so far: 246000
Number of point (instruction) evaluations so far: 302529540
--- Timings ---
Current time: 1481495594439 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 245
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 246
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 246
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall integer_add integer_add vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add integer_dup float_frominteger float_add float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29741.24775922609
Median total errors in population: 7.038662060600105
Error averages by case: (951.2993928202504 952.8146199645612 951.2884702625445 954.2069069243994 952.0555505957343 950.4352359482798 950.5264618275702 951.6413249157812 951.0267853981884 956.1100193639074 955.0824802905811 955.7196384257295 952.5698732033429 976.6412725512067 1048.767341638901 954.2122593070477 958.580250817377 961.1386691372328 973.3480169835677 951.2917058572239 951.0401828881113 972.5685559101681 1105.6289307688203 1713.5834026213358 991.0071243150783 954.8671700941396 955.793552402976 950.5267157632161 986.7520952817929 950.7237529470278)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 1.8465147330798404E-4 5.513389842245475E-4 0.006171533105703286 0.001919480627139425 0.0 4.851678135011639E-4 2.4027690010441916E-4 0.002297538723896153 0.0 0.0 0.0 6.117582768148111E-4 8.979701857789735E-4 0.005723258613720361 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 4.2562251474009827E-4 2.6372493006476816E-4 5.386447831625674E-4 0.0 5.513389842245475E-4 0.005782827368136623 0.001244456959326401)
Average genome size in population (length): 42.712
Average program size in population (points): 43.709
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.423
Error (vector) diversity:			 0.423
--- Run Statistics ---
Number of program evaluations used so far: 247000
Number of point (instruction) evaluations so far: 303810900
--- Timings ---
Current time: 1481495606782 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 246
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 247
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 247
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (vector_integer_butlast in1 float_shove vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add vector_integer_replace integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_min integer_dup float_frominteger float_add float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30300.19278946937
Median total errors in population: 7.088112435181475
Error averages by case: (980.98721482873 982.0723072690383 980.9892310896405 983.1267472651278 981.5158048710807 980.4340843647126 980.4986300318741 981.173178036836 980.8676885477519 984.5377237324437 983.6928002718128 984.207185024493 981.8973752902224 999.5886565922781 1063.4256802633784 983.1437129164365 986.1400837839504 988.2749227557139 997.3564317070495 980.9839913797659 980.7959452797343 997.5787414753584 1107.1579044067962 1512.0887459041023 1004.1600593930364 983.5623257091311 984.2085013658427 980.4977054839651 1004.5877225817173 980.6416878473573)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 0.002974197810098972 1.1299719859303448E-4 0.00996315644958301 0.003259678225108198 0.0 4.851678135011639E-4 2.4027690010441916E-4 0.002297538723896153 0.0 0.0 0.0 6.117582768148111E-4 8.979701857789735E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 4.2562251474009827E-4 9.549024289441377E-4 5.386447831625674E-4 0.0 1.1299719859303448E-4 0.008197433763811546 8.796648751696612E-5)
Average genome size in population (length): 42.686
Average program size in population (points): 43.686
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.439
Error (vector) diversity:			 0.439
--- Run Statistics ---
Number of program evaluations used so far: 248000
Number of point (instruction) evaluations so far: 305091480
--- Timings ---
Current time: 1481495618742 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 247
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 248
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 248
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 float_mod vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_dup float_frominteger float_add float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 32112.29782658785
Median total errors in population: 6.967464616077573
Error averages by case: (1031.3281283111799 1032.8032580993433 1031.331108059315 1034.2759178387432 1032.0676084437364 1030.5140593721724 1030.5993250014499 1031.5610883100685 1031.0918885355336 1036.19881830364 1035.132592399911 1035.7824004710826 1032.6000612545456 1055.3688529628314 1129.8936935792676 1034.2927937309282 1038.5229744741255 1041.0533556799846 1053.0948701146347 1031.3316102037643 1031.0341415700327 1052.6257769469257 1192.7636099508704 1768.3898920732743 1063.4963773316306 1034.8928253827924 1035.8143846679748 1030.6005473377047 1063.0697289628567 1030.766137217529)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.6734311332111673E-4 6.474626228197278E-4 8.955787705699492E-4 5.18035076000789E-4 0.002997367432869602 0.0 4.851678135011639E-4 2.4027690010441916E-4 5.180350760003449E-4 0.0 0.0 0.0 6.117582768148111E-4 5.180350760021213E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 4.2562251474009827E-4 9.549024289441377E-4 5.180350760003449E-4 0.0 8.955787705699492E-4 0.0017394768819087858 8.796648751696612E-5)
Average genome size in population (length): 42.71
Average program size in population (points): 43.709
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.427
Error (vector) diversity:			 0.427
--- Run Statistics ---
Number of program evaluations used so far: 249000
Number of point (instruction) evaluations so far: 306372780
--- Timings ---
Current time: 1481495631517 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 248
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 249
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 249
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_remove integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall integer_add integer_add float_yankdup integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add vector_integer_pushall integer_dup float_frominteger float_add float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 float_sin float_sin integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29264.253309467047
Median total errors in population: 7.014430797069477
Error averages by case: (950.8424999508322 951.7426025585717 950.8372166410965 952.6925905077713 951.2617347262408 950.4403760677649 950.4970620501165 950.9903399491164 950.8012841678451 953.8447349727965 953.1138767226257 953.5661169001042 951.5865939977894 965.7959614208729 1012.6839682232022 952.881988372181 955.233165574438 956.9698492542423 964.4118617052223 950.8335984978854 950.692462514226 964.2416600170035 1050.6409347649203 1418.7595340946796 970.3212903071268 953.0230776061024 953.5715424030668 950.499080207929 970.86566431433 950.6106409769502)
Error minima by case: (0.0 8.51433251830791E-4 0.0 0.0031189057348477434 1.6734311332111673E-4 6.474626228197278E-4 0.0018143873362778118 5.18035076000789E-4 0.0028669741549391947 0.0 4.851678135011639E-4 2.4027690010441916E-4 5.180350760003449E-4 0.0 0.0 0.0 6.117582768148111E-4 5.180350760021213E-4 0.004936502237363527 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 4.2562251474009827E-4 9.549024289441377E-4 5.180350760003449E-4 0.0 0.0018143873362778118 0.008197433763811546 0.001244456959326401)
Average genome size in population (length): 42.696
Average program size in population (points): 43.695
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.448
Error (vector) diversity:			 0.448
--- Run Statistics ---
Number of program evaluations used so far: 250000
Number of point (instruction) evaluations so far: 307653660
--- Timings ---
Current time: 1481495643759 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 249
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 250
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 250
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction vector_integer_butlast} {:close 1, :instruction in1} {:close 1, :instruction float_mod} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 4} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_replace} {:close 1, :instruction integer_inc} {:close 1, :instruction 5} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_min} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_tan} {:close 0, :instruction float_sin} {:close 0, :instruction float_inc} {:close 0, :instruction float_cos} {:close 1, :instruction float_mod} {:close 0, :instruction integer_max} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_add})
Best program: (vector_integer_butlast in1 float_mod float_shove vector_integer_pushall integer_add integer_add float_yankdup vector_integer_replace integer_inc 4 float_frominteger integer_add integer_add integer_max vector_integer_replace integer_inc 5 float_frominteger integer_div integer_dup float_frominteger float_add vector_integer_pushall integer_min integer_dup integer_dup float_frominteger float_add vector_integer_pop integer_min float_sin float_sin float_inc vector_integer_pushall float_tan float_sin float_inc float_cos float_mod integer_max 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Partial simplification: (in1 vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger float_add integer_dup float_frominteger float_add vector_integer_pop float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 vector_integer_last float_sin float_sin vector_integer_replace integer_div float_frominteger float_add)
Errors: [0.019265245425711175 0.053051655894419625 0.019265245425711175 0.3586816850882961 0.027273831412223615 0.17906163397586217 0.08241245018215687 0.32872818265469306 0.11418289857022001 0.040308809438098336 0.1997779586307562 0.04402921673989013 0.33767325462472186 0.07542812224488671 0.28853272776240146 0.029206875920833042 0.17909425160121017 0.1881634122767757 0.21774303320221833 0.019265245425711175 0.11227597905663167 9.958045858908804E-4 0.23344523213557977 0.10358817817041199 0.20278081877741272 0.48153299141688954 0.0726545674318988 0.08241245018215687 0.04442387449039131 0.3971407786161547]
Total: 4.5323964113602155
Mean: 0.15107988
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50195.93629311328
Median total errors in population: 6.967464616077573
Error averages by case: (970.8665160530712 971.9715299535611 970.8783382070224 973.275956747536 971.366114371207 970.412754546708 970.477666576962 971.057242994501 970.7933984785716 975.1968581534312 974.0162287329581 974.8343362316435 971.8082443463104 1011.8923205965182 1391.0000558048234 973.1535373574383 977.6777847387125 982.4864478098821 1006.6917034874161 970.8775377018767 970.7228019120067 1001.4534155538533 2268.917556817157 20051.530739157806 1032.4093957858088 973.8544724489625 974.8483317796067 970.4798197870412 1030.3409939055318 970.6441930753745)
Error minima by case: (0.0 0.0013867440409311982 0.0 0.0031189057348477434 1.0171176739071086E-5 6.474626228197278E-4 5.252263519994749E-4 5.18035076000789E-4 3.0832316806184146E-4 0.0 4.851678135011639E-4 2.4027690010441916E-4 5.180350760003449E-4 0.0 0.0 0.0 6.117582768148111E-4 5.180350760021213E-4 0.005772256980293378 0.0 0.0 9.958045858908804E-4 2.360137500545534E-5 4.2562251474009827E-4 9.549024289441377E-4 5.180350760003449E-4 0.0 5.252263519994749E-4 0.0030234788558516357 0.001244456959326401)
Average genome size in population (length): 42.658
Average program size in population (points): 43.654
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.444
Error (vector) diversity:			 0.444
--- Run Statistics ---
Number of program evaluations used so far: 251000
Number of point (instruction) evaluations so far: 308933400
--- Timings ---
Current time: 1481495655988 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 250
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 251
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 251
