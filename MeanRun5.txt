Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
parent-selection = :tournament
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :tournament
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = 108 82 87 -96 -15 -123 23 92 -46 -1 -3 88 22 1 4 96
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "31d97864-ffe7-42d8-b7cf-9844cab16a08"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction float_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction float_flush} {:close 0, :instruction float_yank} {:close 0, :instruction float_pop} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_subvec vector_integer_replacefirst vector_integer_remove integer_rot integer_swap float_add integer_pop integer_rot float_flush float_yank float_pop float_mult vector_integer_dup_items float_tan vector_integer_conj vector_integer_yankdup vector_integer_subvec vector_integer_occurrencesof vector_integer_flush integer_sub vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot integer_div integer_dec vector_integer_concat 5 vector_integer_remove integer_sub float_add vector_integer_rot float_dup float_dec integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (float_yank in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger integer_div 5 integer_sub float_dup float_dec integer_dup integer_rot float_dup_times)
Errors: [3.0 8.2 2.0 4.6 5.2 0.2 0.4 3.4 2.8 15.0 12.2 13.8 7.4 66.0 261.0 11.0 22.2 28.4 58.8 2.0 2.0 58.8 423.2 1793.2 84.8 10.4 14.0 0.4 85.8 0.8]
Total: 3001.000000000001
Mean: 100.03333
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 278111.80943553103
Median total errors in population: 300000
Error averages by case: (9260.193946619529 9260.4632132862 9260.199946619528 9260.69594661952 9260.319146619537 9260.088371540744 9270.086971540739 9270.243946619536 9270.144546619525 9261.083946619528 9260.921946619535 9260.981546619525 9270.42054661954 9264.66394661953 9279.647946619529 9260.74394661953 9261.649946619535 9262.088946619542 9264.235546619526 9270.202946619529 9270.15394661953 9264.349546619525 9291.304346619536 9412.109946619536 9266.295946619526 9260.847946619539 9261.022946619529 9270.08497154074 9266.460946619525 9260.101642134363)
Error minima by case: (0.0 0.7999999999999998 1.0 2.5999999999999996 0.20000000000000018 0.05855493553942867 0.14030230586813974 0.6000000000000001 0.19999999999999996 4.0 7.199999999999999 0.1999999999999993 0.40000000000000036 14.0 201.0 5.0 15.2 5.399999999999999 5.799999999999997 1.0 0.0 30.799999999999997 143.8 1793.2 24.200000000000003 2.5999999999999996 5.0 0.14030230586813974 21.799999999999997 0.04147098480789646)
Average genome size in population (length): 25.73
Average program size in population (points): 26.721
Average percent parens in population: 0.063
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.023
Error (vector) diversity:			 0.023
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 771900
--- Timings ---
Current time: 1481490665983 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction float_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction float_flush} {:close 0, :instruction float_yank} {:close 0, :instruction float_pop} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_subvec vector_integer_replacefirst vector_integer_remove integer_rot integer_swap float_add integer_pop integer_rot float_flush float_yank float_pop float_mult vector_integer_dup_items float_tan vector_integer_conj vector_integer_yankdup vector_integer_subvec vector_integer_occurrencesof vector_integer_flush integer_sub vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot integer_div integer_dec vector_integer_concat 5 vector_integer_remove integer_sub float_add vector_integer_rot float_dup float_dec integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_sub in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger integer_div 5 integer_sub float_dup float_dec integer_dup integer_rot float_dup_times)
Errors: [3.0 8.2 2.0 4.6 5.2 0.2 0.4 3.4 2.8 15.0 12.2 13.8 7.4 66.0 261.0 11.0 22.2 28.4 58.8 2.0 2.0 58.8 423.2 1793.2 84.8 10.4 14.0 0.4 85.8 0.8]
Total: 3001.000000000001
Mean: 100.03333
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 179947.76124949742
Median total errors in population: 300000
Error averages by case: (5951.061008337338 5952.482127203242 5951.0827833971625 5953.797257276583 5951.71563665165 5950.516690365825 5970.522290365825 5971.312419070863 5970.804219070821 5955.935634427144 5955.043738952064 5955.377174704882 5972.25146551333 5975.663888299091 6056.436274610868 5954.039368098298 5959.058383219976 5961.378972337799 5973.3439299657175 5971.110019070846 5970.861836651614 5973.523528297159 6122.0471011327445 6767.6196747814865 5984.627165982225 5954.623522265877 5955.580061015857 5970.515290365825 5984.849944731442 5950.579843333954)
Error minima by case: (0.0 0.7999999999999998 0.16432631710360912 2.5999999999999996 0.20000000000000018 0.05855493553942867 0.14030230586813974 0.3999999999999999 0.19999999999999996 4.0 7.199999999999999 0.1999999999999993 0.40000000000000036 14.0 200.0 5.0 14.2 5.399999999999999 4.799999999999997 0.0 0.0 29.799999999999997 143.8 1793.2 24.200000000000003 2.5999999999999996 5.0 0.14030230586813974 21.799999999999997 0.04147098480789646)
Average genome size in population (length): 27.625
Average program size in population (points): 28.615
Average percent parens in population: 0.054
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1600650
--- Timings ---
Current time: 1481490668140 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction 5} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse 5 integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot integer_div integer_dec vector_integer_concat 5 vector_integer_remove integer_sub float_add vector_integer_rot float_dup float_dec integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_rest 5 vector_integer_length float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger integer_div integer_dec 5 integer_sub float_add float_dup float_dec integer_dup integer_rot float_dup_times)
Errors: [2.0 3.2 3.0 0.40000000000000036 0.20000000000000018 4.8 4.6 1.6 2.2 10.0 7.199999999999999 8.8 2.4000000000000004 61.0 256.0 6.0 17.2 23.4 53.8 3.0 3.0 53.8 418.2 1788.2 79.8 5.4 9.0 4.6 80.8 4.2]
Total: 2917.8
Mean: 97.26
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 36441.25535441828
Median total errors in population: 3115.4
Error averages by case: (1122.0785972225017 1124.3280018026414 1122.064372282327 1127.1431128284305 1122.8136255367654 1122.0312277952503 1131.9775517191576 1132.3178079560098 1131.9280079560112 1131.9672899789743 1130.3118278371771 1130.6226135901022 1133.9279043984786 1174.921577184256 1349.9744916292345 1127.8263569834617 1139.500637273627 1143.2577612229416 1170.1283474223706 1132.1930079560098 1132.099625536777 1170.0258028966691 1494.484118151048 2839.8589700606985 1196.8469294292204 1129.339936151026 1131.1665699010205 1131.9785517191576 1192.2481771344828 1121.8925528624866)
Error minima by case: (0.0 0.7999999999999998 0.16432631710360912 0.40000000000000036 0.20000000000000018 0.054375858334442084 0.11633781453677378 0.3999999999999999 0.19999999999999996 4.0 7.199999999999999 0.1999999999999993 0.40000000000000036 9.685933398765371 185.31406660123463 5.0 15.2 5.399999999999999 5.799999999999997 0.0 0.0 16.885933398765374 143.8 1788.2 11.114066601234626 5.4 5.0 0.11633781453677378 10.114066601234626 0.04147098480789646)
Average genome size in population (length): 28.957
Average program size in population (points): 29.956
Average percent parens in population: 0.044
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2469360
--- Timings ---
Current time: 1481490670397 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction 5} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse 5 integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot integer_div integer_dec vector_integer_concat 5 vector_integer_remove integer_sub float_add vector_integer_rot float_dup float_dec integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (5 float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_rot integer_div 5 integer_sub float_add float_dup float_dec integer_dup integer_rot float_dup_times)
Errors: [2.0 3.2 3.0 0.40000000000000036 0.20000000000000018 4.8 4.6 1.6 2.2 10.0 7.199999999999999 8.8 2.4000000000000004 61.0 256.0 6.0 17.2 23.4 53.8 3.0 3.0 53.8 418.2 1788.2 79.8 5.4 9.0 4.6 80.8 4.2]
Total: 2917.8
Mean: 97.26
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 24336.07088421297
Median total errors in population: 3055.0
Error averages by case: (692.2067882388598 692.3783882388547 692.1467882388597 694.9589882388485 691.0891882388586 694.172447500661 694.0294475006478 692.018788238851 693.0993882388557 700.7567882388597 698.219788238853 699.2427882388664 691.7899882388704 751.6527882388598 1127.9257882388597 696.1437882388598 707.292188238853 712.1327882388715 747.6279882388684 692.2317882388597 693.0117882388597 744.6369882388684 1644.5615882388436 2474.740388238861 768.8167882388684 697.245788238871 699.5847882388597 694.0294475006478 764.5851882388686 693.7414475006525)
Error minima by case: (0.0 0.20000000000000018 1.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 3.0 6.199999999999999 0.1999999999999993 0.40000000000000036 23.0 201.0 4.0 2.1999999999999993 5.399999999999999 5.799999999999997 1.0 0.0 30.799999999999997 323.2 81.79999999999995 72.8 5.4 8.0 0.4 20.799999999999997 0.19999999999999996)
Average genome size in population (length): 26.073
Average program size in population (points): 27.072
Average percent parens in population: 0.048
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 199
Genome diversity (% unique Plush genomes):	 0.315
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.315
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3251550
--- Timings ---
Current time: 1481490672518 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction 5} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_tan} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_add} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_last})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse 5 integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div integer_dup integer_mod vector_integer_subvec float_tan integer_pop vector_integer_pushall float_add float_frominteger integer_inc vector_integer_shove vector_integer_stackdepth vector_integer_rest float_shove vector_integer_replacefirst float_inc vector_integer_last)
Partial simplification: (in1 vector_integer_rest vector_integer_pushall integer_div integer_dup integer_mod integer_pop float_frominteger float_inc)
Errors: [2.0 6.2 2.0 2.5999999999999996 4.2 0.8 0.6 2.4 0.8 7.0 5.199999999999999 1.1999999999999993 5.4 65.0 260.0 10.0 15.2 27.4 2.799999999999997 3.0 1.0 57.8 31.80000000000001 1854.2 26.200000000000003 4.6 6.0 0.6 84.8 0.19999999999999996]
Total: 2490.9999999999995
Mean: 83.03333
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 25435.564181120088
Median total errors in population: 3046.6000000000004
Error averages by case: (752.7027163378145 763.499716337805 752.4191760355087 754.1859561675162 752.2227163378163 763.388083662189 763.3380836621816 762.6197163378109 763.1481163378108 761.0221760355088 758.456776035497 759.9009760355204 752.7893163378271 817.5207163378146 998.2637163378146 756.7847163378145 767.0317760354969 782.8295163378281 811.3907760355228 762.4191760355087 752.9507163378146 801.1291163378288 1147.5381760354871 2481.9557286233025 826.1269324846654 757.3405324846645 760.1031760355088 763.3402836621816 825.9097163378289 763.2358836621817)
Error minima by case: (0.0 0.20000000000000018 1.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.5163378145367739 5.0 5.199999999999999 0.8000000000000007 0.40000000000000036 14.0 254.0 4.0 8.2 5.399999999999999 2.799999999999997 1.0 0.7163378145367738 50.8 31.80000000000001 1669.2 26.200000000000003 4.6 5.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 26.62
Average program size in population (points): 27.62
Average percent parens in population: 0.049
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 297
Genome diversity (% unique Plush genomes):	 0.297
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 297
Syntactic diversity (% unique Push programs):	 0.297
Total error diversity:				 0.031
Error (vector) diversity:			 0.032
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4050150
--- Timings ---
Current time: 1481490674514 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction 5} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_tan} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_add} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_inc} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_shove} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_last})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse 5 integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div integer_dup vector_integer_dup_items vector_integer_subvec float_tan integer_pop vector_integer_pushall float_add float_frominteger integer_inc vector_integer_shove vector_integer_stackdepth vector_integer_rest float_shove vector_integer_replacefirst float_inc vector_integer_last)
Partial simplification: (float_max in1 vector_integer_rest vector_integer_pushall integer_div integer_dup vector_integer_dup_items integer_pop float_frominteger float_inc)
Errors: [1.0 6.2 2.0 2.5999999999999996 3.2 0.8 0.6 14.6 0.8 7.0 5.199999999999999 1.1999999999999993 5.4 15.0 220.0 9.0 15.2 18.6 2.799999999999997 3.0 1.0 54.8 31.80000000000001 1854.2 26.200000000000003 4.6 6.0 1.6 58.8 0.19999999999999996]
Total: 2373.3999999999996
Mean: 79.113335
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 28178.049000000003
Median total errors in population: 2997.000000000001
Error averages by case: (852.532 845.7293999999846 842.091 843.5441999999924 853.5969999999855 861.400799999994 861.4830000000055 862.7654000000057 842.1144000000061 852.498 849.9297999999845 851.3546000000152 845.0278000000127 918.791 1098.652 858.773 838.5131999999849 884.6612000000127 902.1346000000157 852.116 862.155 902.9282000000159 1232.5019999999795 2496.4220000000037 916.1226000000157 848.3714000000127 851.588 861.4930000000054 927.1140000000163 861.6444000000059)
Error minima by case: (0.0 0.20000000000000018 1.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.8 4.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 13.0 220.0 1.0 3.1999999999999993 5.399999999999999 0.20000000000000284 1.0 1.0 48.8 30.80000000000001 1419.2 24.200000000000003 0.40000000000000036 3.0 0.4 21.799999999999997 0.19999999999999996)
Average genome size in population (length): 36.969
Average program size in population (points): 37.969
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.061
Error (vector) diversity:			 0.067
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5159220
--- Timings ---
Current time: 1481490676922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_subvec} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction float_add} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 1, :instruction float_flush} {:close 0, :instruction float_yank} {:close 0, :instruction float_pop} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_subvec} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_set} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_subvec vector_integer_replacefirst vector_integer_remove integer_rot integer_swap float_add integer_pop integer_rot float_flush float_yank float_pop float_mult vector_integer_dup_items float_tan vector_integer_conj vector_integer_yankdup vector_integer_subvec vector_integer_occurrencesof vector_integer_flush integer_sub vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot vector_integer_pushall vector_integer_set vector_integer_concat float_frominteger float_rot integer_div integer_dec vector_integer_concat 5 vector_integer_remove integer_sub float_add vector_integer_rot float_dup float_dec integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger integer_div 5 integer_sub float_add float_dup float_dec integer_dup integer_rot float_dup_times)
Errors: [2.0 8.2 2.0 1.4000000000000004 4.2 0.2 0.4 13.6 1.8 8.0 6.199999999999999 0.1999999999999993 6.4 17.0 221.0 10.0 16.2 17.6 3.799999999999997 3.0 3.0 56.8 31.80000000000001 1731.2 26.200000000000003 4.6 5.0 0.6 60.8 0.8]
Total: 2264.0
Mean: 75.46667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 24728.454983178446
Median total errors in population: 2917.8
Error averages by case: (732.1673394392809 713.9883394392782 732.477339439281 732.0185394392842 731.7517394392784 793.3243394392828 793.237139439274 742.3439394392761 722.2473394392807 740.4423394392809 737.8655394392773 739.0849394392842 713.302939439293 786.9173394392809 968.4283394392809 736.867339439281 666.8505394392821 752.9885394392941 778.4607394392866 742.5583394392809 782.5523394392809 781.4773394392865 1099.0163394392646 2387.9327394392703 802.3567394392873 736.2511394392926 739.5173394392809 743.2411394392741 805.7329394392879 793.0539394392791)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.8 3.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 9.0 56.0 1.0 4.199999999999999 3.3999999999999986 0.20000000000000284 0.0 1.0 34.8 29.80000000000001 1288.2 0.20000000000000284 0.40000000000000036 3.0 0.4 21.799999999999997 0.19999999999999996)
Average genome size in population (length): 39.805
Average program size in population (points): 40.804
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 232
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 232
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.095
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6353370
--- Timings ---
Current time: 1481490679625 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger integer_sub float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger float_add float_dup_times)
Errors: [2.0 7.2 2.0 2.4000000000000004 4.2 0.2 0.4 3.4 1.8 7.0 5.199999999999999 1.1999999999999993 6.4 16.0 221.0 10.0 15.2 17.6 2.799999999999997 3.0 2.0 55.8 31.80000000000001 1730.2 27.200000000000003 5.6 6.0 0.4 59.8 0.8]
Total: 2248.6000000000004
Mean: 74.95333
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 27569.465583221183
Median total errors in population: 2915.8
Error averages by case: (822.48004412005 834.0092246350488 832.6326015277746 822.7707171386269 822.2426441200437 883.4390636050504 893.3180441200421 863.7458830900343 852.6274441200474 829.134371896876 827.0749718968667 826.9617718968809 833.5368441200604 882.11104412005 1060.87104412005 826.69304412005 806.278771896868 852.4658830900478 856.99872930461 842.8820441200501 862.7006636050438 880.7416441200625 1118.460046214554 2461.3740082411837 880.8759161496088 825.4614771796204 828.3410888068385 853.3812636050345 902.7490441200631 883.1062441200435)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 56.0 1.0 1.1999999999999993 10.399999999999999 0.20000000000000284 0.0 0.0 21.799999999999997 26.41948499375343 1413.2 20.81948499375342 0.21948499375341335 0.6194849937534137 0.4 4.200000000000003 0.19999999999999996)
Average genome size in population (length): 40.332
Average program size in population (points): 41.332
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 101
Genome diversity (% unique Plush genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.142
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7563330
--- Timings ---
Current time: 1481490682185 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger integer_sub float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger float_add float_dup_times)
Errors: [2.0 7.2 2.0 2.4000000000000004 4.2 0.2 0.4 3.4 1.8 7.0 5.199999999999999 1.1999999999999993 6.4 16.0 221.0 10.0 15.2 17.6 2.799999999999997 3.0 2.0 55.8 31.80000000000001 1730.2 27.200000000000003 5.6 6.0 0.4 59.8 0.8]
Total: 2248.6000000000004
Mean: 74.95333
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 23827.10654356642
Median total errors in population: 2490.9999999999995
Error averages by case: (712.2321688352924 735.366858163881 702.3521948471996 703.9234046062837 713.5501688352881 771.74673486115 741.7073984661873 737.8490006324108 761.912173831139 707.6521991089955 705.8038903460637 703.2081818865962 744.8219738311442 746.6031854760954 931.540867325915 718.2741688352925 705.3137928613374 730.8239397702532 714.0824842762867 713.1580176773477 752.0977348611474 762.292984799207 822.5394195724917 2401.022434588358 735.9488641686551 704.7299261924736 706.5498857283847 721.9331984661827 776.4808922491696 741.5883984661901)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.09391564547484021 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 4.0 56.0 0.0 2.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 34.8 26.41948499375343 1413.2 2.799999999999997 0.21948499375341335 0.0 0.4 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 39.393
Average program size in population (points): 40.393
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.145
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8745120
--- Timings ---
Current time: 1481490684722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction integer_sub} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger integer_sub float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger float_add float_dup_times)
Errors: [2.0 7.2 2.0 2.4000000000000004 4.2 0.2 0.4 3.4 1.8 7.0 5.199999999999999 1.1999999999999993 6.4 16.0 221.0 10.0 15.2 17.6 2.799999999999997 3.0 2.0 55.8 31.80000000000001 1730.2 27.200000000000003 5.6 6.0 0.4 59.8 0.8]
Total: 2248.6000000000004
Mean: 74.95333
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22265.88304676922
Median total errors in population: 2373.3999999999996
Error averages by case: (661.8118474764213 655.8499667186002 651.9594311103726 643.9781759552222 663.9018142031407 710.9893761897882 700.995322259662 721.1582629347325 721.5533411046979 647.6650265335502 645.9414095994209 642.3807886170508 715.30182546214 679.8975289242006 863.6165599830668 668.7648679718375 656.134871263132 688.6175896654947 661.8305488215975 693.0037691320586 661.9773216196996 700.5728121739035 785.1027974265947 2321.4696497862155 696.4489946726177 645.3923557422991 646.2988477256455 701.3758751425225 710.9469822691137 700.9450862844284)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.30899380861525083 0.6000000000000001 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 1.6194849937534173 45.0 1.6194849937534137 8.2 4.399999999999999 0.20000000000000284 0.38051500624658585 0.0 29.799999999999997 27.41948499375343 345.20000000000005 2.799999999999997 0.21948499375341335 0.0 0.30899380861525083 4.200000000000003 0.09100619138474919)
Average genome size in population (length): 39.13
Average program size in population (points): 40.13
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.465
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.12
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9919020
--- Timings ---
Current time: 1481490687282 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (float_max integer_stackdepth integer_rot float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [1.0 6.2 3.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 6.0 4.199999999999999 2.1999999999999993 5.4 15.0 220.0 9.0 14.2 18.6 1.7999999999999972 3.0 1.0 54.8 32.80000000000001 1729.2 28.200000000000003 6.6 7.0 0.4 58.8 0.8]
Total: 2241.6000000000004
Mean: 74.72
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 28747.683559427947
Median total errors in population: 2264.0
Error averages by case: (842.0003004751087 846.4205004750983 841.7028004751087 822.8572195227379 844.0315004750996 1050.5063826149149 1030.6084152905682 1028.216100475106 1031.7017004751244 827.3340504751087 825.7342147608149 821.7735671417688 1015.6227004751222 857.8283004751087 1056.6643004751086 849.0243004751087 835.3783671417671 877.3431004750986 849.0200647608331 1002.6911004751087 892.2643004751087 870.7409004751203 954.3496960795176 2452.855228221138 850.7472647608151 825.2026504750985 825.6362004751087 1010.6722152905546 877.9089004751204 1030.8472152905706)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 45.0 1.0 4.199999999999999 4.399999999999999 1.7999999999999972 0.0 0.0 29.799999999999997 29.80000000000001 1413.2 2.799999999999997 0.40000000000000036 0.0 0.11633781453677378 4.200000000000003 0.19999999999999996)
Average genome size in population (length): 39.009
Average program size in population (points): 40.007
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 150
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.117
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11089290
--- Timings ---
Current time: 1481490689972 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [1.0 6.2 3.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 6.0 4.199999999999999 2.1999999999999993 5.4 15.0 220.0 9.0 14.2 18.6 1.7999999999999972 2.0 1.0 54.8 32.80000000000001 1729.2 28.200000000000003 6.6 7.0 0.4 58.8 0.8]
Total: 2240.6000000000004
Mean: 74.68667
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 22550.808200000018
Median total errors in population: 2248.6000000000004
Error averages by case: (601.934 616.645800000002 581.931 572.7752000000073 593.9896000000055 960.2527999999893 940.4216000000135 974.2936000000104 961.6650000000108 577.163 575.667200000006 572.0462000000055 945.7606000000139 608.394 810.634 599.42 585.3026000000043 607.3479999999906 576.7855999999938 902.692 641.927 642.7131999999983 629.4417999999985 2219.4841999999758 601.118400000003 575.8391999999922 576.33 930.4126000000105 647.6511999999983 920.768800000008)
Error minima by case: (1.0 0.20000000000000018 1.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.6 0.8 1.0 1.8000000000000007 0.1999999999999993 1.4000000000000004 4.0 45.0 4.0 8.2 6.399999999999999 1.7999999999999972 2.0 1.0 31.799999999999997 30.80000000000001 1395.2 25.200000000000003 2.4000000000000004 2.0 0.4 5.200000000000003 0.19999999999999996)
Average genome size in population (length): 36.428
Average program size in population (points): 37.428
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 348
Genome diversity (% unique Plush genomes):	 0.413
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.054
Error (vector) diversity:			 0.057
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12182130
--- Timings ---
Current time: 1481490692469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_reverse vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_rest in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_frominteger vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_rot float_frominteger float_inc float_add integer_dup integer_rot vector_integer_take float_dup_times)
Errors: [1.0 6.2 3.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 6.0 4.199999999999999 2.1999999999999993 5.4 15.0 220.0 9.0 14.2 18.6 1.7999999999999972 2.0 1.0 54.8 32.80000000000001 1729.2 28.200000000000003 6.6 7.0 0.4 58.8 0.8]
Total: 2240.6000000000004
Mean: 74.68667
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 17787.176353087874
Median total errors in population: 2248.6000000000004
Error averages by case: (371.9716224166187 376.77852012665795 372.0257542852763 372.92750320326536 374.0590224166268 900.1936798733351 860.3761201266645 903.3889201266635 841.6967201266618 377.35331794234247 375.94056593585844 372.3577791823269 745.9125201266629 469.15106209520434 664.2651712177035 379.5936224166187 385.8878885083883 467.78827109606453 457.4717289871985 832.7154364644638 551.9167201266492 423.8486526656803 514.7429380044279 2118.266288883742 403.42899708043973 376.18081509983807 376.70083954311514 850.3850604289689 429.1112944537642 840.7395201266625)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.07987335076852736 0.12012664923147265 1.6 0.8 0.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 4.0 21.0 4.0 8.2 5.399999999999999 1.7999999999999972 2.0 1.0 31.799999999999997 29.80000000000001 1355.2 23.200000000000003 1.5999999999999996 2.0 0.12012664923147265 5.200000000000003 0.19999999999999996)
Average genome size in population (length): 36.075
Average program size in population (points): 37.074
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 321
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 321
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.054
Error (vector) diversity:			 0.055
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13264380
--- Timings ---
Current time: 1481490695180 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse float_max float_yank vector_integer_rest vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_nth in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [1.0 6.2 3.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 6.0 4.199999999999999 2.1999999999999993 5.4 15.0 220.0 9.0 14.2 18.6 1.7999999999999972 2.0 1.0 54.8 32.80000000000001 1729.2 28.200000000000003 6.6 7.0 0.4 58.8 0.8]
Total: 2240.6000000000004
Mean: 74.68667
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 25594.320894325345
Median total errors in population: 2248.6000000000004
Error averages by case: (691.8136011212906 716.4947999999936 692.0021373175016 692.8720799922793 683.8746011212859 1030.1907999999778 990.3698000000153 1033.4478000000133 991.6486000000192 697.0844629574129 695.4891427248514 692.2094490799126 905.7158000000146 758.2505342754657 948.3853721017705 689.2666011212906 704.99000796751 757.2449848251712 746.8872368517846 972.65 791.762 742.509401426543 792.0999868698763 2355.9345731945787 720.7500229184864 695.8578252170174 696.3626145532769 980.3800000000133 747.0562586880034 980.720400000019)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 2.2 0.2 0.4 1.6 0.19999999999999996 1.0 0.8000000000000007 0.1999999999999993 1.4000000000000004 4.0 45.0 4.0 8.2 3.3999999999999986 1.7999999999999972 2.0 0.0 31.799999999999997 30.80000000000001 1413.2 1.7999999999999972 0.40000000000000036 0.0 0.4 5.200000000000003 0.19999999999999996)
Average genome size in population (length): 35.822
Average program size in population (points): 36.822
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 235
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.048
Error (vector) diversity:			 0.049
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14339040
--- Timings ---
Current time: 1481490697687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_rest integer_add vector_integer_reverse integer_mod vector_integer_reverse vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [1.0 6.2 3.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 6.0 4.199999999999999 2.1999999999999993 5.4 15.0 220.0 9.0 14.2 18.6 1.7999999999999972 2.0 1.0 54.8 32.80000000000001 1729.2 28.200000000000003 6.6 7.0 0.4 58.8 0.8]
Total: 2240.6000000000004
Mean: 74.68667
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 17909.091400000027
Median total errors in population: 2248.6000000000004
Error averages by case: (421.527 436.31320000000767 422.419 423.12220000000895 413.5778000000078 820.209399999982 780.3884000000141 853.3728000000142 851.6432000000203 426.628 425.4786000000075 422.37500000000705 615.6084000000142 477.227 672.677 419.095 435.6880000000075 467.87599999998895 465.4399999999921 772.618 491.486 473.0567999999918 504.7627999999927 2121.9327999999714 452.592400000007 426.4851999999891 426.875 770.4078000000134 477.472199999992 740.7364000000143)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.6 0.19999999999999996 1.0 2.8000000000000007 0.1999999999999993 1.4000000000000004 5.0 44.0 4.0 8.2 5.399999999999999 1.7999999999999972 0.0 0.0 30.799999999999997 30.80000000000001 1417.2 25.200000000000003 1.4000000000000004 2.0 0.4 5.200000000000003 0.19999999999999996)
Average genome size in population (length): 36.632
Average program size in population (points): 37.632
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 176
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.059
Error (vector) diversity:			 0.062
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15438000
--- Timings ---
Current time: 1481490700289 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest vector_integer_nth float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger integer_div float_frominteger vector_integer_rest vector_integer_flush in1 integer_dec vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_rest integer_mod vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger integer_div float_frominteger in1 integer_dec vector_integer_pushall integer_div vector_integer_concat float_frominteger float_rot float_frominteger float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [0.0 2.2 2.0 16.4 3.8 0.2 0.4 3.4 0.8 8.0 3.1999999999999993 2.1999999999999993 5.4 5.0 60.0 5.0 15.2 26.4 31.200000000000003 4.0 2.0 38.8 572.8 1292.2 27.799999999999997 1.4000000000000004 2.0 1.6 75.8 0.19999999999999996]
Total: 2209.4
Mean: 73.64667
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 22990.745728790953
Median total errors in population: 2241.6000000000004
Error averages by case: (631.1014161468365 675.7648596976898 632.7480398297133 633.5682632627926 633.1402161468343 920.2095999999857 880.3790000000123 893.5430000000133 871.5908000000154 636.2858390715292 634.8887111302596 632.9070751633357 715.1690596977082 647.5662578458032 841.4859873392775 638.5514161468365 644.6589455000318 647.9563923354576 636.0612808198666 812.318 771.0194596976942 682.1212536436251 693.2247015557206 2260.9245245550937 662.2739258098012 636.7026112953699 637.1899999608264 840.4256000000115 686.2746921388132 860.6948000000102)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 2.0 1.8000000000000007 0.1999999999999993 4.4 5.0 20.0 4.0 7.199999999999999 2.3999999999999986 1.7999999999999972 1.0 0.0 30.799999999999997 30.80000000000001 1292.2 0.7999999999999972 0.5999999999999996 2.0 0.4 6.200000000000003 0.19999999999999996)
Average genome size in population (length): 37.093
Average program size in population (points): 38.092
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 168
Genome diversity (% unique Plush genomes):	 0.429
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 16550790
--- Timings ---
Current time: 1481490702965 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.2 0.4 3.4 1.8 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 3.0 0.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.4 57.8 0.8]
Total: 2120.0000000000005
Mean: 70.666664
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 20440.668308998374
Median total errors in population: 2240.6000000000004
Error averages by case: (581.1104995274075 615.7432995274086 572.8004995274075 573.6556995274155 583.1092995274109 720.2259004725884 710.3987004726025 693.607899527418 721.5898995274111 576.2404995274075 574.9262995274108 572.9452995274106 655.1770995274181 597.5604995274075 791.0534995274074 588.5124995274075 584.8564995274108 598.1906995273986 576.0772995274041 652.0204995274074 671.0584995274074 632.1256995274066 634.667499527407 2208.2720995273876 603.0644995274095 566.8364995273988 577.2704995274074 680.4513004726014 636.4010995274066 690.718219867984)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 1.0 0.8000000000000007 0.1999999999999993 0.40000000000000036 5.0 20.0 4.0 6.800000000000001 3.3999999999999986 0.20000000000000284 0.0 0.0 30.799999999999997 30.80000000000001 1292.2 1.7999999999999972 0.5999999999999996 2.0 0.14030230586813974 6.200000000000003 0.16017028665036603)
Average genome size in population (length): 38.41
Average program size in population (points): 39.41
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 174
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 174
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.071
Error (vector) diversity:			 0.073
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17703090
--- Timings ---
Current time: 1481490705586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest vector_integer_nth integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_rot float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.2 0.4 3.4 1.8 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 3.0 0.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.4 57.8 0.8]
Total: 2120.0000000000005
Mean: 70.666664
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22092.624007023343
Median total errors in population: 2240.6000000000004
Error averages by case: (611.0826011866998 635.659902289971 602.7693308359047 604.1414186561743 613.1918011867025 760.2275999999921 710.3954000000106 773.4346000000123 701.5530000000018 606.7981907107016 605.1435634459232 603.2947812476955 685.1499022899808 633.0763547596538 1014.2908266825789 618.6006011866998 615.1999452114917 628.5643168630296 614.5415499630104 672.049 751.1019022899694 665.6242958223376 1250.2575056535495 2218.333172472418 635.6892276111608 606.8140597059031 607.3729911091702 680.4618000000094 667.1237658426081 700.6806000000013)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 2.4 0.19999999999999996 2.0 2.1999999999999993 0.1999999999999993 3.4000000000000004 5.0 19.0 4.0 4.800000000000001 4.399999999999999 0.20000000000000284 0.0 0.0 20.799999999999997 30.80000000000001 145.79999999999995 25.200000000000003 0.5999999999999996 1.0 0.4 6.200000000000003 0.19999999999999996)
Average genome size in population (length): 38.044
Average program size in population (points): 39.044
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 149
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.086
Error (vector) diversity:			 0.089
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 18844410
--- Timings ---
Current time: 1481490708227 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_flush integer_stackdepth vector_integer_length float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_rot vector_integer_take float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.2 0.4 3.4 1.8 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 3.0 0.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.4 57.8 0.8]
Total: 2120.0000000000005
Mean: 70.666664
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22086.803400000033
Median total errors in population: 2240.6000000000004
Error averages by case: (620.896 685.1479999999979 602.727 606.0094000000088 623.1456000000015 870.2969999999935 830.442400000009 813.3200000000132 841.408800000011 606.39 604.4856000000036 602.8816000000031 685.2148000000102 635.291 802.447 627.764 614.6166000000022 639.4355999999946 609.9855999999982 732.346 711.186 668.8486000000022 747.6208000000058 2169.6027999999765 632.0649999999997 606.0021999999942 606.441 780.6346000000042 679.5818000000027 830.568600000003)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 2.0 0.8000000000000007 0.1999999999999993 1.4000000000000004 4.0 20.0 1.0 2.1999999999999993 3.3999999999999986 0.20000000000000284 0.0 0.0 20.799999999999997 30.80000000000001 1292.2 1.7999999999999972 0.40000000000000036 0.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 38.129
Average program size in population (points): 39.129
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.097
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 19988280
--- Timings ---
Current time: 1481490710896 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_nth integer_stackdepth integer_mult float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_max float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.2 0.4 3.4 0.19999999999999996 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 3.0 0.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.4 57.8 0.8]
Total: 2118.4000000000005
Mean: 70.613335
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 22079.055178585044
Median total errors in population: 2209.4
Error averages by case: (580.6326615136942 684.332615858287 562.8688314597758 579.9703419607167 573.2645175789032 980.333399999989 940.5000000000086 903.6436000000112 841.2286000000099 566.7439503774892 563.9336154326138 563.3709912013732 744.9896587391246 594.1250023340822 719.1736909915064 586.9089747177572 584.2253010527887 601.2593120449511 577.1889435613255 803.014 901.2468587391118 615.2649010891328 829.1591956882387 2023.4346679810676 592.549555232762 565.3813111859678 565.8362921170684 860.8517999999995 643.1233877273294 930.4992000000013)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.6000000000000001 0.19999999999999996 3.0 0.8000000000000007 0.1999999999999993 2.4000000000000004 4.0 2.0 4.0 1.1999999999999993 3.3999999999999986 0.20000000000000284 0.0 0.0 20.799999999999997 30.80000000000001 918.2 25.200000000000003 0.5999999999999996 0.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 38.816
Average program size in population (points): 39.816
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.126
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 21152760
--- Timings ---
Current time: 1481490713581 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (float_yank integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.8 0.6 2.4 0.19999999999999996 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 2.0 1.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.6 57.8 0.19999999999999996]
Total: 2117.8
Mean: 70.59333
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 17906.893537869742
Median total errors in population: 2120.0000000000005
Error averages by case: (410.5230907025732 445.278358529022 384.3732794154982 389.5916093926504 412.6024907025791 940.3185999999889 890.4744000000107 933.947800000011 821.5259585290241 385.33954402111084 385.6647878815216 385.08936139749824 534.716158529025 440.5053297708242 630.5581586226688 417.9080907025732 402.54781064176024 439.5436764268705 397.6936071273559 822.917 690.509 462.2481568024884 475.31019482984635 1940.0467166820156 492.1834545646724 390.70705012278444 390.0370088513093 870.5766000000093 473.40544362406456 850.7508000000098)
Error minima by case: (0.0 1.2000000000000002 0.0 1.5999999999999996 0.7999999999999998 0.2 0.4 1.4 0.19999999999999996 0.0 1.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 27.0 0.0 3.8000000000000007 17.4 0.20000000000000284 1.0 0.0 3.799999999999997 30.80000000000001 469.20000000000005 24.799999999999997 0.5999999999999996 1.0 0.4 8.200000000000003 0.19999999999999996)
Average genome size in population (length): 36.23
Average program size in population (points): 37.229
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 348
Genome diversity (% unique Plush genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 348
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.092
Error (vector) diversity:			 0.095
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 22239660
--- Timings ---
Current time: 1481490716141 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_mod integer_stackdepth float_frominteger float_inc vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_dup integer_rot float_dup_times)
Errors: [0.0 5.2 5.0 10.4 2.2 0.8 0.6 2.4 0.19999999999999996 4.0 2.1999999999999993 4.199999999999999 4.4 14.0 219.0 8.0 12.2 19.6 0.20000000000000284 2.0 1.0 53.8 34.80000000000001 1603.2 31.200000000000003 9.6 9.0 0.6 57.8 0.19999999999999996]
Total: 2117.8
Mean: 70.59333
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 14356.162503712452
Median total errors in population: 2120.0000000000005
Error averages by case: (300.41637050750285 355.12334469885974 294.8223223927522 299.9979864197941 302.36857503236587 800.3121999999902 750.4884000000108 773.5132000000121 661.5618000000052 294.9731464226572 294.1465209516524 295.398154519905 354.5657155145982 318.7130457758498 523.2347805003212 307.8791325390397 305.02999583844 320.0664975977937 296.2422675067334 692.812 500.2414161468365 354.0202448898255 364.53851069409126 1874.0073269918548 332.27458523386167 300.47504600672914 300.06388488686105 700.5558000000102 357.5302326441179 730.7900000000078)
Error minima by case: (0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.5999999999999996 6.0 27.0 0.0 6.199999999999999 3.3999999999999986 0.20000000000000284 0.0 0.0 15.799999999999997 30.80000000000001 1263.2 24.200000000000003 1.5999999999999996 2.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 34.509
Average program size in population (points): 35.508
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 381
Genome diversity (% unique Plush genomes):	 0.388
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 381
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.095
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 23274930
--- Timings ---
Current time: 1481490718788 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_flush integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_rot float_add float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.2 0.4 3.4 0.19999999999999996 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 3.0 2.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.4 57.8 0.8]
Total: 2007.4
Mean: 66.91333
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 15440.61518323056
Median total errors in population: 2120.0000000000005
Error averages by case: (350.318142546543 375.1203850398685 344.6754663781219 349.86507035567155 352.3367425465481 790.2771999999962 760.4592000000094 793.4956000000116 581.2903999999985 344.80343585992864 343.741528624237 344.9791307634749 414.45438503986674 367.7610532723828 567.7887086120076 357.84814254654304 353.7477016391776 369.71079987275533 345.359845476856 712.687 560.2031850398632 402.95498051500016 410.001255920273 1910.5763599659444 378.04615717624745 349.82758062202714 349.4390439876068 720.521800000009 407.5688814295983 730.7560000000026)
Error minima by case: (0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 1.4 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 5.0 27.0 0.0 5.199999999999999 3.3999999999999986 0.20000000000000284 0.0 0.0 21.799999999999997 30.80000000000001 956.8 24.799999999999997 0.5999999999999996 3.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 34.538
Average program size in population (points): 35.538
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 228
Genome diversity (% unique Plush genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.092
Error (vector) diversity:			 0.095
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 24311070
--- Timings ---
Current time: 1481490721289 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_nth integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add integer_rot float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.2 0.4 3.4 0.19999999999999996 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 3.0 2.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.4 57.8 0.8]
Total: 2007.4
Mean: 66.91333
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 12824.811609555441
Median total errors in population: 2118.4000000000005
Error averages by case: (240.378001426535 275.2126757424434 244.7648103532086 250.07849084288577 242.4664014265408 660.3497850398626 660.4861850398698 603.4860484105398 380.65587574243983 245.45917243284669 244.06035083666742 245.43129853332567 314.55007574243746 264.21506664479074 662.8046251335555 248.26200142653502 254.32249566029006 260.0367681274215 252.95918477023704 552.6774523156595 420.32127574243646 298.46913943927376 880.1747386457347 1832.370537584002 281.3819739110271 250.16779999965667 249.9220404750597 570.5613425465491 298.07841052380917 640.7075850398642)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 3.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 6.0 27.0 0.0 2.1999999999999993 5.399999999999999 0.20000000000000284 0.0 0.0 15.799999999999997 30.80000000000001 81.79999999999995 24.799999999999997 1.5999999999999996 5.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 35.228
Average program size in population (points): 36.228
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 288
Genome diversity (% unique Plush genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 288
Syntactic diversity (% unique Push programs):	 0.384
Total error diversity:				 0.092
Error (vector) diversity:			 0.095
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 25367910
--- Timings ---
Current time: 1481490723846 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (float_max integer_flush vector_integer_dup integer_stackdepth vector_integer_length vector_integer_rest float_frominteger vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.2 0.4 3.4 0.19999999999999996 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 3.0 2.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.4 57.8 0.8]
Total: 2007.4
Mean: 66.91333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 20333.810393799435
Median total errors in population: 2118.4000000000005
Error averages by case: (510.3675414221323 594.9379097384071 494.63128639433927 499.8579842899313 512.266223659392 980.5701303973038 960.5851042429621 883.1779253797496 710.4557850220182 494.95748122667777 494.25223142052636 495.3439701710828 654.4174069227668 528.71224994841 725.8155470141256 517.6676844711801 504.49913247257035 529.636721067845 496.95531344044923 822.4239489151798 840.6034354586685 562.1869896244131 568.3062740559874 2041.9518227426538 531.24079263072 500.1218035537114 499.74260186828326 870.6649678940864 566.8915047155347 940.5686236383507)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 1.3999999999999986 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 1285.2 22.799999999999997 1.5999999999999996 1.0 0.14030230586813974 7.200000000000003 0.04147098480789646)
Average genome size in population (length): 37.628
Average program size in population (points): 38.627
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 195
Genome diversity (% unique Plush genomes):	 0.423
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.109
Error (vector) diversity:			 0.113
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 26496750
--- Timings ---
Current time: 1481490726588 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (integer_stackdepth integer_rot float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_rot float_add integer_rot float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.8 0.6 2.4 0.19999999999999996 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 2.0 1.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.6 57.8 0.19999999999999996]
Total: 2004.8
Mean: 66.82667
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 23922.191669506206
Median total errors in population: 2117.8
Error averages by case: (620.252 694.8019999999983 584.6438414709847 590.4376794155061 622.1720000000012 1170.7452000000108 1070.699999999992 1112.6992000000087 890.4515999999936 584.6041585290153 583.1603585290172 585.1053585290175 824.1524000000134 637.612 833.066 627.551 592.8469585290177 639.1567999999911 586.1891585290174 962.1548414709847 1090.833 671.7250000000008 652.3319585290146 2140.5882160404335 617.8486907025751 589.7974907025651 589.3901585290153 1020.758399999991 675.9300000000013 1060.48619999999)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 27.0 0.0 1.8000000000000007 2.3999999999999986 0.20000000000000284 0.0 0.0 21.799999999999997 30.80000000000001 1263.2 0.7999999999999972 1.5999999999999996 2.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 39.537
Average program size in population (points): 40.537
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 240
Genome diversity (% unique Plush genomes):	 0.442
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.442
Total error diversity:				 0.094
Error (vector) diversity:			 0.098
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 27682860
--- Timings ---
Current time: 1481490729344 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_add} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_mod} {:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest integer_add vector_integer_reverse integer_mod float_mult float_max float_yank vector_integer_rest float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot integer_div in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (vector_integer_reverse integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup float_add integer_dup float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.8 0.6 2.4 0.19999999999999996 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 2.0 1.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.6 57.8 0.19999999999999996]
Total: 2004.8
Mean: 66.82667
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 22689.39537937833
Median total errors in population: 2116.8
Error averages by case: (580.2978414709847 614.987917058029 555.1349261394743 562.8953740446357 582.2160755870445 1100.5149574077218 1060.5639574077263 1073.3455255342528 780.4548829419635 554.1643276997837 553.1434600714341 555.4958667701919 694.3761170580397 597.2375794328841 788.31357194487 587.5494755870455 563.4343964735307 599.2352152696753 555.6448386090342 1002.556125534245 1001.1414425922753 630.6377759380274 615.1858107183867 2062.409349702301 589.9216070536345 560.8882049613406 559.9394041127797 1020.6418403496955 636.4525544995848 1050.614957407727)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.28294196961579354 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 8.2 14.399999999999999 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 1013.2 22.799999999999997 1.4000000000000004 4.0 0.4 8.200000000000003 0.19999999999999996)
Average genome size in population (length): 38.788
Average program size in population (points): 39.785
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 317
Genome diversity (% unique Plush genomes):	 0.406
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 317
Syntactic diversity (% unique Push programs):	 0.406
Total error diversity:				 0.098
Error (vector) diversity:			 0.101
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 28846500
--- Timings ---
Current time: 1481490732093 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup integer_dup vector_integer_dup_times integer_rot vector_integer_take vector_integer_pushall float_dup_times)
Partial simplification: (float_max integer_min vector_integer_dup integer_stackdepth float_frominteger float_inc vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add integer_dup integer_rot float_add float_dup_times)
Errors: [0.0 5.2 6.0 16.4 2.2 0.8 0.6 2.4 0.8 3.0 1.1999999999999993 5.199999999999999 4.4 14.0 219.0 8.0 11.2 19.6 1.2000000000000028 2.0 0.0 53.8 35.80000000000001 1478.2 33.2 11.6 10.0 0.6 57.8 0.19999999999999996]
Total: 2004.3999999999999
Mean: 66.81333
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 27123.932867198502
Median total errors in population: 2007.4
Error averages by case: (720.3558363403309 824.9127426280903 715.398512085074 724.5301937738844 722.3121904597979 1240.315943964123 1180.4621439641387 1183.4937044374537 1010.4707439641264 714.1675866448905 713.2128159467416 716.1847569973025 924.3029439641523 739.9048289211431 928.5950459840243 727.6206045312383 723.7509720668642 739.207903937835 718.3180212344362 1072.7133728595907 1181.465143964138 770.4315094360048 790.5720792894637 2114.535386843063 775.5634857635494 721.8758831609265 720.8085276846601 1090.5241429418083 777.1898994454474 1140.7359439641498)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 2.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 0.3999999999999986 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 217.20000000000005 22.799999999999997 2.4000000000000004 5.0 0.4 5.799999999999997 0.19999999999999996)
Average genome size in population (length): 38.601
Average program size in population (points): 39.601
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 393
Genome diversity (% unique Plush genomes):	 0.408
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 393
Syntactic diversity (% unique Push programs):	 0.408
Total error diversity:				 0.089
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 30004530
--- Timings ---
Current time: 1481490734872 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_take vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_flush vector_integer_nth integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup integer_rot vector_integer_take integer_max float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.2 0.4 3.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 10.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 3.6 56.8 0.8]
Total: 1793.1999999999998
Mean: 59.773335
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 24419.20371347719
Median total errors in population: 2007.0
Error averages by case: (640.3702750268285 714.8121068494055 615.4449841963146 624.648088485015 642.2680750268257 1180.359999999988 1070.5258161468441 1143.2928000000045 970.6976907025664 614.0973953120299 612.7284587293193 615.9786236773513 834.2394907025879 658.0284295192445 861.5673326683844 647.6692750268285 622.6450027602226 659.3437844014866 617.7250783651816 932.6644161468365 1061.073 693.6407750711155 690.967851903619 2065.2200530741084 650.6690130591404 621.4240399582742 620.3348791329232 990.6098161468449 695.4295452410524 1050.727616146847)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 3.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 1138.2 22.799999999999997 2.4000000000000004 1.0 0.4 7.200000000000003 0.19999999999999996)
Average genome size in population (length): 39.883
Average program size in population (points): 40.883
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 141
Genome diversity (% unique Plush genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.103
Error (vector) diversity:			 0.107
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 31201020
--- Timings ---
Current time: 1481490737881 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_take vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth integer_stackdepth float_frominteger vector_integer_rest in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup integer_rot float_add integer_max float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.2 0.4 3.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 10.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 3.6 56.8 0.8]
Total: 1793.1999999999998
Mean: 59.773335
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 30172.252354149467
Median total errors in population: 2006.0
Error averages by case: (750.489142546543 814.8897850398575 715.4804314847458 724.8238653961843 752.4361425465385 1320.613826510853 1250.6430265108504 1272.8840069395403 1060.5435850398512 715.6001290866379 713.6766262160173 716.8861635171496 894.6677850398764 786.0840532723828 1568.1387086120076 758.282142546543 723.6014031992106 770.0083998727457 739.7644438757548 1142.3596108446745 1100.8993435688783 816.2063805150119 2492.4782398721013 2152.4009269162348 758.3908672522946 721.8343592989232 721.0794666699884 1180.7683840175282 805.7336814296103 1230.5874265108428)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 7.0 10.0 0.0 3.1999999999999993 11.399999999999999 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 364.20000000000005 21.799999999999997 2.4000000000000004 3.0 0.4 7.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.614
Average program size in population (points): 41.614
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.486
Total error diversity:				 0.118
Error (vector) diversity:			 0.121
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 32419440
--- Timings ---
Current time: 1481490740919 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_take vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times integer_rot float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_flush vector_integer_nth integer_stackdepth float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup integer_rot float_add vector_integer_take integer_max float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.2 0.4 3.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 10.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 3.6 56.8 0.8]
Total: 1793.1999999999998
Mean: 59.773335
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 31300.320008916624
Median total errors in population: 2004.8
Error averages by case: (890.3721850398632 954.6644425922666 875.4462910061914 884.7986446066258 892.1017850398565 1340.7298414709985 1280.6448414709846 1292.6791585290152 1110.5660425922708 873.6473516391725 872.572252315653 875.799306084349 1004.0838425922888 906.9780969138507 1094.5758393433011 897.2781850398633 882.1889997114484 908.8823245275588 876.4788691431421 1182.3201585290153 1190.6391585290153 939.6002421787263 941.7454040978192 2245.593647917311 909.153301801348 881.2878484105198 880.085991148344 1200.8158414709799 944.2084737038093 1270.3816414709722)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 6.0 5.0 0.0 0.8000000000000007 2.3999999999999986 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 353.20000000000005 20.799999999999997 0.40000000000000036 0.0 0.4 10.200000000000003 0.04147098480789646)
Average genome size in population (length): 40.558
Average program size in population (points): 41.558
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.105
Error (vector) diversity:			 0.109
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 33636180
--- Timings ---
Current time: 1481490743953 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_take vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add float_add float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.2 0.4 3.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 3.0 2.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.4 56.8 0.8]
Total: 1784.0
Mean: 59.466667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 29470.572844896185
Median total errors in population: 2004.3999999999999
Error averages by case: (790.6200907025732 834.6809585290114 776.0200410757253 786.6993893582561 792.0140907025695 1450.7464000000125 1420.677600000003 1372.9719999999963 1010.8954414709856 773.4125878815148 772.7850106417509 776.5372879033144 884.0315585290266 807.6603297708242 1003.7741586226688 797.3050907025732 782.2791430133984 809.408676426868 777.8023638352427 1243.1647205845018 1080.5728414709847 841.6639568024996 845.245252052679 2147.5312799739395 811.5228971819032 782.2357613974827 780.8681633443615 1281.1735092974282 845.8028436240759 1390.4693999999877)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 10.0 0.0 1.8000000000000007 0.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 31.80000000000001 1227.2 9.799999999999997 1.4000000000000004 0.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 41.937
Average program size in population (points): 42.937
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.134
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 34894290
--- Timings ---
Current time: 1481490747019 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_mult} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_yank vector_integer_rest vector_integer_nth integer_flush vector_integer_nth vector_integer_take vector_integer_dup integer_stackdepth integer_rot vector_integer_length integer_mult float_frominteger vector_integer_rest vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times float_add float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.2 0.4 3.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 3.0 2.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.4 56.8 0.8]
Total: 1784.0
Mean: 59.466667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47109.35376822731
Median total errors in population: 1891.8
Error averages by case: (1390.8373072872419 1503.963979984969 1396.5675355198762 1410.1077897142054 1391.59670728722 2090.5265999999956 2030.5665999999953 1883.4775999999804 1600.874789992479 1392.0832806199562 1392.3419925434398 1396.8063402599546 1493.3025799849815 1405.6698365655723 1587.1858897733969 1396.4903072872419 1399.7979597111064 1408.134998814922 1397.6287943332818 1645.4496284298266 1640.801979984993 1437.4646796594516 1458.5935216878454 2574.437639901238 1427.619077095914 1402.761573001564 1400.738775384238 1681.9843072872623 1440.9428961150847 2030.598800000004)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 2.0 10.0 1.0 0.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 9.799999999999997 30.80000000000001 1096.2 17.799999999999997 0.5999999999999996 1.0 0.4 17.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.469
Average program size in population (points): 44.465
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 298
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.122
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 36198360
--- Timings ---
Current time: 1481490750342 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max vector_integer_dup integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add float_add vector_integer_dup_times float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.8 0.6 2.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 2.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.6 56.8 0.19999999999999996]
Total: 1781.3999999999999
Mean: 59.38
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 51750.45247749235
Median total errors in population: 1793.1999999999998
Error averages by case: (1531.0754326756291 1583.7648326756064 1537.0612741466139 1552.3221532601192 1531.3908326756066 2330.3511673243647 2290.4674326756062 2153.3108326756033 1681.043232675607 1531.4875912046443 1532.7048741466297 1537.3674741465938 1623.1994326756148 1545.435432675629 1723.117432675629 1536.1764326756293 1539.2583912046211 1548.1800326756402 1538.2216741465945 1887.1552741466137 1740.9584326756292 1576.330032675653 1600.3656741466339 2642.5160487160942 1568.962341973036 1543.5947419730667 1541.259274146614 1942.598832675651 1580.0722326756527 2280.7036326756365)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 10.0 1.0 0.1999999999999993 2.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 31.80000000000001 1153.2 17.799999999999997 0.40000000000000036 0.0 0.11633781453677378 10.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.509
Average program size in population (points): 45.507
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 431
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 431
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.107
Error (vector) diversity:			 0.109
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 37533630
--- Timings ---
Current time: 1481490753585 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add float_add vector_integer_dup_times vector_integer_dup_times vector_integer_take float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.8 0.6 2.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 2.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.6 56.8 0.19999999999999996]
Total: 1781.3999999999999
Mean: 59.38
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54276.26694149414
Median total errors in population: 1793.1999999999998
Error averages by case: (1591.0332393949984 1723.713471217557 1596.9393698732529 1612.1844171706314 1591.4528393949774 2520.3373805150063 2480.441180514988 2313.0945805149763 1781.000471217558 1591.7419170879243 1594.0985805052296 1597.657230637778 1693.1092712175628 1608.0243938874144 1790.0042970365541 1596.3212393949984 1606.4331245360963 1608.3901487696794 1599.935485325609 1936.6153805150063 1920.9393805150064 1637.938939439303 1669.3152588640799 2685.8698353817504 1628.0767624671566 1603.296389366328 1601.7582860933685 1972.2811805150243 1643.6489096092403 2480.613980515007)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 7.0 10.0 0.0 0.1999999999999993 1.6000000000000014 0.20000000000000284 0.0 0.0 10.799999999999997 30.80000000000001 1153.2 17.799999999999997 0.40000000000000036 1.0 0.4 4.799999999999997 0.19999999999999996)
Average genome size in population (length): 43.984
Average program size in population (points): 44.982
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 269
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 38853150
--- Timings ---
Current time: 1481490756813 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth integer_rot float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add vector_integer_dup_times vector_integer_last float_add integer_dup integer_max float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.8 0.6 2.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 2.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.6 56.8 0.19999999999999996]
Total: 1781.3999999999999
Mean: 59.38
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 130336.4634344385
Median total errors in population: 1792.3999999999999
Error averages by case: (1431.01256500728 1554.085068680924 1397.0620854593838 1412.7429859624635 1431.4873785818324 2320.347609479703 2280.442242155324 2072.9142734622383 1660.9975091407305 1392.0769484624716 1392.7702850405526 1397.6686145362933 1543.2098394966727 1454.2297718092677 1633.3130307214537 1436.7448511018906 1399.3282269950687 1453.3033956006495 1402.1603853357735 1824.6705965391845 1941.1402607799228 1478.620405427358 1477.4800563423146 83542.93408386443 1429.6528462185581 1403.6687480531955 1401.3986564589334 1901.3941921553387 1579.0112790975097 2290.5952424740894)
Error minima by case: (0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 7.0 10.0 0.0 0.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 1153.2 21.799999999999997 0.5999999999999996 1.0 0.11633781453677378 8.200000000000003 0.19999999999999996)
Average genome size in population (length): 43.832
Average program size in population (points): 44.829
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 119
Genome diversity (% unique Plush genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.141
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 40168110
--- Timings ---
Current time: 1481490760042 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_yank vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_shove integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_inc float_add integer_dup float_add float_dup_times)
Errors: [1.0 4.2 9.0 29.4 1.2000000000000002 0.8 0.6 2.4 1.2 0.0 1.8000000000000007 8.2 3.4000000000000004 13.0 218.0 7.0 8.2 20.6 4.200000000000003 2.0 1.0 52.8 38.80000000000001 1227.2 38.2 16.6 13.0 0.6 56.8 0.19999999999999996]
Total: 1781.3999999999999
Mean: 59.38
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 55638.56252610097
Median total errors in population: 1784.0
Error averages by case: (1621.0788276138403 1763.6791429417767 1597.123973227705 1611.8385404706466 1621.3596276138164 2470.3827406975674 2450.480140697548 2322.8892451327847 1881.03734294178 1591.5611954326816 1592.752494832683 1597.2759305876032 1813.0593429417784 1635.6024165933193 1810.2484838224614 1626.1108276138405 1599.2662764181234 1638.4145583436937 1598.840969689508 2202.7144820789445 2361.2902600929533 1665.553276441341 1663.9503513885732 2688.2930438252197 1628.6011728817948 1603.3293645131073 1601.0336131430813 2260.713125737418 1669.4702982923056 2450.6114600929536)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 7.0 10.0 1.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 786.2 17.799999999999997 0.40000000000000036 0.0 0.14030230586813974 8.200000000000003 0.19999999999999996)
Average genome size in population (length): 44.243
Average program size in population (points): 45.24
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 138
Genome diversity (% unique Plush genomes):	 0.499
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.499
Total error diversity:				 0.118
Error (vector) diversity:			 0.119
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 41495400
--- Timings ---
Current time: 1481490763239 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47810.32502246742
Median total errors in population: 1784.0
Error averages by case: (1361.0814001593733 1563.6728001593494 1297.2526405090673 1312.9429503221768 1361.4098001593525 2280.5675610498497 2250.5415610498626 2042.8262389501222 1681.0408001593514 1291.6572746251284 1292.547440509085 1297.6164405090485 1583.089400159354 1376.3624001593732 1564.1404001593733 1366.4044001593732 1298.7624746251074 1378.823800159382 1299.639040509049 1932.4707963578744 2171.0912389501495 1408.841000159397 1371.8956405090878 2419.7976143008646 1328.837233714344 1303.7268337143707 1301.4956405090672 2010.7321610498639 1410.5986001593967 2250.4594389501476)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 10.0 1.0 0.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 10.799999999999997 30.80000000000001 642.2 17.799999999999997 0.40000000000000036 3.0 0.14030230586813974 0.20000000000000284 0.19999999999999996)
Average genome size in population (length): 44.413
Average program size in population (points): 45.409
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 229
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 229
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.126
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 42827790
--- Timings ---
Current time: 1481490766456 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add float_add vector_integer_dup_times float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50991.93605549247
Median total errors in population: 1781.3999999999999
Error averages by case: (1471.175031380334 1623.6838736729817 1437.217065046373 1452.6815421147658 1471.4370455663873 2310.683834905919 2300.5683682392782 2142.4915917578955 1731.1216581421195 1431.7475760788348 1432.7535028890431 1437.7104835951777 1643.130863031233 1486.6609799704854 1670.2995975790475 1476.2590190823846 1438.8253501796617 1488.9583917600994 1439.873258957638 2052.1741365014395 2180.896207030027 1518.161980284122 1510.888432473485 2546.0327950372484 1470.1341118283226 1443.8317649323099 1441.58323552559 2120.7608668473526 1519.86877475542 2300.3247163274514)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.0588799919401328 0.06666666666666671 0.15740772465490238 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 10.0 0.0 0.1999999999999993 0.6000000000000014 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 601.2 17.799999999999997 0.40000000000000036 1.0 0.14030230586813974 0.7999999999999972 0.10929742682568167)
Average genome size in population (length): 44.228
Average program size in population (points): 45.224
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 335
Genome diversity (% unique Plush genomes):	 0.458
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 335
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 44154630
--- Timings ---
Current time: 1481490769642 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add float_add float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 50718.87289904334
Median total errors in population: 1781.3999999999999
Error averages by case: (1441.2151973144303 1613.775141984181 1407.113949248306 1422.2259097117487 1441.5629973144123 2400.6936182281133 2370.581050903762 2152.472342801882 1771.0618993919054 1402.0353137607472 1402.980608137096 1407.6991403478803 1633.1270993919115 1447.4720445867847 1638.1962722866774 1446.4011973144302 1409.5899096408516 1448.5949942645957 1410.635547674231 2082.186349602844 2210.9123428019043 1479.6347199274546 1487.594095331598 2542.9359562098552 1441.077969342367 1413.6038399797328 1411.4936236025947 2130.793093496035 1480.8839041458407 2370.3227702991157)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 10.0 0.0 0.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 477.20000000000005 17.799999999999997 0.40000000000000036 1.0 0.11633781453677378 20.799999999999997 0.014869901016268283)
Average genome size in population (length): 44.488
Average program size in population (points): 45.486
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 277
Genome diversity (% unique Plush genomes):	 0.482
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.149
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 45489270
--- Timings ---
Current time: 1481490772846 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add vector_integer_last float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_add float_add float_inc float_add integer_dup float_add integer_dup integer_rot vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 53444.10108724244
Median total errors in population: 1781.3999999999999
Error averages by case: (1520.8448748668297 1663.8108121726125 1466.8923146750567 1482.2332622212045 1521.5690748668087 2580.639556286421 2500.542556286462 2382.261097357157 1770.794958528992 1461.6771161884956 1462.2115182169446 1467.1434913620162 1683.2192121726127 1535.5121586857065 1719.056069659277 1526.4068748668296 1468.8658217917755 1538.109204626779 1468.4865065865263 2231.9901892135995 2460.7946973571866 1567.8706046267841 1532.9573976005645 2568.0502529566565 1497.4030513052007 1473.232721134896 1470.9701211348815 2350.6788099300848 1569.587604277589 2500.289156286439)
Error minima by case: (0.0 0.7999999999999998 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 2.1999999999999993 0.40000000000000036 6.0 9.0 1.0 0.1999999999999993 1.3999999999999986 0.20000000000000284 0.0 0.0 11.799999999999997 32.80000000000001 1154.2 18.799999999999997 0.40000000000000036 1.0 0.4 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.802
Average program size in population (points): 44.8
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 189
Genome diversity (% unique Plush genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.119
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 46803330
--- Timings ---
Current time: 1481490776058 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add float_add float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57350.100716373236
Median total errors in population: 1781.3999999999999
Error averages by case: (1590.585770311687 1714.1851582231184 1586.641302229571 1601.4125093176779 1591.9001517168117 2560.6344600658304 2530.5292600658668 2392.2457179492058 1840.520195412828 1582.9718037983848 1582.1637022297234 1587.0693624885735 1723.5771582231264 1616.8557604069838 2179.0432892740305 1597.0159517168331 1589.4993961270407 1607.6735585222332 1601.7854701195909 2351.8974793993602 2430.8311585290153 1644.6082386013593 2777.9042674590733 2683.3623181281064 1620.488555625499 1592.778325208937 1590.7540238016052 2410.6372096484333 1640.2473017067962 2530.2818600658447)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.10929742682568167 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 9.0 133.0 1.0 3.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 33.8 31.80000000000001 1225.2 26.200000000000003 0.40000000000000036 0.0 0.2588799919401328 6.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.599
Average program size in population (points): 45.597
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 207
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.116
Error (vector) diversity:			 0.117
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 48141300
--- Timings ---
Current time: 1481490779309 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_add integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add vector_integer_last float_add float_add float_inc float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_add float_add float_inc float_add float_add vector_integer_dup_times float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.8 0.6 2.4 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.0 1.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.6 57.8 0.19999999999999996]
Total: 1780.3999999999999
Mean: 59.34667
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 57980.79242950481
Median total errors in population: 1780.3999999999999
Error averages by case: (1670.3473275864064 1844.2499850398399 1636.4442222556142 1651.2837244395362 1672.0205275863843 2670.6207999999874 2620.498600000031 2492.3527850398355 1920.3439850398422 1632.2068936363273 1631.8389839454169 1636.4934641447862 1873.67198503984 1676.171238312246 1858.7868936518707 1676.8293275864064 1639.331554419751 1677.1561849126354 1638.061741853094 2391.8701285520174 2610.762 1708.106565554892 1704.4759383179014 2717.8088585326004 1666.0032864810044 1642.408217289549 1640.2213587775568 2450.6067850398917 1709.582866469491 2620.2362000000107)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 5.0 10.0 0.0 1.1999999999999993 2.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 1154.2 18.799999999999997 0.5999999999999996 0.0 0.4 17.799999999999997 0.19999999999999996)
Average genome size in population (length): 44.433
Average program size in population (points): 45.432
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 221
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.114
Error (vector) diversity:			 0.115
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 49474290
--- Timings ---
Current time: 1481490782455 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add float_add integer_dup float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 59089.845641470994
Median total errors in population: 1780.3999999999999
Error averages by case: (1760.333 1904.1827999999773 1696.188 1731.1861999999803 1751.9533999999776 2590.6564414709774 2530.5424414710164 2462.1921585289847 2010.3021999999783 1702.018 1691.792000000016 1696.461399999982 1923.6101999999719 1775.488 1936.985 1766.668 1719.1407999999776 1776.9132000000197 1697.7389999999825 2311.8601585290153 2480.783158529015 1795.192200000023 1762.2218000000182 2777.003000000022 1735.9819999999818 1702.4036000000183 1700.206 2370.6434414710156 1808.9198000000229 2520.2782414709905)
Error minima by case: (0.0 1.2000000000000002 0.0 1.4000000000000004 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 9.0 1.0 0.8000000000000007 17.6 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 478.20000000000005 18.799999999999997 0.40000000000000036 5.0 0.4 7.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.485
Average program size in population (points): 45.485
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.092
Error (vector) diversity:			 0.093
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 50808840
--- Timings ---
Current time: 1481490785632 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add float_add vector_integer_dup_times float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 49178.2523886374
Median total errors in population: 1780.3999999999999
Error averages by case: (1390.3542025950258 1444.4760891249573 1386.5389182381339 1402.3544692339037 1392.0560391940048 2280.6545221703846 2230.5376823406878 2152.5060778295992 1590.3375655885018 1382.1892931209454 1382.0990907994642 1386.9385938102191 1473.8939655885108 1406.834676427895 1590.8397597194687 1397.021526050712 1389.9901466065967 1408.2332815319155 1388.086895693726 2142.0152697475646 2150.814093976463 1438.7302251081942 1453.9156044935755 2510.1239438498633 1420.0648131522744 1393.3703988911482 1391.0005077925139 2130.654838508217 1441.347815112238 2230.2720823406453)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.0 62.0 0.0 0.8000000000000007 1.3999999999999986 0.20000000000000284 0.0 0.0 4.200000000000003 30.80000000000001 227.20000000000005 25.200000000000003 0.40000000000000036 1.0 0.11633781453677378 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 45.218
Average program size in population (points): 46.217
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 160
Genome diversity (% unique Plush genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 52165380
--- Timings ---
Current time: 1481490788869 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth vector_integer_length float_frominteger float_inc float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup float_add integer_dup vector_integer_dup_times vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 53242.94651258099
Median total errors in population: 1780.3999999999999
Error averages by case: (1520.3783437875768 1684.3458304883557 1516.5374034166898 1531.8399554735731 1522.0720025283388 2420.623468648099 2350.510886057138 2222.325567927696 1820.311291291496 1512.4064408486367 1511.6432928952167 1516.5677559770754 1733.7700300930976 1546.4716124458864 1729.1558073076487 1526.9337415987643 1519.0988256369478 1547.4505275923932 1527.8974879003022 2131.936075520538 2320.791694993259 1568.27064429166 1591.1882951081857 2679.7784130429736 1546.081118464115 1522.5262102097483 1520.3050052437356 2180.626084996083 1570.8550301476328 2350.2476686480973)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.2588799919401328 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 6.0 10.0 0.0 1.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 12.799999999999997 30.80000000000001 1154.2 18.799999999999997 0.40000000000000036 0.0 0.4 18.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.563
Average program size in population (points): 45.559
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.107
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 53502270
--- Timings ---
Current time: 1481490792120 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth vector_integer_length float_frominteger float_inc float_sin vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup integer_rot integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 52066.89943993461
Median total errors in population: 1780.3999999999999
Error averages by case: (1500.4090386996527 1624.3661234174972 1426.737522694513 1441.5373532875765 1502.0503792478644 2450.6281525225404 2390.5114695805946 2292.4310383001266 1830.3380187037183 1422.3520128960065 1421.9473916774193 1426.7136230519109 1663.823830504721 1506.7738354940934 1685.9034056890657 1506.886627228206 1429.5674863591198 1507.9324247553761 1428.5718325684775 2151.9689365358427 2250.8506721659264 1537.5150163105254 1495.91986627254 2617.6565211088364 1468.2767764847194 1442.671650347599 1430.5293287069294 2280.604111051578 1541.1684333812248 2390.2565608903683)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.30899380861525083 0.3999999999999999 0.19999999999999996 0.0 0.1999999999999993 0.8000000000000007 0.5585290151921036 6.0 11.0 0.0 0.8000000000000007 1.3999999999999986 0.20000000000000284 0.0 0.0 13.799999999999997 31.80000000000001 1154.2 18.799999999999997 0.40000000000000036 1.0 0.30899380861525083 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.296
Average program size in population (points): 45.293
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.138
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 54831150
--- Timings ---
Current time: 1481490795367 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup vector_integer_dup_times vector_integer_last float_add vector_integer_dup_times float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 53741.85824629226
Median total errors in population: 1780.3999999999999
Error averages by case: (1560.3286590613604 1764.3042642293606 1516.4364553954663 1532.3016495122754 1562.0555494648104 2400.604168915292 2400.4748859733413 2222.4991830493004 1810.289516833696 1512.104763833655 1511.7466383760134 1516.6742170753387 1763.6872227583744 1575.862221015281 1757.0774412224516 1566.9057494648343 1519.2707961671729 1577.491085494079 1517.8620244016895 2092.1369448042115 2320.8228733462242 1607.843083625204 1582.5831720590668 2738.969459026393 1547.182542692571 1522.8724671435887 1520.549300330059 2210.612451857281 1610.0940537951417 2400.2154053686877)
Error minima by case: (0.0 0.20000000000000018 0.0 1.4000000000000004 0.20000000000000018 0.2 0.14030230586813974 0.3999999999999999 0.10929742682568167 0.0 0.13273349078576047 1.1999999999999993 0.40000000000000036 6.0 9.0 0.0 0.8000000000000007 1.5585290151921036 0.20000000000000284 0.0 0.0 11.799999999999997 31.80000000000001 1154.2 6.041470984807901 0.40000000000000036 1.0 0.14030230586813974 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.525
Average program size in population (points): 45.524
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 134
Genome diversity (% unique Plush genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.5
Total error diversity:				 0.116
Error (vector) diversity:			 0.117
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 56166900
--- Timings ---
Current time: 1481490798575 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest float_max integer_min integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add integer_dup float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46647.372165300156
Median total errors in population: 1780.2414709848078
Error averages by case: (1300.3745421873064 1424.4997144397898 1276.5433546799075 1302.3003953993498 1292.139848501148 2230.565864816797 2180.4531062877986 2082.6188181251537 1570.319566654948 1272.4788672083387 1272.1435359427596 1277.0701620826728 1453.9135973817642 1327.2453541676703 1497.0722084909016 1307.1108826172238 1289.994118370082 1328.356331845391 1279.1982582414894 1992.1815765078386 2120.8963793127573 1347.7073679516768 1353.0353488379828 2412.0127172783064 1310.0937796902228 1283.2398171034408 1281.0930175382598 2060.5828648168163 1361.9411795925982 2160.189589229724)
Error minima by case: (0.0 1.2000000000000002 0.0 0.40000000000000036 0.20000000000000018 0.2 0.4 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 10.158529015192101 0.8414709848078967 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 83.79999999999995 18.799999999999997 0.44147098480789637 0.0 0.4 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.336
Average program size in population (points): 45.333
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 269
Genome diversity (% unique Plush genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.137
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 57496980
--- Timings ---
Current time: 1481490801824 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add integer_dup vector_integer_dup_times integer_rot float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47699.39959529825
Median total errors in population: 1780.2414709848078
Error averages by case: (1350.3590210329144 1544.4245472282405 1316.4687671521217 1332.0394886944403 1352.178508050472 2270.564296392493 2190.4403452184115 2072.6332347117436 1690.3002933611094 1312.582944739908 1312.1257488409763 1317.0213373930783 1553.8049836375187 1367.5842693446486 1556.3345375767703 1357.1910619897246 1319.746353830354 1368.351071896642 1319.7154719097127 1882.272063306438 2110.8935152539516 1399.7901375767958 1397.8808875690959 2448.8426073673195 1349.5140959057087 1323.1245693566682 1320.9479540597665 1970.59424793194 1401.5002887508872 2190.1729452183636)
Error minima by case: (0.0 0.7999999999999998 0.15852901519210327 0.07558704557630946 0.13273349078576135 0.2 0.4 0.06726650921423838 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 10.158529015192101 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.40000000000000036 1.841470984807895 0.4 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.011
Average program size in population (points): 45.009
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 282
Genome diversity (% unique Plush genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 282
Syntactic diversity (% unique Push programs):	 0.456
Total error diversity:				 0.136
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 58817310
--- Timings ---
Current time: 1481490805038 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup float_add integer_dup float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 49907.37585935904
Median total errors in population: 1780.2414709848078
Error averages by case: (1370.3849233402761 1564.436992995983 1356.6818220164093 1371.972051066336 1372.1671589799514 2430.5685948670543 2410.4513533960726 2262.5766927263617 1660.3359426464428 1352.6537894641638 1352.2087545436286 1357.146210920258 1563.7669856410637 1387.6143948911983 1578.0073146100556 1377.2010613281495 1359.8849197611114 1387.9801185924705 1360.1250676704024 2122.184261537677 2310.906630685007 1420.1534382538994 1440.828110074029 2560.8873172948893 1389.6941117033284 1363.0891117839674 1361.0671480438634 2230.5654865932574 1421.6445603521295 2410.191533579596)
Error minima by case: (0.0 0.20000000000000018 0.0 0.24147098480789708 0.20000000000000018 0.2 0.14030230586813974 0.2829419696157931 0.04147098480789646 0.15852901519210327 0.13273349078576047 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.041470984807901345 0.0 0.0 13.799999999999997 30.80000000000001 216.20000000000005 18.799999999999997 0.44147098480789637 1.841470984807895 0.1195096717307012 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 44.042
Average program size in population (points): 45.041
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 263
Genome diversity (% unique Plush genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.493
Total error diversity:				 0.121
Error (vector) diversity:			 0.121
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 60138570
--- Timings ---
Current time: 1481490808256 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add vector_integer_dup_times float_add float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48781.22769567968
Median total errors in population: 1780.2414709848078
Error averages by case: (1310.391038141106 1484.4896458243875 1256.5910973056561 1272.4039912598992 1312.2183406798733 2350.552531440646 2290.4376973245976 2112.5757356114473 1660.3173626918112 1253.2750066433264 1252.3777971787636 1257.5640072502135 1553.7977214114348 1337.9244641928726 1907.424838001224 1317.5172918539831 1260.3670137198676 1332.676716620307 1273.150065915436 1962.2356682716322 2240.9042747744415 1366.8365276539535 2462.286899700334 2390.7595229646117 1294.6244231829396 1263.5117906569349 1261.4981496390849 2090.5720728285746 1361.7661596859316 2290.1798432542882)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.32703513116881244 0.2829419696157931 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.40000000000000036 3.1585290151921015 11.0 0.048825908847378585 0.8000000000000007 0.8755870455763137 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 224.20000000000005 17.542402116179176 0.40000000000000036 0.15852901519210327 0.32703513116881244 5.200000000000003 0.04147098480789646)
Average genome size in population (length): 44.071
Average program size in population (points): 45.069
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 244
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.125
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 61460700
--- Timings ---
Current time: 1481490811514 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add integer_dup vector_integer_dup_times integer_rot float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 44114.015398065196
Median total errors in population: 1780.2414709848078
Error averages by case: (1250.45773279537 1424.5335866432565 1186.5248792730968 1202.0926294113535 1252.234326577421 2090.586284660524 2090.467477305626 1962.7128298502964 1480.352250664743 1182.6967948095573 1182.4825973331015 1187.209494984896 1403.8674816365246 1268.1084289256182 1463.5779045126642 1257.281160693497 1190.7114142157573 1268.3884876299817 1190.147694984897 1782.3136886897098 2010.9483577331937 1301.6060630416966 1270.6153705719696 2335.0614262670447 1221.290287629971 1193.3437170496732 1191.17836321703 1890.620910610328 1302.3945312738178 2080.2092250725)
Error minima by case: (0.0 0.7999999999999998 0.0 0.07558704557630946 0.20000000000000018 0.2 0.3456241416655579 0.2829419696157931 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.5585290151921036 6.0 11.0 0.0 0.8000000000000007 0.8755870455763137 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 486.20000000000005 18.799999999999997 0.40000000000000036 0.4755870455763098 0.3456241416655579 3.799999999999997 0.00292526644997515)
Average genome size in population (length): 43.796
Average program size in population (points): 44.796
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.129
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 62774580
--- Timings ---
Current time: 1481490814740 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add vector_integer_dup_times vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 47102.31481749277
Median total errors in population: 1780.2414709848078
Error averages by case: (1340.4276536470823 1524.4671738301417 1246.648180416615 1262.5963004090927 1342.156766475219 2310.5435565822013 2230.4316809951724 2092.621659380171 1670.3186121760766 1242.6724688234212 1242.6326547343438 1247.4265594390708 1583.843298243102 1358.0099932363753 1542.1313102944068 1347.1658835332692 1250.851985881434 1358.4592764971223 1250.2904764971015 1892.2020841035305 2220.8936205677783 1388.8487102944293 1330.8829520841846 2374.2535223456816 1283.8567106131613 1253.7954570909037 1251.5495935551485 2040.5521712920668 1391.6188614685204 2230.1656429858813)
Error minima by case: (0.0 1.7999999999999998 0.0 1.241470984807897 0.20000000000000018 0.2 0.1733804803696214 0.3999999999999999 0.04147098480789646 0.15852901519210327 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.44147098480789637 0.15852901519210327 0.1733804803696214 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.684
Average program size in population (points): 44.682
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 185
Genome diversity (% unique Plush genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.131
Error (vector) diversity:			 0.131
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 64085100
--- Timings ---
Current time: 1481490817896 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth integer_rot float_frominteger float_inc float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add integer_dup vector_integer_dup_times integer_rot vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 44141.12754465029
Median total errors in population: 1780.2414709848078
Error averages by case: (1250.4995516868037 1354.6161184498753 1186.5450919380694 1202.2802613973074 1252.2254177268405 2110.5804092278668 2060.460616582814 1962.665932969831 1510.338971122111 1182.7959072302322 1182.6092323180158 1187.318333948305 1383.9511258048087 1268.8734305311127 1465.536676776207 1257.323421147267 1190.976385098643 1268.7826838697567 1190.4370269536932 1862.1418109257065 1970.981054516156 1301.9618543767558 1271.037675971372 2335.248071505633 1222.7373087210935 1193.5522277678508 1191.2984460083962 1960.5703046330739 1302.5891115953573 2060.193083849278)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.2 0.2663667453928805 0.5585290151921032 0.04147098480789646 0.15852901519210327 0.1999999999999993 1.1999999999999993 0.20171020563724618 5.0 44.0 0.8414709848078967 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 29.799999999999997 31.80000000000001 310.35852901519206 17.542402116179176 0.44147098480789637 0.8414709848078967 0.2588799919401328 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.854
Average program size in population (points): 44.853
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 173
Genome diversity (% unique Plush genomes):	 0.515
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.125
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 65400720
--- Timings ---
Current time: 1481490821092 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth integer_rot float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times float_add integer_dup vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 45513.366759124416
Median total errors in population: 1780.2414709848078
Error averages by case: (1260.4369879901324 1434.5260300329608 1206.7385034185404 1222.330106832006 1262.175147936179 2250.5607358529746 2190.450465327653 2112.6950619516415 1530.3577922066343 1202.63425611614 1202.2338405568403 1207.2164437757822 1434.008635094683 1268.3748596537087 1459.492371712049 1267.1991820522587 1210.0839508176903 1268.8721844421682 1210.1120600246832 1982.1493075208464 2150.919823544928 1300.7581769698068 1290.7579089095543 2349.4831368659547 1251.1486552106605 1223.3908191444782 1211.2051283376263 2060.5735685294217 1302.2952847550278 2190.1863335413263)
Error minima by case: (0.0 0.7999999999999998 0.0 0.1205845018010745 0.20000000000000018 0.2 0.2663667453928805 0.3999999999999999 0.11705803038420703 0.0 0.1999999999999993 0.1999999999999993 0.7170580303842069 4.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 91.20000000000005 18.799999999999997 0.44147098480789637 0.0 0.2663667453928805 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.727
Average program size in population (points): 44.724
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 138
Genome diversity (% unique Plush genomes):	 0.537
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.133
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 66712530
--- Timings ---
Current time: 1481490824275 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_rot in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup vector_integer_dup_times float_add integer_dup integer_rot float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 54835.680493082946
Median total errors in population: 1780.2414709848078
Error averages by case: (1540.430681826907 1704.3592115162985 1526.4180502255902 1541.8085729995937 1541.99513753825 2610.5021632155217 2560.390796925898 2422.4658087993366 1850.2928457120663 1522.3034335107443 1522.184128098417 1527.0376919562152 1673.8217239475664 1556.8302915611648 1728.6714268570793 1546.7792651613147 1529.7847143042513 1558.228977517729 1529.0387781061079 2332.041596138666 2430.8780619135273 1585.8224876125519 1597.1103221860885 2710.4391927795373 1560.1561904500911 1533.1113692203196 1531.0295342159877 2410.5105875737686 1591.0992548464287 2560.1381963659405)
Error minima by case: (0.0 1.3585290151921035 0.0 0.07558704557630946 0.20000000000000018 0.2 0.2663667453928805 0.28294196961579354 0.04147098480789646 0.0 0.07486682972887593 0.1999999999999993 1.5585290151921036 6.0 7.608984612110646 0.8414709848078967 0.8000000000000007 0.8755870455763137 0.20000000000000284 0.0 0.0 2.200000000000003 30.80000000000001 478.20000000000005 18.799999999999997 0.44147098480789637 0.4755870455763098 0.2588799919401328 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.019
Average program size in population (points): 44.017
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 68003100
--- Timings ---
Current time: 1481490827443 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_replacefirst float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_dup integer_stackdepth vector_integer_length float_frominteger float_inc float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add float_add float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48003.500364767424
Median total errors in population: 1780.2414709848078
Error averages by case: (1350.406162951849 1484.430434645356 1336.500573246959 1342.1230500634124 1352.0857163543355 2250.547734200044 2220.418238353217 2072.7638129079346 1600.3310440625537 1322.350090244593 1322.0358811969227 1326.9947997419702 1523.8543435371087 1367.1573390788867 1552.0147509797432 1357.0644251060655 1329.7719812079047 1368.424267009405 1328.633887094259 2052.1349878423116 2160.8909210354936 1399.0269519115022 1396.8775195458911 2450.5168783115737 1359.7170303111354 1333.30890207048 1330.988622033172 2100.549342230665 1401.4201303877528 2210.1605471048933)
Error minima by case: (0.0 0.20000000000000018 0.15852901519210327 0.07558704557630946 0.20000000000000018 0.2 0.3456241416655579 0.2829419696157931 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 1.4000000000000004 6.0 11.0 0.8414709848078967 0.5170580303842058 2.5585290151921036 0.041470984807901345 0.15852901519210327 0.0 13.799999999999997 30.80000000000001 1154.2 18.799999999999997 0.44147098480789637 0.15852901519210327 0.2588799919401328 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.527
Average program size in population (points): 44.525
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.539
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 69308910
--- Timings ---
Current time: 1481490830623 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_stackdepth vector_integer_occurrencesof vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_nth integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup integer_div in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add vector_integer_nth float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43229.54732276499
Median total errors in population: 1780.2414709848078
Error averages by case: (1230.4079653560404 1404.455980128883 1166.6385832315668 1173.0214420546727 1232.0592764761777 2060.5763462972714 2030.455795924148 1862.6339746019548 1510.2910881910457 1152.2374079653962 1152.0665990652542 1157.0770161124258 1383.9115382626485 1237.2226468851327 1420.9989151172547 1237.0399030659657 1160.080386221809 1238.975323264306 1158.5308502284865 1762.2308560028482 1930.9181787364412 1268.756515117278 1226.4353672865539 2423.867361518805 1190.9768066776285 1163.6011872714319 1161.1386161124435 1840.597831516103 1272.1670810012165 2020.176483073729)
Error minima by case: (0.0 0.8341160607684142 0.0 0.44107572533686223 0.037879206369903606 0.2 0.35642518020927305 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.034116060768414336 6.8414709848078985 10.158529015192101 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 12.958529015192099 30.80000000000001 1138.2 17.9585290151921 0.40000000000000036 1.841470984807895 0.35642518020927305 0.20000000000000284 0.04147098480789646)
Average genome size in population (length): 44.377
Average program size in population (points): 45.377
Average percent parens in population: 0.024
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 109
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 70640220
--- Timings ---
Current time: 1481490833855 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup float_add vector_integer_dup_times float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 43389.816469713616
Median total errors in population: 1780.2414709848078
Error averages by case: (1210.4357144076275 1354.5896572950194 1136.696045877787 1152.7884857455922 1212.1295072432918 2150.5549147813717 2110.4473147813956 1992.6380496148593 1500.3427253365342 1132.4904417443563 1132.287159301156 1137.3431470414548 1373.9743743530569 1227.8274397836235 1415.346387104827 1217.1646510624755 1140.3284819397784 1228.7751599989042 1139.6976134044387 1852.2130562641846 2030.936309941961 1259.6273144327165 1217.4558664107733 2292.7815943181313 1172.6469129711168 1143.7541191243463 1141.4628711825899 1940.5752623814856 1262.330218558317 2110.175673310363)
Error minima by case: (0.0 0.7999999999999998 0.0 0.07558704557630946 0.20000000000000018 0.2 0.02073549240394823 0.2829419696157931 0.11705803038420703 0.0 0.1999999999999993 1.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 9.958529015192099 31.80000000000001 91.20000000000005 18.799999999999997 0.40000000000000036 1.841470984807895 0.1195096717307012 3.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.49
Average program size in population (points): 44.488
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.126
Error (vector) diversity:			 0.127
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 71944920
--- Timings ---
Current time: 1481490837033 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup vector_integer_dup_times vector_integer_last float_add integer_dup vector_integer_dup_times vector_integer_dup_times integer_rot vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min integer_stackdepth float_frominteger float_inc float_sin vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add float_add vector_integer_dup_times vector_integer_take float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 1.1585290151921035 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1780.2414709848078
Mean: 59.34138
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43267.89782799119
Median total errors in population: 1780.2414709848078
Error averages by case: (1200.3615131539275 1314.5517313186133 1156.618922761732 1172.5823442473056 1202.131753383388 2100.5884005780576 2070.459724991038 1972.710029304801 1430.3513367559094 1152.633053478706 1152.8878955704583 1157.734500887549 1343.8726069056736 1213.2871454077251 1395.0948771756039 1207.1538898476463 1161.4519705367206 1208.9994175399133 1162.5765464341448 1852.190982731804 2000.9507117462279 1239.6128116020604 1234.887675098284 2313.6358338462387 1264.8722359753374 1164.7919818323237 1162.4922253005182 1940.5746079330086 1247.6504918854714 2070.1906097609267)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.16588393923158584 0.2 0.2663667453928805 0.12441295442368938 0.04147098480789646 0.15852901519210327 0.1999999999999993 0.773238863271068 0.40000000000000036 4.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 7.041470984807901 31.80000000000001 594.3585290151921 17.542402116179176 0.44147098480789637 0.5732388632710688 0.2663667453928805 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.405
Average program size in population (points): 44.402
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.125
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 73247070
--- Timings ---
Current time: 1481490840228 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1779.0829419696156
Mean: 59.302765
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 44537.56011673307
Median total errors in population: 1780.2414709848078
Error averages by case: (1270.374490833192 1424.5211873622611 1236.6428119496477 1252.5658827498446 1272.2110047298418 2050.5488358608504 2020.4240934786988 1912.6108561749854 1510.3136161518155 1232.4800949075793 1232.1203960321802 1237.181927873185 1403.9506483048388 1287.2761582617943 1481.9503169476307 1277.258826266865 1239.9618765816479 1288.438941201772 1239.2540549003184 1772.271074803811 1920.9506320724333 1321.3874472943787 1312.959969558125 2363.3670692822143 1269.8401130065974 1243.44739252651 1241.1904140170827 1880.5462741033741 1321.3585190601916 2020.1551904393211)
Error minima by case: (0.0 1.2000000000000002 0.0 0.1089938086152511 0.20000000000000018 0.2 0.15151966438333886 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 1.1999999999999993 0.5585290151921036 6.0 11.0 0.0 0.8000000000000007 2.5585290151921036 0.041470984807901345 0.0 0.0 10.799999999999997 31.80000000000001 478.20000000000005 18.799999999999997 0.40000000000000036 0.15852901519210327 0.15151966438333886 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.576
Average program size in population (points): 44.571
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.137
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 74554350
--- Timings ---
Current time: 1481490843417 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max float_shove integer_stackdepth float_frominteger float_inc float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1779.0829419696156
Mean: 59.302765
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 41437.68224294543
Median total errors in population: 1780.2414709848078
Error averages by case: (1130.5194512731828 1294.5424989112485 1046.660079259032 1062.6729903477908 1132.280959319681 2170.550897319768 2120.428821732741 1992.45673439312 1410.3779722698837 1042.9480227864087 1042.4417633146227 1047.6152744677267 1333.9614078030083 1149.0622410690235 1348.617608141659 1137.4011247418644 1050.2978358207713 1149.252341051284 1051.5918004884948 1722.1851768654842 2050.9108412022247 1182.8014756039715 1141.7289478336031 2214.91158364224 1082.6940570695722 1053.7037364262435 1051.6307612936382 1920.548824141873 1182.7236859972372 2120.163328357947)
Error minima by case: (0.0 0.6755870455763109 0.0 1.241470984807897 0.20000000000000018 0.2 0.2663667453928805 0.3999999999999999 0.04147098480789646 0.0 0.1999999999999993 0.1999999999999993 0.12441295442368894 4.0 10.158529015192101 0.0 0.8000000000000007 2.5585290151921036 0.041470984807901345 0.0 0.0 12.958529015192099 30.80000000000001 478.20000000000005 18.799999999999997 0.44147098480789637 0.0 0.2663667453928805 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.466
Average program size in population (points): 44.463
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.145
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 75858330
--- Timings ---
Current time: 1481490846708 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin integer_rot vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1779.0829419696156
Mean: 59.302765
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 44481.38717171357
Median total errors in population: 1780.2414709848078
Error averages by case: (1270.4210945799016 1434.4952356449437 1196.8237132085799 1212.584091901625 1272.1132277648119 2090.5436368426704 2060.4159124297425 1952.5734831090585 1480.3169846309597 1192.3955791688663 1192.3649908492646 1197.262400519931 1423.9139813516556 1289.0191609746284 1470.2908588061105 1277.0972886420277 1200.569284030724 1288.4951696512692 1199.9168051855693 1852.1082146194515 2010.8882522037743 1318.5414479933704 1270.3275156073116 2343.1406273664807 1255.1251059617782 1203.8775064738697 1201.5268517854463 1940.537026788879 1323.5579312298967 2060.143792390894)
Error minima by case: (0.0 0.20000000000000018 0.0 0.9170580303842062 0.20000000000000018 0.2 0.11439525852354915 0.2829419696157931 0.04147098480789646 0.0 0.1999999999999993 1.1999999999999993 1.4000000000000004 6.0 10.158529015192101 0.0 0.8000000000000007 2.5585290151921036 0.041470984807901345 0.0 0.0 4.041470984807901 31.80000000000001 214.6755870455761 18.799999999999997 0.44147098480789637 0.15852901519210327 0.11439525852354915 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.558
Average program size in population (points): 44.557
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.136
Error (vector) diversity:			 0.137
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 77165070
--- Timings ---
Current time: 1481490849910 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth vector_integer_length float_frominteger float_inc float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.6414709848078965 0.4414709848078965 2.5585290151921036 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.1585290151921033 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.4414709848078965 57.8 0.04147098480789646]
Total: 1779.0829419696156
Mean: 59.302765
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 43594.871527991454
Median total errors in population: 1780.2414709848078
Error averages by case: (1230.407930695686 1304.5995837037656 1196.7706504122764 1213.0005977579092 1232.2034740006607 2030.580982444816 2000.4425897997673 1952.7926698301437 1380.3330671599085 1192.5405201680278 1192.9031789008563 1197.8032865661223 1333.9055837037745 1252.6612272125744 1435.955641922423 1237.2651422327997 1201.5508031099796 1248.9364892247079 1202.0507615324143 1872.2862504239586 1830.8169579090716 1279.8500934069132 1271.6812146095147 2383.5916529968463 1304.7782487801298 1205.1009993334915 1202.6845768630355 1920.598465386815 1286.6023395742623 2000.17654832873)
Error minima by case: (0.0 1.2000000000000002 0.0 0.5999999999999996 0.20000000000000018 0.2 0.4 0.5585290151921032 0.04147098480789646 0.0 0.13273349078576047 0.1999999999999993 0.5585290151921036 4.0 5.84147098480787 0.0 0.8000000000000007 11.99060727077903 0.20000000000000284 0.0 0.0 4.958529015192099 30.80000000000001 470.20000000000005 17.542402116179176 0.44147098480789637 4.158529015192103 0.4 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.49
Average program size in population (points): 44.49
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 101
Genome diversity (% unique Plush genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.132
Error (vector) diversity:			 0.133
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 78469770
--- Timings ---
Current time: 1481490853131 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max vector_integer_dup integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.5456241416655578 0.3456241416655579 2.654375858334442 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.254375858334442 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.3456241416655579 57.8 0.05437585833444214]
Total: 1779.0
Mean: 59.3
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 37367.791148670876
Median total errors in population: 1780.2414709848078
Error averages by case: (910.5193375855392 1024.7202595155343 916.9526700348555 933.508021780471 912.3344413507591 1990.5676143423032 1960.4076891035404 1782.588301997403 1260.3265992693873 913.3222417566733 912.5421514988051 917.8697528500325 1054.1495614580651 939.1923870269119 1518.3300933531712 917.8275436989537 920.9382170046531 929.4063240839628 933.2355122861627 1722.102477951406 1340.5158573329488 969.4374002400822 2122.0173293167204 2087.738678305763 956.01461193546 924.120051145012 922.0144586339986 1750.6035376375671 964.3496914206096 1960.1383347540277)
Error minima by case: (0.0 1.2000000000000002 0.0 0.07558704557630946 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.28294196961579354 0.19999999999999996 0.0 0.1999999999999993 1.1999999999999993 0.7170580303842069 6.0 9.317058030384203 0.8414709848078967 0.8000000000000007 2.5585290151921036 0.20000000000000284 0.0 0.0 3.200000000000003 31.80000000000001 103.20000000000005 18.799999999999997 0.40000000000000036 0.15852901519210327 0.11633781453677378 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.374
Average program size in population (points): 44.374
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 294
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 294
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.141
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 79770990
--- Timings ---
Current time: 1481490856375 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin integer_rot float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.5456241416655578 0.3456241416655579 2.654375858334442 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.254375858334442 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.3456241416655579 57.8 0.05437585833444214]
Total: 1779.0
Mean: 59.3
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 36004.57850814869
Median total errors in population: 1779.0829419696156
Error averages by case: (920.5608161044258 934.7191280828731 926.8497920018489 942.8684902196088 922.2966757401031 1990.5755865733584 2020.423589272547 1822.7834214022907 1330.3421816671453 922.7374045282322 922.2931131355004 927.5027743122278 954.1096118362249 938.5092701017942 1140.3248433406573 927.4606683851904 930.3753983058568 939.433532841243 930.6206198588231 1832.2322821854293 980.2694343311357 973.247336296125 1015.9909899939433 2126.199619075216 961.8706582806303 933.7570018002458 931.6736498992849 1910.5492086851034 973.8508662168027 2020.1505436747473)
Error minima by case: (0.0 0.7999999999999998 0.0 0.07558704557630946 0.20000000000000018 0.041470984807896516 0.14030230586813974 0.2829419696157931 0.04147098480789646 0.15852901519210327 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.8000000000000007 0.8755870455763137 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 478.20000000000005 17.542402116179176 0.14030230586813985 0.4755870455763098 0.24147098480789653 1.7999999999999972 0.04147098480789646)
Average genome size in population (length): 42.519
Average program size in population (points): 43.516
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 435
Genome diversity (% unique Plush genomes):	 0.455
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 435
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 81046560
--- Timings ---
Current time: 1481490859574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_min vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.5456241416655578 0.3456241416655579 2.654375858334442 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.254375858334442 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.3456241416655579 57.8 0.05437585833444214]
Total: 1779.0
Mean: 59.3
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 35863.65599983554
Median total errors in population: 1779.0829419696156
Error averages by case: (940.4494713696486 954.7171592264415 947.035905612004 963.6475302531122 942.1778414036293 1950.5509447621039 1910.420669175084 1812.6510006639198 1250.314381935326 942.3364739183104 942.3371500929187 947.5561908055136 954.1777518715398 957.6512627401543 1151.2935103962611 947.3239096357613 950.5337807577806 959.6406454829722 949.2407179180359 1762.231114830581 970.225946284488 991.3414295841889 1022.975895830326 2119.238793622394 983.3758567344344 954.3188361349224 951.9360812209312 1830.5669374072056 993.2439903192927 1910.1448198461767)
Error minima by case: (0.0 0.35852901519210345 0.0 0.07558704557630946 0.20000000000000018 0.2 0.14030230586813974 0.28294196961579354 0.04147098480789646 0.15852901519210327 0.1999999999999993 0.1999999999999993 0.40000000000000036 6.0 10.158529015192101 0.0 0.1999999999999993 2.5585290151921036 0.11705803038420015 0.0 0.0 12.958529015192099 30.80000000000001 973.2 17.9585290151921 0.44147098480789637 1.841470984807895 0.14030230586813974 1.7999999999999972 0.04147098480789646)
Average genome size in population (length): 42.945
Average program size in population (points): 43.943
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 408
Genome diversity (% unique Plush genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 408
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 82334910
--- Timings ---
Current time: 1481490862790 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin vector_integer_flush float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.5456241416655578 0.3456241416655579 2.654375858334442 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.254375858334442 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.3456241416655579 57.8 0.05437585833444214]
Total: 1779.0
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 36238.28980173455
Median total errors in population: 1779.0829419696156
Error averages by case: (930.4203021093772 954.6479108706955 936.8047502716014 953.0910430628842 932.1281475583471 2010.5506369867303 2040.405474359551 1862.6590020880005 1310.3374856868197 932.1930757683712 932.0281934744105 937.0945836401169 954.0622549064155 946.9901012410272 1134.636583247571 937.2423056985841 940.4563569041239 948.9874069739353 937.9431189844651 1852.0689534281453 970.2172112267596 979.7434676527084 1002.8478210669381 2110.519066730623 970.5459649603637 943.7643184153912 941.2810675441582 1910.5093337024284 983.9751761942366 2040.1386869796754)
Error minima by case: (0.0 0.35852901519210345 0.0 1.1087517166688823 0.20000000000000018 0.2 0.3456241416655579 0.09124828333111568 0.19999999999999996 0.0 0.13273349078576047 0.1999999999999993 0.5585290151921036 4.0 10.158529015192101 0.7456241416655587 0.8000000000000007 1.1631275750033225 0.041470984807901345 0.0 0.0 12.958529015192099 30.80000000000001 979.2 18.799999999999997 0.44147098480789637 0.763127575003324 0.3456241416655579 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 42.624
Average program size in population (points): 43.62
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 345
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 345
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.129
Error (vector) diversity:			 0.131
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 83613630
--- Timings ---
Current time: 1481490866015 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot vector_integer_length vector_integer_flush float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max vector_integer_dup integer_stackdepth vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.5456241416655578 0.3456241416655579 2.654375858334442 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.254375858334442 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.3456241416655579 57.8 0.05437585833444214]
Total: 1779.0
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 41097.26846577753
Median total errors in population: 1779.0829419696156
Error averages by case: (1110.5142834229837 1114.733510514962 1116.6536170673849 1132.4537117279535 1112.3327791672605 2170.5110537115797 2120.385337604954 1962.582744782009 1570.3492584341675 1112.9345436637525 1112.3938916863383 1117.4696279051416 1114.1711907542426 1129.3998006738288 1329.1990905931768 1117.4888958807119 1120.26871623866 1129.0827692204787 1121.3294717739032 1862.2018505451492 1120.2730042288288 1162.722754779563 1211.847449227573 2295.6046375802134 1151.7043330751787 1123.504795371401 1121.484648536791 1940.5178808986598 1163.0104942868563 2130.1423224237355)
Error minima by case: (0.0 0.35852901519210345 0.0 0.07558704557630946 0.20000000000000018 0.2 0.3456241416655579 0.09124828333111568 0.11705803038420703 0.15852901519210327 0.1999999999999993 0.1999999999999993 0.7170580303842069 2.1585290151921015 10.158529015192101 0.0 0.4543758583344406 0.3999999999999986 0.054375858334438476 0.0 0.0 3.9456241416655615 30.80000000000001 162.20000000000005 17.542402116179176 0.3456241416655583 0.4755870455763098 0.3456241416655579 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 42.566
Average program size in population (points): 43.565
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 223
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.16
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 84890610
--- Timings ---
Current time: 1481490869206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_min integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39397.96619974064
Median total errors in population: 1779.0
Error averages by case: (1040.456590465477 1054.621269211858 1046.9014768273541 1063.141997081221 1042.1046472891255 2100.4862948731634 2100.349342919931 1992.6898631770619 1370.3060284269975 1042.2841462003325 1042.5016478222362 1047.427987621934 1044.1055505132674 1057.0485111061694 1245.0226049078228 1047.1572703562156 1051.0597966708915 1059.1931897338202 1048.6548050468002 1982.1501713012156 1060.2003557359585 1089.8705140360514 1118.127086504118 2199.0596171383477 1083.696745842023 1054.2329092822645 1051.7824825518605 2070.436907394156 1092.7614883828771 2100.1349013199124)
Error minima by case: (0.0 0.20000000000000018 0.0 0.6368724249966764 0.20000000000000018 0.2 0.2784304773607402 0.09124828333111568 0.04147098480789646 0.2543758583344413 0.1999999999999993 0.1999999999999993 0.5585290151921036 6.0 11.0 0.7456241416655587 0.8000000000000007 1.1631275750033225 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 478.20000000000005 18.799999999999997 0.3456241416655583 0.7456241416655587 0.2784304773607402 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.657
Average program size in population (points): 44.657
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 204
Genome diversity (% unique Plush genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.457
Total error diversity:				 0.14
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 86200320
--- Timings ---
Current time: 1481490872433 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 42658.88822301392
Median total errors in population: 1779.0
Error averages by case: (1190.3973290204035 1214.6484267370997 1196.9357775722137 1212.9551481598305 1192.2166386196386 2050.5013437812872 2080.365478255687 1912.811516803527 1570.3119992527122 1192.3680467710751 1192.160820368696 1197.0707778035746 1203.9677336232787 1207.2262931040793 1396.5800009540028 1197.267873626523 1200.352327756523 1208.3497899842816 1198.548925657196 1912.2091819900515 1200.1930502287664 1239.954272857021 1270.5201423631222 2323.1149764333104 1230.0758243237115 1203.5363247380806 1201.154586614199 1940.4684729193577 1242.4575562681862 2080.167586426311)
Error minima by case: (0.0 1.2000000000000002 0.0 0.10875171666888228 0.20000000000000018 0.2 0.2784304773607402 0.6543758583344421 0.05437585833444225 0.0 0.0859264475336996 0.1999999999999993 0.6543758583344426 4.0 11.0 0.0 1.1999999999999993 1.1631275750033225 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.09124828333111701 0.0 0.2784304773607402 0.20000000000000284 0.010927656427111687)
Average genome size in population (length): 43.169
Average program size in population (points): 44.166
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 206
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.119
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 87495390
--- Timings ---
Current time: 1481490875660 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_set} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest vector_integer_rest vector_integer_set float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39590.17706743911
Median total errors in population: 1779.0
Error averages by case: (1070.3258757170324 1074.6271947774983 1076.7132359364007 1092.8026576866673 1072.1068369068305 2020.5309413678388 2020.377878550642 1942.9223429171866 1450.3125762431496 1072.2488133534987 1072.160817561417 1077.141142407423 1074.0099210326816 1087.1012238294534 1272.0737464716342 1077.2616719137177 1080.2695233834002 1088.6768281976774 1078.2806263918692 1862.2299732943056 1090.2042622642416 1118.8876858750982 1147.8882372089154 2241.3873749162863 1110.8695925908482 1083.7644445180372 1081.3478578011814 1920.4929631814548 1122.9697370779338 2010.19108406462)
Error minima by case: (0.0 0.20000000000000018 0.0 1.1087517166688823 0.20000000000000018 0.19453617178644417 0.005463828213555844 0.043139045278519195 0.05437585833444225 0.2543758583344413 0.1999999999999993 0.1999999999999993 0.5999999999999996 6.0 11.0 0.0 0.5456241416655594 0.3999999999999986 0.054375858334438476 0.0 0.0 13.799999999999997 30.80000000000001 162.20000000000005 18.799999999999997 0.3456241416655583 0.2543758583344413 0.13697588547570388 5.0543758583344385 0.010927656427111687)
Average genome size in population (length): 43.283
Average program size in population (points): 44.279
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 155
Genome diversity (% unique Plush genomes):	 0.501
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.139
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 88793880
--- Timings ---
Current time: 1481490878923 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 40834.016547390034
Median total errors in population: 1779.0
Error averages by case: (1070.5356549898827 1104.6906500463804 1076.6924715980333 1092.8242474161711 1072.2672671836779 2190.501188663796 2230.3626637921216 2022.7670355711145 1580.3754689125553 1072.914621208273 1073.2991008078616 1078.0847028552882 1094.1524450762124 1095.3247253832644 1281.9897152843528 1077.3638135351325 1082.2900153228147 1089.789115322617 1084.0619830621133 1962.4049382433734 1120.2800598600102 1121.062732811509 1164.3536652326404 2250.728711903394 1187.5468686329461 1085.0861059222364 1082.8774199722047 2040.467003461237 1128.7180705985331 2220.2040847201756)
Error minima by case: (0.0 0.5137219094429613 0.0 0.14562414166555904 0.20000000000000018 0.2 0.2275718320491591 0.02405461902629824 0.04147098480789646 0.0 0.15686095472148054 0.1999999999999993 0.27843047736073956 6.0 11.0 0.2543758583344413 0.8000000000000007 0.3999999999999986 0.054375858334438476 0.0 0.0 6.878430477360737 30.80000000000001 162.20000000000005 18.799999999999997 0.27843047736073956 4.0 0.2275718320491591 2.8784304773607374 0.010927656427111687)
Average genome size in population (length): 43.744
Average program size in population (points): 44.742
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.497
Total error diversity:				 0.148
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 90106200
--- Timings ---
Current time: 1481490882158 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin integer_rot vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 40622.11671330544
Median total errors in population: 1778.9999999999998
Error averages by case: (1070.5175849773723 1094.6737622421742 1076.6843510311414 1092.5573204896348 1072.2982717829173 2200.4275721913887 2220.2815912757546 2002.6329230139015 1480.312523306091 1072.6729050360182 1072.3525385551893 1077.2583913668034 1084.0814266088685 1088.6012418978044 1283.8793070017011 1077.3855546941236 1080.6022997669372 1089.0054422318979 1079.9910594512053 1972.2785438285382 1140.213133643899 1121.6096974658228 1160.7539617545578 2240.792431058899 1111.338931498522 1083.5283910471894 1081.2643452747693 2050.423220244596 1123.5291973807516 2220.1687931868782)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5401887817960187 0.20000000000000018 0.2 0.2275718320491591 0.043139045278519195 0.09029995976547434 0.0 0.025638006853139217 0.8000000000000007 0.7215695226392604 4.0 9.508751716668883 0.0 1.1999999999999993 1.3647085679177735 0.20000000000000284 0.0 0.0 7.799999999999997 31.80000000000001 1154.2 18.799999999999997 0.27843047736073956 0.9647085679177803 0.2275718320491591 5.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.888
Average program size in population (points): 44.886
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.453
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.151
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 91422840
--- Timings ---
Current time: 1481490885417 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43244.041479433225
Median total errors in population: 1778.9999999999998
Error averages by case: (1170.351743788393 1174.6254963799186 1176.456853845392 1192.0765729589261 1172.1538101018277 2230.4479319910956 2290.3008339643557 2032.8146327836575 1690.3092792896193 1172.5665713872822 1172.3015739769482 1177.133034611768 1183.9410216400704 1188.084247061337 1375.9895333394272 1177.2437316713674 1180.3251044950077 1188.5649259810614 1179.5082346117686 1962.1851705333354 1180.2437210729872 1219.871896379953 1253.7911993203697 2343.4251700797076 1211.1042616234572 1183.312889067289 1181.1054503070097 2080.424273284785 1223.1844938910076 2280.1978199940177)
Error minima by case: (0.0 0.5215695226392603 0.2543758583344422 0.5647085679177799 0.20000000000000018 0.2 0.2275718320491591 0.043139045278519195 0.12156952263925969 0.0 0.15686095472148054 0.1999999999999993 1.4000000000000004 6.0 10.321569522639265 0.0 0.8000000000000007 1.3647085679177735 0.20000000000000284 0.32156952263925964 0.0 13.121569522639255 30.80000000000001 1165.5215695226393 18.121569522639263 0.27843047736073956 0.9647085679177803 0.2275718320491591 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.495
Average program size in population (points): 44.49
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.471
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.124
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 92727690
--- Timings ---
Current time: 1481490888773 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 44120.29720818578
Median total errors in population: 1778.9999999999998
Error averages by case: (1170.3746633448839 1174.592734480844 1176.6508060247547 1192.50199510961 1182.05715551353 2360.453083350622 2400.3168206153114 2182.696456528474 1610.3706571855269 1172.2800889257007 1172.0373324294035 1176.8570567565314 1173.9940991894287 1187.6506009501684 1371.0111486239512 1177.1279633611593 1180.0168676905118 1188.6471767258965 1178.481802017093 2172.037272591895 1170.2601618812923 1218.6318087824654 1255.5001245248143 2467.916254997076 1209.9339369562456 1183.211169793276 1180.8090407245777 2210.4054914400226 1223.256900018759 2400.2165376518933)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.043139045278519195 0.12156952263925969 0.3215695226392601 0.15686095472148054 0.1999999999999993 1.4000000000000004 11.321569522639258 134.0 0.0 0.8000000000000007 2.721569522639257 0.12156952263925547 0.0 0.0 28.799999999999997 30.80000000000001 1154.2 25.200000000000003 0.27843047736073956 0.0 0.14030230586813974 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.353
Average program size in population (points): 44.35
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.138
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 94028280
--- Timings ---
Current time: 1481490891973 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 48144.82339264235
Median total errors in population: 1778.9999999999998
Error averages by case: (1340.3954597149223 1364.5265635728706 1336.4248377795345 1351.8093151422736 1342.1289778468742 2420.4441681492553 2420.3244578164845 2252.683433720234 1790.337746694643 1332.420453737904 1332.0518671180928 1336.9485981667926 1363.938743976683 1357.352275865317 1541.8793379381125 1347.0705935421197 1339.7764355521329 1358.1403195150751 1339.1469141103244 2152.2501040612738 1360.211652850628 1388.945500686514 1411.0237095750285 2469.13299479238 1369.2286358296647 1342.9684611281693 1340.8599155749553 2230.4582621540135 1391.7275113812864 2420.216144648699)
Error minima by case: (0.0 0.15686095472147965 0.0 1.0784304773607403 0.20000000000000018 0.2 0.14030230586813974 0.043139045278519195 0.12156952263925969 0.2067540733294546 0.018732783228880834 0.1999999999999993 0.9568609547214795 6.0 9.321569522639265 0.0 0.8000000000000007 1.3647085679177735 0.20000000000000284 0.0 0.0 12.121569522639255 30.80000000000001 1158.2 3.8784304773607374 0.04313904527852053 0.9647085679177803 0.14030230586813974 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.146
Average program size in population (points): 44.143
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.138
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 95322660
--- Timings ---
Current time: 1481490895176 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin integer_rot float_sin vector_integer_flush vector_integer_rest float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 38863.22503364733
Median total errors in population: 1778.9999999999998
Error averages by case: (1040.4334425085397 1084.7029410985074 1046.8180918469386 1063.0646317760538 1042.1834827097757 2010.4599756366356 2050.3201050537295 1842.8136948803833 1450.3211831034978 1042.5442661381605 1042.7524478470625 1047.5237547577863 1084.000424887676 1058.1792597470658 1250.13034507944 1047.3427689878763 1051.3469343295242 1059.3419377231382 1049.6333968684064 1782.3450437124116 1090.2347653005852 1090.7709701390238 1127.6401754705216 2213.7122614599216 1084.463925919532 1054.250158555202 1051.8102458304563 1850.4672134940306 1093.4074836504456 2060.2097051349187)
Error minima by case: (0.0 0.5215695226392603 0.0 1.0784304773607403 0.20000000000000018 0.2 0.1871809965734309 0.043139045278519195 0.12156952263925969 0.0 0.15686095472148054 0.1999999999999993 0.27843047736073956 6.678430477360735 10.321569522639265 0.0 0.1999999999999993 2.721569522639257 0.20000000000000284 0.0 0.0 13.121569522639255 30.80000000000001 788.2 22.121569522639263 0.27843047736073956 1.6784304773607417 0.1871809965734309 7.200000000000003 0.010927656427111687)
Average genome size in population (length): 44.288
Average program size in population (points): 45.285
Average percent parens in population: 0.024
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.491
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.136
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 96651300
--- Timings ---
Current time: 1481490898511 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_dup} {:close 0, :instruction float_sin} {:close 1, :instruction integer_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_dup float_sin integer_min vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 46503.75755172646
Median total errors in population: 1778.9999999999998
Error averages by case: (1310.4024080831264 1344.5277623840968 1316.46163749211 1332.2707367108387 1312.1882176814565 2190.435497572198 2230.288026989272 2032.6876404005131 1720.3001882028611 1312.4831931509887 1311.905077442904 1316.9433018907853 1343.93513494029 1327.705294573087 1518.0380687570778 1317.1956255290877 1319.5484121908023 1328.241541474519 1319.3812926945127 2032.1887682994939 1360.1696964094804 1360.2603830628225 1394.7349249619297 2456.834519737092 1348.5002784431979 1322.9626703001165 1320.802841477815 2110.393669345247 1361.794583564494 2230.1761579641643)
Error minima by case: (0.0 0.15686095472147965 0.0 0.07843047736074027 0.20000000000000018 0.2 0.1871809965734309 0.043139045278519195 0.05437585833444225 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 6.0 9.64313904527853 0.0 0.4784304773607424 2.721569522639257 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.27843047736073956 0.0 0.1871809965734309 5.121569522639263 0.010927656427111687)
Average genome size in population (length): 43.625
Average program size in population (points): 44.619
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.144
Error (vector) diversity:			 0.153
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 97960050
--- Timings ---
Current time: 1481490901773 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest vector_integer_rest integer_stackdepth integer_rot vector_integer_length vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot vector_integer_length float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin integer_rot float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 43163.39750380205
Median total errors in population: 1778.9999999999998
Error averages by case: (1150.4341867896826 1184.6116049942923 1156.597248013296 1172.3776211524762 1152.1056362745753 2260.40574860447 2290.271773010674 2182.580111482698 1530.3315304135401 1152.259837841722 1152.0774955802897 1156.9512634810474 1184.0702709744917 1166.6370014474248 1353.1427920648794 1157.1194195568282 1160.1896637935054 1168.444820824782 1158.305342763563 2092.079389935338 1200.2176864898033 1199.2715591187361 1225.0668501744685 2340.6291159797875 1189.3236438431104 1163.2825318916057 1161.0193377908975 2210.3445342020314 1203.0735424647194 2290.1759428472396)
Error minima by case: (0.0 0.20000000000000018 0.32156952263925964 0.40000000000000036 0.20000000000000018 0.2 0.1871809965734309 0.043139045278519195 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.12996290391075327 6.0 10.321569522639265 0.6784304773607399 0.8000000000000007 2.4907025731743175 0.20000000000000284 0.32156952263925964 0.0 13.121569522639255 30.80000000000001 1166.2 18.799999999999997 0.27843047736073956 0.909297426825681 0.1871809965734309 8.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.85
Average program size in population (points): 44.846
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.133
Error (vector) diversity:			 0.141
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 99275550
--- Timings ---
Current time: 1481490905056 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin float_sin integer_rot vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 47125.46495449791
Median total errors in population: 1778.9999999999998
Error averages by case: (1310.4005402595703 1324.5529776477777 1316.4615924194227 1332.0843609260403 1312.1446130164716 2360.405731554257 2320.2839995212607 2232.486241159795 1660.3091426118147 1312.3916657740956 1312.224369249347 1316.9455424095052 1323.965432627298 1327.595470832147 1511.2428508636033 1317.1415516168286 1320.4762591960866 1328.2627171529607 1318.7760218875744 2142.1350493457535 1330.2102638453857 1358.5687386018976 1388.2652709994652 2441.941317588983 1349.7073535491547 1323.2212589189078 1320.9066766815172 2230.3958488398616 1361.7754260358754 2320.186669365173)
Error minima by case: (0.0 0.5215695226392603 0.2543758583344422 0.40000000000000036 0.20000000000000018 0.05981121820398086 0.11633781453677378 0.3999999999999999 0.12156952263925969 0.0 0.025638006853139217 0.1999999999999993 0.40000000000000036 6.0 10.321569522639265 0.0 0.1999999999999993 3.6000000000000014 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 1154.2 18.799999999999997 0.27843047736073956 5.0 0.11633781453677378 3.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.442
Average program size in population (points): 44.44
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.138
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 100578810
--- Timings ---
Current time: 1481490908293 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_min integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45029.34968633197
Median total errors in population: 1778.9999999999998
Error averages by case: (1200.4590628038284 1214.5397298060254 1206.569505048304 1222.4083800489293 1202.1057999252694 2420.4148227188402 2410.295940266433 2242.5070204920166 1690.327849529995 1202.5930279298614 1202.0735781950818 1207.027627483728 1214.0830239317488 1217.3456167943912 1401.7050426035755 1207.0637999252856 1210.0098333377648 1218.6368805528396 1209.0198789452352 2142.1217931886895 1220.2596072902343 1248.8215845894185 1280.7726994144186 2400.767486084904 1239.9277757683208 1213.213699452919 1211.0153143449566 2310.388459602145 1252.6853595182818 2410.189486738442)
Error minima by case: (0.0 0.47843047736073974 0.2902999597654743 0.07843047736074027 0.16470856791777955 0.2 0.1871809965734309 0.27843047736074045 0.04147098480789646 0.0 0.15686095472148054 0.1999999999999993 0.40000000000000036 4.0 10.321569522639265 0.0 0.8000000000000007 3.6000000000000014 0.20000000000000284 0.2902999597654743 0.0 10.799999999999997 30.80000000000001 788.2 18.799999999999997 0.27843047736073956 0.3215695226392601 0.1871809965734309 3.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.546
Average program size in population (points): 44.543
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.14
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 101885190
--- Timings ---
Current time: 1481490911530 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin float_sin float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.4275718320491591 0.2275718320491591 2.772428167950841 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.372428167950841 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2275718320491591 57.8 0.17242816795084093]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 40446.46178178012
Median total errors in population: 1778.9999999999998
Error averages by case: (1060.5142285062195 1094.633324126196 1066.744415747893 1082.6304010994309 1062.1747904605736 2180.4476449178583 2160.3093013881457 2072.6326464810727 1420.3342162237482 1062.5766577672034 1062.480481026941 1067.4691369027646 1104.1204456957453 1078.3511742980281 1280.2427118210016 1067.274265023868 1070.854080681895 1078.9177196346704 1069.9841457699847 2052.154742911588 1110.2479654539536 1110.837833679088 1147.9094237434672 2240.242136293748 1103.0417148202407 1073.8213663308081 1071.651147867692 2120.3995249381105 1113.2667474009972 2160.1973907670813)
Error minima by case: (0.0 0.5215695226392603 0.0 0.40000000000000036 0.16588393923158584 0.041470984807896516 0.2275718320491591 0.09124828333111568 0.07231088482695625 0.0 0.15686095472148054 0.1999999999999993 0.6384570102797076 6.678430477360735 10.321569522639265 0.0 0.4784304773607424 2.7440065990914846 0.20000000000000284 0.0 0.0 13.121569522639255 30.80000000000001 478.20000000000005 20.121569522639263 0.27843047736073956 5.0 0.2275718320491591 0.7999999999999972 0.010927656427111687)
Average genome size in population (length): 44.29
Average program size in population (points): 45.287
Average percent parens in population: 0.024
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.14
Error (vector) diversity:			 0.147
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 103213890
--- Timings ---
Current time: 1481490914773 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth integer_rot float_frominteger integer_rot float_inc float_sin float_sin float_sin vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 40774.96568435243
Median total errors in population: 1778.9999999999998
Error averages by case: (1080.4978398217509 1094.6497883351985 1086.6899569204709 1102.4920440955602 1082.2539499564543 2140.448590731505 2170.311240056217 2012.7548476001234 1490.342091226832 1082.805499471973 1082.5009962545685 1087.5543803369044 1104.043505882877 1099.553043810888 1295.8838301954581 1087.3685146650375 1091.0931047767046 1099.6199027347398 1091.1850519419406 2012.2233694546399 1140.225512802507 1132.0089457756803 1177.5068506456596 2248.631212344143 1123.0941576568919 1093.7602662232684 1091.649281272627 2070.429332218753 1133.1758981786083 2170.212678964347)
Error minima by case: (0.0 0.7999999999999998 0.0 1.0784304773607403 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6352914320822207 0.12156952263925969 0.0 0.0551436640983205 0.1254705019362845 0.7215695226392604 6.0 11.0 0.0 0.8000000000000007 2.721569522639257 0.12156952263925547 0.0 0.0 2.200000000000003 31.80000000000001 103.20000000000005 2.6746208072682123 0.27843047736073956 0.6784304773607399 0.11633781453677378 7.200000000000003 0.02144133450428931)
Average genome size in population (length): 43.723
Average program size in population (points): 44.723
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.135
Error (vector) diversity:			 0.143
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 104525580
--- Timings ---
Current time: 1481490918075 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max float_shove integer_min vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest float_shove vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43592.648467637104
Median total errors in population: 1778.9999999999998
Error averages by case: (1210.4366767667382 1224.5732787508218 1216.6890980045448 1232.5759590799964 1212.1119938902236 2150.4309671820756 2130.304634375685 2062.6286481949496 1540.3624731213172 1212.450789101741 1212.491430481925 1217.3452077715478 1214.0076513070221 1227.7428723940866 1411.5360388057559 1217.1184801683298 1220.6920178627952 1228.785684257672 1219.6437830052078 1972.1955809916155 1220.2295622671288 1258.8003468519603 1294.0898837339448 2364.314761184376 1252.7601101436867 1223.7864597997566 1221.5309017143102 2030.3996820501009 1262.4136877044161 2130.1998066732954)
Error minima by case: (0.0 0.5215695226392603 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.6352914320822207 0.12156952263925969 0.31705803038420655 0.018732783228880834 1.1999999999999993 0.40000000000000036 6.0 10.321569522639265 0.0 0.1999999999999993 1.3647085679177735 0.20000000000000284 0.0 0.0 13.121569522639255 31.80000000000001 478.20000000000005 18.121569522639263 0.27843047736073956 0.9647085679177803 0.14030230586813974 5.799999999999997 0.0060687779379889895)
Average genome size in population (length): 43.5
Average program size in population (points): 44.498
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.133
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 105830580
--- Timings ---
Current time: 1481490921347 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth vector_integer_length float_frominteger float_inc float_sin float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 42768.3006364911
Median total errors in population: 1778.9999999999998
Error averages by case: (1170.4083277118996 1224.6030559310777 1176.6454182986572 1192.5436238307925 1182.1916507539297 2160.416274207586 2190.274099536324 1942.7359713062217 1600.3263079369244 1172.509650458643 1171.9936307627358 1177.2167481894649 1213.9858124607888 1187.997654755725 1381.0646404015731 1177.3040428862428 1179.5683398805531 1188.9643771633876 1179.7339913285107 1882.2091862515783 1250.2096550050653 1221.1085407452922 1266.7026415363357 2329.806159194629 1210.3126729262945 1183.3932440123165 1181.2395782980761 1960.41193149164 1222.2470464417352 2190.17636278701)
Error minima by case: (0.0 0.47843047736073974 0.0 1.2431390452785198 0.20000000000000018 0.05981121820398086 0.2275718320491591 0.043139045278519195 0.19999999999999996 0.31705803038420655 0.15686095472148054 0.1999999999999993 0.6543758583344426 6.0 11.0 0.6784304773607399 0.1999999999999993 1.3647085679177735 0.12156952263925547 0.0 0.0 4.827571832049159 30.80000000000001 351.5724281679509 18.799999999999997 0.27843047736073956 0.6784304773607399 0.2275718320491591 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.381
Average program size in population (points): 44.375
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.527
Total error diversity:				 0.146
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 107132010
--- Timings ---
Current time: 1481490924589 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (float_mult float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc integer_rot vector_integer_length float_frominteger float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth vector_integer_length float_frominteger float_inc integer_rot vector_integer_length float_frominteger float_sin float_sin float_sin integer_rot vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 43109.59932232259
Median total errors in population: 1778.9999999999998
Error averages by case: (1170.4275320854042 1174.7070322314157 1176.696862864444 1192.803698867191 1172.2914149975172 2200.4368661695353 2250.2839583034565 2072.6889589110588 1540.2994805783098 1172.5931905907687 1171.9953619197677 1177.2058481719682 1164.0372205861631 1188.0598252339253 1389.2396851845733 1177.4286072799614 1179.7962300914735 1188.4946680224168 1179.650283643592 2042.20326145865 1160.205516377682 1222.9385537149603 1256.9488421749274 2311.6162533523902 1208.9620981950413 1183.3747329046741 1181.150826117063 2140.3942196304483 1222.4910034078 2240.177289255928)
Error minima by case: (0.0 0.5215695226392603 0.0 0.34485633590167986 0.16470856791777955 0.053294040332623804 0.15401639075562956 0.043139045278519195 0.12156952263925969 0.0 0.15686095472148054 1.1999999999999993 0.7215695226392604 4.0 5.0 0.0 0.1999999999999993 2.7724281679508387 0.20000000000000284 0.0 0.0 5.799999999999997 31.80000000000001 1040.5215695226393 18.799999999999997 0.27843047736073956 0.3724281679508401 0.15401639075562956 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.734
Average program size in population (points): 44.733
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.117
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 108444030
--- Timings ---
Current time: 1481490927930 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 37407.23103772674
Median total errors in population: 1778.9999999999998
Error averages by case: (980.4521276209875 994.7829334740355 986.8207622355528 1003.1147893429313 982.2149717442111 2000.438257118408 2020.3100649659743 1902.792864274234 1300.3491315948029 982.5013256782472 982.2993787159618 987.4269074618211 994.1131604061039 998.1440507213144 1189.2754684096415 987.3741077541043 990.401591768544 999.2204311374744 989.7508182038518 1862.2001803738628 1010.2834088398524 1030.6750256606463 1067.6016079459555 2152.5564116551436 1022.4019253146314 993.8792306740262 991.6341332824185 1950.408335527756 1033.602178721327 2020.2054571028282)
Error minima by case: (0.0 0.20000000000000018 0.0 0.8522707397757312 0.20000000000000018 0.2 0.1871809965734309 0.27843047736074045 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 4.0 10.539732087388074 0.6784304773607399 0.8000000000000007 2.721569522639257 0.20000000000000284 0.0 0.0 10.799999999999997 30.80000000000001 348.5215695226393 18.799999999999997 0.27843047736073956 0.0 0.11633781453677378 1.7999999999999972 0.00945566726228586)
Average genome size in population (length): 43.885
Average program size in population (points): 44.884
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.144
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 109760580
--- Timings ---
Current time: 1481490931244 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger integer_stackdepth integer_rot vector_integer_reverse float_frominteger float_inc float_sin float_sin integer_rot vector_integer_length float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth vector_integer_length float_frominteger integer_stackdepth vector_integer_reverse float_inc float_sin float_sin integer_rot float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 41069.98409386088
Median total errors in population: 1778.9999999999998
Error averages by case: (1140.4148062987467 1154.695530295367 1146.6083300502114 1162.806456669365 1142.224430680743 1970.4416936569883 1980.3074583655148 1872.752682058159 1530.2875688140564 1142.3900889849178 1141.848030260596 1146.9814571133518 1154.0682165734786 1157.7696928345556 1353.2694195417614 1147.3423394324773 1149.6109209704293 1158.699019413174 1148.7927143949896 1832.2237824386134 1150.1866411281337 1191.6217358942804 1221.3534830656158 2286.9698797579917 1178.8081355153627 1153.3059465107692 1150.9461924303962 1930.4011310989415 1192.652578727751 1980.203730884052)
Error minima by case: (0.0 1.4543758583344424 0.0 0.787424285975991 0.20000000000000018 0.2 0.1871809965734309 0.3999999999999999 0.12156952263925969 0.15852901519210327 0.0551436640983205 0.1999999999999993 0.6543758583344426 6.0 11.0 0.0 0.1999999999999993 0.3999999999999986 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 115.20000000000005 18.799999999999997 0.27843047736073956 2.32156952263926 0.1871809965734309 5.799999999999997 0.02144133450428931)
Average genome size in population (length): 43.644
Average program size in population (points): 44.642
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.129
Error (vector) diversity:			 0.135
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 111069900
--- Timings ---
Current time: 1481490934604 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max vector_integer_rest integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin float_sin vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 39583.705564375305
Median total errors in population: 1778.9999999999998
Error averages by case: (1050.436771533968 1084.6710084901235 1046.6671460601003 1062.688336132866 1052.1606917569043 2170.4439115992022 2100.3185987658503 1962.7758170786879 1530.3359159200118 1042.4753220022496 1042.448416214015 1047.284322234826 1064.2458489722305 1077.9841773120143 1264.644807192601 1057.229835361931 1050.8463069812547 1078.9388492258117 1059.25270663668 1842.2469033628145 1110.3007000273194 1099.6480696479223 1132.454783900435 2230.805553287928 1082.7792031818117 1053.7385494272455 1051.4417963320248 1920.4172900404494 1103.8163827917838 2110.207542904163)
Error minima by case: (0.0 0.20000000000000018 0.0 0.71728450385252 0.20000000000000018 0.2 0.2275718320491591 0.27843047736074045 0.12156952263925969 0.0 0.0551436640983205 0.1215695226392608 0.5999999999999996 6.0 10.290299959765463 0.0 1.1999999999999993 2.721569522639257 0.20000000000000284 0.0 0.0 13.090299959765474 30.80000000000001 478.20000000000005 18.799999999999997 0.22757183204915954 1.6784304773607417 0.2275718320491591 9.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.599
Average program size in population (points): 44.596
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.155
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 112377870
--- Timings ---
Current time: 1481490937869 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin integer_rot float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 46719.81173356071
Median total errors in population: 1778.9999999999998
Error averages by case: (1290.4978784235916 1314.5409856319693 1286.4852254477757 1302.1919718972779 1292.1518513957778 2360.4175351892727 2350.291236408311 2212.6276267299563 1750.3134641874656 1282.4225794689096 1282.2796589586385 1287.0344198830676 1304.0384982094445 1307.7966755860257 1493.8463392302222 1297.083051395797 1290.4244685489825 1308.5085578206467 1289.2809222057735 2142.1768519967995 1310.2745769764015 1339.2903988779199 1364.2455880764987 2413.6568418795373 1320.978481978951 1293.2095994619183 1290.9928226706575 2250.3942091606204 1342.1749714824941 2350.1844443799255)
Error minima by case: (0.0 0.5215695226392603 0.0 0.5647085679177799 0.20000000000000018 0.2 0.1871809965734309 0.3999999999999999 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.6543758583344426 6.0 10.321569522639265 0.0 0.8000000000000007 2.721569522639257 0.12156952263925547 0.0 0.0 13.121569522639255 30.80000000000001 478.20000000000005 18.799999999999997 0.27843047736073956 0.6784304773607399 0.1871809965734309 5.200000000000003 0.021245635128144702)
Average genome size in population (length): 43.433
Average program size in population (points): 44.43
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.137
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 113680860
--- Timings ---
Current time: 1481490941099 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_indexof float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 45090.04448247671
Median total errors in population: 1778.9999999999998
Error averages by case: (1230.483299351782 1254.5828846916852 1236.617508717454 1252.2728953470412 1232.1595460866297 2300.4227988234416 2330.286014390597 2152.684964784525 1650.382368833085 1232.6196613377176 1232.7437934752945 1237.4230093513554 1254.118833781867 1247.9736450970627 1436.2421379397965 1237.1802925953996 1241.0266847693106 1248.7647856309227 1239.8868847204265 2072.199132377418 1270.264004441644 1279.8531241259034 1315.982795639254 2392.098515909174 1273.3506478449033 1243.7791813547833 1241.5407980406292 2140.4021923336004 1282.5126706842686 2330.1894099996634)
Error minima by case: (0.0 0.7999999999999998 0.0 0.40000000000000036 0.20000000000000018 0.2 0.14030230586813974 0.043139045278519195 0.19999999999999996 0.3215695226392601 0.15686095472148054 0.1999999999999993 0.7215695226392604 6.0 10.321569522639265 0.0 0.8000000000000007 1.3647085679177735 0.20000000000000284 0.0 0.0 2.200000000000003 30.80000000000001 198.20000000000005 20.121569522639263 0.27843047736073956 0.3215695226392601 0.14030230586813974 5.799999999999997 0.0060687779379889895)
Average genome size in population (length): 43.159
Average program size in population (points): 44.158
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 56
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.15
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 114975630
--- Timings ---
Current time: 1481490944343 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction float_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth float_dup vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 42549.852093012196
Median total errors in population: 1778.9999999999998
Error averages by case: (1150.4575075012665 1164.583104724749 1146.6475209002194 1162.5710541721585 1152.1416668760992 2220.4401170926453 2220.313230942523 2072.864400251013 1520.3233418812204 1142.5395349465462 1142.2215499656365 1147.332411877833 1154.078652094652 1168.2638891580575 1355.8378473736052 1157.2078853486962 1150.06428410365 1169.1188883912118 1150.0228090332625 2072.230486211949 1160.230763065017 1199.8126044409814 1228.3929621430998 2331.9878641191426 1181.9636882616903 1153.64130083743 1151.433385316425 2100.4373655784766 1202.4823741340967 2220.2096022687815)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.09933739496515859 0.2 0.15740772465490227 0.6352914320822207 0.12156952263925969 0.2902999597654734 0.15686095472148054 0.1999999999999993 1.3647085679177797 6.0 11.0 0.0 0.1999999999999993 17.6 0.12156952263925547 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.27843047736073956 1.0 0.15740772465490227 5.799999999999997 0.04147098480789646)
Average genome size in population (length): 43.445
Average program size in population (points): 44.443
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.14
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 116278980
--- Timings ---
Current time: 1481490947551 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot vector_integer_length float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 42192.54325974909
Median total errors in population: 1778.9999999999998
Error averages by case: (1130.408252910897 1134.6172453696 1136.712805054573 1152.397114550772 1132.0974375219864 2200.457337507528 2220.321949052817 2112.893084912861 1530.3364846659556 1132.36585045563 1132.345387380266 1137.3045468525036 1134.0708022305782 1147.1534100781846 1334.0513747867524 1137.171480661049 1140.4876789929713 1148.7392269510544 1138.9031468525047 2062.271532182597 1130.2785825241583 1179.5798963562952 1206.8551468525388 2290.3452765178577 1171.8462146789452 1143.770528400868 1141.5581468525204 2140.4410078942146 1182.5470100782043 2210.215300622312)
Error minima by case: (0.0 0.7999999999999998 0.0 0.787424285975991 0.20000000000000018 0.2 0.1871809965734309 0.043139045278519195 0.19999999999999996 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 6.0 11.0 0.0 0.1999999999999993 17.6 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 1038.2 18.799999999999997 0.27843047736073956 5.0 0.1871809965734309 9.200000000000003 0.010927656427111687)
Average genome size in population (length): 42.981
Average program size in population (points): 43.979
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.13
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 117568410
--- Timings ---
Current time: 1481490950850 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_butlast float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_butlast float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 38730.930338990205
Median total errors in population: 1778.9999999999998
Error averages by case: (1010.3851181483647 1014.6753385153789 1006.6651605553155 1022.5884425309592 1012.1586993982025 2160.4415763427496 2160.3183488988802 1922.689195249122 1520.3215612847944 1002.4882235148513 1002.2587932001117 1007.2691533867334 1024.0550347617132 1028.0474729880932 1217.548116127138 1017.2831425372601 1010.3654557794775 1028.902546853404 1009.7338414819199 1882.2115756938724 1040.2239115849331 1060.245116127152 1085.9364205076913 2222.481517446262 1041.8626312521808 1013.5371570460085 1011.4092157456274 1970.4445818284903 1064.169806744127 2160.213183459305)
Error minima by case: (0.0 1.2000000000000002 0.2543758583344422 0.787424285975991 0.20000000000000018 0.2 0.2275718320491591 0.019400080469051506 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 6.0 11.0 0.460267912611922 0.8000000000000007 1.2784304773607431 0.20000000000000284 0.2902999597654743 0.0 13.799999999999997 30.80000000000001 470.20000000000005 14.121569522639263 0.27843047736073956 0.3215695226392601 0.2275718320491591 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.419
Average program size in population (points): 44.419
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.155
Error (vector) diversity:			 0.163
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 118870980
--- Timings ---
Current time: 1481490954155 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin integer_rot vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 49786.85558046865
Median total errors in population: 1778.9999999999998
Error averages by case: (1390.4695427118963 1414.4598918122567 1396.5197971770826 1411.7678718433078 1392.1233258208567 2470.4040498053987 2440.272732747318 2312.5320068969127 1870.3112413794242 1392.56966486196 1392.4666320903657 1397.292544033735 1423.9780180363332 1407.8714214908612 1593.0116340797206 1397.005851533154 1400.367304747581 1408.7786470156266 1400.1128503808375 2222.07516389011 1420.2152565850758 1439.0083145467506 1479.3995028201894 2515.6498492495903 1431.8373694002705 1403.3590055294815 1401.2985497444456 2280.379893945801 1441.13961030796 2440.178035984271)
Error minima by case: (0.0 0.15686095472147965 0.0 0.5647085679177799 0.16470856791777955 0.2 0.2275718320491591 0.21160489422187867 0.19999999999999996 0.0 0.15686095472148054 0.1999999999999993 0.9568609547214795 1.0 11.0 0.0 0.5456241416655594 6.399999999999999 0.20000000000000284 0.0 0.0 2.200000000000003 30.80000000000001 228.20000000000005 18.799999999999997 0.27843047736073956 4.32156952263926 0.2275718320491591 7.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.185
Average program size in population (points): 44.184
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.139
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 120166530
--- Timings ---
Current time: 1481490957402 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_indexof float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 43505.83337522553
Median total errors in population: 1778.9999999999998
Error averages by case: (1200.3979723007378 1234.539127939802 1206.7124148092967 1222.6783733600782 1202.086386417181 2150.4243506902912 2170.2826607072993 1972.6852179863206 1550.310266392154 1202.3129850730754 1202.331417111886 1207.3038985514777 1244.0174806437708 1217.330799743884 1400.2343460320685 1207.1000726952873 1210.4553243564123 1219.0234931252314 1209.175117526858 2022.1541577549542 1250.15379998056 1248.5617884348144 1281.2634512243885 2343.793733319142 1242.5254923157843 1213.7571579018834 1211.5318157877255 2040.3755938225095 1252.1369466001324 2170.1777326204347)
Error minima by case: (0.0 0.7999999999999998 0.0 0.2009850208381856 0.20000000000000018 0.2 0.1871809965734309 0.4827154961474771 0.12156952263925969 0.6784304773607417 0.15686095472148054 1.1999999999999993 1.4000000000000004 6.0 11.0 0.0 0.8000000000000007 2.721569522639257 0.20000000000000284 0.0 0.0 3.8784304773607445 31.80000000000001 227.5215695226393 18.799999999999997 0.22757183204915954 0.3215695226392601 0.1871809965734309 2.200000000000003 0.04147098480789646)
Average genome size in population (length): 43.628
Average program size in population (points): 44.622
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.118
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 121475370
--- Timings ---
Current time: 1481490960667 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction 5} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest 5 integer_rot vector_integer_length float_frominteger integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_dec vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (float_max 5 float_frominteger integer_stackdepth float_frominteger float_inc float_sin integer_rot float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39051.57419931821
Median total errors in population: 1778.9999999999998
Error averages by case: (1070.4590603661393 1084.6477523857743 1076.7085215375391 1092.5885110334289 1072.252474342587 1920.4607744894947 1940.3197052396617 1782.9173268415727 1490.347066642727 1072.694647183382 1072.5414716241376 1077.4302792805595 1094.1324030972914 1088.2850166169094 1280.3821138139563 1077.353226215853 1080.8419052046852 1089.1426691165555 1080.2559635675645 1722.385313457008 1090.2122599230793 1120.9005460971364 1160.4684105788438 2241.9542703257584 1113.051015553027 1083.8569641412698 1081.6059396664425 1830.4466308310577 1122.715459173793 1940.216500970903)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.16588393923158584 0.2 0.14030230586813974 0.043139045278519195 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 5.0 10.254375858334441 0.0 0.1999999999999993 1.3647085679177735 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 1097.2 18.799999999999997 0.27843047736073956 0.2902999597654734 0.14030230586813974 0.7999999999999972 0.010927656427111687)
Average genome size in population (length): 43.206
Average program size in population (points): 44.204
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.148
Error (vector) diversity:			 0.159
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 122771550
--- Timings ---
Current time: 1481490963900 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction float_max} {:close 0, :instruction integer_max} {:close 0, :instruction float_max} {:close 0, :instruction float_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (integer_yank float_max integer_max float_max float_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot vector_integer_length float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Partial simplification: (float_max integer_min vector_integer_dup integer_stackdepth float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 39008.42794280878
Median total errors in population: 1778.9999999999998
Error averages by case: (990.5094055741822 994.7414455425329 996.8242459829906 1012.9672358088426 992.2811867082612 2260.432878331448 2280.2969519721787 2062.7161254193747 1440.3461187409937 992.6686457386703 992.410180697737 997.4801956175943 994.0916803675915 1008.4123986986459 1209.0009712548265 997.4488886815907 1000.5370069072818 1009.1636814292868 1000.1701906474023 1962.201291260132 1010.2965232618959 1042.9845712548415 1081.5217200645645 2216.9317276493693 1032.5897441645366 1003.9274111897314 1001.6748578864593 2090.409350509004 1043.197319801785 2290.1939916449473)
Error minima by case: (0.0 0.15686095472147965 0.0 1.0784304773607403 0.20000000000000018 0.2 0.2275718320491591 0.043139045278519195 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.04313904527852053 5.0 11.0 0.0 0.4784304773607424 1.3647085679177735 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 478.20000000000005 18.799999999999997 0.27843047736073956 0.3215695226392601 0.2275718320491591 5.121569522639263 0.0060687779379889895)
Average genome size in population (length): 43.239
Average program size in population (points): 44.237
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.168
Error (vector) diversity:			 0.175
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 124068720
--- Timings ---
Current time: 1481490967190 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_butlast float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_butlast float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 38147.38055713283
Median total errors in population: 1778.9999999999998
Error averages by case: (990.4292556595573 1004.6794063163463 996.9119008382681 1012.6156464914926 992.1725551829071 2100.445891752258 2130.305286782011 1872.7641555463024 1560.3246989283455 992.6311421600158 992.6425153269158 997.6144344210653 1004.1159806807648 1010.1893344553711 1198.1905305247283 997.3071176707056 1001.0299204226606 1009.0361860933745 1001.1574877294466 1802.289854267263 1010.2532613539743 1040.422547806792 1079.060487480898 2171.2056304212547 1057.08318649353 1004.1147187384313 1001.998144479971 1940.4278357665676 1045.762406771573 2130.199036569938)
Error minima by case: (0.0 0.20000000000000018 0.2902999597654743 0.5647085679177799 0.20000000000000018 0.2 0.1871809965734309 0.019400080469051506 0.12156952263925969 0.0 0.15686095472148054 0.8000000000000007 0.9087517166688848 4.0 10.0 0.0 0.8000000000000007 1.9087517166688812 0.09029995976547411 0.2902999597654743 0.0 12.799999999999997 31.80000000000001 33.50970004023452 18.799999999999997 0.27843047736073956 1.5087517166688826 0.2275718320491591 1.1215695226392626 0.010927656427111687)
Average genome size in population (length): 43.347
Average program size in population (points): 44.347
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.152
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 125369130
--- Timings ---
Current time: 1481490970459 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_indexof float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 36950.06536615455
Median total errors in population: 1778.9999999999998
Error averages by case: (960.3794945263419 964.722153743948 966.7303124914426 982.8565388593431 962.1728751929694 2070.4255018472695 2030.2953221050166 1902.7917359113494 1320.3330566093439 962.240602649598 961.8118943668874 966.995968571866 964.0964008945484 976.9005283098378 1166.2451715559448 967.3169393267616 969.6647387360832 978.6578288900491 968.2938652977768 1802.2541452513715 980.2248224920471 1010.0649047698419 1036.2424376966978 2160.307121931986 998.7208942752467 973.3337223399785 971.0661080005111 1920.4092845858543 1014.3217611613743 2040.1892337631778)
Error minima by case: (0.0 0.47843047736073974 0.0 0.07843047736074027 0.15686095472147965 0.2 0.14030230586813974 0.043139045278519195 0.07231088482695625 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 4.0 9.321569522639265 0.6784304773607399 0.8000000000000007 1.3647085679177735 0.07231088482695469 0.0 0.0 12.121569522639255 30.80000000000001 1040.5215695226393 18.799999999999997 0.27843047736073956 0.3215695226392601 0.14030230586813974 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.324
Average program size in population (points): 44.321
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.151
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 126668850
--- Timings ---
Current time: 1481490973683 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 41845.81350457181
Median total errors in population: 1778.9999999999998
Error averages by case: (1080.3544905878962 1084.6851775966022 1086.6961183473693 1102.629990770511 1082.1878560270798 2370.4129332410894 2330.2879054801992 2282.684362977728 1530.33254734536 1082.4280513725598 1082.0219552570545 1087.1513760696241 1084.0418123762831 1096.9463070137565 1287.7795932918468 1087.3406991661438 1089.9491182505508 1098.5434236670928 1088.8590192086701 2172.198986595762 1080.2048156994754 1130.314993291867 1161.8768192087061 2248.0750299341325 1119.3536345947389 1093.472440183255 1091.273391764868 2250.39261920211 1133.1276089870935 2330.190427062294)
Error minima by case: (0.0 0.5215695226392603 0.0 1.0784304773607403 0.20000000000000018 0.08106039681504768 0.15401639075562956 0.043139045278519195 0.12156952263925969 0.0 0.15686095472148054 0.1999999999999993 0.7215695226392604 4.0 10.321569522639265 0.6784304773607399 0.8000000000000007 1.3647085679177735 0.20000000000000284 0.0 0.0 3.8784304773607445 30.80000000000001 352.5215695226393 18.799999999999997 0.27843047736073956 0.9647085679177803 0.15401639075562956 3.799999999999997 0.04147098480789646)
Average genome size in population (length): 42.941
Average program size in population (points): 43.94
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.136
Error (vector) diversity:			 0.145
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 127957080
--- Timings ---
Current time: 1481490976915 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 40460.281349695906
Median total errors in population: 1778.9999999999998
Error averages by case: (1070.5890201507461 1084.7090666914648 1076.6424836023614 1092.454014072742 1072.2546656540917 2170.436983963777 2140.307971105939 2012.5878797598248 1630.3327774830514 1072.8134916664994 1072.5074536319012 1077.5124030891068 1084.182034021448 1089.5656607312792 1286.0487049561996 1077.327539927575 1080.4293246858251 1089.4397318121078 1081.3584504064147 1932.1987697287336 1090.3202885404464 1121.9620932117118 1169.3358969323483 2242.8208334874 1113.0711493519111 1083.654187780059 1081.521195364225 2000.4232350184968 1123.2689316426454 2140.205111225491)
Error minima by case: (0.0 0.47843047736073974 0.0 0.40000000000000036 0.20000000000000018 0.2 0.15401639075562956 0.043139045278519195 0.19999999999999996 0.0 0.15686095472148054 0.1215695226392608 0.6543758583344426 11.321569522639258 127.32156952263927 0.0 0.8000000000000007 2.721569522639257 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 822.5215695226393 25.200000000000003 0.15401639075562912 0.3215695226392601 0.15401639075562956 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 42.763
Average program size in population (points): 43.761
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.142
Error (vector) diversity:			 0.149
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 129239970
--- Timings ---
Current time: 1481490980229 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (float_mult float_max vector_integer_rest integer_stackdepth integer_rot float_frominteger float_frominteger float_inc integer_rot vector_integer_length float_frominteger float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc vector_integer_length float_frominteger float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 42344.02075571385
Median total errors in population: 1778.9999999999998
Error averages by case: (1140.4192412528503 1144.5973348865032 1146.7689868220336 1162.4873373294377 1142.1164207052673 2220.435334639479 2210.3035306175584 2092.8431551161566 1540.3481709729347 1142.4229798576437 1142.8812589610777 1147.4739665776535 1164.1132390451369 1157.315535219869 1341.02481438144 1147.1480967788546 1151.0533254830696 1158.9384699129114 1149.5609990565638 2012.2643822945686 1160.2401059617698 1188.8144750604831 1223.20453853815 2294.833766689686 1183.639388481552 1153.9848431902346 1151.8265997256367 2070.4315231934297 1192.3304032374037 2210.1985317244153)
Error minima by case: (0.0 0.20000000000000018 0.0 0.12749852763660208 0.15686095472148054 0.2 0.1871809965734309 0.6352914320822207 0.12156952263925969 0.0 0.15686095472148054 0.1215695226392608 0.7215695226392604 6.0 11.0 0.0 0.8000000000000007 13.721569522639259 0.20000000000000284 0.0 0.0 13.799999999999997 30.80000000000001 478.20000000000005 18.799999999999997 0.27843047736073956 0.3215695226392601 0.1871809965734309 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 42.998
Average program size in population (points): 43.996
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.149
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 130529910
--- Timings ---
Current time: 1481490983482 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth integer_rot float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 40930.91418649323
Median total errors in population: 1778.9999999999998
Error averages by case: (1110.5671653080094 1114.7502949873087 1116.6560354529688 1132.6364415603612 1112.4000674225995 2070.453986051019 2120.3100213352764 1902.8223497433382 1530.3386600181877 1113.15946371776 1112.6177635535466 1117.6030892800472 1104.1031710780642 1130.2983578434635 1330.4924027997693 1117.5278831178407 1120.706598656996 1129.7571575231736 1122.0485324190927 1892.3081498998033 1120.2539764154485 1163.5107949521741 1215.8343635535496 2306.784712364659 1153.1311342363529 1123.5884341506364 1121.550775558152 1950.450680048663 1164.0480027997876 2110.2037206451064)
Error minima by case: (0.0 0.15686095472147965 0.0 0.24313904527851982 0.15686095472148054 0.05981121820398086 0.2275718320491591 0.019400080469051506 0.024483182457035957 0.0 0.15686095472148054 0.1999999999999993 0.40000000000000036 4.0 9.381002532939789 0.0 0.8000000000000007 2.043139045278515 0.20000000000000284 0.2902999597654743 0.0 11.878430477360737 2.8000000000000114 352.5215695226393 17.799999999999997 0.27843047736073956 1.62757183204916 0.2275718320491591 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 42.973
Average program size in population (points): 43.971
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.162
Error (vector) diversity:			 0.17
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 131819100
--- Timings ---
Current time: 1481490986696 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_mult} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (float_mult float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc integer_rot vector_integer_length float_frominteger float_sin float_sin integer_rot float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc integer_rot vector_integer_length float_sin float_sin float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 40648.05153418223
Median total errors in population: 1778.9999999999998
Error averages by case: (1100.4419496807068 1124.6627543684103 1106.7623944904499 1123.2018337788186 1102.1956643925898 2030.4137826230362 1990.2866116008752 1902.5581998730795 1470.311624842957 1102.6870918987765 1102.3797888342638 1107.567764868466 1124.1715269246188 1121.5240616468182 1311.51079762926 1107.2465506706994 1110.4707570008804 1118.8959919794686 1114.4645360354855 1792.2229219245814 1130.2219741866907 1149.425299669815 1634.432958875891 2292.1546506905024 1148.0058366139356 1113.884374663996 1111.805933491107 1870.3895524930986 1153.5574118603215 1980.196936572543)
Error minima by case: (0.0 0.15686095472147965 0.0 1.4000000000000004 0.20000000000000018 0.05981121820398086 0.11633781453677378 0.043139045278519195 0.12156952263925969 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 6.0 9.64313904527853 0.0 0.8000000000000007 5.6656019312572425 0.20000000000000284 0.0 0.0 12.443139045278514 30.80000000000001 176.79999999999995 3.1867180507276487 0.22757183204915954 3.847793330712289 0.11633781453677378 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 43.137
Average program size in population (points): 44.134
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.13
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 133113210
--- Timings ---
Current time: 1481490989963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction float_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth float_dup vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth vector_integer_length float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 37966.34440318112
Median total errors in population: 1778.9999999999998
Error averages by case: (1010.4423360760093 1014.7407701373861 1016.8033464756742 1033.253834633742 1012.2578195920834 1970.4482414702438 1980.301303874169 1822.7327897420823 1430.2937280434708 1012.5779235187796 1012.4937939908037 1017.4181726672883 1024.1998370154313 1028.2032294919416 1219.6781457329457 1017.4092169813058 1020.8968920752714 1029.103650366145 1019.9777852560169 1802.2349501259632 1050.219477376874 1060.664746904482 1099.7712146339022 2217.6350783072085 1052.400395135896 1023.868294293736 1021.535510167309 1900.397308348194 1064.1902257871104 1980.1943849595546)
Error minima by case: (0.0 0.5215695226392603 0.0 1.4000000000000004 0.20000000000000018 0.2 0.1871809965734309 0.6902999597654742 0.19999999999999996 0.0 0.0551436640983205 0.1999999999999993 0.40000000000000036 6.0 10.321569522639265 0.6275718320491599 0.8000000000000007 2.721569522639257 0.20000000000000284 0.0 0.0 2.200000000000003 30.80000000000001 103.20000000000005 18.799999999999997 0.22757183204915954 0.0 0.1871809965734309 8.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.302
Average program size in population (points): 44.298
Average percent parens in population: 0.025
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.142
Error (vector) diversity:			 0.151
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 134412270
--- Timings ---
Current time: 1481490993178 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin vector_integer_rot float_sin float_sin float_mult integer_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 39292.87395895871
Median total errors in population: 1778.9999999999998
Error averages by case: (1040.4638785678237 1064.6444930841567 1046.8219441519102 1063.128997690915 1042.1701294689424 2090.437377413107 2100.3023824160987 1912.817498430273 1580.2954310920845 1042.457173480368 1042.7593419008072 1047.4882245206377 1054.187659573684 1057.6705221843372 1245.1889123349717 1047.2220588860935 1051.3419758587083 1059.1200327897022 1049.6717564403164 1792.3462706714354 1100.245148380293 1089.7301383875285 1127.7237164559801 2240.5358627902497 1084.379509958151 1054.1853800049355 1051.795873011116 1930.4298251296304 1093.1232561270406 2090.1891877573225)
Error minima by case: (0.0 0.47843047736073974 0.0 0.5647085679177799 0.20000000000000018 0.2 0.1871809965734309 0.019400080469051506 0.19999999999999996 0.0 0.15686095472148054 0.1999999999999993 0.5999999999999996 6.0 10.290299959765463 0.0 0.8000000000000007 0.3999999999999986 0.12156952263925547 0.0 0.0 13.090299959765474 30.80000000000001 162.20000000000005 18.799999999999997 0.060379686288511536 0.3215695226392601 0.12610707550284161 5.799999999999997 0.010927656427111687)
Average genome size in population (length): 42.805
Average program size in population (points): 43.804
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.149
Error (vector) diversity:			 0.157
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 135696420
--- Timings ---
Current time: 1481490996377 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest vector_integer_rest float_max integer_shove integer_min vector_integer_dup integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin float_sin integer_rot float_sin integer_rot in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add integer_max float_dup_times)
Partial simplification: (vector_integer_rest vector_integer_rest float_max integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.47843047736074024 0.2784304773607402 2.7215695226392596 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.3215695226392596 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2784304773607402 57.8 0.1215695226392598]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 34969.04033005405
Median total errors in population: 1778.9999999999998
Error averages by case: (880.4051156565959 884.7799038044255 886.8103351256663 903.2695306477214 882.3134634350307 2050.4515868184017 2030.3124509723486 1812.893892625642 1440.329004869817 882.7993177478859 882.4993294947 887.5529263913248 874.1822657373573 899.3096290262426 1103.2386760437494 887.6319738458826 890.847049672984 899.4457475823821 890.969952045546 1732.3792575442037 870.2235379872337 933.7531551841756 978.6123538046135 2090.484054967641 923.1441989165979 893.9298045393773 891.6883678295217 1820.437857866763 934.1445850826001 2030.2010047875297)
Error minima by case: (0.0 0.20000000000000018 0.0 0.17960845885380117 0.16588393923158584 0.03665572881693843 0.16334427118306158 0.6352914320822207 0.19999999999999996 0.2543758583344413 0.0551436640983205 0.1999999999999993 0.7215695226392604 5.678430477360735 11.0 0.0 0.8000000000000007 1.3647085679177735 0.20000000000000284 0.0 0.0 3.200000000000003 30.80000000000001 103.20000000000005 21.121569522639263 0.27843047736073956 0.3215695226392601 0.16334427118306158 5.200000000000003 0.010927656427111687)
Average genome size in population (length): 43.164
Average program size in population (points): 44.162
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.16
Error (vector) diversity:			 0.172
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 136991340
--- Timings ---
Current time: 1481490999704 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_max} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 0, :instruction float_sin} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction integer_div} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_dup} {:close 0, :instruction float_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 1, :instruction float_inc} {:close 0, :instruction float_add} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_replace} {:close 0, :instruction float_add} {:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_last} {:close 0, :instruction float_add} {:close 0, :instruction vector_integer_take} {:close 1, :instruction integer_max} {:close 0, :instruction float_dup_times})
Best program: (vector_integer_rest float_max vector_integer_rest integer_stackdepth integer_rot vector_integer_length float_frominteger float_inc float_sin integer_rot float_sin float_sin float_sin integer_rot vector_integer_length vector_integer_flush in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add vector_integer_replace float_add integer_dup in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Partial simplification: (vector_integer_rest integer_stackdepth float_frominteger float_inc float_sin float_sin float_sin float_sin in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup in1 vector_integer_rest vector_integer_pushall integer_div vector_integer_concat float_frominteger float_dup float_dup float_frominteger float_inc float_add float_inc float_add float_add float_add in1 vector_integer_last float_add vector_integer_take integer_max float_dup_times)
Errors: [0.0 5.2 8.0 28.4 2.2 0.4275718320491591 0.2275718320491591 2.772428167950841 0.19999999999999996 1.0 0.8000000000000007 7.199999999999999 4.4 14.0 219.0 8.0 9.2 19.6 3.200000000000003 2.372428167950841 0.0 53.8 37.80000000000001 1228.2 37.2 15.6 12.0 0.2275718320491591 57.8 0.17242816795084093]
Total: 1778.9999999999998
Mean: 59.3
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 38414.81601804199
Median total errors in population: 1778.9999999999998
Error averages by case: (1020.3557731275318 1024.6402990446843 1026.737653933117 1042.932995926656 1022.1932605732334 2050.4509639833245 2020.3178932723988 1912.7841867462553 1470.3178232418372 1022.6999566909648 1021.8746145219133 1027.2218757639932 1034.0076361814454 1038.0899791467004 1232.1681445033798 1027.343970590303 1029.5672423032354 1039.1050789086912 1029.4280561728594 1822.1817493488145 1040.2191367453468 1071.3932164063942 1105.1991992954158 2185.065521917151 1059.7862341769207 1033.4754334965269 1031.2689669638773 1880.40675600765 1073.377179860119 2020.2052191911662)
Error minima by case: (0.0 0.47843047736073974 0.0 0.28271549614748004 0.20000000000000018 0.2 0.09200845689934883 0.27843047736074045 0.12156952263925969 0.0 0.15686095472148054 0.1999999999999993 1.2784304773607396 4.0 9.321569522639265 0.0 0.4784304773607424 16.721569522639257 0.20000000000000284 0.0 0.0 3.8784304773607445 30.80000000000001 352.5215695226393 18.799999999999997 0.27843047736073956 3.32156952263926 0.09200845689934883 5.121569522639263 0.010927656427111687)
Average genome size in population (length): 43.047
Average program size in population (points): 44.044
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.13
Error (vector) diversity:			 0.139
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 138282750
--- Timings ---
Current time: 1481491003007 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
