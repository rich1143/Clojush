Group: Sydney Richards, Sophia Mitchellette and Ben Sixel

The problem we chose was calculating mean of a list of numbers. We chose it because we thought it would be simple but interesting to see how the computer performed a mathematical function without calculations. We gave it a 5 number vector and the constant 5 in atom-generators. 

Results:

================================================================================================ 
Run 1: Base run, gave random input sets. Included vector_integer, float, integer, boolean, exec. We included vector_integer because we formatted the input to give it a vector of integers, we included float because that's how the final answer must be outputted, we included integer because of the integers in the vector as well as the constant 5, we included boolean and exec because they were in the example files and we figured it couldn't hurt.

	At the end of 73 generations, these were the results for the program with the best elite cases:
	Lexicase best number of elite cases: 12
	Lexicase best total error: 2264.2000000000003
	Lexicase best mean error: 75.473335
	Lexicase best size: 62
	Percent parens: 0.226

	For the program with the most zeroes, the results were as follows:
	Zero cases best number of elite cases: 12
	Zero cases best number of zero cases: 11
	Zero cases best total error: 2264.2000000000003
	Zero cases best mean error: 75.473335
	Zero cases best size: 62
	Percent parens: 0.226

	And results for best program based on total error:
	Total: 1180.1166666666663
	Mean: 39.337223
	Genome size: 35
	Size: 39
	Percent parens: 0.103

 
================================================================================================
Run 2: Changed input sets to include sets with 4 0's and 1 number and removed exec. The new input sets we included were to help clojush recognize that it needed to pay attention to all the places of the vector. We removed exec because its functions were unneeded to solve the problem and it was derailing clojush.

	At the end of 67 generations, these were the results for the program with the best elite cases:
	Lexicase best number of elite cases: 5
	Lexicase best total error: 21753.763363335212
	Lexicase best mean error: 725.1254
	Lexicase best size: 48
	Percent parens: 0.021

	For the program with the most zeroes, the results were as follows:
	Zero cases best number of elite cases: 4
	Zero cases best number of zero cases: 4
	Zero cases best total error: 3072.8
	Zero cases best mean error: 102.42667
	Zero cases best size: 49
	Percent parens: 0.020

	And results for best program based on total error:
	Total: 1916.6000000000001
	Mean: 63.886665
	Genome size: 39
	Size: 40
	Percent parens: 0.025


================================================================================================
Run 3: Removed boolean. We removed boolean because if statements are not needed to add 5 numbers and then divide them by 5.

	At the end of 63 generations, these were the results for the program with the best elite cases:
	Lexicase best number of elite cases: 4
	Lexicase best total error: 2329.6000000000004
	Lexicase best mean error: 77.653336
	Lexicase best size: 41
	Percent parens: 0.024

	For the program with the most zeroes, the results were as follows:
	Zero cases best number of elite cases: 4
	Zero cases best number of zero cases: 4
	Zero cases best total error: 2329.6000000000004
	Zero cases best mean error: 77.653336
	Zero cases best size: 41
	Percent parens: 0.024

	And results for best program based on total error:
	Total: 1760.2
	Mean: 58.673332
	Genome size: 46
	Size: 47
	Percent parens: 0.021


================================================================================================
Run 4: Added :parent-selection :epsilon-lexicase to argmap. We tried epsilon-lexicase because we wanted to try a different parent selection algorithm to see if it would improve our results. It make a significant difference.

	At the end of 51 generations, these were the results for best program based on total error:
	Total: 1795.0
	Mean: 59.833332
	Genome size: 37
	Size: 38
	Percent parens: 0.026

 
================================================================================================
Run 5: Added :parent-selection :tournament to argmap. We tried tournament because we wanted to try a different parent selection algorithm to see if it would improve our results. The results did not improve significantly.

	At the end of 110 generations, these were the results for best program based on total error:
	Total: 1778.9999999999998
	Mean: 59.3
	Genome size: 46
	Size: 47
	Percent parens: 0.021

 
================================================================================================
Run 6: Ran tournament on a lot more generations. Tournament ran very quickly, and so we felt that we could let it run longer to see if it made significant accomplishment. It plateaued around the time we ended this run.

	At the end of 472 generations, these were the results for best program based on total error:
	Total: 329.79999999999995
	Mean: 10.993333
	Genome size: 50
	Size: 51
	Percent parens: 0.020

 
================================================================================================
Run 7: Ran epsilon-lexicase on a lot more generations. Epsilon-lexicase had run very slowly, but after we let it run for a significant amount of time we realized it was making good progress. We let it run until it started plateauing, and felt that it got pretty close.

	At the end of 250 generations, these were the results for best program based on total error:
	Total: 4.5323964113602155
	Mean: 0.15107988
	Genome size: 49
	Size: 50
	Percent parens: 0.020

	The partial simplification was: (in1 vector_integer_pushall integer_add integer_add integer_inc 4 float_frominteger integer_add integer_add integer_inc 5 float_frominteger integer_dup float_frominteger 		float_add integer_dup float_frominteger float_add vector_integer_pop float_sin float_sin float_inc float_tan float_sin float_inc float_cos float_mod 5 vector_integer_last float_sin float_sin 		   	   vector_integer_replace integer_div float_frominteger float_add)
	

	We feel that eventually run 7 may have reached the conclusion, though its progress significantly slowed down in the last 50 generations. 

================================================================================================
Run 8: Attempted to run epsilon-lexicase over night but bad things happened. Please accept our 7 runs. :)

	Overall we found that while Clojush got fairly close to a solution, it had trouble paying attention to all the vector places. Were we to continue to experiment, we would have attempted maybe, to change the input format so that it was not in vector form.
















