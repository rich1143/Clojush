Command line args: clojush.problems.ec-ai-demos.mean
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = 78accdb2b730d3e8b08b9b443605380109f2f866
GitHub link = https://github.com/lspector/Clojush/commit/78accdb2b730d3e8b08b9b443605380109f2f866
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc vector_integer_shove integer_yankdup integer_mult vector_integer_dup vector_integer_swap vector_integer_butlast float_sin vector_integer_yank float_frominteger vector_integer_dup_times vector_integer_stackdepth vector_integer_take vector_integer_yankdup vector_integer_replace float_mod integer_div integer_fromfloat vector_integer_rot integer_mod integer_rot float_yankdup integer_add vector_integer_occurrencesof integer_shove integer_max vector_integer_flush vector_integer_subvec vector_integer_conj integer_stackdepth float_max float_dup_items vector_integer_replacefirst float_stackdepth integer_dup_times vector_integer_indexof integer_yank integer_min vector_integer_rest integer_dup_items vector_integer_nth vector_integer_dup_items vector_integer_remove vector_integer_last vector_integer_concat integer_flush float_shove float_pop float_sub vector_integer_length float_min float_mult vector_integer_pop float_dec vector_integer_set float_add float_dup vector_integer_reverse float_swap vector_integer_pushall integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec vector_integer_first float_rot float_flush float_cos float_div float_yank 5 in1)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.ec_ai_demos.mean$all_errors 0x718fd7c1 clojush.problems.ec_ai_demos.mean$all_errors@718fd7c1]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x5382184b clojush.pushgp.report$default_problem_specific_initial_report@5382184b]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x2213639b clojush.pushgp.report$default_problem_specific_report@2213639b]
random-seed = 3 -95 56 94 -105 -13 20 -10 -9 -116 -36 12 47 -119 -117 53
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "3aedde03-f107-432f-9fa8-69b3411e3587"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger)
Lexicase best errors: [2.0 10.8 1.0 4.4 1.7999999999999998 1.8 0.6 2.4 0.8 5.0 7.199999999999999 0.1999999999999993 5.4 25.0 200.0 9.0 14.2 41.6 4.799999999999997 2.0 1.0 29.799999999999997 322.2 7083.8 71.8 9.4 9.0 0.6 229.2 2.2]
Lexicase best number of elite cases: 11
Lexicase best total error: 8099.0
Lexicase best mean error: 269.96667
Lexicase best size: 33
Percent parens: 0.030
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction vector_integer_replace} {:close 0, :instruction vector_integer_swap} {:close 0, :instruction integer_add} {:close 0, :instruction float_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction float_mult} {:close 1, :instruction integer_yankdup} {:close 1, :instruction vector_integer_set} {:close 1, :instruction vector_integer_take} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_inc} {:close 1, :instruction float_dup} {:close 1, :instruction vector_integer_length} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction integer_pop} {:close 0, :instruction vector_integer_shove} {:close 1, :instruction float_div} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_replacefirst} {:close 0, :instruction float_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction vector_integer_replace} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 3, :instruction float_shove} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_add})
Zero cases best program: (vector_integer_replace vector_integer_swap integer_add float_div integer_stackdepth float_mult integer_yankdup vector_integer_set vector_integer_take float_frominteger float_inc float_dup vector_integer_length vector_integer_occurrencesof integer_yankdup integer_rot integer_fromfloat vector_integer_conj vector_integer_remove vector_integer_reverse integer_pop vector_integer_shove float_div integer_rot integer_rot vector_integer_butlast integer_sub vector_integer_replacefirst float_min integer_dup_items vector_integer_replace integer_mod vector_integer_nth vector_integer_yankdup float_inc vector_integer_last vector_integer_subvec float_min float_shove in1 vector_integer_pop vector_integer_occurrencesof float_add)
Zero cases best partial simplification: (integer_stackdepth float_frominteger float_inc float_inc)
Zero cases best errors: [1.0 5.2 1.0 8.6 3.2 1.8 1.6 1.4 0.19999999999999996 14.0 11.2 12.8 4.4 64.0 259.0 9.0 20.2 26.4 57.8 1.0 0.0 56.8 422.2 1916.2 84.8 10.4 13.0 1.6 83.8 1.2]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 1
Zero cases best total error: 3093.8
Zero cases best mean error: 103.12666
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 1 5 1 3 3 3 1 2 1 2 1 1 1 1 1 1 1 1 4 2 1 1 1 1 1 2 3 1 10)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_pop} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction 5} {:close 1, :instruction float_shove} {:close 0, :instruction float_tan} {:close 1, :instruction vector_integer_yank} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_mult} {:close 0, :instruction integer_mult} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_yank})
Best program: (float_pop float_dup vector_integer_occurrencesof 5 float_shove float_tan vector_integer_yank in1 vector_integer_length integer_pop vector_integer_dup vector_integer_butlast vector_integer_occurrencesof float_mult integer_mult float_frominteger float_shove float_dup_items float_inc float_yank)
Partial simplification: (5 float_frominteger float_inc)
Errors: [3.0 1.2000000000000002 3.0 4.6 0.7999999999999998 5.8 5.6 2.6 4.2 10.0 7.199999999999999 8.8 0.40000000000000036 60.0 255.0 5.0 16.2 22.4 53.8 3.0 4.0 52.8 418.2 1912.2 80.8 6.4 9.0 5.6 79.8 5.2]
Total: 3046.6000000000004
Mean: 101.55334
Genome size: 20
Size: 21
Percent parens: 0.048
--- Population Statistics ---
Average total errors in population: 283083.6052983533
Median total errors in population: 300000
Error averages by case: (9430.180454800939 9430.395770029949 9430.179454800938 9430.57697002994 9430.284370029947 9430.08751478711 9430.088412813999 9430.201170029954 9430.129970029946 9430.869170029946 9430.719612622226 9430.799570029943 9430.350170029953 9433.669170029945 9444.762454800939 9430.603170029946 9431.214797662089 9431.580170029953 9433.301770029944 9430.179055214496 9430.138170029946 9433.270770029943 9454.02557002995 9544.451170029948 9434.880770029944 9430.679170029953 9430.818612622223 9430.088412813999 9434.982170029945 9430.097284845397)
Error minima by case: (1.0 1.2000000000000002 1.0 4.4 0.20000000000000018 0.08366218546322624 0.11633781453677378 0.6000000000000001 0.19999999999999996 5.0 7.199999999999999 0.1999999999999993 0.40000000000000036 25.0 200.0 5.0 3.8000000000000007 2.3999999999999986 4.799999999999997 1.0 0.0 29.799999999999997 322.2 1892.2 60.8 6.4 9.0 0.11633781453677378 59.8 0.19999999999999996)
Average genome size in population (length): 25.658
Average program size in population (points): 26.633
Average percent parens in population: 0.058
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.996
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.995
Total error diversity:				 0.02
Error (vector) diversity:			 0.02
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 769740
--- Timings ---
Current time: 1481488991117 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_mult} {:close 2, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup integer_dup_items vector_integer_replace float_max integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj float_frominteger vector_integer_dup_times integer_min integer_stackdepth vector_integer_concat vector_integer_replacefirst float_mult vector_integer_replacefirst in1 vector_integer_dup)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc integer_dup integer_dup_items integer_mult integer_shove integer_inc float_frominteger vector_integer_concat)
Lexicase best errors: [1.0 6.2 0.0 2.5999999999999996 3.2 2.8 0.6 14.6 0.8 7.0 5.199999999999999 1.1999999999999993 5.4 15.0 220.0 9.0 15.2 18.6 2.799999999999997 3.0 1.0 54.8 31.80000000000001 1854.2 26.200000000000003 8.4 6.0 0.6 58.8 3.2]
Lexicase best number of elite cases: 6
Lexicase best total error: 2379.2
Lexicase best mean error: 79.30666
Lexicase best size: 50
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 5.6 15.6 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 3.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3092.0
Zero cases best mean error: 103.066666
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1 4 1 95 102 3 34 62 1 2 284 137 1 1 1 1 3 1 4 61 1 1 1 1 1 1 3 1 43)
Population mean number of elite cases: 0.85
Count of perfect (error zero) individuals by case: (2 0 4 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 4 61 0 0 0 0 0 1 0 0 0)
Population mean number of perfect (error zero) cases: 0.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Partial simplification: (in1 vector_integer_pushall float_frominteger float_frominteger float_frominteger)
Errors: [1.0 3.2 0.0 9.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 0.8]
Total: 2339.000000000001
Mean: 77.96667
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 114089.98522406467
Median total errors in population: 3149.0
Error averages by case: (934.478479494327 937.3771683242261 934.1748791123711 937.0012083334707 934.3247811531381 935.2399271892067 934.815094815355 934.6200680507233 934.4151254455445 939.7627844161648 938.6285264781135 937.4632083334657 935.5087486553427 986.6046776925662 1347.1095630219668 938.8388727935206 943.9791378187543 959.4796889576428 973.2212447041412 934.4769422489899 934.40852544555 975.3399850727133 1854.0254857862212 85181.93055220983 1000.8270083334799 938.8752689426417 939.8941264781246 934.808094815355 1143.2419551264434 935.1140948153543)
Error minima by case: (0.0 0.7999999999999998 0.0 2.5999999999999996 0.20000000000000018 0.08366218546322624 0.10847647425122842 0.6000000000000001 0.19999999999999996 2.0 5.199999999999999 0.1999999999999993 0.40000000000000036 0.0 61.0 0.0 1.1999999999999993 1.3999999999999986 2.799999999999997 0.0 0.0 28.799999999999997 31.80000000000001 82.79999999999995 26.200000000000003 2.4000000000000004 0.0 0.10847647425122842 50.2 0.19999999999999996)
Average genome size in population (length): 29.296
Average program size in population (points): 30.296
Average percent parens in population: 0.037
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 242
Genome diversity (% unique Plush genomes):	 0.304
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.304
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1648620
--- Timings ---
Current time: 1481488998175 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 vector_integer_dup_times float_flush vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 5.6 15.6 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 3.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3092.0
Lexicase best mean error: 103.066666
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof vector_integer_concat integer_inc integer_inc float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 5.6 15.6 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 3.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3092.0
Zero cases best mean error: 103.066666
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 5 293 6 39 19 52 1 125 73 1 111 1 73 1 73 80 27 1 59 97 2 2 1 2 2 87 52 5 153)
Population mean number of elite cases: 1.52
Count of perfect (error zero) individuals by case: (77 0 293 0 0 0 0 0 0 0 0 0 0 73 0 73 0 0 0 59 97 0 0 0 0 0 87 0 0 0)
Population mean number of perfect (error zero) cases: 0.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_dup_times} {:close 1, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction float_mult} {:close 2, :instruction vector_integer_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup integer_dup_items vector_integer_replace float_max integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat float_frominteger vector_integer_dup_times integer_min integer_stackdepth vector_integer_concat vector_integer_replacefirst float_mult vector_integer_replacefirst in1 vector_integer_dup)
Partial simplification: (in1 vector_integer_pushall float_mult integer_inc vector_integer_butlast integer_dup integer_dup_items integer_mult vector_integer_dup_items float_frominteger)
Errors: [1.0 3.2 1.0 9.4 2.8 1.8 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 0.8]
Total: 2332.8000000000006
Mean: 77.76
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2810498.428127276
Median total errors in population: 3119.4
Error averages by case: (1263.2370817537148 1268.3734288080514 1262.1522023554958 1276.8445417580783 1269.9575277189986 1262.5903330412611 1262.3903546973418 1266.012267467935 1262.5691735522919 1325.1863386286007 1272.469175429627 1293.946847128248 1265.3027896991316 2507.7356671946163 27382.57757707541 1299.2139308004512 1276.9215349371316 1428.2679258721241 2504.5991575999883 1264.266382161309 1262.4675896991278 1752.2806718489178 307613.75162609824 2434289.4631799906 1961.29650568348 1269.9022011345364 1284.9262139070488 1262.2827546973417 4324.715191840823 1262.727954697333)
Error minima by case: (0.0 0.20000000000000018 0.0 0.5999999999999996 0.20000000000000018 0.08366218546322624 0.10847647425122842 0.09391564547484021 0.19999999999999996 2.0 3.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 60.0 0.0 1.1999999999999993 1.3999999999999986 1.7999999999999972 0.0 0.0 21.799999999999997 27.80000000000001 81.79999999999995 22.200000000000003 0.5999999999999996 0.0 0.10847647425122842 19.799999999999997 0.19999999999999996)
Average genome size in population (length): 38.015
Average program size in population (points): 39.014
Average percent parens in population: 0.030
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.082
Error (vector) diversity:			 0.083
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2789070
--- Timings ---
Current time: 1481489006445 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_mult integer_shove integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 5.2 3.0 1.5999999999999996 2.2 1.8 1.6 15.6 0.19999999999999996 6.0 4.199999999999999 2.1999999999999993 4.4 14.0 219.0 8.0 14.2 19.6 1.7999999999999972 4.0 0.0 53.8 32.80000000000001 1853.2 27.200000000000003 5.6 7.0 1.6 57.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2368.7999999999997
Lexicase best mean error: 78.96
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_mod vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 vector_integer_dup_times integer_mod vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 5.6 1.4 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 3.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3077.8
Zero cases best mean error: 102.59333
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 26 98 2 29 36 66 1 95 3 1 77 16 65 1 65 38 25 50 29 86 32 67 32 67 68 48 66 54 1)
Population mean number of elite cases: 1.35
Count of perfect (error zero) individuals by case: (103 0 98 0 0 0 0 0 0 0 0 0 0 65 0 65 0 0 0 29 86 0 0 0 0 0 48 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_yankdup})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap vector_integer_flush float_yankdup float_tan vector_integer_first float_frominteger integer_yankdup)
Partial simplification: (in1 vector_integer_pushall integer_inc integer_dup_items float_tan integer_dup float_frominteger float_frominteger integer_shove vector_integer_remove float_dup_times float_yankdup vector_integer_first float_frominteger)
Errors: [2.0 3.2 2.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 3.5999999999999996 0.0 0.4 76.8 0.8]
Total: 2318.2000000000007
Mean: 77.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1151380.7022763328
Median total errors in population: 3079.3
Error averages by case: (1284.3954452829555 1288.9550219901457 1283.6920059499464 1292.1755412803811 1289.6797260129495 1283.4936605799494 1283.4464768524886 1286.4017427451713 1283.7737261563748 1325.70467473986 1291.0766838975062 1302.6955441044554 1286.3219741350954 1824.889776967022 15660.384512090459 1309.719122109499 1298.7899892138228 1366.5532929897395 1848.0379371175018 1285.0884036661491 1283.9634899875502 1662.5722702225191 41411.300268828265 1056388.2215919325 1460.3122828964622 1288.6497365461114 1297.0050457116367 1283.3636343752316 2646.3873658983525 1283.6513320648153)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.08366218546322624 0.10847647425122842 0.013548836761276384 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 59.0 0.0 1.1999999999999993 1.3999999999999986 1.7999999999999972 0.0 0.0 21.799999999999997 27.80000000000001 81.79999999999995 22.200000000000003 0.5999999999999996 0.0 0.10847647425122842 19.799999999999997 0.15780710799893982)
Average genome size in population (length): 38.879
Average program size in population (points): 39.879
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 62
Genome diversity (% unique Plush genomes):	 0.435
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.435
Total error diversity:				 0.109
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3955440
--- Timings ---
Current time: 1481489014826 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_mult integer_shove integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 5.2 3.0 1.5999999999999996 2.2 1.8 1.6 15.6 0.19999999999999996 6.0 4.199999999999999 2.1999999999999993 4.4 14.0 219.0 8.0 14.2 19.6 1.7999999999999972 4.0 0.0 53.8 32.80000000000001 1853.2 27.200000000000003 5.6 7.0 1.6 57.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2368.7999999999997
Lexicase best mean error: 78.96
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 33
Percent parens: 0.030
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 29 79 34 39 1 1 23 128 39 15 77 14 38 49 38 31 26 54 24 124 1 1 26 1 2 42 1 35 1)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (92 0 79 0 0 0 0 0 0 0 0 0 0 38 0 38 0 0 0 24 124 0 0 0 0 0 42 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_yankdup})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap vector_integer_flush float_yankdup float_tan vector_integer_first float_frominteger integer_yankdup)
Partial simplification: (in1 vector_integer_pushall integer_inc integer_dup_items vector_integer_length integer_dup float_frominteger float_frominteger integer_shove float_dup_times float_yankdup float_frominteger)
Errors: [2.0 3.2 2.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 3.5999999999999996 0.0 0.4 76.8 0.8]
Total: 2318.2000000000007
Mean: 77.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 587337.7050488333
Median total errors in population: 3116.3282436240233
Error averages by case: (1543.7418511838944 1558.7773618660015 1543.4594430076718 1550.6405240096499 1548.8506855945045 1553.3103222213954 1543.3910173099455 1546.7110854012658 1543.4479117919407 1580.048224849552 1550.134347932697 1559.923067297338 1546.1641702989123 2001.7171116908448 13819.008102901267 1566.7047211969302 1556.8734711382342 1600.9803428087068 2027.348275162157 1544.8400654320783 1543.7847779904662 1899.1809598948296 35192.656310215294 494295.2879044143 1677.143090621569 1547.7485966739612 1555.0524509094348 1543.2414474107811 2244.1421567522298 1553.3952508516577)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.07987335076852736 0.09992726145842551 0.013548836761276384 0.19999999999999996 1.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 59.0 0.0 1.1999999999999993 1.3999999999999986 1.7999999999999972 0.0 0.0 9.799999999999997 2.8000000000000114 81.79999999999995 21.200000000000003 0.40000000000000036 0.0 0.09992726145842551 19.799999999999997 0.045784528750545284)
Average genome size in population (length): 39.421
Average program size in population (points): 40.421
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.123
Error (vector) diversity:			 0.125
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5138070
--- Timings ---
Current time: 1481489022960 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult integer_fromfloat in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_mult integer_shove integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 5.2 3.0 1.5999999999999996 2.2 1.8 1.6 15.6 0.19999999999999996 6.0 4.199999999999999 2.1999999999999993 4.4 14.0 219.0 8.0 14.2 19.6 1.7999999999999972 4.0 0.0 53.8 32.80000000000001 1853.2 27.200000000000003 5.6 7.0 1.6 57.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2368.7999999999997
Lexicase best mean error: 78.96
Lexicase best size: 40
Percent parens: 0.025
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 33
Percent parens: 0.030
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 36 74 40 34 22 40 23 98 2 17 75 19 40 37 40 1 34 37 33 98 1 31 26 1 52 52 40 1 17)
Population mean number of elite cases: 1.10
Count of perfect (error zero) individuals by case: (77 0 74 0 0 0 0 0 0 2 0 0 0 40 0 40 0 0 0 33 98 0 0 0 0 0 52 0 0 0)
Population mean number of perfect (error zero) cases: 0.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_yank} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_mult} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_yank float_mult integer_inc vector_integer_butlast integer_inc vector_integer_conj float_mult vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Partial simplification: (vector_integer_rot vector_integer_take in1 vector_integer_pushall integer_inc integer_dup integer_inc integer_mod integer_sub integer_shove integer_stackdepth integer_sub float_frominteger)
Errors: [4.0 6.2 3.0 6.4 7.2 3.2 3.4 10.6 4.8 3.0 8.2 2.8000000000000007 9.4 1.0 224.0 1.0 20.2 30.4 6.799999999999997 1.0 5.0 58.8 27.80000000000001 1421.2 22.200000000000003 0.5999999999999996 2.0 3.4 79.8 3.8]
Total: 1981.2
Mean: 66.04
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 606630.2105822811
Median total errors in population: 3132.1979633208366
Error averages by case: (1384.2728955451723 1392.4035810073085 1383.8390618841124 1391.9551347449833 1390.234503802536 1384.0116398472658 1384.2138354038887 1387.3856269030537 1384.2561862293428 1430.1547776670009 1390.8349493989663 1404.1653664319363 1386.8508095696502 2512.609787061861 17614.813676176407 1414.027872972521 1397.2981879512504 1545.6724898621076 2106.34575687348 1384.8307692143333 1384.5009724357308 2016.3780252570975 38886.69185034127 507976.3645375604 1527.9103159252668 1388.9330882753295 1395.755103759685 1384.0633694523985 3215.2291307541473 1384.2072799702867)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.07987335076852736 0.09992726145842551 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 59.0 0.0 0.9783343732917906 1.3999999999999986 1.7999999999999972 0.0 0.0 1.7999999999999972 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.09992726145842551 18.799999999999997 0.045784528750545284)
Average genome size in population (length): 40.753
Average program size in population (points): 41.753
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.14
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6360660
--- Timings ---
Current time: 1481489031061 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (float_swap in1 vector_integer_pushall integer_mult integer_shove integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 5.2 3.0 1.5999999999999996 2.2 1.8 1.6 15.6 0.19999999999999996 6.0 4.199999999999999 2.1999999999999993 4.4 14.0 219.0 8.0 14.2 19.6 1.7999999999999972 4.0 0.0 53.8 32.80000000000001 1853.2 27.200000000000003 5.6 7.0 1.6 57.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2368.7999999999997
Lexicase best mean error: 78.96
Lexicase best size: 38
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 33
Percent parens: 0.030
--- Lexicase Population Statistics ---
Count of elite individuals by case: (66 30 79 41 38 1 39 31 112 30 26 67 16 50 38 51 24 20 37 48 135 49 21 32 23 30 44 39 27 1)
Population mean number of elite cases: 1.25
Count of perfect (error zero) individuals by case: (66 0 79 0 0 0 0 0 0 30 0 0 0 50 0 51 0 0 0 48 135 0 0 0 0 0 44 0 0 0)
Population mean number of perfect (error zero) cases: 0.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_yankdup})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap vector_integer_flush float_yankdup float_tan vector_integer_first float_frominteger integer_yankdup)
Partial simplification: (in1 vector_integer_pushall integer_inc integer_dup_items vector_integer_remove integer_dup float_frominteger float_frominteger integer_shove float_dup_times float_yankdup float_frominteger)
Errors: [2.0 3.2 2.0 9.4 2.8 0.2 0.4 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 4.0 17.2 5.399999999999999 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 3.5999999999999996 0.0 0.4 76.8 0.8]
Total: 2318.2000000000007
Mean: 77.27333
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 363465.0776964393
Median total errors in population: 3132.1979633208366
Error averages by case: (1253.3742083481297 1259.365556158308 1253.4868682866356 1266.4845141202584 1257.6678365167313 1252.7611251781682 1252.6982955091598 1255.71655458786 1253.2047349415361 1294.1751739863087 1262.2096199497373 1279.5397556067048 1256.660863069234 1850.5761817270295 10450.368892481394 1274.8325361378365 1267.1929125020588 1317.7752196327922 1894.9485395340519 1254.9151534905393 1253.1054806771888 1599.299594210356 45547.08511180592 270902.45378337003 1674.9366003735088 1263.6519647393109 1277.8379060140328 1252.5719808199337 1733.534481308347 1252.646251355282)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.027730851647380123 0.09992726145842551 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 59.0 0.0 0.9783343732917906 1.3999999999999986 1.7999999999999972 0.0 0.0 1.7999999999999972 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.09992726145842551 18.799999999999997 0.04147098480789646)
Average genome size in population (length): 40.734
Average program size in population (points): 41.732
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7582680
--- Timings ---
Current time: 1481489039197 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_mod vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger integer_mult vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 vector_integer_dup_times integer_mod vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 5.6 1.4 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 3.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3077.8
Lexicase best mean error: 102.59333
Lexicase best size: 46
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 26
Percent parens: 0.038
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 27 61 52 30 24 1 22 157 21 14 73 31 36 1 39 21 26 1 42 138 33 21 26 34 15 41 1 2 28)
Population mean number of elite cases: 1.09
Count of perfect (error zero) individuals by case: (76 0 61 0 0 0 0 0 0 21 0 0 0 36 0 39 0 0 0 42 138 0 0 0 0 0 41 0 0 0)
Population mean number of perfect (error zero) cases: 0.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (float_rot in1 vector_integer_pushall float_stackdepth integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 7.2 1.0 5.4 1.2000000000000002 0.2 0.4 13.6 1.8 2.0 6.199999999999999 0.1999999999999993 6.4 0.0 65.0 0.0 16.2 17.6 25.200000000000003 2.0 2.0 43.8 566.8 1422.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 2303.2000000000003
Mean: 76.77333
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 524080.1261445038
Median total errors in population: 3132.384549057409
Error averages by case: (1493.4980333800336 1497.9361221784245 1493.685163449962 1504.7297996596926 1496.929351628975 1502.872513164889 1502.855779495737 1505.4354217178745 1503.1041281418354 1525.5736235206352 1501.664402813914 1513.6360749962469 1496.5875911321525 1941.6674869497638 8847.565654146867 1510.7452156146078 1508.032078863286 1546.1143391100354 1979.1812011340278 1504.6629947284707 1493.4759462930951 1733.4580269029493 35734.46074881319 436780.5667424524 1825.5377290757992 1502.7039503170831 1512.9520485418684 1502.7814592740635 2114.8175950887157 1502.8949219151862)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.027730851647380123 0.03909515690428378 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 58.0 0.0 0.9783343732917906 1.3999999999999986 1.2000000000000028 0.0 0.0 1.7999999999999972 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.03909515690428378 11.114066601234626 0.04147098480789646)
Average genome size in population (length): 40.743
Average program size in population (points): 41.741
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.157
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8804970
--- Timings ---
Current time: 1481489047270 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_pushall float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 integer_mult vector_integer_dup_times integer_mod vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_shove integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger integer_mult vector_integer_indexof vector_integer_dup_items)
Lexicase best partial simplification: (float_rot in1 vector_integer_pushall vector_integer_dup_items in1 integer_mult vector_integer_dup_times integer_mod vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 1.6 1.4 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3071.8
Lexicase best mean error: 102.39333
Lexicase best size: 46
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 33
Percent parens: 0.030
--- Lexicase Population Statistics ---
Count of elite individuals by case: (48 46 74 31 23 16 43 20 78 15 21 130 26 43 1 48 18 1 1 42 85 2 24 37 25 25 52 43 32 24)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (48 0 74 0 0 0 0 0 0 15 0 0 0 43 0 48 0 0 0 42 85 0 0 0 0 0 52 0 0 0)
Population mean number of perfect (error zero) cases: 0.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_div float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall vector_integer_occurrencesof integer_div float_stackdepth float_stackdepth integer_dec integer_mod integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 2.0 6.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 1.0 224.0 1.0 16.2 17.6 29.200000000000003 2.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2074.8
Mean: 69.16
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 448012.34541537205
Median total errors in population: 3141.000000000001
Error averages by case: (1605.7431635764713 1620.8330490027795 1615.7348727840829 1626.304029062789 1619.8280841874268 1625.137149066973 1615.3058851135886 1638.253666213925 1605.5673189362396 1652.479073870917 1623.7587268038458 1637.710958234595 1609.382746453842 2137.0583466448547 11276.467641818432 1635.9936881683716 1629.4074397219365 1660.7708914192515 2166.4966311173807 1627.1090782635652 1625.650435417067 1938.0423815607571 39216.549098567426 351288.609871758 2049.275081748601 1625.1699151353619 1636.5396761873637 1625.287830331097 2162.63997809361 1615.2387061093095)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.027730851647380123 0.03909515690428378 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 50.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.03909515690428378 11.114066601234626 0.04147098480789646)
Average genome size in population (length): 40.507
Average program size in population (points): 41.506
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.157
Error (vector) diversity:			 0.164
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10020180
--- Timings ---
Current time: 1481489055448 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 3, :instruction float_shove} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup vector_integer_butlast float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_nth integer_max vector_integer_yankdup float_stackdepth float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove integer_yankdup float_mult vector_integer_last vector_integer_subvec float_min float_shove in1 vector_integer_pop vector_integer_occurrencesof float_add)
Lexicase best partial simplification: (vector_integer_take in1 vector_integer_pushall integer_pop integer_max float_stackdepth float_frominteger float_frominteger)
Lexicase best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.2 1.6 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3138.8
Lexicase best mean error: 104.62666
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 36
Percent parens: 0.028
--- Lexicase Population Statistics ---
Count of elite individuals by case: (61 28 81 68 68 13 38 26 99 30 29 118 21 45 19 50 22 20 48 38 105 34 29 27 26 27 49 38 30 26)
Population mean number of elite cases: 1.31
Count of perfect (error zero) individuals by case: (61 0 81 0 0 0 0 0 0 30 0 0 0 45 0 50 0 0 0 38 105 0 0 0 0 0 49 0 0 0)
Population mean number of perfect (error zero) cases: 0.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 float_rot float_sin float_mult float_pop integer_rot float_dup vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_div float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_div vector_integer_take float_stackdepth integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 2.0 6.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 1.0 224.0 1.0 16.2 17.6 29.200000000000003 2.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2074.8
Mean: 69.16
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 279956.49979006
Median total errors in population: 3226.4000000000005
Error averages by case: (1595.2886777838467 1601.4428976042495 1595.1805748648387 1605.0770830212653 1598.8849574412413 1634.2101456343064 1635.721557519444 1638.5946319503817 1605.9442516884637 1628.3228994633814 1608.391833213273 1617.192798101034 1599.1731204829855 2052.687604193922 9493.498680458382 1614.6556170919278 1621.2029919659271 1648.475291132196 2027.6238746697031 1637.605591594847 1625.8438291789912 1899.246276224009 26370.39148199229 198184.90912310113 2316.435226510225 1612.6412357153365 1619.0602860013294 1635.6072566305386 1998.7279070039806 1634.462087824348)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.027730851647380123 0.03909515690428378 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 50.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.7999999999999972 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.03909515690428378 11.114066601234626 0.04147098480789646)
Average genome size in population (length): 41.267
Average program size in population (points): 42.267
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.162
Error (vector) diversity:			 0.167
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11258190
--- Timings ---
Current time: 1481489063557 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_rot float_swap vector_integer_take float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_rest vector_integer_length integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 37
Percent parens: 0.027
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 45 84 54 61 21 1 17 81 28 25 112 29 41 25 49 20 18 33 37 88 1 20 24 26 29 42 1 21 22)
Population mean number of elite cases: 1.13
Count of perfect (error zero) individuals by case: (74 0 84 0 0 0 0 0 0 28 0 0 0 41 0 49 0 0 0 37 88 0 0 0 0 0 42 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction integer_div} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_sin float_mult float_pop integer_rot float_dup vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_div float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall vector_integer_occurrencesof integer_div float_stackdepth integer_sub vector_integer_conj integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 2.0 6.4 2.8 0.2 0.4 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 1.0 224.0 1.0 16.2 17.6 29.200000000000003 2.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2074.8
Mean: 69.16
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 318745.6607454849
Median total errors in population: 3141.000000000001
Error averages by case: (1434.682003080287 1439.8659923864984 1434.8486629166846 1443.21742102823 1436.9194793137742 1483.6334274084043 1485.023312657136 1487.9944759590817 1445.383074625672 1458.476722703054 1450.1339184965952 1454.0532161802366 1448.1538408410543 1767.8351427347209 5885.303914551164 1448.5511085666965 1466.5487003617916 1491.017020812167 1722.5003261550708 1476.9326473142069 1485.1934820950369 1646.7261136661205 15057.446147836594 256285.95702233945 2305.030720704183 1455.9996220213677 1460.0812794430274 1484.8934210556506 1919.5225090690572 1483.7360191598532)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.20000000000000018 0.027730851647380123 0.018878744412701987 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 50.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.018878744412701987 11.114066601234626 0.04147098480789646)
Average genome size in population (length): 41.581
Average program size in population (points): 42.58
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.187
Error (vector) diversity:			 0.192
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12505620
--- Timings ---
Current time: 1481489071720 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (integer_add vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall integer_rot vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 3, :instruction float_shove} {:close 1, :instruction in1} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_add})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup vector_integer_butlast float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_nth integer_max vector_integer_yankdup float_stackdepth float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove integer_yankdup float_mult vector_integer_last vector_integer_subvec float_min float_shove in1 vector_integer_pop vector_integer_occurrencesof float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_pop integer_max float_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.2 1.6 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3138.8
Zero cases best mean error: 104.62666
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (61 45 85 60 1 11 1 25 109 21 60 108 24 43 24 47 23 28 42 78 113 47 19 23 30 23 43 1 1 18)
Population mean number of elite cases: 1.21
Count of perfect (error zero) individuals by case: (61 0 85 0 0 0 0 0 0 21 0 0 0 43 0 47 0 0 0 78 113 0 0 0 0 0 43 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (float_swap in1 vector_integer_pushall float_stackdepth integer_max integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 422338.34133638977
Median total errors in population: 3150.5381963517866
Error averages by case: (1404.9016977641002 1410.8443675196452 1404.9642150507987 1416.9660689548878 1407.299352247436 1463.4957708841148 1465.6326152577424 1448.35015280979 1426.149239794643 1432.5276230419283 1424.1221427570704 1429.912924785273 1429.684411980905 1906.0728943870834 6582.864122457279 1420.2008458449197 1442.109745184124 1464.8613166469984 1813.9994860232594 1447.594549174702 1465.7441822482692 1647.7022807765707 16430.99949373668 356528.1329126437 3798.7567316340637 1432.6558879255822 1440.2377786950653 1465.549879957901 2022.214193580934 1463.7944526228332)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 50.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 40.847
Average program size in population (points): 41.845
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.197
Error (vector) diversity:			 0.201
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13731030
--- Timings ---
Current time: 1481489079769 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 5
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_mod} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_mult} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_pushall float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 integer_mult vector_integer_dup_times integer_mod vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_shove integer_inc float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger integer_mult vector_integer_indexof vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 integer_mult vector_integer_dup_times integer_mod vector_integer_pushall vector_integer_occurrencesof vector_integer_concat integer_inc float_mult integer_inc float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 1.6 1.4 0.19999999999999996 13.0 10.2 10.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 1.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 1.6 82.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3071.8
Zero cases best mean error: 102.39333
Zero cases best size: 46
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (56 39 90 41 29 22 33 22 79 22 55 131 30 51 1 61 22 21 27 53 83 34 33 25 28 27 50 33 26 29)
Population mean number of elite cases: 1.25
Count of perfect (error zero) individuals by case: (56 0 90 0 0 0 0 0 0 22 0 0 0 51 0 61 0 0 0 53 83 0 0 0 0 0 50 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 280821.12975257816
Median total errors in population: 3138.8
Error averages by case: (1303.6868807957815 1308.6556842356333 1303.891236958435 1323.9770828887886 1309.3121520029563 1382.485736195988 1373.067262883456 1326.6528578015605 1343.69857342102 1340.3249226442624 1322.8411275853553 1330.3027850054232 1346.8825754476072 1769.5918670805322 6624.4624954214705 1322.6678564095278 1340.2019568858436 1350.7099741643065 1802.1456228246625 1325.2739095463883 1373.518732579331 1502.0798581293184 40557.04584313878 194992.81271844427 2421.7207200502016 1329.8063130563742 1337.9409835326444 1372.9849965396604 1699.7137366836819 1382.6732902236483)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.19999999999999996 0.0 0.1999999999999993 0.1999999999999993 0.10709748834542143 0.0 45.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 40.032
Average program size in population (points): 41.03
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.191
Error (vector) diversity:			 0.196
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14931990
--- Timings ---
Current time: 1481489087942 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 1, :instruction 5} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_rot} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_indexof vector_integer_flush integer_dup vector_integer_length 5 float_rot 5 float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_stackdepth vector_integer_remove integer_rot float_yankdup float_stackdepth integer_dec vector_integer_set vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (5 integer_dup 5 integer_stackdepth float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 40
Percent parens: 0.025
--- Lexicase Population Statistics ---
Count of elite individuals by case: (48 38 81 60 31 18 57 22 1 17 37 109 1 49 25 65 30 35 28 54 89 38 24 22 26 28 42 57 22 27)
Population mean number of elite cases: 1.18
Count of perfect (error zero) individuals by case: (48 0 81 0 0 0 0 0 0 17 0 0 0 49 0 65 0 0 0 54 89 0 0 0 0 0 42 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (vector_integer_pushall in1 vector_integer_pushall float_stackdepth integer_max integer_sub float_cos integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 441004.2151299098
Median total errors in population: 3134.2235361538733
Error averages by case: (1224.1720934430734 1230.2206310294434 1214.2832235393387 1233.0571283577403 1241.6953469608957 1292.530111650974 1283.441791187952 1248.3023695410602 1254.5522383800064 1253.5272621199083 1236.3420461831124 1242.4043275256208 1257.2988893363909 1740.5579772982037 7044.945694589636 1245.058568163672 1262.309032778521 1277.865511752434 1721.8943915007055 1255.954791976044 1294.0614577844963 1468.6251098674059 36524.61654673571 360618.8480074942 2415.5828326596124 1241.4188246171273 1249.4687442886484 1283.3684999570671 1855.0625919909037 1292.7490871988248)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.16003693029466137 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 45.0 0.0 0.9783343732917906 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 40.328
Average program size in population (points): 41.328
Average percent parens in population: 0.026
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.199
Error (vector) diversity:			 0.201
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16141830
--- Timings ---
Current time: 1481489095976 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction integer_div} {:close 0, :instruction float_yankdup} {:close 0, :instruction float_yank} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_dup_items} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_dup_items in1 float_rot vector_integer_butlast float_yank integer_div float_yankdup float_yank vector_integer_replace float_dup_items integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger float_frominteger vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_dup_items in1 integer_div vector_integer_replace vector_integer_pushall integer_mult integer_shove integer_inc float_mult integer_inc float_frominteger)
Zero cases best errors: [1.0 5.2 0.0 2.5999999999999996 3.2 1.8 1.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 64.0 259.0 9.0 19.2 26.4 56.8 0.0 0.0 56.8 421.2 1791.2 82.8 8.4 12.0 1.6 83.8 1.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2949.8
Zero cases best mean error: 98.32667
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (51 55 77 53 33 26 52 24 1 18 47 117 20 36 14 51 1 22 27 63 81 45 27 21 25 28 40 52 22 24)
Population mean number of elite cases: 1.15
Count of perfect (error zero) individuals by case: (51 0 77 0 0 0 0 0 0 18 0 0 0 36 0 51 0 0 0 63 81 0 0 0 0 0 40 0 0 0)
Population mean number of perfect (error zero) cases: 0.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (float_swap in1 vector_integer_pushall float_stackdepth integer_max integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 178632.8927968681
Median total errors in population: 3129.5653020520895
Error averages by case: (1363.4962719632824 1367.7615139001048 1353.4811065301217 1379.1142776013937 1368.3446663311631 1352.4213107943613 1353.2841738101936 1357.823815041548 1354.0754393917562 1393.2338324419861 1378.4485267858959 1383.6484405413514 1356.633216773403 1713.5386409352825 6068.069646927729 1379.5849640177057 1393.1884166204807 1399.916255975325 1757.8155980216213 1365.1194544155974 1353.7996471097306 1530.730535859124 34293.80414705053 99432.1418835047 2090.982527640381 1381.6765444089665 1388.3553995774791 1353.139988427378 1616.6765308232023 1352.586023646265)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.09802688722064246 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 45.0 0.0 0.8000000000000007 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 39.077
Average program size in population (points): 40.077
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.205
Error (vector) diversity:			 0.209
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17314140
--- Timings ---
Current time: 1481489104161 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_items} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_last} {:close 0, :instruction vector_integer_subvec})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min float_dup_items vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup vector_integer_butlast float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_nth integer_max vector_integer_yankdup float_stackdepth float_frominteger float_cos float_frominteger vector_integer_yank integer_dec integer_yankdup float_mult vector_integer_last vector_integer_subvec)
Zero cases best partial simplification: (vector_integer_pushall in1 vector_integer_pushall integer_pop integer_max float_stackdepth float_frominteger float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 3.8 0.2 1.6 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 739.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 178.2 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 3138.8
Zero cases best mean error: 104.62666
Zero cases best size: 42
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (45 54 76 66 20 24 44 22 24 33 47 111 31 43 1 68 2 26 31 56 80 37 26 28 17 29 46 44 23 18)
Population mean number of elite cases: 1.17
Count of perfect (error zero) individuals by case: (45 0 76 0 0 0 0 0 0 33 0 0 0 43 0 68 0 0 0 56 80 0 0 0 0 0 46 0 0 0)
Population mean number of perfect (error zero) cases: 0.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth integer_max integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 359202.76440234587
Median total errors in population: 3136.8346957157682
Error averages by case: (1183.7239070902558 1199.1982998281594 1183.9052394781897 1202.3933792835999 1191.0206804113468 1192.183754952329 1192.8803986125668 1186.7876919731225 1194.0609010162038 1227.6359787740257 1205.8237695997182 1213.593489276191 1197.1186883036812 1742.2351848991063 10766.63363430615 1207.2540892876377 1226.557993428099 1237.6827134809776 1780.3971193833454 1185.8400595399228 1193.439399646913 1484.2795263667197 46933.12187853495 265979.78512847377 2392.402523588331 1212.1391313857805 1221.025900891654 1192.7912645303954 1684.4915325165368 1192.3611434840846)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.09802688722064246 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 21.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.04147098480789646)
Average genome size in population (length): 39.275
Average program size in population (points): 40.275
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.2
Error (vector) diversity:			 0.205
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 18492390
--- Timings ---
Current time: 1481489112239 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_mod integer_max float_frominteger)
Lexicase best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2310.8000000000006
Lexicase best mean error: 77.026665
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mod integer_max float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2310.8000000000006
Zero cases best mean error: 77.026665
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (68 42 81 68 25 17 44 24 31 30 35 127 26 39 23 56 20 21 38 45 110 40 23 24 23 21 50 44 25 1)
Population mean number of elite cases: 1.22
Count of perfect (error zero) individuals by case: (68 0 81 0 0 0 0 0 0 30 0 0 0 39 0 56 0 0 0 45 110 0 0 0 0 0 50 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (vector_integer_subvec in1 vector_integer_pushall float_stackdepth integer_max integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 537204.9048730929
Median total errors in population: 3129.7469534478223
Error averages by case: (1342.977325783942 1347.4479575141654 1342.8058826142567 1360.357255969557 1349.6485139726256 1362.054006583217 1352.8534390897807 1367.8401529619368 1353.196570978914 1384.7198229528838 1353.0157736246078 1365.9564553052473 1355.715187674685 2042.1459131089946 17870.374959397628 1364.6266769474832 1360.779150651729 1381.058808355002 2249.1412482738206 1344.8985937201626 1353.1431754324854 1603.9098635606285 303708.07140737755 176392.86060682265 1829.074241892822 1352.560782643509 1364.8880551158575 1352.715974497059 1653.817647455612 1342.2494228145836)
Error minima by case: (0.0 0.20000000000000018 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.09802688722064246 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 21.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 8.760652064929417 0.40000000000000036 0.0 0.005903644717491219 4.799999999999997 0.038373510107375886)
Average genome size in population (length): 39.009
Average program size in population (points): 40.004
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.212
Error (vector) diversity:			 0.215
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 19662660
--- Timings ---
Current time: 1481489120455 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 37
Percent parens: 0.027
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mod integer_max float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2310.8000000000006
Zero cases best mean error: 77.026665
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 1 85 54 27 20 47 31 20 22 41 153 29 49 33 68 18 22 24 48 93 36 19 26 1 27 64 47 1 21)
Population mean number of elite cases: 1.21
Count of perfect (error zero) individuals by case: (78 0 85 0 0 0 0 0 0 22 0 0 0 49 0 68 0 0 0 48 93 0 0 0 0 0 64 0 0 0)
Population mean number of perfect (error zero) cases: 0.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_stackdepth integer_max vector_integer_rest integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 423418.1113392796
Median total errors in population: 3129.5653020520895
Error averages by case: (1193.2769826073056 1198.4746119546496 1193.1207007994701 1210.4934966945102 1199.1986771854029 1202.436791275417 1193.056626145629 1207.349385320735 1203.4394423567899 1230.0679053007402 1202.7396924495904 1212.780537239834 1206.1977710586436 1608.506515370903 9215.54491640953 1214.2172052675642 1211.0799657462337 1243.971627282645 1671.7084043510479 1194.7031557921955 1203.5863111243184 1475.9023227975886 41567.43557328851 338135.924222593 1503.2318812561139 1202.0002224271575 1211.5341992269705 1202.9528332225418 1710.548860788404 1192.630501943682)
Error minima by case: (0.0 0.15265426707723062 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.09802688722064246 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 21.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 3.799999999999997 0.038373510107375886)
Average genome size in population (length): 39.167
Average program size in population (points): 40.165
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.205
Error (vector) diversity:			 0.208
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 20837670
--- Timings ---
Current time: 1481489128671 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Lexicase best partial simplification: (float_swap vector_integer_length in1 vector_integer_pushall float_stackdepth vector_integer_dup_items integer_mod integer_max float_frominteger)
Lexicase best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2310.8000000000006
Lexicase best mean error: 77.026665
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_length integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth vector_integer_dup_items integer_mod integer_max float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2310.8000000000006
Zero cases best mean error: 77.026665
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 24 84 60 31 17 52 23 1 21 52 145 19 39 1 54 28 21 33 62 110 49 21 19 29 24 34 52 24 1)
Population mean number of elite cases: 1.24
Count of perfect (error zero) individuals by case: (114 0 84 0 0 0 0 0 0 21 0 0 0 39 0 54 0 0 0 62 110 0 0 0 0 0 34 0 0 0)
Population mean number of perfect (error zero) cases: 0.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 float_flush vector_integer_pushall float_stackdepth integer_dec integer_max integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 599845.7557134571
Median total errors in population: 3129.5653020520895
Error averages by case: (1243.0784621380462 1248.8073931125423 1242.7150769952148 1261.45272550358 1249.656750877432 1242.3006719278924 1242.873439961756 1245.8701239191792 1243.2954994094418 1284.1485288735405 1253.818124303155 1264.0463904874746 1245.8513100440478 1712.7736780176538 12674.3829937052 1266.7469061850963 1267.8909370977499 1299.8633109204764 1807.6566161830858 1244.9875933303556 1243.2049736201143 1613.2127977899725 50545.32811473429 500365.95825530455 1593.5526175461548 1251.8810364381739 1262.543447008435 1242.7213461478557 1942.5145707490567 1242.6220211239895)
Error minima by case: (0.0 0.15265426707723062 0.0 0.40000000000000036 0.08366218546322646 0.027730851647380123 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 3.799999999999997 0.003764687801220079)
Average genome size in population (length): 39.28
Average program size in population (points): 40.28
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.571
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.192
Error (vector) diversity:			 0.198
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 22016070
--- Timings ---
Current time: 1481489136982 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dup_times integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_first integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth vector_integer_dup_items integer_mod integer_max float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2310.8000000000006
Zero cases best mean error: 77.026665
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (75 21 77 64 36 1 51 27 15 24 56 127 21 24 30 36 16 20 42 60 94 60 21 24 27 21 44 51 24 36)
Population mean number of elite cases: 1.23
Count of perfect (error zero) individuals by case: (75 0 77 0 0 0 0 0 0 24 0 0 0 24 0 36 0 0 0 60 94 0 0 0 0 0 44 0 0 0)
Population mean number of perfect (error zero) cases: 0.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat integer_fromfloat integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_stackdepth integer_max integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 444278.02732903254
Median total errors in population: 3129.5653020520895
Error averages by case: (1402.879332152019 1408.4049992516618 1402.6605387969978 1421.5392099268133 1408.9361595394737 1402.0747557752827 1412.8237337827884 1416.5971395353158 1413.0524433498247 1442.9219445864564 1414.820704358716 1423.5455417357593 1416.2826930152385 1859.1086912471735 10647.838567933126 1425.85226415265 1434.3706004926648 1458.7337864519793 1931.7005341124068 1414.837082618062 1413.3426773856036 1710.2248016888946 45843.23717420188 347417.5920932026 1756.9197152992879 1411.6840673054473 1421.5175854742051 1412.7018008603945 1929.5649862909177 1402.2617045068862)
Error minima by case: (0.0 0.15265426707723062 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 2.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 3.799999999999997 0.003764687801220079)
Average genome size in population (length): 38.93
Average program size in population (points): 39.928
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.195
Error (vector) diversity:			 0.196
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 23183970
--- Timings ---
Current time: 1481489145137 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_rot float_swap vector_integer_take vector_integer_first float_min vector_integer_length vector_integer_stackdepth integer_yankdup vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_mult integer_inc vector_integer_butlast integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_yankdup float_stackdepth vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall vector_integer_occurrencesof integer_mult vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc integer_max vector_integer_yankdup float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 9.2 6.0 5.199999999999999 0.1999999999999993 11.6 4.0 61.0 4.0 17.2 42.6 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2377.2000000000003
Zero cases best mean error: 79.24
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 19 75 51 25 26 58 20 29 17 40 129 23 41 21 58 29 29 33 39 88 40 1 16 22 30 40 58 1 26)
Population mean number of elite cases: 1.16
Count of perfect (error zero) individuals by case: (72 0 75 0 0 0 0 0 0 17 0 0 0 41 0 58 0 0 0 39 88 0 0 0 0 0 40 0 0 0)
Population mean number of perfect (error zero) cases: 0.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_inc} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take integer_inc float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_stackdepth integer_max float_min integer_sub integer_sub vector_integer_conj integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 356007.4192153394
Median total errors in population: 3129.5653020520895
Error averages by case: (1243.5053308226734 1259.2055540203312 1253.1867483409912 1272.0897635692213 1250.4508610293708 1252.365103705121 1253.2657249541546 1256.9068366473202 1253.8745609568175 1296.494667789889 1266.4946291427837 1276.866690560581 1256.9429117999873 1760.8379919489491 12393.951318565296 1267.9057087614046 1281.670357176729 1308.9704803397788 1833.9564893524202 1255.6331641847598 1253.6996703805692 1648.5880280904555 49485.83097459822 257643.91563086497 1747.898458572581 1265.4097854028066 1276.1640915041717 1243.109829472313 1695.5948780654098 1252.632974719741)
Error minima by case: (0.0 0.15265426707723062 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.003764687801220079)
Average genome size in population (length): 39.414
Average program size in population (points): 40.412
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.204
Error (vector) diversity:			 0.206
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 24366390
--- Timings ---
Current time: 1481489153499 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 1, :instruction vector_integer_dup_items})
Lexicase best program: (float_rot vector_integer_rot float_swap vector_integer_take vector_integer_first float_min vector_integer_length vector_integer_stackdepth integer_yankdup vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_mult integer_inc vector_integer_butlast integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_yankdup float_stackdepth vector_integer_dup_items)
Lexicase best partial simplification: (vector_integer_take in1 vector_integer_pushall integer_mult vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc integer_max vector_integer_yankdup float_frominteger)
Lexicase best errors: [0.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 9.2 6.0 5.199999999999999 0.1999999999999993 11.6 4.0 61.0 4.0 17.2 42.6 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 2377.2000000000003
Lexicase best mean error: 79.24
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 1, :instruction vector_integer_dup_items})
Zero cases best program: (float_rot vector_integer_rot float_swap vector_integer_take vector_integer_first float_min vector_integer_length vector_integer_stackdepth integer_yankdup vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_mult integer_inc vector_integer_butlast integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_yankdup float_stackdepth vector_integer_dup_items)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc vector_integer_butlast integer_max vector_integer_yankdup float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 9.2 6.0 5.199999999999999 0.1999999999999993 11.6 4.0 61.0 4.0 17.2 42.6 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2377.2000000000003
Zero cases best mean error: 79.24
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 1 70 56 34 26 59 24 19 23 48 148 26 27 16 45 26 31 29 56 104 50 22 25 33 26 44 59 17 24)
Population mean number of elite cases: 1.26
Count of perfect (error zero) individuals by case: (88 0 70 0 0 0 0 0 0 23 0 0 0 27 0 45 0 0 0 56 104 0 0 0 0 0 44 0 0 0)
Population mean number of perfect (error zero) cases: 0.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_inc} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take integer_inc float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth integer_sub integer_sub vector_integer_conj integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 556027.8162189613
Median total errors in population: 3136.682261287396
Error averages by case: (1113.7557261685274 1140.06972462078 1123.5391454601975 1133.0413450188228 1118.803804188253 1132.7086406035323 1133.8282166861673 1147.4519982900806 1124.686933955702 1154.7548286453136 1136.002974495137 1140.7059048333256 1117.4079748165734 1496.4145446585112 9471.574225250612 1133.5821478573557 1158.7914269786404 1192.6934169522133 1490.4719455599331 1135.7111703241458 1124.2453296848398 1403.5575958698787 23898.30922235422 489947.10025482415 1470.9614526716107 1134.6992978614896 1139.2283169763132 1113.792172654523 1857.0568462451097 1142.8696344536138)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.003764687801220079)
Average genome size in population (length): 38.689
Average program size in population (points): 39.687
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.205
Error (vector) diversity:			 0.206
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 25527060
--- Timings ---
Current time: 1481489161969 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_mult} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take integer_mult float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 36
Percent parens: 0.028
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_max} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction float_add} {:close 1, :instruction vector_integer_dup_items} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_first} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dup_times integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_occurrencesof float_max vector_integer_concat float_yankdup float_stackdepth integer_dec float_add vector_integer_dup_items vector_integer_rest integer_fromfloat vector_integer_first integer_mod integer_max vector_integer_conj vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth vector_integer_dup_items integer_mod integer_max float_frominteger)
Zero cases best errors: [0.0 0.7999999999999998 0.0 9.4 2.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 14.0 61.0 6.0 17.2 5.399999999999999 29.200000000000003 2.0 2.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.6 70.8 0.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 2310.8000000000006
Zero cases best mean error: 77.026665
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 26 80 56 25 24 43 22 15 24 46 133 28 36 23 60 21 20 30 42 98 40 37 28 29 26 43 43 35 1)
Population mean number of elite cases: 1.22
Count of perfect (error zero) individuals by case: (88 0 80 0 0 0 0 0 0 24 0 0 0 36 0 60 0 0 0 42 98 0 0 0 0 0 43 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_inc} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot integer_mod vector_integer_take integer_inc float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_mult in1 vector_integer_pushall integer_fromfloat float_stackdepth integer_dup_items integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 395913.41101482033
Median total errors in population: 3142.2989885433017
Error averages by case: (1233.203142445735 1238.578334752291 1243.143321592126 1252.3588448385024 1238.276459582012 1232.2738323098793 1233.2017965667917 1236.9191924132256 1243.9858847347928 1273.8849382816966 1252.3449017724752 1259.9827644542843 1246.6302601229304 1607.563535566446 9393.94813672288 1252.0022405404545 1263.0573701746337 1301.9665823083174 1605.4973509513786 1245.0703767805103 1234.1454800378306 1541.5909664308808 23306.334257126386 327727.97671082447 1508.413283134036 1252.4973979850583 1258.271820241117 1233.058149201226 1764.7649956358853 1232.4686872907428)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 38.71
Average program size in population (points): 39.71
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.216
Error (vector) diversity:			 0.217
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 26688360
--- Timings ---
Current time: 1481489170194 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_swap} {:close 0, :instruction float_yank} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_yankdup})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_swap float_yank float_mult integer_inc vector_integer_butlast float_dec vector_integer_conj float_mult integer_inc integer_sub vector_integer_conj float_cos float_dup_times vector_integer_length float_swap vector_integer_flush float_yankdup float_tan vector_integer_first float_frominteger integer_yankdup)
Zero cases best partial simplification: (in1 vector_integer_butlast vector_integer_butlast vector_integer_length float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 30 78 53 24 15 39 20 18 28 53 125 27 33 18 52 27 27 27 53 116 48 23 32 32 25 32 39 15 23)
Population mean number of elite cases: 1.21
Count of perfect (error zero) individuals by case: (81 0 78 0 0 0 0 0 0 28 0 0 0 33 0 52 0 0 0 53 116 0 0 0 0 0 32 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction float_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Best program: (float_sin vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec float_shove integer_yankdup float_mult integer_inc float_cos vector_integer_nth integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove float_inc float_mult integer_inc vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Partial simplification: (in1 vector_integer_pushall integer_yankdup integer_inc integer_max float_frominteger float_cos float_frominteger integer_dec float_shove float_inc float_mult)
Errors: [0.11948914004890199 7.927500169043068 1.960930862590836 7.381430581529049 13.400172356962091 0.34030230586813975 1.3899924966004455 6.325441505626516 1.8 6.050043724933904 13.098714220190612 3.927450070773956 6.4 3.727107068733325 51.475815258140585 15.402613408825552 19.44036808064585 27.932833020333398 50.54141426439571 6.800851433251831 1.4596976941318602 43.3928965824674 234.2001161696933 1206.1104963315015 10.230115407106268 6.601306704412776 9.703789834929605 0.8161468365471425 85.79682710369714 1.2161468365471424]
Total: 1844.970009469528
Mean: 61.499
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 411400.8916031005
Median total errors in population: 3142.076638401813
Error averages by case: (1312.9161473971756 1318.5514153176243 1312.794139358863 1322.337959910035 1318.9838964394435 1331.6936432937332 1322.6027499556346 1326.7983005568342 1333.6501762451046 1353.8469882016866 1322.0729795098302 1332.8936130180234 1326.3692736102078 2181.6307229888516 23090.41646253691 1336.5849683298577 1332.5346671918307 1358.5954491468008 2087.2995786940273 1324.9730101910309 1323.266805075559 1736.5894885617602 85071.41264035963 264663.9097618435 1591.3402985973967 1322.0101345522803 1329.1620936045515 1332.6538674630588 1760.9786645595148 1322.0217065901115)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.05755321584639339 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.295
Average program size in population (points): 40.293
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.228
Error (vector) diversity:			 0.228
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 27867210
--- Timings ---
Current time: 1481489178320 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_rot float_swap vector_integer_take vector_integer_first float_min vector_integer_length vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction 5} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_yank} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_mult float_pop float_yank float_dup vector_integer_remove vector_integer_stackdepth 5 integer_shove vector_integer_yankdup float_flush vector_integer_pushall vector_integer_rest vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_stackdepth float_yank float_tan integer_dup float_yank vector_integer_replace float_max integer_fromfloat float_inc vector_integer_pushall vector_integer_reverse vector_integer_pop integer_shove vector_integer_yankdup vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast vector_integer_conj float_tan integer_dup float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Zero cases best partial simplification: (vector_integer_stackdepth integer_inc integer_inc float_frominteger float_inc)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 46
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 25 79 66 23 23 52 28 1 22 56 122 18 39 25 69 26 19 25 69 88 52 22 32 27 22 35 52 18 25)
Population mean number of elite cases: 1.25
Count of perfect (error zero) individuals by case: (91 0 79 0 0 0 0 0 0 22 0 0 0 39 0 69 0 0 0 69 88 0 0 0 0 0 35 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction float_dec} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot float_rot vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set float_dec vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth integer_dec integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 1.0 6.4 3.2 0.2 0.4 10.6 7.2 3.0 6.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 0.5999999999999996 10.0 0.6 59.8 0.8]
Total: 2035.6
Mean: 67.85333
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 225000.7228788126
Median total errors in population: 3132.657458807029
Error averages by case: (1212.8394210298632 1218.4903155057564 1222.9554478995742 1232.795082014742 1217.1813415442773 1231.578562481265 1231.833482493823 1236.4758645681331 1253.2992543553034 1244.5723728362634 1236.1448327235778 1242.2913510322658 1256.9738980684538 1658.286379598467 6067.7529748133375 1224.6400852743184 1249.102589934303 1270.3828653158025 1586.1592069952922 1233.9343924506559 1233.0276851972314 1427.6840665771479 13157.17893310075 166629.34127197062 5674.285701706567 1245.1446060789906 1253.6360804552316 1241.8305006456665 1589.0227579881084 1221.8815541536337)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.1999999999999993 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.828
Average program size in population (points): 40.827
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.219
Error (vector) diversity:			 0.223
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 29062050
--- Timings ---
Current time: 1481489186515 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (5 float_rot float_sin float_mult float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_rot integer_mult vector_integer_pushall float_pop vector_integer_rot float_swap vector_integer_take vector_integer_subvec float_min vector_integer_length vector_integer_stackdepth integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 2.6 1.4 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 6.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17502.2
Lexicase best mean error: 583.4067
Lexicase best size: 43
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mult} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot float_sin integer_mult vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mult vector_integer_pop integer_shove vector_integer_yankdup vector_integer_pushall float_swap 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop vector_integer_pushall 5 vector_integer_occurrencesof float_dec vector_integer_concat float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_butlast float_yank float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Zero cases best partial simplification: (float_rot integer_mult in1 integer_fromfloat vector_integer_pushall integer_mult integer_shove 5 integer_mult integer_pop in1 vector_integer_dup_times vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop vector_integer_pushall 5 vector_integer_occurrencesof vector_integer_concat vector_integer_pushall vector_integer_occurrencesof float_yank float_frominteger float_dup_items float_inc float_add)
Zero cases best errors: [0.0 27.8 0.0 7.6 5.8 5.8 5.6 2.6 3.2 13.0 10.2 9.8 2.4000000000000004 63.0 258.0 0.0 19.2 17.4 56.8 1.0 4.0 1.7999999999999972 413.2 1915.2 83.8 9.4 12.0 5.6 82.8 5.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3042.2000000000003
Zero cases best mean error: 101.40667
Zero cases best size: 51
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 25 90 54 26 30 50 21 23 28 58 1 18 25 13 65 20 24 23 56 84 51 28 23 27 25 40 50 23 24)
Population mean number of elite cases: 1.12
Count of perfect (error zero) individuals by case: (92 0 90 0 0 0 0 0 0 28 0 0 0 25 0 65 0 0 0 56 84 0 0 0 0 0 40 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mod} {:close 0, :instruction vector_integer_take} {:close 0, :instruction integer_inc} {:close 0, :instruction float_cos} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot vector_integer_pushall float_pop vector_integer_rot integer_mod vector_integer_take integer_inc float_cos vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof float_dec integer_sub integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth float_tan integer_dup integer_dup_items integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [2.0 6.2 0.0 6.4 3.2 0.2 0.4 10.6 7.2 6.0 5.199999999999999 0.1999999999999993 9.6 1.0 224.0 1.0 16.2 17.6 6.799999999999997 1.0 2.0 51.8 27.80000000000001 1421.2 137.2 19.6 10.0 0.4 59.8 0.8]
Total: 2055.4000000000005
Mean: 68.513336
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 210832.21571454682
Median total errors in population: 3134.6841531811947
Error averages by case: (1182.9504915071 1187.1718268587072 1183.0471208719305 1190.726760009811 1186.5151293836443 1191.8812076235843 1182.529994084174 1196.7207903709086 1194.1263525354611 1199.19178264583 1191.9629582803116 1194.1331435519112 1196.6327322007296 1340.7202362224293 4175.610811232552 1192.9300363018708 1204.5546024068726 1222.9866682814381 1325.2441991001913 1194.2948606156676 1194.1057456829626 1357.0685125157527 7586.072528649676 165837.6931054202 1466.6788445330064 1193.7007794831668 1195.8515735785572 1192.5195267745785 1492.4858356796028 1182.1075581420994)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.005903644717491219 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.08420038401891894 0.018310927316131043 0.0 20.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.583
Average program size in population (points): 40.581
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.246
Error (vector) diversity:			 0.248
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 30249540
--- Timings ---
Current time: 1481489195170 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (float_swap integer_mult in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction integer_yankdup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yankdup})
Zero cases best program: (float_rot vector_integer_rot float_swap vector_integer_take vector_integer_first float_min vector_integer_length vector_integer_stackdepth integer_yankdup vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc float_mult integer_inc vector_integer_butlast integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_yankdup)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mult vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof integer_inc integer_inc integer_max vector_integer_yankdup float_frominteger)
Zero cases best errors: [0.0 3.2 0.0 9.4 2.8 1.8 1.6 13.6 9.2 6.0 5.199999999999999 0.1999999999999993 11.6 4.0 61.0 4.0 17.2 42.6 29.200000000000003 2.0 8.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 1.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2377.2000000000003
Zero cases best mean error: 79.24
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 25 65 40 33 24 1 20 27 21 57 17 20 26 1 63 28 23 24 51 86 42 30 24 26 28 40 42 28 27)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (87 0 65 0 0 0 0 0 0 21 0 0 0 26 0 63 0 0 0 51 86 0 0 0 0 0 40 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_replacefirst} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_flush integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_fromfloat vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap vector_integer_replacefirst vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 float_flush vector_integer_pushall integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_mod integer_sub integer_shove integer_stackdepth integer_sub float_frominteger)
Errors: [5.0 11.2 1.0 5.4 8.2 1.2 1.4 4.4 2.8 12.0 10.2 3.8000000000000007 8.6 20.0 225.0 14.0 21.2 13.600000000000001 7.799999999999997 1.0 7.0 59.8 26.80000000000001 1422.2 34.8 6.4 1.0 1.4 63.8 2.8]
Total: 2003.8000000000002
Mean: 66.793335
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 297648.4712011416
Median total errors in population: 3135.407409052753
Error averages by case: (1192.9328944272313 1197.3898102552785 1202.9947031984245 1201.1108112918723 1197.3782724726557 1221.8340397730967 1202.3040533878566 1226.2497730427442 1224.2876253207307 1212.5012843168288 1202.0332478628757 1215.1050701222343 1226.9942008981284 1390.3716250136852 6568.910922188601 1204.560491241775 1214.869681300968 1239.7414785467392 1380.309779567835 1194.2808241051296 1224.9751915345796 1455.8473417566365 10669.11991749782 246526.14675969398 1437.6739030038916 1202.862343988867 1206.0748622872115 1212.3294023078515 1595.3293322482748 1201.9515584872038)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.08420038401891894 0.018310927316131043 0.0 19.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 1.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 38.961
Average program size in population (points): 39.96
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.259
Error (vector) diversity:			 0.26
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 31418370
--- Timings ---
Current time: 1481489203594 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall integer_rot vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 float_flush vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction 5} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_shove})
Zero cases best program: (float_rot vector_integer_pushall float_pop vector_integer_yankdup float_pop vector_integer_rot integer_yank in1 float_sin float_mult float_pop float_yank float_dup vector_integer_remove vector_integer_stackdepth 5 float_yank float_dup vector_integer_remove float_flush vector_integer_pushall vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot float_mult integer_inc vector_integer_butlast float_yank vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap integer_rot float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast vector_integer_subvec float_tan integer_dup float_frominteger float_frominteger float_shove)
Zero cases best partial simplification: (in1 float_dup vector_integer_stackdepth 5 vector_integer_remove vector_integer_pushall integer_mult vector_integer_dup_items integer_inc integer_shove integer_inc integer_rot integer_inc float_frominteger float_shove)
Zero cases best errors: [0.0 6.2 0.0 2.5999999999999996 3.2 1.8 1.6 2.4 0.19999999999999996 7.0 10.2 1.1999999999999993 4.4 15.0 258.0 9.0 19.2 18.6 2.799999999999997 1.0 0.0 54.8 31.80000000000001 1854.2 26.200000000000003 4.6 12.0 1.6 58.8 1.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2409.6
Zero cases best mean error: 80.32
Zero cases best size: 51
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (77 32 66 47 26 31 25 23 22 29 58 13 26 21 18 61 34 23 24 54 87 49 1 20 17 24 48 26 27 20)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (77 0 66 0 0 0 0 0 0 29 0 0 0 21 0 61 0 0 0 54 87 0 0 0 0 0 48 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction float_cos} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_swap} {:close 0, :instruction float_dec} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot float_yank integer_pop in1 float_rot integer_dec float_flush vector_integer_pushall vector_integer_length float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_cos integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj integer_swap float_dec integer_stackdepth integer_sub vector_integer_butlast integer_div integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (float_yank in1 vector_integer_pushall integer_dup_items integer_shove integer_inc integer_sub integer_sub integer_swap integer_stackdepth integer_sub integer_div integer_max float_frominteger)
Errors: [1.0 7.2 3.0 9.4 2.2 0.2 0.4 13.6 10.8 8.0 6.199999999999999 0.1999999999999993 6.4 16.0 221.0 10.0 22.2 17.6 3.799999999999997 7.0 8.0 42.8 30.80000000000001 1418.2 25.200000000000003 4.4 5.0 0.6 59.8 0.8]
Total: 1961.8
Mean: 65.39333
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 382073.4605488088
Median total errors in population: 3138.5756983376564
Error averages by case: (1273.015244451497 1277.9598526677514 1273.0344244786147 1282.030125044108 1277.0135146155374 1281.6852092188374 1282.1137686841237 1287.147655228496 1273.8717517572622 1293.0573715306928 1284.7383083428258 1287.4658485893062 1277.279002946606 1489.3353050109074 4370.708295431266 1285.0976554310266 1303.3427175467107 1334.70655194309 1456.9426134639632 1274.2154446573718 1285.7018195192086 1430.5237411427702 9175.073489229182 332479.11140060134 1612.872770894972 1284.5908192049485 1289.4822069681456 1272.3546569502612 1796.8737161730864 1282.1152670812146)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.08420038401891894 0.018310927316131043 0.0 19.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 81.79999999999995 1.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.014
Average program size in population (points): 40.012
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.246
Error (vector) diversity:			 0.248
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 32588790
--- Timings ---
Current time: 1481489212083 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot float_sin float_mult float_pop integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_dup vector_integer_pushall float_swap vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max integer_fromfloat float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth float_stackdepth integer_max integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 43
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (74 23 71 45 29 18 18 26 37 24 51 20 24 29 28 59 35 26 16 57 86 35 26 20 2 25 41 21 24 15)
Population mean number of elite cases: 1.00
Count of perfect (error zero) individuals by case: (74 0 71 0 0 0 0 0 0 24 0 0 0 29 0 59 0 0 0 57 86 0 0 0 0 0 41 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction integer_dup_times} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_rest integer_dup_times float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj integer_swap integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items vector_integer_occurrencesof integer_shove integer_inc vector_integer_length integer_dup_times integer_sub integer_sub integer_swap integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 3.2 1.0 9.4 2.8 1.2 1.4 4.4 1.8 6.0 5.199999999999999 0.1999999999999993 9.6 4.0 61.0 8.0 17.2 17.6 29.200000000000003 4.0 7.0 39.8 30.80000000000001 1418.2 30.799999999999997 4.4 0.0 2.4 76.8 1.8]
Total: 1800.2
Mean: 60.006668
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 382643.61560131004
Median total errors in population: 3141.000000000001
Error averages by case: (1322.8065130062153 1327.4277968248223 1332.827967866097 1341.4093649051488 1336.4073228456507 1331.752985147712 1332.3845682918056 1347.0006136460463 1353.6893657067292 1351.3247505350328 1343.7321431097444 1346.3814157027573 1356.6643446788391 1516.5733282879535 4202.539194573894 1333.6396187737328 1360.8581502863615 1388.1362191607473 1498.028902318478 1344.254519529527 1344.5508158386212 1466.84056795176 8826.248551388262 332118.4227685682 1629.085419737997 1343.2864382286089 1348.4704415793904 1342.5262747347706 1834.0843006475495 1322.2609374364315)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.08420038401891894 0.018310927316131043 0.0 19.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 81.79999999999995 0.7999999999999972 0.40000000000000036 0.0 0.005903644717491219 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.829
Average program size in population (points): 40.827
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.255
Error (vector) diversity:			 0.256
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 33783660
--- Timings ---
Current time: 1481489220410 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_dup_items} {:close 0, :instruction float_add} {:close 2, :instruction float_max} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (float_dup_items float_add float_max integer_max integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj integer_swap integer_shove integer_stackdepth vector_integer_concat vector_integer_butlast integer_div integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (in1 vector_integer_dup_times vector_integer_pushall integer_max integer_sub integer_sub float_frominteger)
Lexicase best errors: [0.0 5.8 0.0 9.6 3.2 0.8 1.6 20.4 7.2 9.0 8.2 0.8000000000000007 9.6 4.0 579.0 6.0 14.2 85.6 13.799999999999997 2.0 2.0 162.2 396.2 6645.8 2.799999999999997 0.40000000000000036 0.0 1.6 245.2 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 8238.2
Lexicase best mean error: 274.60666
Lexicase best size: 29
Percent parens: 0.034
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_remove vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (vector_integer_take in1 vector_integer_pushall float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 35
Percent parens: 0.029
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 19 103 47 33 17 21 34 22 23 44 1 19 27 14 59 29 33 16 59 102 26 18 1 1 37 66 1 19 29)
Population mean number of elite cases: 1.01
Count of perfect (error zero) individuals by case: (90 0 103 0 0 0 0 0 0 23 0 0 0 27 0 59 0 0 0 59 102 0 0 0 0 0 66 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 5} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_frominteger} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction integer_pop} {:close 0, :instruction float_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_dup float_dec integer_yank in1 float_sin float_mult float_pop float_yank float_dup vector_integer_dup_items in1 vector_integer_pushall 5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_frominteger vector_integer_pushall vector_integer_length vector_integer_nth integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove integer_pop float_inc float_mult integer_inc vector_integer_butlast float_yank)
Partial simplification: (5 in1 float_mult vector_integer_dup_items in1 vector_integer_pushall 5 vector_integer_length integer_mult vector_integer_dup_items in1 vector_integer_dup_times float_frominteger vector_integer_pushall vector_integer_length vector_integer_nth integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_frominteger vector_integer_yank integer_dec float_shove float_inc float_mult integer_inc vector_integer_butlast float_yank)
Errors: [1.0 3.2 1.0 9.4 3.8 0.2 1.6 3.4 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 2.0 2.0 39.8 143.8 1418.2 30.799999999999997 4.4 0.0 0.6 76.8 1.2]
Total: 1905.6000000000001
Mean: 63.52
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 310394.40712452243
Median total errors in population: 3141.000000000001
Error averages by case: (1192.7203683179969 1197.730489284182 1212.75370445502 1212.3883458163334 1197.6260592839778 1241.5482554335872 1202.3792205312134 1256.9783366139993 1243.695522496367 1228.3751928165589 1213.8490439775057 1219.5482586808616 1246.7877198772876 1484.3079150703845 7862.574010976831 1207.6641153737285 1225.4940695020193 1255.3031476921851 1481.0837798631342 1214.5321105947228 1244.005809025377 1473.1221706789404 16972.01032985531 251074.38768095628 1553.781744862747 1214.5009708123707 1220.7199035127583 1232.4462908629587 1620.1680458962007 1191.9245114006912)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1999999999999993 0.07516333805159725 0.018310927316131043 0.0 19.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 30.799999999999955 0.20000000000000284 0.40000000000000036 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.685
Average program size in population (points): 40.684
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.246
Error (vector) diversity:			 0.247
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 34974210
--- Timings ---
Current time: 1481489228885 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_remove vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3074.8
Lexicase best mean error: 102.49333
Lexicase best size: 35
Percent parens: 0.029
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_remove vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall float_dec float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 35
Percent parens: 0.029
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 29 78 43 26 29 59 25 15 23 1 1 17 40 2 74 23 20 20 64 85 37 19 24 25 1 60 44 25 17)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (101 0 78 0 0 0 0 0 0 23 0 0 0 40 0 74 0 0 0 64 85 0 0 0 0 0 60 0 0 0)
Population mean number of perfect (error zero) cases: 0.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_stackdepth} {:close 1, :instruction 5} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_flush integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_remove vector_integer_stackdepth 5 float_yank float_dup vector_integer_remove vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj float_cos vector_integer_conj integer_yankdup integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_div integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_flush in1 vector_integer_pushall integer_dup_items integer_shove vector_integer_stackdepth 5 integer_sub integer_sub integer_yankdup integer_shove integer_stackdepth integer_sub integer_div integer_max float_frominteger)
Errors: [1.0 5.2 1.0 9.4 3.2 0.2 0.4 3.4 1.8 8.0 5.199999999999999 0.1999999999999993 5.4 16.0 221.0 10.0 17.2 27.4 3.799999999999997 3.0 2.0 55.8 30.80000000000001 1418.2 25.200000000000003 4.4 5.0 0.4 59.8 0.8]
Total: 1945.2
Mean: 64.84
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 623843.8422613163
Median total errors in population: 3135.407409052753
Error averages by case: (1172.9388330561526 1178.764495723523 1173.4532025284516 1183.8105252477328 1175.3895112836258 1191.8006766496915 1182.3702191344405 1197.131492469437 1194.248322508642 1192.0761721700417 1189.487517792957 1191.9131272167292 1197.97838521042 1428.108574789754 2750.5467259884285 1183.7296249798308 1208.5610150498505 1251.6877550099236 1359.0216814130792 1174.15003500989 1196.2003130383093 1301.1774930760387 6704.882464649297 580010.6906256872 2078.000006293455 1195.4187557115686 1199.8222980576218 1172.4308976795623 2026.0029820480027 1182.0485318425474)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 18.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 30.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.205
Average program size in population (points): 40.205
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.258
Error (vector) diversity:			 0.259
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 36150360
--- Timings ---
Current time: 1481489237333 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_remove vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3074.8
Lexicase best mean error: 102.49333
Lexicase best size: 35
Percent parens: 0.029
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot vector_integer_dup_items in1 float_rot vector_integer_dup_times vector_integer_remove vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 35
Percent parens: 0.029
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 28 92 44 18 28 49 38 29 27 46 30 27 30 21 62 27 11 25 47 82 26 18 26 18 46 45 38 27 28)
Population mean number of elite cases: 1.12
Count of perfect (error zero) individuals by case: (87 0 92 0 0 0 0 0 0 27 0 0 0 30 0 62 0 0 0 47 82 0 0 0 0 0 45 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_pop in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove vector_integer_yankdup integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 2.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1780.2
Mean: 59.34
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 61724.87315750316
Median total errors in population: 3134.6841531811947
Error averages by case: (1272.576138650837 1295.4686519057648 1273.4544676277237 1288.0266629788503 1275.0025735055015 1331.6047787124892 1301.9699201535693 1335.8815610914126 1340.553656138891 1293.706356086429 1291.7521133905966 1290.5554287125813 1350.3941141620812 1470.2926652536303 3078.8621041184324 1280.0132777380759 1325.535193918166 1315.784467112409 1455.5101129283394 1283.784351850635 1339.6840276745922 1368.2716524172356 9374.63196021117 12529.969317428211 2351.8514699870466 1299.932239058825 1301.7182510372868 1292.087686956116 1414.231524901807 1301.766431794436)
Error minima by case: (0.0 0.04460661609480532 0.0 0.40000000000000036 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 18.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 30.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 38.665
Average program size in population (points): 39.665
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.241
Error (vector) diversity:			 0.243
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 37310310
--- Timings ---
Current time: 1481489245629 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (float_sin in1 vector_integer_pushall integer_mod float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 1.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3073.8
Lexicase best mean error: 102.46
Lexicase best size: 29
Percent parens: 0.034
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod float_swap vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mod float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 1.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3073.8
Zero cases best mean error: 102.46
Zero cases best size: 29
Percent parens: 0.034
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 29 79 1 25 26 56 26 13 19 41 23 17 43 21 76 31 23 28 51 91 32 18 19 28 41 53 36 23 24)
Population mean number of elite cases: 1.09
Count of perfect (error zero) individuals by case: (95 0 79 0 0 0 0 0 0 19 0 0 0 43 0 76 0 0 0 51 91 0 0 0 0 0 53 0 0 0)
Population mean number of perfect (error zero) cases: 0.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_mult integer_pop in1 vector_integer_pushall vector_integer_length integer_pop integer_dup_items integer_shove vector_integer_dup integer_dup_items vector_integer_pop integer_shove integer_swap integer_inc float_yankdup float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_yank)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 60297.35618337982
Median total errors in population: 3129.3679351564756
Error averages by case: (1182.5880581671383 1185.7086680420532 1183.3105788268185 1198.798403999717 1185.3237874699107 1211.5662215454079 1191.835095594901 1205.8809237021944 1198.994131545692 1208.4550667534381 1202.8957120382433 1205.8201618507626 1199.0047673099118 1555.6336567623289 4272.438862600541 1191.5241409460364 1230.2191364329242 1209.3454424907998 1525.5215465441468 1193.8222315859302 1205.8640015290136 1305.0971577122327 15905.44495045898 4392.167032566654 3608.9168224983414 1212.1947668763569 1219.9893471565094 1181.8500167710413 1325.6333149903578 1201.5121786115233)
Error minima by case: (0.0 0.04460661609480532 0.0 0.36283905577525744 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 18.0 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 30.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.388
Average program size in population (points): 40.388
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.251
Error (vector) diversity:			 0.253
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 38491950
--- Timings ---
Current time: 1481489254504 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_length vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_shove} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc float_rot vector_integer_dup_times float_shove vector_integer_pushall integer_max vector_integer_rest float_min vector_integer_length integer_sub integer_sub vector_integer_conj integer_swap integer_shove integer_stackdepth vector_integer_concat vector_integer_butlast integer_div integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_max integer_sub integer_sub integer_swap integer_shove float_frominteger)
Zero cases best errors: [0.0 5.8 0.0 9.6 3.2 0.8 1.6 20.4 7.2 9.0 8.2 0.8000000000000007 9.6 4.0 579.0 6.0 14.2 85.6 13.799999999999997 2.0 2.0 162.2 396.2 6645.8 2.799999999999997 0.40000000000000036 0.0 1.6 245.2 1.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 8238.2
Zero cases best mean error: 274.60666
Zero cases best size: 30
Percent parens: 0.033
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 25 82 18 21 20 51 21 29 26 50 25 20 27 1 51 33 27 25 59 77 29 24 20 27 51 47 32 16 27)
Population mean number of elite cases: 1.06
Count of perfect (error zero) individuals by case: (101 0 82 0 0 0 0 0 0 26 0 0 0 27 0 51 0 0 0 59 77 0 0 0 0 0 47 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot float_sin float_mult float_pop integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_dup vector_integer_pushall float_swap vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub integer_stackdepth vector_integer_concat vector_integer_butlast integer_div integer_max vector_integer_pop float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall float_stackdepth integer_dec integer_max integer_stackdepth integer_div integer_max float_frominteger)
Errors: [0.0 0.7999999999999998 1.0 7.6 3.8 0.2 1.6 3.4 1.8 5.0 7.199999999999999 0.8000000000000007 6.4 14.0 739.0 6.0 18.2 5.399999999999999 19.200000000000003 2.0 2.0 178.2 143.8 118.20000000000005 58.8 8.4 5.0 0.6 23.799999999999997 1.2]
Total: 1383.4
Mean: 46.113335
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 63028.80526116253
Median total errors in population: 3125.124321420291
Error averages by case: (1252.4267909900639 1265.608620146194 1253.1896820522607 1267.0652162618144 1255.7932249629312 1281.3855411613617 1261.5270713143714 1285.0788376181597 1279.1089327778548 1276.878685869399 1268.3424626162841 1271.935370629767 1280.3054116337694 1493.4332731079783 4553.801760817471 1261.9844315826927 1293.073973264261 1283.909471866785 1495.88723692517 1253.5631444171904 1285.9114723715456 1391.6997760011068 14626.660918532796 7906.1191345366615 2227.3277247681394 1276.6731556684535 1281.6912479503048 1251.5782729335785 1385.3292820574318 1261.5151363268308)
Error minima by case: (0.0 0.04460661609480532 0.0 0.36283905577525744 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 4.2675629073547725 0.0 0.1999999999999993 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 30.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 39.416
Average program size in population (points): 40.413
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.261
Error (vector) diversity:			 0.262
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 39674430
--- Timings ---
Current time: 1481489262900 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (vector_integer_length integer_mult in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_sub vector_integer_concat integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 3
Lexicase best total error: 2546.0000000000005
Lexicase best mean error: 84.86667
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc vector_integer_take integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2546.0000000000005
Zero cases best mean error: 84.86667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 23 81 2 30 15 63 25 24 36 51 35 24 22 30 57 1 15 20 70 72 37 21 1 20 51 44 44 25 15)
Population mean number of elite cases: 1.05
Count of perfect (error zero) individuals by case: (99 0 81 0 0 0 0 0 0 36 0 0 0 22 0 57 0 0 0 70 72 0 0 0 0 0 44 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items vector_integer_occurrencesof integer_shove integer_dup_items integer_shove integer_swap integer_inc vector_integer_length integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 46428.63248966218
Median total errors in population: 3119.908621806686
Error averages by case: (1132.390570559228 1135.440402711509 1132.9917180076443 1147.886834922746 1134.6936648429798 1141.3948172110836 1131.517029421417 1145.3872465033016 1151.0429455480505 1154.2177436952074 1149.8820560031716 1149.3729209034966 1149.7644928541908 1303.4715841198258 2875.6495525975774 1140.1240930321383 1182.1768834962822 1166.1428778200102 1289.1704676446893 1133.260987636641 1145.5251111029613 1224.89907129908 7948.962503179644 3248.676023820925 2073.51616708953 1156.413435498837 1159.255409838424 1131.6824094206168 1262.2154049317999 1131.5080639491932)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 4.2675629073547725 0.0 0.07375249521009053 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 2.799999999999997 0.00292526644997515)
Average genome size in population (length): 38.675
Average program size in population (points): 39.672
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.255
Error (vector) diversity:			 0.256
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 40834680
--- Timings ---
Current time: 1481489271843 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_sub integer_sub float_cos integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 3
Lexicase best total error: 2546.0000000000005
Lexicase best mean error: 84.86667
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (integer_mult in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc float_swap vector_integer_rest float_stackdepth integer_max integer_sub integer_sub vector_integer_conj integer_shove integer_stackdepth integer_sub float_swap integer_max float_frominteger float_yank)
Zero cases best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2546.0000000000005
Zero cases best mean error: 84.86667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 38 56 21 31 21 43 26 26 24 47 22 17 28 32 55 19 25 25 67 65 32 19 20 17 47 47 26 1 17)
Population mean number of elite cases: 1.00
Count of perfect (error zero) individuals by case: (82 0 56 0 0 0 0 0 0 24 0 0 0 28 0 55 0 0 0 67 65 0 0 0 0 0 47 0 0 0)
Population mean number of perfect (error zero) cases: 0.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_mult in1 vector_integer_pushall integer_pop integer_dup_items integer_shove vector_integer_dup integer_dup_items vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 169505.5634404754
Median total errors in population: 3129.206733651782
Error averages by case: (1222.6142856838344 1236.2303343374306 1223.1127166747558 1248.3264702418494 1234.874320890564 1221.47084038504 1221.6539057511634 1236.3098619648717 1224.223407406316 1253.8684641246846 1240.4682465897572 1254.9283785203002 1233.258767937699 1718.1949586847793 2426.433496440371 1241.5762511539735 1267.3475081327792 1273.8425188582198 1514.9032430702496 1223.5275401942185 1229.0527137740207 1375.0763499525942 10338.240318634724 120782.95614909708 2404.34197966237 1267.5683413005224 1252.4244742422975 1221.6438266599546 1685.610442002098 1231.4833281070137)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 4.2675629073547725 0.0 0.07375249521009053 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 0.9070832954775483 0.00292526644997515)
Average genome size in population (length): 38.475
Average program size in population (points): 39.475
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.247
Error (vector) diversity:			 0.247
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41988930
--- Timings ---
Current time: 1481489280713 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot float_sin integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 23
Percent parens: 0.043
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_pushall float_mult integer_pop integer_dup_items vector_integer_pop integer_shove integer_inc vector_integer_pushall float_stackdepth integer_max integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2546.0000000000005
Zero cases best mean error: 84.86667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 26 58 25 24 13 53 31 28 19 51 20 18 28 28 54 30 24 21 73 53 25 25 25 19 51 54 29 17 19)
Population mean number of elite cases: 1.01
Count of perfect (error zero) individuals by case: (72 0 58 0 0 0 0 0 0 19 0 0 0 28 0 54 0 0 0 73 53 0 0 0 0 0 54 0 0 0)
Population mean number of perfect (error zero) cases: 0.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_reverse})
Best program: (float_rot 5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger vector_integer_reverse)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc vector_integer_take float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 123328.35325972778
Median total errors in population: 3120.8000000000006
Error averages by case: (1072.6984444916395 1075.3482034050387 1073.3700376015559 1085.1518041726679 1075.5552357681254 1081.3928398456014 1071.6055076768075 1086.549084481705 1084.0697494087553 1088.253473719626 1089.8524100940988 1091.5735156607218 1094.1007826807859 1235.4700693024572 1832.2434303075936 1079.8435396365212 1126.7144758846102 1105.1459966327698 1213.6497595524602 1083.4448502030214 1088.375710644221 1144.7337275300958 6301.4897377530915 84265.26040455398 2130.8853617458503 1098.3602750117384 1101.0070895802075 1081.5748696477483 1299.2301685727048 1071.402704161912)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 4.2675629073547725 0.0 0.07375249521009053 0.47866985809502083 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.27199945906218304 0.0 0.0013360351468790221 0.9070832954775483 0.00292526644997515)
Average genome size in population (length): 38.214
Average program size in population (points): 39.213
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.278
Error (vector) diversity:			 0.279
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 43135350
--- Timings ---
Current time: 1481489289233 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_shove} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot float_sin float_mult float_pop float_yank float_dup vector_integer_remove vector_integer_stackdepth 5 vector_integer_dup float_dec vector_integer_remove integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_dup vector_integer_pushall float_swap vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth float_shove float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall float_stackdepth float_dec integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 3074.8
Lexicase best mean error: 102.49333
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_pop} {:close 0, :instruction float_yank} {:close 0, :instruction float_dup} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_stackdepth} {:close 0, :instruction 5} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 1, :instruction float_shove} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot float_sin float_mult float_pop float_yank float_dup vector_integer_remove vector_integer_stackdepth 5 vector_integer_dup float_dec vector_integer_remove integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times integer_dup vector_integer_pushall float_swap vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth float_shove float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best partial simplification: (float_mult in1 vector_integer_pushall float_stackdepth integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 1.8 2.6 1.4 0.19999999999999996 13.0 10.2 11.8 4.4 63.0 258.0 8.0 19.2 25.4 56.8 0.0 0.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 3074.8
Zero cases best mean error: 102.49333
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (63 15 63 25 21 25 47 28 23 32 41 22 20 32 1 62 26 1 31 81 61 34 28 17 28 1 47 26 23 26)
Population mean number of elite cases: 0.95
Count of perfect (error zero) individuals by case: (63 0 63 0 0 0 0 0 0 32 0 0 0 32 0 62 0 0 0 81 61 0 0 0 0 0 47 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_mult integer_pop in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 39497.64958892616
Median total errors in population: 3116.76697746042
Error averages by case: (992.8788677906759 995.6943835033793 993.2044093499858 1005.139069511263 994.9477624417849 991.5840662589461 1001.8517476971887 1006.2805956068563 1004.6648313690795 1007.4591613316636 1008.9338261726241 1010.1347413430974 1010.918378005684 1146.178511446642 1962.8468842182988 999.5718605934061 1049.361549915823 1021.8438513316988 1128.6410617366046 1103.617777300536 1005.9838589868547 1070.0850346066186 5837.457940328737 3129.1373637211327 1876.7779304904666 1014.5546999867478 1017.6489278015159 1001.8640922195223 1116.7841985297655 991.6022053295887)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.08366218546322646 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.9070832954775483 0.00292526644997515)
Average genome size in population (length): 38.756
Average program size in population (points): 39.754
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.267
Error (vector) diversity:			 0.27
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 44298030
--- Timings ---
Current time: 1481489297617 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_shove vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap})
Zero cases best program: (5 float_rot float_sin float_mult float_pop vector_integer_rot float_swap float_rot vector_integer_pushall float_pop vector_integer_rot float_dup_items integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length vector_integer_nth integer_inc vector_integer_butlast float_yank float_tan vector_integer_pop float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_inc integer_dup_items integer_inc integer_inc vector_integer_butlast float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times float_swap)
Zero cases best errors: [2.0 2.8 0.0 9.4 5.8 1.8 3.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 8.0 17.2 27.4 29.200000000000003 4.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 3.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2340.2000000000003
Zero cases best mean error: 78.00667
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (62 20 57 18 1 18 49 19 23 28 29 27 23 25 24 54 28 20 29 86 62 31 36 21 23 18 57 28 22 23)
Population mean number of elite cases: 0.96
Count of perfect (error zero) individuals by case: (62 0 57 0 0 0 0 0 0 28 0 0 0 25 0 54 0 0 0 86 62 0 0 0 0 0 57 0 0 0)
Population mean number of perfect (error zero) cases: 0.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 vector_integer_dup_times vector_integer_pushall integer_pop vector_integer_dup integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_yank)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4.0681727022868164E7
Median total errors in population: 3129.206733651782
Error averages by case: (1032.9381524067603 1038.7052784281748 1022.9986079453614 1050.7661558320103 1035.310349685133 1021.546594598453 1021.7113620714398 1027.4933636017104 1025.8805565323573 1062.8836037333022 1048.1979969497486 1056.2368379803938 1031.1130581193995 2230.252724025627 9285.521618467943 1049.0789407986738 1081.2665233538742 1256.7617691298449 1694.8852744695032 1093.4811522060413 1027.0561323750655 1427.7191542969545 43345.13661077434 4.059552178470253E7 2028.539182795386 1054.7183129000334 1058.730977842263 1021.7290956601033 3052.9049963289553 1021.6737817054036)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.1687819652535616 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.9070832954775483 0.00292526644997515)
Average genome size in population (length): 38.839
Average program size in population (points): 39.839
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.267
Error (vector) diversity:			 0.268
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 45463200
--- Timings ---
Current time: 1481489306104 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 5} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_remove} {:close 2, :instruction float_sin} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_dup float_dec vector_integer_remove float_sin vector_integer_reverse vector_integer_conj vector_integer_yankdup vector_integer_conj vector_integer_conj float_dec integer_dec vector_integer_nth vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (5 integer_dec integer_stackdepth integer_sub float_frominteger)
Lexicase best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 3075.8
Lexicase best mean error: 102.526665
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 5} {:close 0, :instruction vector_integer_dup} {:close 1, :instruction float_dec} {:close 0, :instruction vector_integer_remove} {:close 2, :instruction float_sin} {:close 0, :instruction vector_integer_reverse} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction float_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_stackdepth} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_dup float_dec vector_integer_remove float_sin vector_integer_reverse vector_integer_conj vector_integer_yankdup vector_integer_conj vector_integer_conj float_dec integer_dec vector_integer_nth vector_integer_occurrencesof float_dec float_mult float_mult integer_fromfloat vector_integer_butlast float_stackdepth vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_mod integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (5 integer_dec integer_stackdepth integer_sub float_frominteger)
Zero cases best errors: [0.0 4.2 0.0 7.6 2.2 2.8 2.6 0.3999999999999999 1.2 13.0 10.2 11.8 3.4000000000000004 63.0 258.0 8.0 19.2 25.4 56.8 0.0 1.0 55.8 421.2 1915.2 83.8 9.4 12.0 2.6 82.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3075.8
Zero cases best mean error: 102.526665
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 22 61 16 35 30 47 25 19 32 1 24 18 26 27 50 24 26 22 88 81 34 18 25 20 27 49 27 1 33)
Population mean number of elite cases: 0.98
Count of perfect (error zero) individuals by case: (76 0 61 0 0 0 0 0 0 32 0 0 0 26 0 50 0 0 0 88 81 0 0 0 0 0 49 0 0 0)
Population mean number of perfect (error zero) cases: 0.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 float_rot vector_integer_pushall integer_pop integer_dup_items vector_integer_occurrencesof integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max vector_integer_length integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_yank)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 134719.14596245228
Median total errors in population: 3120.8000000000006
Error averages by case: (1062.7246340621023 1066.311518969182 1062.9104964823396 1077.017338060474 1065.3044761486676 1061.454760721257 1061.6499656995722 1065.9317428682934 1064.8700665277154 1087.3821995897301 1078.004963769637 1083.0019900591483 1071.5861373395803 1729.7814156494585 14331.568359060555 1075.64115236214 1100.7692475836798 1094.6924284488264 1586.7913834871808 1133.56438524196 1064.828403352839 1287.519623394892 63158.46509555812 25663.985462041772 2047.3277867933475 1085.074984681879 1088.756759196284 1061.6614990803175 1238.9472906402561 1061.6203955810574)
Error minima by case: (0.0 0.04460661609480532 0.0 0.2714479827243199 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.848
Average program size in population (points): 39.846
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.248
Error (vector) diversity:			 0.248
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 46628640
--- Timings ---
Current time: 1481489314382 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap})
Lexicase best program: (5 float_rot float_sin float_mult float_pop vector_integer_rot float_swap float_rot vector_integer_pushall float_pop vector_integer_rot float_dup_items integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length vector_integer_nth integer_inc vector_integer_butlast float_yank float_tan vector_integer_pop float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc integer_dup_items integer_inc vector_integer_length integer_inc float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times float_swap)
Lexicase best errors: [2.0 2.8 0.0 9.4 5.8 1.8 3.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 8.0 17.2 27.4 29.200000000000003 4.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 2340.2000000000003
Lexicase best mean error: 78.00667
Lexicase best size: 49
Percent parens: 0.020
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_length} {:close 0, :instruction float_swap})
Zero cases best program: (5 float_rot float_sin float_mult float_pop vector_integer_rot float_swap float_rot vector_integer_pushall float_pop vector_integer_rot float_dup_items integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length vector_integer_nth integer_inc vector_integer_butlast float_yank float_tan vector_integer_pop float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times vector_integer_length float_swap)
Zero cases best partial simplification: (vector_integer_rot in1 vector_integer_pushall integer_inc integer_dup_items integer_inc integer_inc float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times float_swap)
Zero cases best errors: [2.0 2.8 0.0 9.4 5.8 1.8 3.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 4.0 61.0 8.0 17.2 27.4 29.200000000000003 4.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 2.6 76.8 3.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2340.2000000000003
Zero cases best mean error: 78.00667
Zero cases best size: 49
Percent parens: 0.020
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 1 64 19 23 13 55 27 24 28 35 30 26 24 22 47 24 17 15 74 78 36 25 25 15 16 63 37 20 20)
Population mean number of elite cases: 0.97
Count of perfect (error zero) individuals by case: (70 0 64 0 0 0 0 0 0 28 0 0 0 24 0 47 0 0 0 74 78 0 0 0 0 0 63 0 0 0)
Population mean number of perfect (error zero) cases: 0.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 41287.76444762558
Median total errors in population: 3127.092266423917
Error averages by case: (1132.6554935098268 1135.7396768951019 1132.8635222886044 1149.4923409925702 1134.0704660311915 1131.4382538791212 1131.5948001833976 1136.3106858473866 1138.8576717063295 1147.6714175743346 1148.1825829795487 1147.8210750876747 1141.5014011487312 1261.2415811364795 1525.2943047324761 1139.195526035414 1167.7612101485286 1164.5946755729556 1244.9881062756049 1163.6210260295798 1135.639308098286 1198.4222206959444 4301.550771750615 3300.361689572058 2045.2838276805223 1157.0504706990632 1156.9116753750889 1131.6076225013514 1254.4980355246848 1131.5430076731127)
Error minima by case: (0.0 0.03879077652744112 0.0 0.2714479827243199 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 37.79
Average program size in population (points): 38.787
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.265
Error (vector) diversity:			 0.268
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 47762340
--- Timings ---
Current time: 1481489323090 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take vector_integer_replacefirst float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (vector_integer_length in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc float_min float_stackdepth integer_max integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 3
Lexicase best total error: 2546.0000000000005
Lexicase best mean error: 84.86667
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take vector_integer_replacefirst float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 float_flush vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_sub integer_sub integer_shove integer_stackdepth integer_sub float_swap integer_max float_frominteger)
Zero cases best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2546.0000000000005
Zero cases best mean error: 84.86667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 27 56 1 27 21 67 28 26 26 27 19 23 17 22 41 18 27 18 55 59 31 18 18 29 26 36 30 17 25)
Population mean number of elite cases: 0.91
Count of perfect (error zero) individuals by case: (71 0 56 0 0 0 0 0 0 26 0 0 0 17 0 41 0 0 0 55 59 0 0 0 0 0 36 0 0 0)
Population mean number of perfect (error zero) cases: 0.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_dec integer_max vector_integer_length integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 93811.27462228847
Median total errors in population: 3119.8702063947994
Error averages by case: (892.8337021522254 896.2328180610309 892.9759653326021 905.4739995942118 894.8267745254083 901.8140838873686 891.933130789748 906.4042284785143 907.6352061921167 908.6618734800497 907.2668087096264 907.7636635083487 910.0906638380109 1038.7812946812994 1903.7159465720354 900.5610696344069 925.1776216860233 932.4149379618141 1028.8661703967289 974.0616468345133 905.012849022958 968.4688014457207 6556.670722222636 59605.91878415903 1646.0225556011487 913.6588615083435 915.1455129660052 901.9016886391779 1079.1414930772617 891.8417473312024)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 37.98
Average program size in population (points): 38.98
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.272
Error (vector) diversity:			 0.275
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 48901740
--- Timings ---
Current time: 1481489331729 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction float_min} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot float_sin integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc float_min float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 23
Percent parens: 0.043
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_inc integer_dup integer_dup_items vector_integer_occurrencesof integer_dup_items integer_inc integer_max float_frominteger)
Zero cases best errors: [1.0 1.7999999999999998 0.0 9.4 4.8 1.8 1.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 15.0 740.0 7.0 17.2 4.399999999999999 29.200000000000003 1.0 0.0 179.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 69.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3128.6000000000004
Zero cases best mean error: 104.28667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 31 65 18 23 26 50 29 20 37 29 32 18 30 17 48 18 24 15 83 68 36 24 29 24 20 48 26 24 29)
Population mean number of elite cases: 1.01
Count of perfect (error zero) individuals by case: (70 0 65 0 0 0 0 0 0 37 0 0 0 30 0 48 0 0 0 83 68 0 0 0 0 0 48 0 0 0)
Population mean number of perfect (error zero) cases: 0.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 float_yankdup vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 float_flush vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc vector_integer_take float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 274150.06759316946
Median total errors in population: 3119.8702063947994
Error averages by case: (1022.7582362086897 1027.2093359495486 1023.1782850210986 1038.7274275887137 1024.592846383306 1031.6418424635754 1031.7811411432738 1036.800676575204 1037.8932719987065 1042.1266116008612 1039.9832159893206 1040.586788426817 1032.3306828355157 1217.732215181862 2610.851062280178 1031.4485389478368 1067.7833076093818 1073.0820344407211 1182.789370353497 1143.9802728369716 1023.577857328318 1147.9331504471672 6156.906334326415 235396.5601516164 2057.4481546173656 1049.0438566751977 1049.9494988258768 1041.720128604059 1447.9186949865034 1021.7326019058623)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.545
Average program size in population (points): 39.543
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.235
Error (vector) diversity:			 0.238
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 50058090
--- Timings ---
Current time: 1481489340112 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_shove vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (float_swap in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (vector_integer_length in1 vector_integer_pushall float_stackdepth integer_inc integer_add integer_dup integer_dup_items integer_dup_items integer_inc integer_max float_frominteger)
Zero cases best errors: [1.0 1.7999999999999998 0.0 9.4 4.8 1.8 1.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 15.0 740.0 7.0 17.2 4.399999999999999 29.200000000000003 1.0 0.0 179.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 69.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3128.6000000000004
Zero cases best mean error: 104.28667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (61 26 64 23 18 21 49 22 20 32 24 25 13 30 22 57 21 18 26 50 61 37 24 25 33 19 46 29 26 30)
Population mean number of elite cases: 0.95
Count of perfect (error zero) individuals by case: (61 0 64 0 0 0 0 0 0 32 0 0 0 30 0 57 0 0 0 50 61 0 0 0 0 0 46 0 0 0)
Population mean number of perfect (error zero) cases: 0.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot float_sin 5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min float_dup_times integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 vector_integer_pushall vector_integer_length integer_pop integer_dup_items integer_shove float_yankdup integer_dup_items vector_integer_pop integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 239777.61492537928
Median total errors in population: 3128.6000000000004
Error averages by case: (1192.6547356852082 1196.7957376194715 1202.995304151932 1207.0157650164147 1194.4136078194629 1201.5662216922988 1201.694792671656 1206.3496521596446 1206.8654878366697 1209.6024008240224 1209.7012273504088 1209.0176117986628 1212.0562295688233 1370.713837894705 2307.409040950449 1200.8939582669534 1229.3797639669847 1248.9811876342715 1338.7901080921333 1313.6860877835982 1202.995576261046 1302.7992027734795 5878.095870888765 197199.78935026194 2139.3825865004246 1217.020618676432 1220.3751128658253 1201.6325565909735 1553.2762261674795 1201.6650656065012)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.679
Average program size in population (points): 39.676
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.26
Error (vector) diversity:			 0.262
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 51218460
--- Timings ---
Current time: 1481489348971 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take vector_integer_replacefirst float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (5 vector_integer_dup_items in1 vector_integer_pushall integer_pop integer_dup_items vector_integer_pop integer_shove integer_inc float_stackdepth integer_max vector_integer_rest integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 3
Lexicase best total error: 2546.0000000000005
Lexicase best mean error: 84.86667
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_mult} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_take} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction float_cos} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot integer_dup_items float_flush vector_integer_pushall float_mult integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_pushall float_swap vector_integer_rest float_min vector_integer_take vector_integer_replacefirst float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_sub vector_integer_concat integer_sub vector_integer_conj float_cos integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_pushall float_mult integer_pop integer_dup_items integer_shove integer_inc float_swap float_stackdepth integer_max integer_sub integer_sub integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [0.0 0.20000000000000018 0.0 3.5999999999999996 4.2 2.2 1.4 5.4 12.8 8.0 26.8 1.1999999999999993 8.4 18.0 221.0 10.0 66.8 15.600000000000001 3.799999999999997 0.0 6.0 53.8 30.80000000000001 1855.2 137.2 19.6 10.0 1.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2546.0000000000005
Zero cases best mean error: 84.86667
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (54 22 69 21 34 25 49 29 28 23 24 19 28 27 22 51 20 25 10 51 58 28 25 21 30 27 56 28 25 29)
Population mean number of elite cases: 0.96
Count of perfect (error zero) individuals by case: (54 0 69 0 0 0 0 0 0 23 0 0 0 27 0 51 0 0 0 51 58 0 0 0 0 0 56 0 0 0)
Population mean number of perfect (error zero) cases: 0.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot float_sin 5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min float_dup_times integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 vector_integer_rot integer_pop in1 float_rot vector_integer_pushall integer_pop integer_dup_items integer_shove integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 191120.85690628338
Median total errors in population: 3128.6572759425776
Error averages by case: (1182.6570131721048 1186.4284125748147 1182.8456831493766 1194.8452945427052 1184.3166363733958 1181.483839061621 1181.6258785101863 1186.4140725761342 1186.624261744286 1198.5268522570182 1201.117078973441 1199.5625244288588 1191.3351391182316 1359.1381763680163 1909.1406852864193 1190.4636906683309 1227.0986279486076 1225.1963049904798 1337.201292659176 1253.7234541952914 1183.2415829013016 1264.9257925376157 5673.912055720904 149592.1991059969 2153.8519528529505 1207.9964774356326 1235.6691863233195 1181.589193218988 1486.0995597105666 1181.6270809867017)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.07777674687714864 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.006
Average program size in population (points): 40.005
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.234
Error (vector) diversity:			 0.236
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 52388640
--- Timings ---
Current time: 1481489358093 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_shove vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction float_flush} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction integer_max} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times})
Zero cases best program: (integer_yank vector_integer_dup_items in1 vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_occurrencesof float_dec vector_integer_concat float_mult integer_inc vector_integer_butlast integer_dup_items integer_inc float_flush vector_integer_remove vector_integer_length vector_integer_nth integer_inc vector_integer_butlast float_yank float_tan vector_integer_pop float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times)
Zero cases best partial simplification: (in1 in1 vector_integer_pushall vector_integer_occurrencesof integer_inc integer_dup_items integer_inc integer_inc float_frominteger float_frominteger integer_max in1 integer_shove vector_integer_remove float_dup_times)
Zero cases best errors: [1.0 2.8 0.0 9.4 2.8 1.8 3.6 13.6 1.8 6.0 5.199999999999999 0.1999999999999993 6.4 4.0 61.0 4.0 17.2 27.4 29.200000000000003 4.0 0.0 39.8 570.8 1418.2 30.799999999999997 4.4 0.0 0.4 76.8 3.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 2345.8
Zero cases best mean error: 78.19334
Zero cases best size: 37
Percent parens: 0.027
--- Lexicase Population Statistics ---
Count of elite individuals by case: (49 36 72 20 23 15 51 32 25 33 25 18 25 27 22 47 25 25 27 78 78 37 21 18 19 1 48 27 27 23)
Population mean number of elite cases: 0.97
Count of perfect (error zero) individuals by case: (49 0 72 0 0 0 0 0 0 33 0 0 0 27 0 47 0 0 0 78 78 0 0 0 0 0 48 0 0 0)
Population mean number of perfect (error zero) cases: 0.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_items} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction float_dec} {:close 0, :instruction float_add} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction float_inc} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_replacefirst} {:close 1, :instruction vector_integer_indexof} {:close 1, :instruction vector_integer_dup_items})
Best program: (float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat in1 integer_shove vector_integer_remove float_dup_items vector_integer_first float_swap vector_integer_flush float_yankdup float_tan 5 vector_integer_indexof vector_integer_pushall vector_integer_length 5 float_rot float_sin vector_integer_conj float_dec float_add integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove float_inc float_mult integer_inc vector_integer_replacefirst vector_integer_indexof vector_integer_dup_items)
Partial simplification: (in1 integer_shove vector_integer_first 5 float_frominteger float_cos float_frominteger float_inc float_mult)
Errors: [1.5816890726838688 2.094080661661928 2.4326756290735476 6.345067218051606 3.2143647017574164 0.3673243709264525 0.11633781453677378 3.1163378145367737 1.5163378145367739 10.04309410527225 11.498026887220641 10.545067218051607 6.116337814536774 40.18674112284641 243.6966066867432 5.326756290735475 19.93070251629419 8.543647017574163 44.198579799522555 2.716337814536774 1.7163378145367738 50.57379662156644 395.2664570827509 635.3269935399628 82.5450672180516 11.549013443610322 13.298026887220642 0.11633781453677378 3.5535884209162703 0.05098655638967875]
Total: 1617.5827177706415
Mean: 53.919422
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 96120.52841494483
Median total errors in population: 3115.5941132452335
Error averages by case: (1112.6127247230918 1116.7051071951505 1112.822120924807 1125.44650400253 1114.6470994404517 1121.6563159815555 1121.749561159151 1126.3954984378654 1126.1888326894264 1128.793848537332 1129.183423291974 1130.2889232904254 1120.9819247182174 1397.4365337934528 2620.1072570653027 1120.9832887990146 1145.3062062327642 1147.5362169407315 1335.7400960634106 1133.5213471269874 1113.263421092137 1260.4149521449626 5422.787829488896 54740.61036630755 3245.723969093722 1136.4773168502195 1160.9261902222963 1121.7097698239418 1308.7784705899307 1121.7332989184436)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.799
Average program size in population (points): 39.798
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.253
Error (vector) diversity:			 0.254
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 53552610
--- Timings ---
Current time: 1481489366329 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Lexicase best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Lexicase best partial simplification: (vector_integer_length vector_integer_rot in1 float_flush vector_integer_pushall integer_pop in1 vector_integer_dup_times vector_integer_pushall vector_integer_pushall float_stackdepth vector_integer_concat integer_inc integer_add integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall vector_integer_occurrencesof integer_dup_items float_mult integer_inc vector_integer_take integer_max float_frominteger)
Lexicase best errors: [3.0 10.8 0.0 9.4 2.8 1.8 1.6 2.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 25.0 61.0 9.0 13.2 41.6 29.200000000000003 3.0 0.0 29.799999999999997 570.8 7084.8 30.799999999999997 4.4 0.0 1.6 229.2 2.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 8183.4
Lexicase best mean error: 272.78
Lexicase best size: 46
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (vector_integer_length integer_mult integer_pop in1 float_rot float_flush vector_integer_pushall integer_pop in1 vector_integer_dup_times vector_integer_pushall vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc integer_add integer_dup integer_dup_items vector_integer_replace vector_integer_pushall vector_integer_occurrencesof integer_dup_items integer_inc vector_integer_take integer_max float_frominteger)
Zero cases best errors: [3.0 10.8 0.0 9.4 2.8 1.8 1.6 2.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 25.0 61.0 9.0 13.2 41.6 29.200000000000003 3.0 0.0 29.799999999999997 570.8 7084.8 30.799999999999997 4.4 0.0 1.6 229.2 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 8183.4
Zero cases best mean error: 272.78
Zero cases best size: 46
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (52 26 64 23 22 20 52 34 28 31 31 26 11 21 20 41 23 20 20 55 60 30 29 25 32 18 42 31 24 25)
Population mean number of elite cases: 0.94
Count of perfect (error zero) individuals by case: (52 0 64 0 0 0 0 0 0 31 0 0 0 21 0 41 0 0 0 55 60 0 0 0 0 0 42 0 0 0)
Population mean number of perfect (error zero) cases: 0.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 1, :instruction 5} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction float_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_rot float_sin 5 5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min float_dup_times integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (float_sin in1 float_flush vector_integer_pushall integer_pop integer_dup_items integer_shove float_yankdup integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub float_swap integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 443575.80374996655
Median total errors in population: 3129.3679351564756
Error averages by case: (1222.8939954772466 1227.4225017040012 1222.904673730804 1237.858665780298 1227.3859854736788 1231.5603447603996 1241.6900409052303 1226.0849197266998 1237.0755214717383 1240.4854581969857 1241.6290986140655 1240.5299142246963 1242.6065226099918 1620.3453770977853 3334.323391473364 1239.0279221090818 1266.3800411129705 1341.7921481599042 1433.590667554928 1303.491399915091 1223.9809796778056 1693.6259115742382 9156.917094392486 394814.55683578295 2209.9328894427417 1247.445540922206 1269.2827164886794 1231.7192748203365 1907.5999640257019 1241.6639527380926)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.217
Average program size in population (points): 39.216
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.257
Error (vector) diversity:			 0.258
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 54699120
--- Timings ---
Current time: 1481489375621 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_sub} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_shove} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_pushall float_sub vector_integer_rot float_swap vector_integer_take float_stackdepth float_min vector_integer_shove vector_integer_rot integer_mult integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 32
Percent parens: 0.031
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (integer_pop in1 vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop in1 vector_integer_dup_times float_dec vector_integer_pushall vector_integer_pushall float_stackdepth vector_integer_concat integer_inc vector_integer_butlast integer_add integer_dup integer_dup_items vector_integer_replace vector_integer_pushall vector_integer_occurrencesof integer_dup_items integer_inc vector_integer_take integer_max float_frominteger)
Zero cases best errors: [3.0 10.8 0.0 9.4 2.8 1.8 1.6 2.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 25.0 61.0 9.0 13.2 41.6 29.200000000000003 3.0 0.0 29.799999999999997 570.8 7084.8 30.799999999999997 4.4 0.0 1.6 229.2 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 8183.4
Zero cases best mean error: 272.78
Zero cases best size: 46
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (55 21 58 26 30 17 43 23 15 26 19 24 19 21 20 47 16 26 28 60 67 39 31 30 34 19 39 24 19 25)
Population mean number of elite cases: 0.92
Count of perfect (error zero) individuals by case: (55 0 58 0 0 0 0 0 0 26 0 0 0 21 0 47 0 0 0 60 67 0 0 0 0 0 39 0 0 0)
Population mean number of perfect (error zero) cases: 0.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction float_yankdup} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction float_yankdup} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 float_yankdup vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove float_yankdup vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_swap integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 float_rot vector_integer_pushall integer_pop integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_dup integer_dup_items integer_shove integer_swap integer_inc float_stackdepth integer_max vector_integer_length integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 0.20000000000000018 1.0 3.4000000000000004 4.2 0.2 1.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 8.0 16.2 17.6 23.200000000000003 0.0 8.0 45.8 30.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 1.8]
Total: 1771.2
Mean: 59.04
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 265434.0671536545
Median total errors in population: 3129.3679351564756
Error averages by case: (1372.6320609496079 1376.7715829044605 1373.0351745376918 1387.889969659849 1377.9714169017936 1371.5330925716266 1381.717239980614 1376.1272822204473 1377.7062001487193 1390.2980771627454 1391.278028035303 1392.5232531773333 1383.4935971029404 1789.8815336736652 3196.1797496729087 1387.5649655159957 1410.371332187567 1476.1596158937248 1588.5175385490745 1413.7360614069578 1374.510003599491 1853.26008425398 9450.116196488296 212549.2981206681 2538.310312614185 1400.262999663214 1413.4511921814426 1371.6225326807864 1886.1543425720258 1381.6935966794442)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.25
Average program size in population (points): 40.249
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.251
Error (vector) diversity:			 0.251
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 55876620
--- Timings ---
Current time: 1481489384563 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Lexicase best program: (5 vector_integer_length vector_integer_rot vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Lexicase best partial simplification: (in1 vector_integer_pushall float_stackdepth integer_inc integer_add integer_dup integer_dup_items vector_integer_replace integer_dup_items integer_inc integer_max float_frominteger vector_integer_replacefirst)
Lexicase best errors: [1.0 1.7999999999999998 0.0 9.4 4.8 1.8 1.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 15.0 740.0 7.0 17.2 4.399999999999999 29.200000000000003 1.0 0.0 179.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 69.8 2.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 3128.6000000000004
Lexicase best mean error: 104.28667
Lexicase best size: 39
Percent parens: 0.026
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_pushall} {:close 0, :instruction float_stackdepth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction integer_add} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_replace} {:close 2, :instruction float_max} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction integer_dup_items} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_dec vector_integer_pushall float_swap vector_integer_pushall float_stackdepth vector_integer_concat float_mult integer_inc vector_integer_butlast integer_add float_tan integer_dup integer_dup_items vector_integer_replace float_max vector_integer_pushall float_swap vector_integer_occurrencesof integer_dup_items vector_integer_concat float_mult integer_inc vector_integer_take float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (in1 vector_integer_pushall float_stackdepth integer_inc integer_add integer_dup integer_dup_items vector_integer_pushall integer_dup_items integer_inc integer_max float_frominteger)
Zero cases best errors: [1.0 1.7999999999999998 0.0 9.4 4.8 1.8 1.6 1.4 0.19999999999999996 6.0 5.199999999999999 0.1999999999999993 4.4 15.0 740.0 7.0 17.2 4.399999999999999 29.200000000000003 1.0 0.0 179.2 570.8 1418.2 30.799999999999997 4.4 0.0 1.6 69.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3128.6000000000004
Zero cases best mean error: 104.28667
Zero cases best size: 39
Percent parens: 0.026
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 30 62 19 13 29 35 20 31 18 29 24 33 27 21 55 22 17 19 60 77 35 24 28 32 16 48 22 23 24)
Population mean number of elite cases: 0.97
Count of perfect (error zero) individuals by case: (73 0 62 0 0 0 0 0 0 18 0 0 0 27 0 55 0 0 0 60 77 0 0 0 0 0 48 0 0 0)
Population mean number of perfect (error zero) cases: 0.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_sin} {:close 0, :instruction float_mult} {:close 0, :instruction float_mult} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction float_pop} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction in1} {:close 0, :instruction float_sin} {:close 0, :instruction 5} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction float_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (float_sin float_mult float_mult vector_integer_length vector_integer_rot float_rot vector_integer_pushall float_pop vector_integer_yankdup float_pop vector_integer_rot integer_yank in1 float_sin 5 float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_set integer_max vector_integer_rest float_min float_dup integer_sub integer_sub vector_integer_conj integer_swap integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_div integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 5 vector_integer_pushall integer_max integer_sub integer_sub integer_swap integer_shove integer_stackdepth integer_sub integer_div integer_max float_frominteger)
Errors: [2.0 3.2 2.0 10.6 5.2 5.2 4.6 3.4 1.8 14.0 12.2 10.8 1.4000000000000004 43.0 19.0 10.0 20.2 9.600000000000001 44.8 2.0 2.0 14.200000000000003 415.2 935.8 58.8 8.4 10.0 4.6 24.200000000000003 4.2]
Total: 1702.3999999999999
Mean: 56.746666
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 164948.3413223114
Median total errors in population: 3129.3679351564756
Error averages by case: (1062.6524681218123 1067.0306884439426 1063.1569809443188 1082.0101037181907 1067.1029938088116 1061.4416438721978 1061.589225324147 1066.0524128877707 1066.7034270509087 1082.6640020777688 1083.9492617209637 1086.3590890703526 1074.1465264865924 1492.9907769824056 2996.898654930255 1076.6807922805792 1111.8367212928429 1159.8056577182488 1282.6900070197914 1173.9103526316599 1064.129476857788 1488.9038678006032 7995.463221939994 122047.07318583601 2337.3015140050684 1092.6849358752363 1120.992917118911 1061.5838652397297 1458.9557109974212 1061.5808402576279)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.589
Average program size in population (points): 40.589
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.595
Total error diversity:				 0.261
Error (vector) diversity:			 0.263
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 57064290
--- Timings ---
Current time: 1481489393174 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_dec} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction vector_integer_concat} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 1, :instruction float_frominteger} {:close 1, :instruction float_shove} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (integer_yank vector_integer_dup_items in1 float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_dec vector_integer_concat vector_integer_concat integer_inc vector_integer_butlast float_yank float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_inc float_frominteger float_shove float_dup_items float_inc float_add)
Lexicase best errors: [8.0 29.8 2.0 20.4 9.8 2.8 1.6 0.3999999999999999 0.19999999999999996 27.0 0.1999999999999993 16.2 4.4 117.0 138.0 30.0 5.199999999999999 112.6 51.2 0.0 0.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 1.6 545.2 3.2]
Lexicase best number of elite cases: 3
Lexicase best total error: 17496.2
Lexicase best mean error: 583.20667
Lexicase best size: 19
Percent parens: 0.053
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction float_shove} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 1, :instruction float_sin} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_conj} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Zero cases best program: (float_rot vector_integer_rot integer_mult float_shove in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_dec float_sin vector_integer_dup vector_integer_butlast vector_integer_rot integer_mult vector_integer_dup_items in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall 5 vector_integer_occurrencesof vector_integer_nth vector_integer_concat float_stackdepth float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_remove vector_integer_concat float_mult integer_inc vector_integer_butlast vector_integer_conj float_tan integer_dup float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Zero cases best partial simplification: (in1 vector_integer_pushall integer_mult vector_integer_dup_items in1 vector_integer_dup_times vector_integer_pushall vector_integer_occurrencesof vector_integer_nth vector_integer_concat float_stackdepth vector_integer_pushall vector_integer_remove integer_inc vector_integer_conj integer_dup float_frominteger float_dup_items float_inc float_add)
Zero cases best errors: [0.0 29.8 0.0 30.4 11.8 2.8 2.6 31.6 1.2 29.0 3.8000000000000007 16.2 3.4000000000000004 75.0 140.0 20.0 5.199999999999999 25.4 119.2 0.0 1.0 19.799999999999997 1566.8 917.2 26.200000000000003 4.6 16.0 2.6 66.8 2.2]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 3170.5999999999995
Zero cases best mean error: 105.68667
Zero cases best size: 44
Percent parens: 0.023
--- Lexicase Population Statistics ---
Count of elite individuals by case: (69 26 61 11 20 23 42 24 24 42 27 24 29 34 24 55 18 21 26 56 81 34 30 26 20 21 41 23 23 27)
Population mean number of elite cases: 0.98
Count of perfect (error zero) individuals by case: (69 0 61 0 0 0 0 0 0 42 0 0 0 34 0 55 0 0 0 56 81 0 0 0 0 0 41 0 0 0)
Population mean number of perfect (error zero) cases: 0.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items vector_integer_occurrencesof integer_shove integer_inc float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_yank)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 255044.6691795442
Median total errors in population: 3128.5501836776175
Error averages by case: (1072.6328101319887 1077.0053700522683 1072.9499477805484 1088.165176378696 1077.6628070792135 1071.5125943414062 1071.6579365779914 1076.4653247023998 1076.3674862756 1088.6772425041127 1090.3888601049898 1090.6284104241292 1082.1617987506766 1496.2084058244866 2783.795724978293 1088.2053647138625 1108.6146143065037 1178.6294704274635 1258.4190152984002 1123.6496786426026 1073.5211834868765 1595.9007065883013 5878.901364359991 214320.1461925871 2136.576842894819 1098.3938602047729 1126.0367285735188 1071.5688125835898 1598.1554434545744 1071.6700055151155)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.479
Average program size in population (points): 40.477
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.271
Error (vector) diversity:			 0.271
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 58248660
--- Timings ---
Current time: 1481489402041 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (in1 in1 float_rot vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_mult float_stackdepth integer_dec vector_integer_set integer_add integer_shove integer_stackdepth integer_sub integer_max vector_integer_yankdup float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (in1 in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_mult float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (66 26 65 21 21 13 27 31 20 48 20 23 23 30 29 47 21 24 25 49 66 21 27 25 22 20 38 28 35 28)
Population mean number of elite cases: 0.94
Count of perfect (error zero) individuals by case: (66 0 65 0 0 0 0 0 0 48 0 0 0 30 0 47 0 0 0 49 66 0 0 0 0 0 38 0 0 0)
Population mean number of perfect (error zero) cases: 0.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_inc vector_integer_remove float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 268038.89184719784
Median total errors in population: 3119.8702063947994
Error averages by case: (982.5711285360965 987.0377466114529 992.7452365401323 997.1661293834084 987.9525308396709 981.5110106333833 971.6223037212171 986.9210754012101 977.5029051255976 999.8976376553624 999.4684484018301 989.5506792868308 983.0823850520795 1410.6754373543833 3583.919916594672 999.667553163955 1016.2625624212214 1092.061456011834 1178.917149569301 993.2756846688616 974.3761733884323 1521.6987136938408 6438.84338609018 228612.5397483733 1899.9712443890419 1005.5076168135499 1030.0510679169076 971.6392606149805 1510.8203715601442 961.6352873831767)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.846
Average program size in population (points): 40.845
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.29
Error (vector) diversity:			 0.29
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 59444040
--- Timings ---
Current time: 1481489411010 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (5 vector_integer_rot in1 float_sin vector_integer_dup_items in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_flush vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_add)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (vector_integer_length in1 in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_flush float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (56 23 73 25 21 20 36 21 25 33 25 19 29 34 25 52 18 26 13 63 68 33 18 26 23 30 35 30 32 19)
Population mean number of elite cases: 0.95
Count of perfect (error zero) individuals by case: (56 0 73 0 0 0 0 0 0 33 0 0 0 34 0 52 0 0 0 63 68 0 0 0 0 0 35 0 0 0)
Population mean number of perfect (error zero) cases: 0.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_shove in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub float_swap integer_max vector_integer_subvec float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 161015.3346435071
Median total errors in population: 3125.625732174771
Error averages by case: (1082.743379017322 1086.5910811433123 1092.846188614633 1096.6859187505027 1089.1734227627928 1101.4300634600415 1111.5057916553083 1106.2858847401892 1116.1985729273786 1099.0700874094186 1100.559323129088 1098.7389479035521 1112.4693882414313 1582.3717773805058 3838.855885379169 1101.1987166893189 1123.1225207737236 1212.783105320249 1274.452707128378 1143.190920946402 1104.1489256861746 1811.6801794510366 7040.076866743699 117552.52551016802 1925.2903474101868 1114.0847222568057 1124.0294348626926 1121.5114510541273 1550.161789867875 1101.5517326344116)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.807
Average program size in population (points): 40.807
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.283
Error (vector) diversity:			 0.284
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 60638250
--- Timings ---
Current time: 1481489419978 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (5 vector_integer_length in1 float_rot vector_integer_dup_items in1 vector_integer_pushall integer_mod vector_integer_pop integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_rest integer_yankdup vector_integer_occurrencesof float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max vector_integer_dup float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (5 in1 float_rot vector_integer_dup_items vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_flush float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_mult)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (62 15 90 24 29 24 31 22 29 42 25 26 20 44 20 71 22 33 21 81 70 39 21 27 20 20 33 26 27 14)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (62 0 90 0 0 0 0 0 0 42 0 0 0 44 0 71 0 0 0 81 70 0 0 0 0 0 33 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub float_swap integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 118567.97545300488
Median total errors in population: 3124.885070928754
Error averages by case: (1062.8471601639656 1066.5829432782864 1072.8689791544123 1077.376356512452 1067.3766981928657 1081.4534035155177 1091.5319178051102 1085.7760165833529 1095.9836156905344 1089.467227380525 1091.103478551084 1090.485053561675 1092.4029319545707 1468.236329065404 4097.783403832568 1077.1965301186456 1099.1836595013235 1167.680684640245 1261.8517315961324 1123.21521533829 1084.238711360777 1616.6654453833585 8885.56274476796 73741.44609654065 2091.0041971809524 1097.9381023583474 1108.474423080873 1091.5062438772031 1409.1289726730795 1081.607179345142)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.253
Average program size in population (points): 40.251
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.275
Error (vector) diversity:			 0.277
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 61815840
--- Timings ---
Current time: 1481489428828 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (in1 float_sin in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_rest integer_yankdup float_stackdepth integer_dec vector_integer_set integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_mult)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_yankdup integer_yankdup integer_dec integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 25 77 20 26 16 33 29 23 27 26 26 33 35 23 54 21 27 19 66 49 28 28 24 19 29 35 26 19 26)
Population mean number of elite cases: 0.96
Count of perfect (error zero) individuals by case: (70 0 77 0 0 0 0 0 0 27 0 0 0 35 0 54 0 0 0 66 49 0 0 0 0 0 35 0 0 0)
Population mean number of perfect (error zero) cases: 0.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_mult integer_pop in1 vector_integer_pushall integer_pop integer_dup_items vector_integer_occurrencesof integer_shove integer_inc integer_dup_items vector_integer_pop integer_shove integer_inc vector_integer_conj float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 296235.7581746509
Median total errors in population: 3119.8702063947994
Error averages by case: (1082.6345017487054 1086.972507524311 1072.8094507360265 1099.2933117452671 1089.2449488645166 1071.561314728341 1071.6636910460795 1075.2781539441605 1076.2065607744064 1101.6559583950595 1100.2919737241873 1091.3266830239804 1082.5024090410418 1628.313915057557 4728.607566103849 1102.6938093903143 1118.9251354500313 1227.896984704543 1360.212601461394 1113.3701088788723 1073.7968609083298 1803.7283755108112 14720.398979083047 244251.39750029938 1996.775785585696 1095.6170311824458 1131.1196573569246 1071.628961785218 1638.1404608351768 1071.6929757587134)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.06268628766231288 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.8000000000000114 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.477
Average program size in population (points): 40.475
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.286
Error (vector) diversity:			 0.288
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 63000150
--- Timings ---
Current time: 1481489437737 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (5 in1 vector_integer_dup_items in1 float_inc vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_flush vector_integer_pushall float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max vector_integer_dup float_frominteger float_add)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_dec integer_add float_min integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (76 25 80 25 23 16 35 25 30 26 26 1 17 32 17 54 20 28 25 91 78 42 1 26 17 24 29 26 28 21)
Population mean number of elite cases: 0.96
Count of perfect (error zero) individuals by case: (76 0 80 0 0 0 0 0 0 26 0 0 0 32 0 54 0 0 0 91 78 0 0 0 0 0 29 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc vector_integer_remove float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max vector_integer_subvec float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 132914.91765149662
Median total errors in population: 3125.517659174564
Error averages by case: (1092.9618061826893 1096.883282793715 1102.9196560682371 1106.3576562366277 1098.0536898030607 1121.488466329129 1121.4930590188796 1115.2114691487361 1114.5375216735015 1108.6347351608301 1115.532836782774 1120.8508235114386 1113.2048302133846 1539.4918591788435 2901.6242897437464 1109.2683699359109 1149.215922129156 1206.541952983181 1259.903144672183 1153.2182767099941 1103.963166734381 1672.7595120093692 4593.642027415272 92457.15814511321 2283.463084780912 1130.991995435419 1144.7640973742446 1121.4983803063283 1537.7163256218153 1121.5672684301705)
Error minima by case: (0.0 0.03879077652744112 0.0 0.14768434055818958 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.314
Average program size in population (points): 40.313
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.281
Error (vector) diversity:			 0.282
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 64179570
--- Timings ---
Current time: 1481489446600 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Lexicase best partial simplification: (in1 vector_integer_dup_items in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_flush vector_integer_pushall float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2331.2000000000003
Lexicase best mean error: 77.706665
Lexicase best size: 48
Percent parens: 0.021
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_mult} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_add} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction vector_integer_dup} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_mult} {:close 0, :instruction float_add})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_mult float_flush vector_integer_pushall float_swap vector_integer_occurrencesof float_yankdup float_stackdepth integer_dec vector_integer_set integer_add vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_yankdup vector_integer_dup float_frominteger float_mult float_add)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_stackdepth integer_dec integer_add integer_shove integer_stackdepth integer_sub integer_max vector_integer_yankdup float_frominteger float_add)
Zero cases best errors: [2.0 7.2 0.0 5.4 2.8 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2331.2000000000003
Zero cases best mean error: 77.706665
Zero cases best size: 48
Percent parens: 0.021
--- Lexicase Population Statistics ---
Count of elite individuals by case: (72 23 90 1 34 26 34 30 26 25 31 27 15 35 17 57 20 16 29 73 91 34 17 28 19 24 44 31 18 19)
Population mean number of elite cases: 1.01
Count of perfect (error zero) individuals by case: (72 0 90 0 0 0 0 0 0 25 0 0 0 35 0 57 0 0 0 73 91 0 0 0 0 0 44 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub float_swap integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 130975.07108101637
Median total errors in population: 3123.3256940693973
Error averages by case: (912.7862860272592 916.718920151971 913.0269158852867 925.8509691379826 918.0855358548423 911.704850587388 911.7496180709647 915.6843271564517 913.3149831395406 931.0774731742197 935.4967169395384 933.386893128778 923.5681315721445 1404.2166407642503 3074.45017147099 929.3538049950881 962.5563243480946 1026.4130596911477 1150.9225083359436 973.9012379542457 913.1791684412884 1497.518938202976 10863.033182172747 89003.23203827621 2116.1347949614774 941.7603895490876 955.4637018310365 911.666769944587 1377.0441424855399 911.7725867656818)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.102
Average program size in population (points): 40.101
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.289
Error (vector) diversity:			 0.29
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 65352630
--- Timings ---
Current time: 1481489455451 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (in1 in1 integer_fromfloat vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2329.6000000000004
Lexicase best mean error: 77.653336
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items in1 vector_integer_pushall integer_mod vector_integer_pop integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_stackdepth integer_dec integer_max integer_shove integer_stackdepth integer_sub integer_max vector_integer_subvec float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2329.6000000000004
Zero cases best mean error: 77.653336
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (65 19 81 22 23 17 16 27 23 31 19 25 17 37 25 64 19 21 26 72 82 26 26 20 27 20 42 24 31 27)
Population mean number of elite cases: 0.97
Count of perfect (error zero) individuals by case: (65 0 81 0 0 0 0 0 0 31 0 0 0 37 0 64 0 0 0 72 82 0 0 0 0 0 42 0 0 0)
Population mean number of perfect (error zero) cases: 0.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger float_yank)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 130855.09333146429
Median total errors in population: 3123.711964023445
Error averages by case: (1152.7387166633034 1156.6740643756054 1153.2778837430108 1163.2390765892433 1158.1955859118275 1161.5097374324814 1151.5926954038034 1165.5086561221774 1162.8760814475163 1167.5566120108508 1169.7564078580042 1168.9274165730546 1171.5518630325037 1558.5120933733656 2916.9908254218763 1169.1481218831382 1192.1734551854495 1263.7159146520305 1332.0954028164613 1203.218106651641 1162.7020496660828 1660.3575588503222 6044.362927537478 88013.078604489 1996.9216664639046 1173.9407192118347 1195.8107460449316 1151.611752303886 1565.3946225797085 1151.6539671706341)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.474
Average program size in population (points): 40.474
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.293
Error (vector) diversity:			 0.294
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 66536850
--- Timings ---
Current time: 1481489464107 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (5 in1 vector_integer_dup_items integer_fromfloat vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_rest integer_yankdup float_stackdepth integer_max integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2329.6000000000004
Lexicase best mean error: 77.653336
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_max integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2329.6000000000004
Zero cases best mean error: 77.653336
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (95 30 86 17 18 21 21 21 20 26 29 31 18 46 23 59 18 31 35 75 88 18 22 22 22 20 41 17 25 24)
Population mean number of elite cases: 1.02
Count of perfect (error zero) individuals by case: (95 0 86 0 0 0 0 0 0 26 0 0 0 46 0 59 0 0 0 75 88 0 0 0 0 0 41 0 0 0)
Population mean number of perfect (error zero) cases: 0.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (vector_integer_length in1 vector_integer_pushall integer_pop integer_dup_items vector_integer_pop integer_shove integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 122426.57033737788
Median total errors in population: 3123.3256940693973
Error averages by case: (1172.6778415523006 1176.2326540884342 1182.861781496627 1182.4885640607727 1177.3974044166932 1181.6027287924658 1171.5941804630418 1175.907008369417 1172.9100766788085 1186.5128525498203 1218.0975384169194 1203.370474037612 1182.5210699926993 1645.4804437923342 2796.0931527956827 1187.1067071924472 1235.6071537251814 1270.8103345274033 1344.6672138982806 1273.2534896728887 1172.739670946376 1655.617225088113 5766.792472220157 79064.02300829919 2281.884114559367 1209.9948515228791 1249.8613653061946 1181.69466670694 1525.106917426957 1181.6633747824446)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.669
Average program size in population (points): 39.667
Average percent parens in population: 0.029
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.285
Error (vector) diversity:			 0.286
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 67696920
--- Timings ---
Current time: 1481489472887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (5 in1 vector_integer_dup_items in1 float_inc vector_integer_pushall integer_mod vector_integer_pop integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2329.6000000000004
Lexicase best mean error: 77.653336
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (in1 vector_integer_dup_items in1 float_rot vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max vector_integer_subvec float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2329.6000000000004
Zero cases best mean error: 77.653336
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 26 103 17 17 30 26 27 27 23 33 23 30 34 24 59 29 17 15 85 94 33 15 23 22 17 46 25 22 14)
Population mean number of elite cases: 1.04
Count of perfect (error zero) individuals by case: (82 0 103 0 0 0 0 0 0 23 0 0 0 34 0 59 0 0 0 85 94 0 0 0 0 0 46 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction float_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction integer_flush} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_remove} {:close 1, :instruction float_dup_times} {:close 0, :instruction vector_integer_first} {:close 0, :instruction float_swap} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_tan} {:close 1, :instruction 5} {:close 1, :instruction vector_integer_indexof} {:close 0, :instruction vector_integer_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction vector_integer_length} {:close 1, :instruction 5} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction vector_integer_rest} {:close 0, :instruction float_dec} {:close 0, :instruction vector_integer_nth} {:close 0, :instruction integer_max} {:close 1, :instruction vector_integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction float_frominteger} {:close 1, :instruction float_cos} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction float_shove} {:close 0, :instruction float_inc} {:close 0, :instruction float_mult})
Best program: (float_rot vector_integer_pushall float_pop integer_shove vector_integer_indexof integer_flush vector_integer_rot integer_mult vector_integer_dup_items in1 integer_stackdepth in1 integer_shove vector_integer_remove float_dup_times vector_integer_first float_swap vector_integer_flush float_yankdup float_tan 5 vector_integer_indexof vector_integer_flush integer_dup vector_integer_length 5 float_rot float_sin vector_integer_rest float_dec vector_integer_nth integer_max vector_integer_yankdup integer_max float_frominteger float_cos float_frominteger vector_integer_yank integer_dec float_shove float_inc float_mult)
Partial simplification: (in1 integer_stackdepth vector_integer_remove vector_integer_first 5 integer_dup 5 integer_max integer_max float_frominteger float_cos float_frominteger integer_dec float_inc float_mult)
Errors: [1.5816890726838688 2.094080661661928 2.4326756290735476 6.345067218051606 3.2143647017574164 0.3673243709264525 0.45098655638967877 1.7059193383380724 1.0366218546322623 10.04309410527225 11.498026887220641 10.545067218051607 1.5777428471251538 40.18674112284641 243.6966066867432 5.326756290735475 19.93070251629419 8.543647017574163 44.198579799522555 1.2980268872206424 1.1202840400954885 50.57379662156644 395.2664570827509 635.3269935399628 82.5450672180516 11.549013443610322 13.298026887220642 0.16732437092645247 3.5535884209162703 0.05098655638967875]
Total: 1609.525258963612
Mean: 53.65084
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 147279.74250681946
Median total errors in population: 3125.517659174564
Error averages by case: (1102.6559588854925 1106.175219784505 1102.8021000922013 1112.342655452154 1104.9297239437283 1101.4536722956327 1101.5964683324953 1106.3847189896562 1103.0439427809106 1116.5530702193191 1122.9002316988538 1118.2212760318644 1112.5871377093883 1284.1986778506996 2318.2927036192737 1111.285446794208 1157.2948027909758 1146.4449541258803 1233.717398457472 1173.2877650354496 1102.7998241950695 1276.6016886686878 4599.464519952479 108477.79579007856 2078.125024754507 1126.8082121603436 1154.9348938442615 1101.6467910765896 1423.6795124640837 1101.7183247350079)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 38.857
Average program size in population (points): 39.856
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.294
Error (vector) diversity:			 0.295
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 68862630
--- Timings ---
Current time: 1481489481515 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Lexicase best partial simplification: (in1 integer_add vector_integer_dup_items in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_stackdepth integer_max vector_integer_length integer_shove integer_stackdepth integer_sub integer_max integer_max float_frominteger)
Lexicase best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2334.2000000000003
Lexicase best mean error: 77.80666
Lexicase best size: 45
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (in1 vector_integer_dup_items in1 integer_fromfloat vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup integer_shove integer_stackdepth integer_sub integer_max integer_max float_frominteger vector_integer_replacefirst)
Zero cases best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2334.2000000000003
Zero cases best mean error: 77.80666
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 27 101 20 13 19 24 19 25 26 25 30 28 42 19 66 27 19 31 91 90 34 26 25 25 26 31 26 22 24)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (87 0 101 0 0 0 0 0 0 26 0 0 0 42 0 66 0 0 0 91 90 0 0 0 0 0 31 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_shove in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc vector_integer_conj float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 557238.9326108969
Median total errors in population: 3126.3700626748773
Error averages by case: (1232.606064516691 1236.3180137675786 1232.8610801938983 1244.7577968289015 1235.4438629154486 1231.5536700885943 1221.7355558459 1226.7911587461228 1222.8321849889264 1253.7007818983038 1253.324813530815 1254.7645074578388 1232.2814086358758 2136.070386443162 5408.5048637753325 1242.5504805315773 1281.3015340962804 1369.3777436685834 1875.057573162407 1223.427679014837 1222.7832676862506 1497.4615125437872 76934.27982796059 437739.71427348483 2373.133560350802 1256.9885296326165 1281.5274313168156 1221.7590000002574 1864.2170819964847 1231.8069658155434)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.553
Average program size in population (points): 40.55
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.286
Error (vector) diversity:			 0.288
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 70049220
--- Timings ---
Current time: 1481489490478 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction float_shove} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 1, :instruction float_sin} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction 5} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_rot integer_mult float_shove in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_dec float_sin vector_integer_dup vector_integer_butlast vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_dup_times 5 vector_integer_pushall 5 vector_integer_occurrencesof vector_integer_nth vector_integer_concat float_stackdepth float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_first vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall vector_integer_dup vector_integer_butlast integer_mult vector_integer_dup_items in1 integer_dec vector_integer_dup_times 5 vector_integer_pushall vector_integer_occurrencesof vector_integer_nth float_stackdepth vector_integer_pushall vector_integer_occurrencesof vector_integer_first integer_inc float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 20.4 9.8 2.8 2.6 0.3999999999999999 1.2 27.0 0.1999999999999993 16.2 3.4000000000000004 117.0 138.0 30.0 5.199999999999999 25.4 51.2 0.0 1.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17375.4
Lexicase best mean error: 579.18
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (in1 in1 vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_yankdup integer_yankdup float_stackdepth integer_max integer_shove integer_stackdepth integer_sub integer_max float_yank integer_max float_frominteger)
Zero cases best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2334.2000000000003
Zero cases best mean error: 77.80666
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (99 31 103 23 25 25 18 29 23 21 22 31 24 44 23 65 27 18 21 89 94 40 22 24 14 22 39 23 29 27)
Population mean number of elite cases: 1.10
Count of perfect (error zero) individuals by case: (99 0 103 0 0 0 0 0 0 21 0 0 0 44 0 65 0 0 0 89 94 0 0 0 0 0 39 0 0 0)
Population mean number of perfect (error zero) cases: 0.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 vector_integer_pushall integer_pop integer_dup_items integer_shove vector_integer_yankdup integer_inc integer_dup_items integer_shove integer_inc float_stackdepth integer_max integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 67642.28378664909
Median total errors in population: 3124.4776970051607
Error averages by case: (922.7389940145944 936.4444647996928 932.9409113475602 941.9882728605514 935.4385582550302 921.5650421482578 921.720213010696 916.8536385678319 912.699638952223 957.0363046750776 965.3392867424727 960.5988346470195 922.3344829449219 1175.4382842578611 1866.863428802396 942.6341315787289 987.2903282258472 981.9066386287163 1093.9395039869635 933.714857801331 912.9179852034493 1140.497236241346 5411.604524918666 32964.27218338936 2061.4889222272673 959.6848952180435 998.0747931083107 921.7454087387234 1210.7075929319585 931.8044284240158)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.514
Average program size in population (points): 40.513
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.304
Error (vector) diversity:			 0.307
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 71234640
--- Timings ---
Current time: 1481489499356 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Lexicase best partial simplification: (5 in1 vector_integer_dup_items vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_yankdup float_stackdepth integer_max integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max integer_max float_frominteger)
Lexicase best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2334.2000000000003
Lexicase best mean error: 77.80666
Lexicase best size: 45
Percent parens: 0.022
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (5 vector_integer_length in1 vector_integer_dup_items in1 vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove integer_yankdup float_stackdepth vector_integer_set integer_max integer_shove integer_stackdepth integer_sub integer_max float_yank integer_max float_frominteger)
Zero cases best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2334.2000000000003
Zero cases best mean error: 77.80666
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (73 23 83 19 19 29 32 22 30 31 25 31 24 34 18 58 29 25 17 81 93 29 23 24 23 17 33 20 22 22)
Population mean number of elite cases: 1.01
Count of perfect (error zero) individuals by case: (73 0 83 0 0 0 0 0 0 31 0 0 0 34 0 58 0 0 0 81 93 0 0 0 0 0 33 0 0 0)
Population mean number of perfect (error zero) cases: 0.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items vector_integer_pop integer_shove vector_integer_yankdup integer_inc integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4.058100102597408E7
Median total errors in population: 3126.870876347486
Error averages by case: (1162.6678855480607 1166.902299162416 1163.0614741350425 1175.1594481825498 1165.0223320492048 1181.5436034151771 1161.6891614893714 1186.7128855593699 1182.7763115563832 1184.4488845264389 1181.611653607822 1182.2774975628377 1191.645425013332 1982.9996279719858 5286.010581755274 1176.5360561303248 1206.8230313346946 1313.5251345096858 1538.0934694369064 1163.5933441122468 1182.603220368515 1490.2677191311434 14208.286690543957 4.052535218487554E7 2229.0055351539554 1188.6995678482629 1212.6660206702738 1161.712182172651 2860.750526763656 1161.749528532535)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.211
Average program size in population (points): 40.209
Average percent parens in population: 0.028
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.312
Error (vector) diversity:			 0.313
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 72410970
--- Timings ---
Current time: 1481489508143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction float_rot} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction float_shove} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction float_dec} {:close 1, :instruction float_sin} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction 5} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction 5} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_nth} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_stackdepth} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 1, :instruction float_swap} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_first} {:close 1, :instruction vector_integer_concat} {:close 0, :instruction float_mult} {:close 0, :instruction integer_inc} {:close 0, :instruction vector_integer_butlast} {:close 0, :instruction float_yank} {:close 0, :instruction float_tan} {:close 0, :instruction integer_dup} {:close 1, :instruction float_frominteger} {:close 1, :instruction vector_integer_butlast} {:close 0, :instruction float_dup_items} {:close 0, :instruction float_inc} {:close 0, :instruction float_add})
Lexicase best program: (float_rot vector_integer_rot integer_mult float_shove in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall float_dec float_sin vector_integer_dup vector_integer_butlast vector_integer_rot integer_mult vector_integer_dup_items in1 integer_dec vector_integer_dup_times 5 vector_integer_pushall 5 vector_integer_occurrencesof vector_integer_nth vector_integer_concat float_stackdepth float_flush vector_integer_pushall float_swap vector_integer_occurrencesof vector_integer_first vector_integer_concat float_mult integer_inc vector_integer_butlast float_yank float_tan integer_dup float_frominteger vector_integer_butlast float_dup_items float_inc float_add)
Lexicase best partial simplification: (in1 vector_integer_pushall integer_mult vector_integer_dup_items in1 integer_dec vector_integer_dup_times vector_integer_pushall 5 vector_integer_occurrencesof vector_integer_nth float_stackdepth vector_integer_first integer_inc vector_integer_butlast integer_dup float_frominteger float_dup_items float_inc float_add)
Lexicase best errors: [0.0 4.2 0.0 20.4 9.8 2.8 2.6 0.3999999999999999 1.2 27.0 0.1999999999999993 16.2 3.4000000000000004 117.0 138.0 30.0 5.199999999999999 25.4 51.2 0.0 1.0 0.20000000000000284 219.2 16086.8 55.8 5.4 2.0 2.6 545.2 2.2]
Lexicase best number of elite cases: 4
Lexicase best total error: 17375.4
Lexicase best mean error: 579.18
Lexicase best size: 44
Percent parens: 0.023
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_yank} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_frominteger} {:close 0, :instruction vector_integer_replacefirst})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_yank integer_max integer_dup float_frominteger float_frominteger vector_integer_replacefirst)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items in1 integer_fromfloat vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_max vector_integer_rest integer_shove integer_stackdepth integer_sub vector_integer_butlast integer_max integer_max float_frominteger)
Zero cases best errors: [2.0 0.20000000000000018 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 66.8 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 20.799999999999997 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2334.2000000000003
Zero cases best mean error: 77.80666
Zero cases best size: 45
Percent parens: 0.022
--- Lexicase Population Statistics ---
Count of elite individuals by case: (70 21 92 22 18 14 26 25 34 35 24 23 19 34 38 55 25 22 16 91 91 38 16 16 27 21 46 29 18 21)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (70 0 92 0 0 0 0 0 0 35 0 0 0 34 0 55 0 0 0 91 91 0 0 0 0 0 46 0 0 0)
Population mean number of perfect (error zero) cases: 0.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length integer_shove integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (integer_pop in1 vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc vector_integer_length float_stackdepth vector_integer_set integer_max vector_integer_rest float_min integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 147205.56667433077
Median total errors in population: 3124.5042410029178
Error averages by case: (1032.858998554531 1036.3274174387789 1042.6066530965513 1040.6214473477837 1035.1867281841016 1041.6611154284756 1041.6217618451824 1046.2265094477534 1042.8654921807827 1054.4122219477185 1058.0239162926582 1055.3118021964563 1050.1346880917256 1235.8331605831008 1771.4517800223916 1042.4436399463289 1071.1903902441873 1100.822443422628 1139.6269860136713 1053.2946154633983 1035.341608073804 1252.4711061801322 2394.916983939729 113190.04931984874 1731.7364681896652 1063.5594844034651 1074.6535176677921 1041.7114449508833 1376.9048556696157 1051.7001176591625)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.164
Average program size in population (points): 40.162
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.32
Error (vector) diversity:			 0.323
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 73585890
--- Timings ---
Current time: 1481489516938 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Lexicase best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Lexicase best partial simplification: (in1 in1 integer_fromfloat vector_integer_pushall integer_mod integer_dup_items vector_integer_occurrencesof integer_shove vector_integer_rest integer_yankdup integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Lexicase best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Lexicase best number of elite cases: 4
Lexicase best total error: 2329.6000000000004
Lexicase best mean error: 77.653336
Lexicase best size: 41
Percent parens: 0.024
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction in1} {:close 0, :instruction float_rot} {:close 0, :instruction float_sin} {:close 0, :instruction integer_add} {:close 0, :instruction vector_integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction integer_fromfloat} {:close 0, :instruction float_inc} {:close 0, :instruction vector_integer_pushall} {:close 1, :instruction integer_mod} {:close 0, :instruction vector_integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction integer_yankdup} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Zero cases best program: (5 vector_integer_length vector_integer_rot in1 float_rot float_sin integer_add vector_integer_dup_items in1 float_rot integer_fromfloat float_inc vector_integer_pushall integer_mod vector_integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup vector_integer_rest integer_yankdup float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Zero cases best partial simplification: (5 in1 vector_integer_dup_items in1 vector_integer_pushall integer_mod vector_integer_pop integer_dup_items vector_integer_occurrencesof integer_shove integer_yankdup float_stackdepth integer_max float_min vector_integer_length integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Zero cases best errors: [2.0 7.2 0.0 5.4 1.2000000000000002 1.2 0.4 13.6 1.8 6.0 24.8 0.8000000000000007 7.6 0.0 65.0 0.0 16.2 17.6 25.200000000000003 0.0 8.0 43.8 566.8 1422.2 24.200000000000003 2.5999999999999996 4.0 0.4 59.8 1.8]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 2329.6000000000004
Zero cases best mean error: 77.653336
Zero cases best size: 41
Percent parens: 0.024
--- Lexicase Population Statistics ---
Count of elite individuals by case: (71 23 86 25 32 28 22 16 25 39 17 27 32 30 21 44 27 18 22 101 113 46 24 26 14 24 45 24 17 30)
Population mean number of elite cases: 1.07
Count of perfect (error zero) individuals by case: (71 0 86 0 0 0 0 0 0 39 0 0 0 30 0 44 0 0 0 101 113 0 0 0 0 0 45 0 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction 5} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 1, :instruction float_rot} {:close 0, :instruction vector_integer_dup_times} {:close 0, :instruction float_flush} {:close 1, :instruction vector_integer_pushall} {:close 0, :instruction vector_integer_length} {:close 1, :instruction integer_pop} {:close 2, :instruction vector_integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction float_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 0, :instruction vector_integer_occurrencesof} {:close 0, :instruction vector_integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction vector_integer_yankdup} {:close 0, :instruction integer_inc} {:close 1, :instruction vector_integer_conj} {:close 0, :instruction vector_integer_length} {:close 0, :instruction vector_integer_remove} {:close 0, :instruction vector_integer_take} {:close 0, :instruction float_yankdup} {:close 1, :instruction float_stackdepth} {:close 0, :instruction integer_dec} {:close 0, :instruction vector_integer_set} {:close 1, :instruction integer_max} {:close 1, :instruction vector_integer_rest} {:close 0, :instruction float_min} {:close 0, :instruction vector_integer_length} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction vector_integer_butlast} {:close 1, :instruction float_swap} {:close 0, :instruction integer_max} {:close 0, :instruction vector_integer_subvec} {:close 0, :instruction float_frominteger} {:close 0, :instruction float_yank})
Best program: (5 vector_integer_length vector_integer_rot integer_mult integer_pop in1 float_rot vector_integer_dup_times float_flush vector_integer_pushall vector_integer_length integer_pop vector_integer_dup integer_dup_items vector_integer_occurrencesof float_pop integer_shove vector_integer_yankdup integer_inc integer_dup_items vector_integer_occurrencesof vector_integer_pop integer_shove vector_integer_yankdup integer_inc vector_integer_conj vector_integer_length vector_integer_remove vector_integer_take float_yankdup float_stackdepth integer_dec vector_integer_set integer_max vector_integer_rest float_min vector_integer_length integer_shove integer_stackdepth integer_sub vector_integer_butlast float_swap integer_max vector_integer_subvec float_frominteger float_yank)
Partial simplification: (5 integer_pop in1 vector_integer_dup_times vector_integer_pushall integer_pop integer_dup_items integer_shove integer_inc integer_dup_items integer_shove integer_inc float_yankdup vector_integer_set integer_shove integer_stackdepth integer_sub integer_max float_frominteger)
Errors: [1.0 7.2 1.0 3.4000000000000004 3.2 0.2 0.4 3.4 1.8 0.0 6.199999999999999 0.1999999999999993 9.6 2.0 67.0 2.0 16.2 11.600000000000001 23.200000000000003 2.0 8.0 45.8 25.80000000000001 1424.2 25.200000000000003 3.5999999999999996 5.0 0.4 59.8 0.8]
Total: 1760.2
Mean: 58.673332
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 229678.49658505784
Median total errors in population: 3123.9831781568337
Error averages by case: (1052.665507743055 1056.2146807329607 1052.7444893214779 1061.83457588076 1055.4798219393838 1061.6403899264476 1061.7541605316108 1066.6036811582605 1052.5843755153176 1065.6790415305366 1068.4736462430642 1067.6154616864123 1062.3421602584071 1286.1955671721187 2830.9523504689405 1062.9166835296812 1089.8155151993262 1113.7438212535656 1196.9694913184628 1053.3770988043393 1063.0091655180115 1320.9512490942018 6124.727770470201 190071.44933107175 1889.3275271405225 1072.9664371969773 1088.0086610702826 1051.7314828221242 1514.9064325074169 1061.8160079533882)
Error minima by case: (0.0 0.03879077652744112 0.0 0.07324370926452595 0.03879077652744112 0.002171083874371954 0.0013360351468790221 0.013548836761276384 0.0061265507738474945 0.0 0.09986412092976948 0.059990350244866875 0.018310927316131043 0.0 0.6034872848828172 0.0 0.07375249521009053 0.3999999999999986 0.20000000000000284 0.0 0.0 0.20000000000000284 0.19999999999998863 11.799999999999955 0.20000000000000284 0.059261797239217984 0.0 0.0013360351468790221 0.20000000000000284 0.00292526644997515)
Average genome size in population (length): 39.769
Average program size in population (points): 40.767
Average percent parens in population: 0.027
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.591
Total error diversity:				 0.3
Error (vector) diversity:			 0.303
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 74778960
--- Timings ---
Current time: 1481489525776 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
